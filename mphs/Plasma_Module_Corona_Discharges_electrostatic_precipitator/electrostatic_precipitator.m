function out = model
%
% electrostatic_precipitator.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Corona_Discharges');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics('es').prop('ShapeProperty').set('order_electricpotential', '3');
model.physics.create('ct', 'ChargeTransport', 'geom1');
model.physics('ct').model('comp1');

model.multiphysics.create('scdc1', 'SpaceChargeDensityCoupling', 'geom1', 2);
model.multiphysics('scdc1').set('SpaceChargeDensitySource_physics', 'ct');
model.multiphysics('scdc1').set('SpaceChargeDensityDestination_physics', 'es');
model.multiphysics('scdc1').selection.all;
model.multiphysics.create('pc1', 'PotentialCoupling', 'geom1', 2);
model.multiphysics('pc1').set('PotentialSource_physics', 'es');
model.multiphysics('pc1').set('PotentialDestination_physics', 'ct');
model.multiphysics('pc1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/ct', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/scdc1', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/pc1', true);

model.param.set('H', '0.1[m]');
model.param.descr('H', 'Height');
model.param.set('rin', '0.5[mm]');
model.param.descr('rin', 'Electrode radius');
model.param.set('W', '0.7[m]');
model.param.descr('W', 'Width');
model.param.set('sp', '15[cm]');
model.param.descr('sp', 'Electrode separation');
model.param.set('muN', '3e21[1/(V*m*s)]');
model.param.descr('muN', 'Reduced ion mobility');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'W' 'H'});
model.geom('geom1').feature('r1').set('pos', {'0' '-H/2'});
model.geom('geom1').run('r1');
model.geom('geom1').create('c1', 'Circle');
model.geom('geom1').feature('c1').set('r', 'rin');
model.geom('geom1').feature('c1').set('pos', {'W/2-sp' '0'});
model.geom('geom1').run('c1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'c1'});
model.geom('geom1').feature('arr1').set('fullsize', [3 1]);
model.geom('geom1').feature('arr1').set('displ', {'sp' '0'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('dif1', 'Difference');
model.geom('geom1').feature('dif1').selection('input').set({'r1'});
model.geom('geom1').feature('dif1').selection('input2').set({'arr1'});
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.set([1]);
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', '1[m/s]');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.set([4]);
model.physics('spf').create('vf1', 'VolumeForce', 2);
model.physics('spf').feature('vf1').selection.set([1]);
model.physics('spf').feature('vf1').set('F', {'ct.Fehdx' 'ct.Fehdy' '0'});
model.physics('es').create('gnd1', 'Ground', 1);
model.physics('es').feature('gnd1').selection.set([2 3]);
model.physics('ct').prop('TransportMechanism').set('Convection', true);
model.physics('ct').feature('tp1').set('muiN', 'muN');
model.physics('ct').feature('tp1').set('u_src', 'root.comp1.u');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Electrodes');
model.selection('sel1').geom(1);
model.selection('sel1').set('groupcontang', true);
model.selection('sel1').add([5 6 7 8 9 10 11 12 13 14 15 16]);

model.multiphysics.create('el1', 'Electrode', 'geom1', 1);
model.multiphysics('el1').selection.named('sel1');
model.multiphysics('el1').set('V0', '20[kV]');
model.multiphysics('el1').set('rc', 'rin');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('size').set('hauto', 5);
model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature.move('edg1', 4);
model.mesh('mesh1').feature.move('edg1', 3);
model.mesh('mesh1').feature.move('edg1', 2);
model.mesh('mesh1').feature('edg1').selection.named('sel1');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 50);
model.mesh('mesh1').run;

model.study('std1').label('Corona and laminar flow');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', false);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').set('ooc', 'auto');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'auto');
model.sol('sol1').feature('s1').feature('d1').set('rhob', 1);
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 10);
model.sol('sol1').feature('s1').feature('fc1').set('useminsteprecovery', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('ntermauto', 'tol');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.75);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Electric Potential (es)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond2/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').feature('surf1').set('expr', 'V');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result('pg3').feature.create('str1', 'Streamline');
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('solutionparams', 'parent');
model.result('pg3').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg3').feature('str1').set('titletype', 'none');
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('udist', 0.02);
model.result('pg3').feature('str1').set('maxlen', 0.4);
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('inheritcolor', false);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('showsolutionparams', 'on');
model.result('pg3').feature('str1').set('maxtime', Inf);
model.result('pg3').feature('str1').set('data', 'parent');
model.result('pg3').feature('str1').selection.geom('geom1', 1);
model.result('pg3').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]);
model.result('pg3').feature('str1').set('inheritplot', 'surf1');
model.result('pg3').feature('str1').feature.create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'V');
model.result('pg3').feature('str1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg3').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg3').feature('str1').feature.create('filt1', 'Filter');
model.result('pg3').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Electric Field Norm (es)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond2/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('solutionparams', 'parent');
model.result('pg4').feature('surf1').set('expr', 'es.normE');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result('pg4').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('surf1').set('colorcalibration', -0.8);
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature.create('str1', 'Streamline');
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('solutionparams', 'parent');
model.result('pg4').feature('str1').set('expr', {'es.Ex' 'es.Ey'});
model.result('pg4').feature('str1').set('titletype', 'none');
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('udist', 0.02);
model.result('pg4').feature('str1').set('maxlen', 0.4);
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('inheritcolor', false);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('showsolutionparams', 'on');
model.result('pg4').feature('str1').set('maxtime', Inf);
model.result('pg4').feature('str1').set('data', 'parent');
model.result('pg4').feature('str1').selection.geom('geom1', 1);
model.result('pg4').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]);
model.result('pg4').feature('str1').set('inheritplot', 'surf1');
model.result('pg4').feature('str1').feature.create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'es.normE');
model.result('pg4').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('str1').feature.create('filt1', 'Filter');
model.result('pg4').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').label('Space Charge Density (ct)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'ChargeTransport/phys1/pdef1/pcond2/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('expr', 'rhoq');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg1').run;

model.physics.create('fpt', 'FluidParticleTracing', 'geom1');
model.physics('fpt').model('comp1');

model.study('std1').feature('stat').setSolveFor('/physics/fpt', true);

model.physics('fpt').prop('Formulation').setIndex('Formulation', 'NewtonianIgnoreInertialTerms', 0);
model.physics('fpt').prop('ParticleSizeDistribution').setIndex('ParticleSizeDistribution', 'SpecifyParticleDiameter', 0);
model.physics('fpt').prop('IncludeRarefactionEffects').setIndex('IncludeRarefactionEffects', 1, 0);
model.physics('fpt').prop('StoreParticleStatusData').setIndex('StoreParticleStatusData', 1, 0);
model.physics('fpt').create('out1', 'Outlet', 1);
model.physics('fpt').feature('out1').selection.set([4]);
model.physics('fpt').create('pcnt1', 'ParticleCounter', 1);
model.physics('fpt').feature('pcnt1').selection.set([4]);
model.physics('fpt').create('df1', 'DragForce', 2);
model.physics('fpt').feature('df1').selection.set([1]);
model.physics('fpt').feature('df1').set('u_src', 'root.comp1.u');
model.physics('fpt').create('ef1', 'ElectricForce', 2);
model.physics('fpt').feature('ef1').selection.set([1]);
model.physics('fpt').feature('ef1').set('SpecifyForceUsing', 'ElectricPotential');
model.physics('fpt').feature('ef1').set('V_src', 'root.comp1.V');
model.physics('fpt').create('cacc1', 'ChargeAccumulation', 2);
model.physics('fpt').feature('cacc1').selection.set([1]);
model.physics('fpt').feature('cacc1').set('rhoq_src', 'root.comp1.rhoq');
model.physics('fpt').feature('cacc1').set('muiN', 'muN');
model.physics('fpt').feature('cacc1').set('V_src', 'root.comp1.V');
model.physics('fpt').feature('pp1').set('rhop_mat', 'userdef');
model.physics('fpt').feature('pp1').set('ChargeSpecification', 'cacc1');
model.physics('fpt').feature('pp1').set('erp_mat', 'userdef');
model.physics('fpt').feature('pp1').set('erp', 5);
model.physics('fpt').create('relg1', 'ReleaseGrid', -1);
model.physics('fpt').feature('relg1').setIndex('x0', 'range(-0.049,0.002,0.049)', 1);
model.physics('fpt').feature('relg1').set('DpDistributionFunction', 'ListOfValues');
model.physics('fpt').feature('relg1').setIndex('dpvals', '10^{range(log10(2.0e-8),1/10,log10(2.0e-5))}', 0);

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/spf', true);
model.study('std2').feature('time').setSolveFor('/physics/es', true);
model.study('std2').feature('time').setSolveFor('/physics/ct', true);
model.study('std2').feature('time').setSolveFor('/physics/fpt', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/scdc1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/pc1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/el1', true);
model.study('std2').feature('time').setEntry('activate', 'spf', false);
model.study('std2').feature('time').setEntry('activate', 'es', false);
model.study('std2').feature('time').setEntry('activateCoupling', 'scdc1', false);
model.study('std2').feature('time').setEntry('activateCoupling', 'pc1', false);
model.study('std2').feature('time').set('tlist', 'range(0,0.01,1.7)');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study('std2').label('Particle tracing');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.01,1.7)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'pg1');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('rtol', 1.0E-5);
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('timemethod', 'genalpha');
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol2').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset.create('part1', 'Particle');
model.result.dataset('part1').set('solution', 'sol2');
model.result.dataset('part1').set('posdof', {'comp1.qx' 'comp1.qy'});
model.result.dataset('part1').set('geom', 'geom1');
model.result.dataset('part1').set('pgeom', 'pgeom_fpt');
model.result.dataset('part1').set('pgeomspec', 'fromphysics');
model.result.dataset('part1').set('physicsinterface', 'fpt');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'part1');
model.result('pg6').setIndex('looplevel', 171, 0);
model.result('pg6').label('Particle Trajectories (fpt)');
model.result('pg6').create('traj1', 'ParticleTrajectories');
model.result('pg6').feature('traj1').set('pointtype', 'point');
model.result('pg6').feature('traj1').set('linetype', 'none');
model.result('pg6').feature('traj1').create('col1', 'Color');
model.result('pg6').feature('traj1').feature('col1').set('expr', 'fpt.V');
model.result('pg6').run;
model.result('pg6').label('Particle Trajectories rp = 1e-8 m');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'rp = 0.01 \mu m');
model.result('pg6').set('paramindicator', '');
model.result('pg6').run;
model.result('pg6').feature('traj1').set('linetype', 'line');
model.result('pg6').feature('traj1').set('interpolation', 'uniform');
model.result('pg6').feature('traj1').set('interpcount', 1000);
model.result('pg6').run;
model.result('pg6').feature('traj1').feature('col1').set('expr', 'fpt.Z');
model.result('pg6').run;
model.result('pg6').feature('traj1').create('filt1', 'ParticleTrajectoriesFilter');
model.result('pg6').run;
model.result('pg6').feature('traj1').feature('filt1').set('type', 'logical');
model.result('pg6').feature('traj1').feature('filt1').set('logicalexpr', 'abs(fpt.rp-10^-8)<1e-20');
model.result('pg6').run;
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Particle Trajectories  rp = 2e-7 m');
model.result('pg7').set('title', 'rp = 0.2 \mu m');
model.result('pg7').run;
model.result('pg7').feature('traj1').feature('filt1').set('logicalexpr', 'abs(fpt.rp-10^-6.7)<1e-10');
model.result('pg7').run;
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Particle Trajectories rp = 2e-6 m');
model.result('pg8').set('title', 'rp = 2 \mu m');
model.result('pg8').run;
model.result('pg8').feature('traj1').feature('filt1').set('logicalexpr', 'abs(fpt.rp-10^-5.7)<1e-10');
model.result('pg8').run;
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').run;
model.result('pg9').label('Particle Trajectories rp = 5e-6 m');
model.result('pg9').set('title', 'rp = 5 \mu m');
model.result('pg9').run;
model.result('pg9').feature('traj1').feature('filt1').set('logicalexpr', 'abs(fpt.rp-10^-5.3)<1e-10');
model.result('pg9').run;
model.result.dataset.create('pbin1', 'ParticleBin');
model.result.dataset('pbin1').set('expr', 'fpt.rp');
model.result.dataset('pbin1').set('method', 'tolerance');
model.result.dataset('pbin1').set('tolerance', '1e-9');
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Efficiency vs. Particle Radius');
model.result('pg10').set('data', 'pbin1');
model.result('pg10').setIndex('looplevelinput', 'last', 0);
model.result('pg10').set('titletype', 'none');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', ['Particle radius (' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm)']);
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Particle collection efficiency');
model.result('pg10').set('xlog', true);
model.result('pg10').create('ptp1', 'Particle1D');
model.result('pg10').feature('ptp1').set('markerpos', 'datapoints');
model.result('pg10').feature('ptp1').set('linewidth', 'preference');
model.result('pg10').feature('ptp1').set('expr', '1-fpt.pcnt1.rL');
model.result('pg10').feature('ptp1').set('xdata', 'expr');
model.result('pg10').feature('ptp1').set('xdataexpr', 'fpt.rp');
model.result('pg10').feature('ptp1').set('xdataunit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg10').run;
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').run;
model.result('pg11').label('Accumulated Charge Number vs. Particle Radius');
model.result('pg11').set('ylabel', 'Accumulated charge number');
model.result('pg11').set('ylog', true);
model.result('pg11').run;
model.result('pg11').feature('ptp1').set('expr', 'fpt.cacc1.Za');
model.result('pg11').run;
model.result('pg1').run;
model.result('pg3').run;
model.result('pg5').run;
model.result('pg6').run;
model.result('pg7').run;
model.result('pg8').run;
model.result('pg9').run;
model.result('pg10').run;
model.result('pg11').run;

model.title('Electrostatic Precipitator');

model.description(['This model computes the fluid flow, charge transport and electric potential in an electrostatic precipitator. Based on the resulting fields, particles of different diameter are fed into the device and the transmission probability is computed. As expected, the separation efficiency shows a minimum when the particle radius is around 0.2' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'microns.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('electrostatic_precipitator.mph');

model.modelNode.label('Components');

out = model;
