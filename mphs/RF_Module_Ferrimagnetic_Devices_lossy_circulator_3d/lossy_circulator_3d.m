function out = model
%
% lossy_circulator_3d.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Ferrimagnetic_Devices');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('sc_chamfer', '3');
model.param.descr('sc_chamfer', 'Geometry scale factor');
model.param.set('sc_ferrite', '0.5');
model.param.descr('sc_ferrite', 'Geometry scale factor');

model.variable.create('var1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('eps0', '8.854187817e-12[F/m]', 'Permittivity of free space');
model.variable('var1').set('mu0', '4e-7*pi[H/m]', 'Permeability of free space');
model.variable('var1').set('w', '2*pi*freq', 'Angular frequency');
model.variable('var1').set('gamma', '1.759e11[C/kg]', 'Gyromagnetic ratio');
model.variable('var1').set('H0', '(100*1e3/(4*pi))[A/m]', 'Applied magnetic bias field');
model.variable('var1').set('w0', 'mu0*gamma*H0', 'Larmor frequency');
model.variable('var1').set('Ms', '680e-4[Wb/m^2]/mu0', 'Saturation magnetization');
model.variable('var1').set('wm', 'mu0*gamma*Ms', 'Larmor frequency at saturation limit');
model.variable('var1').set('dH', '(40*1e3/(4*pi))[A/m]', 'Line width');
model.variable('var1').set('alpha', 'dH*mu0*gamma/(2*w)', 'Damping factor');
model.variable('var1').set('chim_xx_p', '(w0*wm*(w0^2-w^2)+w0*wm*w^2*alpha^2)/((w0^2-w^2*(1+alpha^2))^2+4*(w0*w*alpha)^2)', 'Magnetic susceptibility, real part');
model.variable('var1').set('chim_xx_b', '(alpha*w*wm*(w0^2+w^2*(1+alpha^2)))/((w0^2-w^2*(1+alpha^2))^2+4*(w0*w*alpha)^2)', 'Magnetic susceptibility, imaginary part');
model.variable('var1').set('chim_xy_p', '(w*wm*(w0^2-w^2*(1+alpha^2)))/((w0^2-w^2*(1+alpha^2))^2+4*(w0*w*alpha)^2)', 'Magnetic susceptibility, real part');
model.variable('var1').set('chim_xy_b', '2*w0*wm*w^2*alpha/((w0^2-w^2*(1+alpha^2))^2+4*(w0*w*alpha)^2)', 'Magnetic susceptibility, imaginary part');
model.variable('var1').set('chim_xx', 'chim_xx_p-j*chim_xx_b', 'Complex magnetic susceptibility');
model.variable('var1').set('chim_xy', 'chim_xy_b+j*chim_xy_p', 'Complex magnetic susceptibility');
model.variable('var1').set('murxx', '(1+chim_xx)', 'Complex relative magnetic permeability');
model.variable('var1').set('murxy', 'chim_xy', 'Complex relative magnetic permeability');
model.variable('var1').set('murxz', '0', 'Complex relative magnetic permeability');
model.variable('var1').set('muryx', '-chim_xy', 'Complex relative magnetic permeability');
model.variable('var1').set('muryy', 'murxx', 'Complex relative magnetic permeability');
model.variable('var1').set('muryz', '0', 'Complex relative magnetic permeability');
model.variable('var1').set('murzx', '0', 'Complex relative magnetic permeability');
model.variable('var1').set('murzy', '0', 'Complex relative magnetic permeability');
model.variable('var1').set('murzz', '1', 'Complex relative magnetic permeability');
model.variable('var1').set('tdeltae', '0.0002', 'Effective loss tangent');
model.variable('var1').set('eps_r_p', '14.5', 'Relative permittivity, real part');
model.variable('var1').set('eps_r_b', '14.5*tdeltae', 'Relative permittivity, imaginary part');
model.variable('var1').set('eps_r', 'eps_r_p-j*eps_r_b', 'Complex relative permittivity');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'0.2-0.1/(3*sqrt(3))' '1'});
model.geom('geom1').feature('wp1').geom.feature('r1').setIndex('size', '0.2/3', 1);
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'-0.2' '-0.1/3'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('copy1', 'Copy');
model.geom('geom1').feature('wp1').geom.feature('copy1').selection('input').set({'r1'});
model.geom('geom1').feature('wp1').geom.run('copy1');
model.geom('geom1').feature('wp1').geom.create('rot1', 'Rotate');
model.geom('geom1').feature('wp1').geom.feature('rot1').selection('input').set({'copy1'});
model.geom('geom1').feature('wp1').geom.feature('rot1').set('rot', 120);
model.geom('geom1').feature('wp1').geom.run('rot1');
model.geom('geom1').feature('wp1').geom.create('copy2', 'Copy');
model.geom('geom1').feature('wp1').geom.feature('copy2').selection('input').set({'r1'});
model.geom('geom1').feature('wp1').geom.run('copy2');
model.geom('geom1').feature('wp1').geom.create('rot2', 'Rotate');
model.geom('geom1').feature('wp1').geom.feature('rot2').selection('input').set({'copy2'});
model.geom('geom1').feature('wp1').geom.feature('rot2').set('rot', -120);
model.geom('geom1').feature('wp1').geom.run('rot2');
model.geom('geom1').feature('wp1').geom.create('uni1', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni1').selection('input').set({'r1' 'rot1' 'rot2'});
model.geom('geom1').feature('wp1').geom.run('uni1');
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', '0.2/(3*sqrt(3))');
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').feature('wp1').geom.create('copy3', 'Copy');
model.geom('geom1').feature('wp1').geom.feature('copy3').selection('input').set({'uni1'});
model.geom('geom1').feature('wp1').geom.run('copy3');
model.geom('geom1').feature('wp1').geom.create('dif1', 'Difference');
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input').set({'c1'});
model.geom('geom1').feature('wp1').geom.feature('dif1').selection('input2').set({'copy3'});
model.geom('geom1').feature('wp1').geom.run('dif1');
model.geom('geom1').feature('wp1').geom.create('rot3', 'Rotate');
model.geom('geom1').feature('wp1').geom.feature('rot3').selection('input').set({'dif1'});
model.geom('geom1').feature('wp1').geom.feature('rot3').set('rot', 180);
model.geom('geom1').feature('wp1').geom.run('rot3');
model.geom('geom1').feature('wp1').geom.create('copy4', 'Copy');
model.geom('geom1').feature('wp1').geom.feature('copy4').selection('input').set({'rot3'});
model.geom('geom1').feature('wp1').geom.run('copy4');
model.geom('geom1').feature('wp1').geom.create('sca1', 'Scale');
model.geom('geom1').feature('wp1').geom.feature('sca1').set('isotropic', 'sc_chamfer');
model.geom('geom1').feature('wp1').geom.feature('sca1').selection('input').set({'copy4'});
model.geom('geom1').feature('wp1').geom.run('sca1');
model.geom('geom1').feature('wp1').geom.create('uni2', 'Union');
model.geom('geom1').feature('wp1').geom.feature('uni2').selection('input').set({'sca1' 'uni1'});
model.geom('geom1').feature('wp1').geom.feature('uni2').set('intbnd', false);
model.geom('geom1').feature('wp1').geom.run('uni2');
model.geom('geom1').feature('wp1').geom.create('sca2', 'Scale');
model.geom('geom1').feature('wp1').geom.feature('sca2').selection('input').set({'rot3'});
model.geom('geom1').feature('wp1').geom.feature('sca2').set('isotropic', 'sc_ferrite');
model.geom('geom1').feature('wp1').geom.run('sca2');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('workplane', 'wp1');
model.geom('geom1').feature('ext1').selection('input').set({'wp1'});
model.geom('geom1').feature('ext1').setIndex('distance', '0.1/3', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').run('fin');

model.title('Parameterized Circulator Geometry');

model.description('This is a template MPH-file containing the parameterized geometry for the model Impedance Matching of a Lossy Ferrite 3-Port Circulator.');

model.label('lossy_circulator_3d_geom.mph');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.physics('emw').create('wee2', 'WaveEquationElectric', 3);
model.physics('emw').feature('wee2').selection.set([2]);
model.physics('emw').feature('wee2').set('DisplacementFieldModel', 'DielectricLoss');
model.physics('emw').feature('wee2').set('epsilonPrim_mat', 'userdef');
model.physics('emw').feature('wee2').set('epsilonPrim', {'eps_r_p' '0' '0' '0' 'eps_r_p' '0' '0' '0' 'eps_r_p'});
model.physics('emw').feature('wee2').set('epsilonBis_mat', 'userdef');
model.physics('emw').feature('wee2').set('epsilonBis', {'eps_r_b' '0' '0' '0' 'eps_r_b' '0' '0' '0' 'eps_r_b'});
model.physics('emw').feature('wee2').set('mur_mat', 'userdef');
model.physics('emw').feature('wee2').set('mur', {'murxx' 'muryx' 'murzx' 'murxy' 'muryy' 'murzy' 'murxz' 'muryz' 'murzz'});
model.physics('emw').feature('wee2').set('sigma_mat', 'userdef');
model.physics('emw').create('port1', 'Port', 2);
model.physics('emw').feature('port1').selection.set([1]);
model.physics('emw').feature('port1').set('PortType', 'Rectangular');
model.physics('emw').create('port2', 'Port', 2);
model.physics('emw').feature('port2').selection.set([18]);
model.physics('emw').feature('port2').set('PortType', 'Rectangular');
model.physics('emw').create('port3', 'Port', 2);
model.physics('emw').feature('port3').selection.set([19]);
model.physics('emw').feature('port3').set('PortType', 'Rectangular');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([1]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '1.5e-2');
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([2]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmax', '4.5e-3');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', '3[GHz]');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'3[GHz]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('S-parameter (emw)');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'emw.S11dB' 'emw.S21dB' 'emw.S31dB'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result('pg1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'sc_chamfer', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'sc_chamfer', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'sc_ferrite', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0.5,3e-3,0.53)', 0);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'3[GHz]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'sc_ferrite'});
model.batch('p1').set('plistarr', {'range(0.5,3e-3,0.53)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Electric Field (emw) 1');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 11, 1);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 11, 1);
model.result('pg2').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg2').feature.create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').label('Multislice');
model.result('pg2').feature('mslc1').set('smooth', 'internal');
model.result('pg2').feature('mslc1').set('data', 'parent');
model.result('pg2').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg2').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('unit', {'' '' ''});
model.result('pg3').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB' 'emw.S31dB'});
model.result('pg3').feature('glob1').set('descr', {'S11' 'S21' 'S31'});
model.result('pg3').label('S-parameter (emw)');
model.result('pg3').feature('glob1').set('titletype', 'none');
model.result('pg3').feature('glob1').set('xdata', 'expr');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'S-parameter (dB)');
model.result('pg3').feature('glob1').set('xdataexpr', 'sc_ferrite');
model.result('pg3').feature('glob1').set('xdataunit', '');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg4', 'SmithGroup');
model.result('pg4').set('data', 'dset2');
model.result('pg4').create('rgr1', 'ReflectionGraph');
model.result('pg4').feature('rgr1').set('unit', {''});
model.result('pg4').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg4').feature('rgr1').set('descr', {'S11'});
model.result('pg4').label('Smith Plot (emw)');
model.result('pg4').feature('rgr1').set('titletype', 'manual');
model.result('pg4').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg4').feature('rgr1').set('linemarker', 'point');
model.result('pg4').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg4').feature('rgr1').create('col1', 'Color');
model.result('pg4').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg4').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg2').run;
model.result('pg3').run;

model.param.set('sc_ferrite', '0.5', 'Geometry scale factor');
model.param.set('sc_ferrite', '0.518');
model.param.descr('sc_ferrite', 'Geometry scale factor');

model.result('pg3').run;
model.result('pg3').feature('glob1').set('xdataexpr', 'sc_chamfer');

model.study('std1').feature('param').setIndex('pname', 'sc_chamfer', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(2.8,0.04,3.2)', 0);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'3[GHz]'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch('p1').feature.remove('so1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').set('pname', {'sc_chamfer'});
model.batch('p1').set('plistarr', {'range(2.8,0.04,3.2)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');
model.batch('p1').run('compute');

model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').set('plotgroup', 'Default');
model.study('std2').feature('freq').set('solnum', 'auto');
model.study('std2').feature('freq').set('notsolnum', 'auto');
model.study('std2').feature('freq').set('outputmap', {});
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').set('ngenAUX', '1');
model.study('std2').feature('freq').set('goalngenAUX', '1');
model.study('std2').feature('freq').setSolveFor('/physics/emw', true);

model.geom('geom1').run;

model.study('std2').feature('freq').set('plist', 'range(2.8[GHz],20[MHz],3.2[GHz])');

model.sol.create('sol14');
model.sol('sol14').study('std2');
model.sol('sol14').create('st1', 'StudyStep');
model.sol('sol14').feature('st1').set('study', 'std2');
model.sol('sol14').feature('st1').set('studystep', 'freq');
model.sol('sol14').create('v1', 'Variables');
model.sol('sol14').feature('v1').set('control', 'freq');
model.sol('sol14').create('s1', 'Stationary');
model.sol('sol14').feature('s1').set('stol', 0.01);
model.sol('sol14').feature('s1').create('p1', 'Parametric');
model.sol('sol14').feature('s1').feature.remove('pDef');
model.sol('sol14').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol14').feature('s1').feature('p1').set('plistarr', {'range(2.8[GHz],20[MHz],3.2[GHz])'});
model.sol('sol14').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol14').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol14').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol14').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol14').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol14').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol14').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol14').feature('s1').feature('p1').set('probes', {});
model.sol('sol14').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol14').feature('s1').set('linpmethod', 'sol');
model.sol('sol14').feature('s1').set('linpsol', 'zero');
model.sol('sol14').feature('s1').set('control', 'freq');
model.sol('sol14').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol14').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol14').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol14').feature('s1').create('i1', 'Iterative');
model.sol('sol14').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol14').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol14').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol14').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol14').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol14').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol14').feature('s1').feature.remove('fcDef');
model.sol('sol14').attach('std2');
model.sol('sol14').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Field (emw) 2');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 21, 0);
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 21, 0);
model.result('pg5').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').label('Multislice');
model.result('pg5').feature('mslc1').set('smooth', 'internal');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg5').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('unit', {'' '' ''});
model.result('pg6').feature('glob1').set('expr', {'emw.S11dB' 'emw.S21dB' 'emw.S31dB'});
model.result('pg6').feature('glob1').set('descr', {'S11' 'S21' 'S31'});
model.result('pg6').label('S-parameter (emw) 1');
model.result('pg6').feature('glob1').set('titletype', 'none');
model.result('pg6').feature('glob1').set('xdata', 'expr');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'S-parameter (dB)');
model.result('pg6').feature('glob1').set('xdataexpr', 'freq');
model.result('pg6').feature('glob1').set('xdataunit', 'GHz');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('xdatasolnumtype', 'all');
model.result.create('pg7', 'SmithGroup');
model.result('pg7').set('data', 'dset3');
model.result('pg7').create('rgr1', 'ReflectionGraph');
model.result('pg7').feature('rgr1').set('unit', {''});
model.result('pg7').feature('rgr1').set('expr', {'emw.S11'});
model.result('pg7').feature('rgr1').set('descr', {'S11'});
model.result('pg7').label('Smith Plot (emw) 1');
model.result('pg7').feature('rgr1').set('titletype', 'manual');
model.result('pg7').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg7').feature('rgr1').set('linemarker', 'point');
model.result('pg7').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('rgr1').create('col1', 'Color');
model.result('pg7').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg7').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').run;
model.result('pg6').run;
model.result('pg7').run;

model.param.set('PortName', '1');
model.param.descr('PortName', 'Port name');

model.physics('emw').prop('PortSweepSettings').set('useSweep', true);
model.physics('emw').prop('PortSweepSettings').set('ExportTouchstone', true);
model.physics('emw').prop('PortSweepSettings').set('TouchstoneFile', 'lossy_circulator_3d.s3p');

model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').set('plotgroup', 'Default');
model.study('std3').feature('freq').set('solnum', 'auto');
model.study('std3').feature('freq').set('notsolnum', 'auto');
model.study('std3').feature('freq').set('outputmap', {});
model.study('std3').feature('freq').set('ngenAUX', '1');
model.study('std3').feature('freq').set('goalngenAUX', '1');
model.study('std3').feature('freq').set('ngenAUX', '1');
model.study('std3').feature('freq').set('goalngenAUX', '1');
model.study('std3').feature('freq').setSolveFor('/physics/emw', true);
model.study('std3').feature('freq').set('plist', '3[GHz]');
model.study('std3').create('param', 'Parametric');
model.study('std3').feature('param').setIndex('pname', 'sc_chamfer', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);
model.study('std3').feature('param').setIndex('pname', 'sc_chamfer', 0);
model.study('std3').feature('param').setIndex('plistarr', '', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);
model.study('std3').feature('param').setIndex('pname', 'PortName', 0);
model.study('std3').feature('param').setIndex('plistarr', '1 2 3', 0);
model.study('std3').feature('param').setIndex('punit', '', 0);

model.sol.create('sol15');
model.sol('sol15').study('std3');
model.sol('sol15').create('st1', 'StudyStep');
model.sol('sol15').feature('st1').set('study', 'std3');
model.sol('sol15').feature('st1').set('studystep', 'freq');
model.sol('sol15').create('v1', 'Variables');
model.sol('sol15').feature('v1').set('control', 'freq');
model.sol('sol15').create('s1', 'Stationary');
model.sol('sol15').feature('s1').set('stol', 0.01);
model.sol('sol15').feature('s1').create('p1', 'Parametric');
model.sol('sol15').feature('s1').feature.remove('pDef');
model.sol('sol15').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol15').feature('s1').feature('p1').set('plistarr', {'3[GHz]'});
model.sol('sol15').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol15').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol15').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol15').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol15').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol15').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol15').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol15').feature('s1').feature('p1').set('probes', {});
model.sol('sol15').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol15').feature('s1').set('linpmethod', 'sol');
model.sol('sol15').feature('s1').set('linpsol', 'zero');
model.sol('sol15').feature('s1').set('control', 'freq');
model.sol('sol15').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol15').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol15').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol15').feature('s1').create('i1', 'Iterative');
model.sol('sol15').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol15').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol15').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol15').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol15').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol15').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol15').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol15').feature('s1').feature.remove('fcDef');
model.sol('sol15').attach('std3');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std3');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol15');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'PortName'});
model.batch('p2').set('plistarr', {'1 2 3'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std3');
model.batch('p2').set('control', 'param');

model.sol.create('sol16');
model.sol('sol16').study('std3');
model.sol('sol16').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol16');
model.batch('p2').run('compute');

model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Electric Field (emw) 3');
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 3, 1);
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('showlegendsmaxmin', true);
model.result('pg8').set('data', 'dset5');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 3, 1);
model.result('pg8').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg8').feature.create('mslc1', 'Multislice');
model.result('pg8').feature('mslc1').label('Multislice');
model.result('pg8').feature('mslc1').set('smooth', 'internal');
model.result('pg8').feature('mslc1').set('data', 'parent');
model.result('pg8').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg8').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').set('data', 'dset5');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('unit', {'' '' '' '' '' '' '' '' ''});
model.result('pg9').feature('glob1').set('expr', {'emw.S11dB' 'emw.S12dB' 'emw.S13dB' 'emw.S21dB' 'emw.S22dB' 'emw.S23dB' 'emw.S31dB' 'emw.S32dB' 'emw.S33dB'});
model.result('pg9').feature('glob1').set('descr', {'S11' 'S12' 'S13' 'S21' 'S22' 'S23' 'S31' 'S32' 'S33'});
model.result('pg9').label('S-parameter (emw) 2');
model.result('pg9').feature('glob1').set('titletype', 'none');
model.result('pg9').feature('glob1').set('xdata', 'expr');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'S-parameter (dB)');
model.result('pg9').feature('glob1').set('xdataexpr', 'PortName');
model.result('pg9').feature('glob1').set('xdataunit', '');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('xdatasolnumtype', 'all');
model.result('pg9').feature('glob1').active(true);
model.result.create('pg10', 'SmithGroup');
model.result('pg10').set('data', 'dset5');
model.result('pg10').create('rgr1', 'ReflectionGraph');
model.result('pg10').feature('rgr1').set('unit', {'' '' ''});
model.result('pg10').feature('rgr1').set('expr', {'emw.S11' 'emw.S22' 'emw.S33'});
model.result('pg10').feature('rgr1').set('descr', {'S11' 'S22' 'S33'});
model.result('pg10').label('Smith Plot (emw) 2');
model.result('pg10').feature('rgr1').set('titletype', 'manual');
model.result('pg10').feature('rgr1').set('title', 'Reflection Graph: S-parameter, Color: Frequency (GHz)');
model.result('pg10').feature('rgr1').set('linemarker', 'point');
model.result('pg10').feature('rgr1').set('markerpos', 'datapoints');
model.result('pg10').feature('rgr1').create('col1', 'Color');
model.result('pg10').feature('rgr1').feature('col1').set('expr', 'emw.freq/1e9');
model.result('pg10').feature('rgr1').feature('col1').set('colortable', 'Spectrum');
model.result('pg8').run;
model.result.numerical.create('gmev1', 'EvalGlobalMatrix');
model.result.numerical('gmev1').set('data', 'dset5');
model.result.numerical('gmev1').set('expr', 'emw.SdB');
model.result.numerical('gmev1').set('descr', 'S-parameter, dB');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Global Matrix Evaluation 1');
model.result.numerical('gmev1').set('table', 'tbl2');
model.result.numerical('gmev1').setResult;
model.result('pg8').run;

model.view.create('view3', 'geom1');
model.view('view3').model('comp1');
model.view('view3').set('showgrid', false);

model.result('pg8').run;
model.result('pg8').set('view', 'view3');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').feature.remove('mslc1');
model.result('pg8').run;
model.result('pg8').create('slc1', 'Slice');
model.result('pg8').feature('slc1').set('quickplane', 'xy');
model.result('pg8').feature('slc1').set('quickznumber', 1);
model.result('pg8').feature('slc1').set('colortable', 'HeatCameraLight');
model.result('pg8').feature('slc1').create('def1', 'Deform');
model.result('pg8').run;
model.result('pg8').feature('slc1').feature('def1').set('expr', {'emw.Ex' 'emw.Ey' 'emw.Ez'});
model.result('pg8').feature('slc1').feature('def1').set('descr', 'Electric field');
model.result('pg8').feature('slc1').feature('def1').set('descractive', true);
model.result('pg8').run;
model.result('pg8').create('arwv1', 'ArrowVolume');
model.result('pg8').feature('arwv1').set('expr', {'emw.Hx' 'emw.Hy' 'emw.Hz'});
model.result('pg8').feature('arwv1').set('descr', 'Magnetic field');
model.result('pg8').feature('arwv1').set('descractive', true);
model.result('pg8').feature('arwv1').set('xnumber', 45);
model.result('pg8').feature('arwv1').set('ynumber', 45);
model.result('pg8').feature('arwv1').set('arrowzmethod', 'coord');
model.result('pg8').feature('arwv1').set('zcoord', '0.1/3');
model.result('pg8').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('arwv1').set('color', 'green');
model.result('pg8').run;
model.result('pg8').setIndex('looplevel', 2, 1);
model.result('pg8').run;
model.result('pg9').run;
model.result('pg9').setIndex('looplevelinput', 'manual', 1);
model.result('pg9').setIndex('looplevel', [1], 1);
model.result('pg9').run;
model.result('pg9').feature('glob1').remove('unit', [1 2 4 5 7 8]);
model.result('pg9').feature('glob1').remove('descr', [1 2 4 5 7 8]);
model.result('pg9').feature('glob1').remove('expr', [1 2 4 5 7 8]);
model.result('pg9').feature('glob1').set('linemarker', 'cycle');
model.result('pg9').feature('glob1').set('markerpos', 'interp');
model.result('pg9').run;

model.title('Impedance Matching of a Lossy Ferrite 3-Port Circulator');

model.description(['A lossy ferrite circulator at 3' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'GHz is modeled. Geometrical design parameters are varied to match the impedance for minimal reflection of the fundamental TE10 rectangular waveguide mode.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;

model.label('lossy_circulator_3d.mph');

model.modelNode.label('Components');

out = model;
