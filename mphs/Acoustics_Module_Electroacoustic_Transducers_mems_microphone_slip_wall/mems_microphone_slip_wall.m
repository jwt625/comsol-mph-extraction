function out = model
%
% mems_microphone_slip_wall.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('es', 'Electrostatics', 'geom1');
model.physics('es').model('comp1');
model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/ta', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/es', true);
model.study('std1').feature('stat').setSolveFor('/physics/cir', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('dia_t', '0.5[um]', 'Thickness of the diaphragm');
model.param.set('back_t', '3[um]', 'Thickness of the MPP');
model.param.set('dia_r', '200[um]', 'Diameter of the diaphragm');
model.param.set('gap', '2[um]', 'Gap between the diaphragm and the MPP');
model.param.set('hole_r', '3[um]', 'Hole radius');
model.param.set('vent_d', '0.9*dia_r', 'Position of the vent holes');
model.param.set('vent_r', '7[um]', 'Radius of the vent holes');
model.param.set('hole_dist', '9*hole_r', 'Distance between holes');

model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 'dia_r*1');
model.geom('geom1').feature('cyl1').set('h', ['200[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]']);
model.geom('geom1').feature('cyl1').set('pos', {'0' '0' ['-100[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]']});
model.geom('geom1').feature.duplicate('cyl2', 'cyl1');
model.geom('geom1').feature('cyl2').set('h', 'dia_t');
model.geom('geom1').feature('cyl2').set('pos', [0 0 0]);
model.geom('geom1').feature('cyl2').label('Diaphragm');
model.geom('geom1').feature.duplicate('cyl3', 'cyl2');
model.geom('geom1').feature('cyl3').label('Backplate');
model.geom('geom1').feature('cyl3').set('h', 'back_t');
model.geom('geom1').feature('cyl3').set('pos', {'0' '0' 'gap+dia_t'});
model.geom('geom1').feature.duplicate('cyl4', 'cyl3');
model.geom('geom1').feature('cyl4').set('r', 'hole_r');
model.geom('geom1').feature('cyl4').label('Initial hole');
model.geom('geom1').feature('cyl1').setIndex('layer', ['85[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]'], 0);
model.geom('geom1').feature('cyl1').setIndex('layer', ['35[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]'], 1);
model.geom('geom1').feature('cyl1').set('layerbottom', true);
model.geom('geom1').feature('cyl1').set('layerside', false);
model.geom('geom1').run('cyl4');
model.geom('geom1').create('arr1', 'Array');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('arr1').selection('input').set({'cyl4'});
model.geom('geom1').feature('arr1').set('type', 'linear');
model.geom('geom1').feature('arr1').set('linearsize', 2);
model.geom('geom1').feature('arr1').set('displ', {'hole_dist' '0' '0'});
model.geom('geom1').run('arr1');
model.geom('geom1').create('arr2', 'Array');
model.geom('geom1').feature('arr2').selection('input').set({'arr1'});
model.geom('geom1').feature('arr2').set('type', 'linear');
model.geom('geom1').feature('arr2').set('linearsize', 2);
model.geom('geom1').feature('arr2').set('displ', {'hole_dist/2' '0' '0'});
model.geom('geom1').feature('arr2').setIndex('displ', 'sin(pi/3)*hole_dist', 1);
model.geom('geom1').run('arr2');
model.geom('geom1').create('arr3', 'Array');
model.geom('geom1').feature('arr3').selection('input').set({'arr2'});
model.geom('geom1').feature('arr3').set('fullsize', [8 8 1]);
model.geom('geom1').feature('arr3').set('displ', {'2*hole_dist' '0' '0'});
model.geom('geom1').feature('arr3').setIndex('displ', '2*sin(pi/3)*hole_dist', 1);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Holes');
model.geom('geom1').feature('arr3').set('contributeto', 'csel1');
model.geom('geom1').run('arr3');
model.geom('geom1').create('cylsel1', 'CylinderSelection');
model.geom('geom1').feature('cylsel1').set('entitydim', -1);
model.geom('geom1').feature('cylsel1').set('inputent', 'selections');
model.geom('geom1').feature('cylsel1').set('input', {'csel1'});
model.geom('geom1').feature('cylsel1').set('r', '4*dia_r');
model.geom('geom1').feature('cylsel1').set('rin', '0.75*dia_r');
model.geom('geom1').feature('cylsel1').set('condition', 'somevertex');
model.geom('geom1').feature('cylsel1').set('selkeep', false);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Holes tmp');
model.geom('geom1').feature('cylsel1').set('contributeto', 'csel2');
model.geom('geom1').run('cylsel1');
model.geom('geom1').create('del1', 'Delete');
model.geom('geom1').feature('del1').selection('input').named('csel2');
model.geom('geom1').nodeGroup.create('grp1');
model.geom('geom1').nodeGroup('grp1').placeAfter('cyl3');
model.geom('geom1').nodeGroup('grp1').add('cyl4');
model.geom('geom1').nodeGroup('grp1').add('arr1');
model.geom('geom1').nodeGroup('grp1').add('arr2');
model.geom('geom1').nodeGroup('grp1').add('arr3');
model.geom('geom1').nodeGroup('grp1').add('cylsel1');
model.geom('geom1').nodeGroup('grp1').add('del1');
model.geom('geom1').nodeGroup('grp1').label('Holes');
model.geom('geom1').run('del1');
model.geom('geom1').create('cyl5', 'Cylinder');
model.geom('geom1').nodeGroup('grp1').remove('cyl5', false);
model.geom('geom1').feature('cyl5').label('Vent 1');
model.geom('geom1').feature('cyl5').set('r', 'vent_r');
model.geom('geom1').feature('cyl5').set('h', 'back_t');
model.geom('geom1').feature('cyl5').set('pos', {'cos(5*pi/180)*vent_d' '0' '0'});
model.geom('geom1').feature('cyl5').setIndex('pos', 'sin(5*pi/180)*vent_d', 1);
model.geom('geom1').feature('cyl5').setIndex('pos', 'gap+dia_t', 2);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Vents');
model.geom('geom1').feature('cyl5').set('contributeto', 'csel3');
model.geom('geom1').feature.duplicate('cyl6', 'cyl5');
model.geom('geom1').feature('cyl6').label('Vent 2');
model.geom('geom1').feature('cyl6').setIndex('pos', 'cos(15*pi/180)*vent_d', 0);
model.geom('geom1').feature('cyl6').setIndex('pos', 'sin(15*pi/180)*vent_d', 1);
model.geom('geom1').feature.duplicate('cyl7', 'cyl6');
model.geom('geom1').feature('cyl7').label('Vent 3');
model.geom('geom1').feature('cyl7').setIndex('pos', 'cos(25*pi/180)*vent_d', 0);
model.geom('geom1').feature('cyl7').setIndex('pos', 'sin(25*pi/180)*vent_d', 1);
model.geom('geom1').nodeGroup.create('grp2');
model.geom('geom1').nodeGroup('grp2').placeAfter('cyl3');
model.geom('geom1').nodeGroup('grp2').add('cyl5');
model.geom('geom1').nodeGroup('grp2').add('cyl6');
model.geom('geom1').nodeGroup('grp2').add('cyl7');
model.geom('geom1').nodeGroup('grp2').label('Vents');
model.geom('geom1').run('cyl7');
model.geom('geom1').create('cylsel2', 'CylinderSelection');
model.geom('geom1').nodeGroup('grp2').remove('cylsel2', false);
model.geom('geom1').feature('cylsel2').set('r', '1[mm]');
model.geom('geom1').feature('cylsel2').set('entitydim', -1);
model.geom('geom1').selection.create('csel4', 'CumulativeSelection');
model.geom('geom1').selection('csel4').label('AllCyl');
model.geom('geom1').feature('cylsel2').set('contributeto', 'csel4');
model.geom('geom1').run('cylsel2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').named('csel4');
model.geom('geom1').run('uni1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', ['-100[' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm]']);
model.geom('geom1').feature('wp1').geom.create('c1', 'Circle');
model.geom('geom1').feature('wp1').geom.feature('c1').set('r', 'dia_r');
model.geom('geom1').feature('wp1').geom.feature('c1').set('angle', 30);
model.geom('geom1').feature('wp1').geom.run('c1');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').setIndex('distance', '0.5[mm]', 0);
model.geom('geom1').run('ext1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'ext1' 'uni1'});
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Diaphragm');
model.selection('sel1').set([3]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Diaphragm boundaries');
model.selection('adj1').set('input', {'sel1'});
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Slip wall boundaries');
model.selection('sel2').set([4 8]);
model.selection('sel2').geom('geom1', 3, 2, {'exterior'});
model.selection('sel2').set([4 8]);
model.selection('sel2').geom('geom1', 3, 2, {'exterior' 'interior'});
model.selection('sel2').set([4 8]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Large air domain');
model.selection('sel3').set([1 2 4 6 7]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Air - TA');
model.selection('uni1').set('input', {'sel3' 'geom1_csel1_dom' 'geom1_csel3_dom'});
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').geom(2);
model.selection('sel4').set([13 14]);
model.selection('sel4').set('groupcontang', true);
model.selection('sel4').label('Symmetry');
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').geom('geom1', 3, 2, {'exterior'});
model.selection('sel5').set([]);
model.selection('sel5').all;
model.selection('sel5').label('All domains - Exterior boundaries');
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Top of MPP');
model.selection('sel6').geom(2);
model.selection('sel6').set([15]);
model.selection('sel6').set('groupcontang', true);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Air - ACPR');
model.selection('sel7').set([1]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Backplate boundaries');
model.selection('sel8').set([8]);
model.selection('sel8').geom('geom1', 3, 2, {'exterior'});
model.selection('sel8').set([8]);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Electrostatics domains');
model.selection('uni2').set('input', {'sel1' 'uni1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').label('Silicon');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('diffuse', 'custom');
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('ambient', 'custom');
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.7);
model.material('mat2').set('roughness', 0.5);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat2').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.material('mat2').selection.named('sel1');

model.common('free1').selection.set([2 4]);
model.common('free1').set('smoothingType', 'laplace');
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.named('sel4');

model.physics('ta').selection.named('uni1');
model.physics('ta').create('slw1', 'SlipWall', 2);
model.physics('ta').feature('wall1').set('MechanicalCondition', 'Slip');
model.physics('ta').feature('wall1').set('ThermalCondition', 'Adiabatic');
model.physics('ta').feature('slw1').label('Slip Wall - MPP');
model.physics('ta').feature('slw1').selection.named('sel2');
model.physics('ta').create('slw2', 'SlipWall', 2);
model.physics('ta').feature('slw2').label('Slip Wall - Diaphragm');
model.physics('ta').feature('slw2').selection.named('adj1');
model.physics('ta').feature('slw2').set('MechanicalCondition', 'MovingWall');
model.physics('ta').feature('slw2').set('u_wall_src', 'root.comp1.solid.us_tx');
model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('sel4');
model.physics('ta').create('pra1', 'PressureAdiabatic', 2);
model.physics('ta').feature('pra1').selection.set([22]);
model.physics('ta').feature('pra1').set('pbnd', 'linper(1[Pa])');
model.physics('ta').create('wall2', 'Wall', 2);
model.physics('ta').feature('wall2').selection.set([3 123 124]);
model.physics('solid').selection.named('sel1');
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('sel5');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('sel4');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([12]);
model.physics('solid').feature('bndl1').set('FperArea_src', 'root.comp1.ta.slw2.TractionPerAreax');
model.physics('es').selection.named('uni2');
model.physics('es').feature('ccn1').setIndex('materialType', 'solid', 0);
model.physics('es').create('gnd1', 'Ground', 2);
model.physics('es').feature('gnd1').selection.set([9]);
model.physics('es').create('term1', 'Terminal', 2);
model.physics('es').feature('term1').selection.named('sel8');
model.physics('es').feature('term1').set('TerminalType', 'Circuit');
model.physics('es').create('symp1', 'SymmetryPlane', 2);
model.physics('es').feature('symp1').selection.named('sel4');
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.es.V0_1');
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 0, 0);
model.physics('cir').feature('IvsU1').setIndex('Connections', 1, 1, 0);
model.physics('cir').create('R1', 'Resistor', -1);
model.physics('cir').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir').feature('R1').set('R', '10[Gohm]');
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 2, 0, 0);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);

model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);
model.multiphysics.create('tsb1', 'ThermoacousticStructureBoundary', 'geom1', 2);
model.multiphysics('tsb1').selection.set([9]);

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size').set('hauto', 3);
model.mesh('mesh1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('size1').selection.named('geom1_csel1_dom');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', 'hole_r/1.5');
model.mesh('mesh1').feature('size1').label('Size - Holes');
model.mesh('mesh1').feature.duplicate('size2', 'size1');
model.mesh('mesh1').feature('size2').label('Size - Vents');
model.mesh('mesh1').feature('size2').selection.named('geom1_csel3_dom');
model.mesh('mesh1').feature('size2').set('hmax', 'vent_r/1.5');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('sel6');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').label('Swept - Gap and diaphragm');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([3 4]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([4]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('swe1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('swe1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('swe1').feature('dis2').set('type', 'number');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([3]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').label('Swept - Holes');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.named('geom1_csel1_dom');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature.duplicate('swe3', 'swe2');
model.mesh('mesh1').feature('swe3').label('Swept - Vents');
model.mesh('mesh1').feature('swe3').selection.named('geom1_csel3_dom');
model.mesh('mesh1').run('swe3');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.set([2 6]);
model.mesh('mesh1').run;
model.mesh('mesh1').create('swe4', 'Sweep');
model.mesh('mesh1').feature('swe4').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe4').selection.set([1 7]);
model.mesh('mesh1').run;

model.study('std1').create('frlin', 'Frequencylinearized');
model.study('std1').feature('frlin').set('plist', '10^{range(log10(200),1/4,log10(20000))}');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u2').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u2').set('scaleval', '1e-2*3.0000000000000003E-4');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*3.0000000000000003E-4');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V' 'comp1_es_term1_V0_ode' 'comp1_es_term1_Q0_ode' 'comp1_currents'});
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric Potential');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u2'});
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement Field');
model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'frlin');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '5.936225660613828E-7');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'frlin');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-6);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s2').feature('p1').set('plistarr', {'10^{range(log10(200),1/4,log10(20000))}'});
model.sol('sol1').feature('s2').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s2').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s2').feature('p1').set('probes', {});
model.sol('sol1').feature('s2').feature('p1').set('control', 'frlin');
model.sol('sol1').feature('s2').set('nonlin', 'linper');
model.sol('sol1').feature('s2').set('storelinpoint', true);
model.sol('sol1').feature('s2').set('linpsolnum', 'all');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').set('linpmethod', 'sol');
model.sol('sol1').feature('s2').set('linpsol', 'sol1');
model.sol('sol1').feature('s2').set('linpsoluse', 'sol2');
model.sol('sol1').feature('s2').set('control', 'frlin');
model.sol('sol1').feature('s2').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s2').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Suggested Direct Solver (tsb1_eme1) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (tsb1_eme1)');
model.sol('sol1').feature('s2').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_ta_slw1_lm_tau' 'comp1_ta_slw2_lm_tau'});
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('hybridvar', {'comp1_u2' 'comp1_V' 'comp1_es_term1_V0_ode' 'comp1_es_term1_Q0_ode' 'comp1_currents'});
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (tsb1_eme1)');
model.sol('sol1').feature('s2').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_ta_slw1_lm_tau' 'comp1_ta_slw2_lm_tau' 'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('s2').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_p' 'comp1_ta_slw1_lm_tau' 'comp1_ta_slw2_lm_tau'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_V' 'comp1_es_term1_V0_ode' 'comp1_es_term1_Q0_ode' 'comp1_currents'});
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s2').set('stol', '1.0E-3');
model.sol('sol1').feature('s2').feature('i1').active(true);
model.sol('sol1').feature('s2').feature('i1').create('dp4', 'DirectPreconditioner');
model.sol('sol1').feature('s2').feature('i1').feature('dp4').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('dp4').set('hybridvar', {'comp1_spatial_disp'});
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Acoustic Pressure (ta)');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg3');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('colortable', 'Wave');
model.result('pg1').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Acoustic Velocity (ta)');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg2').feature('slc1').set('evalmethodactive', 'off');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('evalmethodactive', 'off');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('evalmethodactive', 'off');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('evalmethodactive', 'off');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('evalmethodactive', 'off');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Temperature Variation (ta)');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').set('defaultPlotID', 'thermoacoustics/ThermoacousticsPhysicsInterfaceComponents/icom5/pdef1/pcond1/pg2');
model.result('pg3').feature.create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').label('Multislice');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('expr', 'ta.T_t');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('colortable', 'ThermalWave');
model.result('pg3').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').feature('mslc1').set('smooth', 'internal');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg3').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg3').feature('mslc1').set('data', 'parent');
model.result.dataset('dset1').set('frametype', 'spatial');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 9, 0);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('defaultPlotID', 'displacement');
model.result('pg4').label('Displacement (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.disp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'SpectrumLight');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Electric Potential (es)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('showlegendsmaxmin', true);
model.result('pg5').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('solutionparams', 'parent');
model.result('pg5').feature('mslc1').set('expr', 'V');
model.result('pg5').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg5').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg5').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg5').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg5').feature('mslc1').set('colortable', 'Dipole');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg5').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg5').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg5').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg5').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg5').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg5').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg5').feature('strmsl1').set('titletype', 'none');
model.result('pg5').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg5').feature('strmsl1').set('udist', 0.02);
model.result('pg5').feature('strmsl1').set('maxlen', 0.4);
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('inheritcolor', false);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg5').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').set('maxtime', Inf);
model.result('pg5').feature('strmsl1').set('data', 'parent');
model.result('pg5').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg5').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg5').feature('strmsl1').feature('col1').set('expr', 'V');
model.result('pg5').feature('strmsl1').feature('col1').set('evalmethodactive', 'off');
model.result('pg5').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');
model.result('pg5').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg5').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg5').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Electric Field Norm (es)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsmaxmin', true);
model.result('pg6').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg6').feature.create('mslc1', 'Multislice');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('solutionparams', 'parent');
model.result('pg6').feature('mslc1').set('expr', 'es.normE');
model.result('pg6').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg6').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('mslc1').set('xcoord', 'es.CPx');
model.result('pg6').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('mslc1').set('ycoord', 'es.CPy');
model.result('pg6').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('mslc1').set('zcoord', 'es.CPz');
model.result('pg6').feature('mslc1').set('colortable', 'Prism');
model.result('pg6').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg6').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg6').feature('mslc1').set('evalmethodactive', 'off');
model.result('pg6').feature('mslc1').set('data', 'parent');
model.result('pg6').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg6').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});
model.result('pg6').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg6').feature('strmsl1').set('xcoord', 'es.CPx');
model.result('pg6').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg6').feature('strmsl1').set('ycoord', 'es.CPy');
model.result('pg6').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg6').feature('strmsl1').set('zcoord', 'es.CPz');
model.result('pg6').feature('strmsl1').set('titletype', 'none');
model.result('pg6').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg6').feature('strmsl1').set('udist', 0.02);
model.result('pg6').feature('strmsl1').set('maxlen', 0.4);
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('inheritcolor', false);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg6').feature('strmsl1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').set('maxtime', Inf);
model.result('pg6').feature('strmsl1').set('data', 'parent');
model.result('pg6').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg6').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg6').feature('strmsl1').feature('col1').set('expr', 'es.normE');
model.result('pg6').feature('strmsl1').feature('col1').set('evalmethodactive', 'off');
model.result('pg6').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg6').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg6').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg6').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg6').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg6').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 9, 0);
model.result('pg7').label('Moving Mesh');
model.result('pg7').create('mesh1', 'Mesh');
model.result('pg7').feature('mesh1').set('meshdomain', 'volume');
model.result('pg7').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg7').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg7').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg7').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg7').feature('mesh1').feature('sel1').selection.set([2 3 4]);
model.result('pg7').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg7').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg7').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result.dataset.create('sec1', 'Sector3D');
model.result.dataset('sec1').set('sectors', 12);
model.result.dataset('sec1').set('include', 'manual');
model.result.dataset('sec1').set('trans', 'rotrefl');
model.result.dataset.duplicate('sec2', 'sec1');
model.result.dataset('sec2').set('sectorsinclude', 9);
model.result.dataset('sec2').set('startsector', -2);
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Frequency Response');
model.result('pg8').create('oct1', 'OctaveBand');
model.result('pg8').feature('oct1').set('quantity', 'bandpower');
model.result('pg8').feature('oct1').set('markerpos', 'datapoints');
model.result('pg8').feature('oct1').set('linewidth', 'preference');
model.result('pg8').feature('oct1').selection.geom('geom1');
model.result('pg8').feature('oct1').set('expr', 'es.V0_1');
model.result('pg8').feature('oct1').set('amplref', '1/sqrt(2)');
model.result('pg8').feature('oct1').set('quantity', 'continuous');
model.result('pg8').feature('oct1').set('linemarker', 'circle');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Acoustic Pressure');
model.result('pg9').set('showlegendsunit', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('TA');
model.result('pg9').feature('surf1').set('colortable', 'Wave');
model.result('pg9').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').run;
model.result('pg10').label('Acoustic Velocity');
model.result('pg10').set('showlegendsunit', true);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'ta.v_rms');
model.result('pg10').feature('surf1').set('unit', 'mm/s');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').run;
model.result('pg11').label('Thumbnail');
model.result('pg11').set('data', 'sec1');
model.result('pg11').set('edges', false);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').label('Cylinder');
model.result('pg11').feature('surf1').set('expr', '1');
model.result('pg11').run;
model.result('pg11').feature('surf1').create('sel1', 'Selection');
model.result('pg11').feature('surf1').feature('sel1').selection.set([3 123 124 125 127]);
model.result('pg11').run;
model.result('pg11').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg11').run;
model.result('pg11').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg11').feature('surf1').feature('mtrl1').set('color', 'black');
model.result('pg11').run;
model.result('pg11').create('surf2', 'Surface');
model.result('pg11').feature('surf2').label('MPP');
model.result('pg11').feature('surf2').set('data', 'sec2');
model.result('pg11').feature('surf2').set('expr', '1');
model.result('pg11').feature('surf2').create('sel1', 'Selection');
model.result('pg11').feature('surf2').feature('sel1').selection.named('sel8');
model.result('pg11').run;
model.result('pg11').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg11').run;
model.result('pg11').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg11').feature('surf2').feature('mtrl1').set('color', 'gray');
model.result('pg11').run;
model.result('pg11').create('surf3', 'Surface');
model.result('pg11').feature('surf3').label('Displacement');
model.result('pg11').feature('surf3').set('expr', 'solid.disp');
model.result('pg11').feature('surf3').set('colortable', 'AuroraAustralis');
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').create('slc1', 'Slice');
model.result('pg11').feature('slc1').label('Acoustic velocity');
model.result('pg11').feature('slc1').set('expr', 'ta.v_rms');
model.result('pg11').feature('slc1').set('quickplane', 'zx');
model.result('pg11').feature('slc1').set('quickynumber', 1);
model.result('pg11').feature('slc1').set('quickymethod', 'coord');
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').create('line1', 'Line');
model.result('pg11').feature('line1').set('data', 'sec2');
model.result('pg11').feature('line1').set('expr', '1');
model.result('pg11').feature('line1').set('coloring', 'uniform');
model.result('pg11').feature('line1').set('color', 'black');
model.result('pg11').feature('line1').create('sel1', 'Selection');
model.result('pg11').feature('line1').feature('sel1').selection.geom('geom1', 2);
model.result('pg11').feature('line1').feature('sel1').selection.named('sel8');
model.result('pg11').run;
model.result('pg11').set('titletype', 'none');

model.view('view3').set('showgrid', false);

model.result('pg11').set('showlegends', false);
model.result('pg11').run;

model.title('MEMS Microphone with Slip Wall');

model.description('This is a model of a MEMS microphone solved in the frequency domain including the DC prestress effects. The model is set up using the Electromechanics multiphysics interface, Thermoviscous Acoustics, and Pressure Acoustics. The microphone consists of a perforated plate and a prestressed membrane. The model uses the Slip Wall boundary condition to include the effects of high Knudsen numbers in the MEMS microphone. The slip velocity can be important for the flow through the holes in the microperforated plate (MPP) and for the squeezing flow between the perforated plate and the membrane.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('mems_microphone_slip_wall.mph');

model.modelNode.label('Components');

out = model;
