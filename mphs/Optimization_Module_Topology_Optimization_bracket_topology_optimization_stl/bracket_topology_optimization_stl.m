function out = model
%
% bracket_topology_optimization_stl.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Optimization_Module/Topology_Optimization');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('topo', 'TopologyOptimization');
model.study('std1').feature('topo').setSolveFor('/physics/solid', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.common.create('dtopo1', 'DensityTopology', 'comp1');
model.common('dtopo1').selection.all;

model.material.create('toplnk1', 'TopologyLink', 'comp1');
model.material('toplnk1').set('topologySource', 'dtopo1');
model.material('toplnk1').selection.all;

model.physics('solid').prop('ShapeProperty').set('order_displacement', 1);

model.study('std1').feature('topo').setIndex('optobj', 'comp1.solid.Ws_tot', 0);
model.study('std1').feature('topo').set('objectivescaling', 'init');
model.study('std1').feature('topo').setIndex('constraintExpression', 'comp1.dtopo1.theta_avg', 0);
model.study('std1').feature('topo').setIndex('constraintUbound', '0.5', 0);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('D1', '1.4[cm]', 'Constraint diameter');
model.param.set('D2', '5[cm]', 'Load diameter');
model.param.set('H', '10[cm]', 'Height');
model.param.set('W', '21.5[cm]', 'Width');
model.param.set('L', '35[cm]', 'Length');
model.param.set('thickness', '8[mm]', 'Thickness of bracket');
model.param.set('rfillet', '8[mm]', 'Fillet radius');
model.param.set('Y1', '2[cm]', 'Position of constraint hole');
model.param.set('X1', '4[cm]', 'Position of constraint hole');
model.param.set('DY1', '6[cm]', 'Distance between constraint holes');
model.param.set('YC', '-30[cm]', 'Load hole position');
model.param.set('L1', '10[cm]', 'Connection plate width');
model.param.set('rfillet2', '2[cm]', 'Constraint plate fillet radius');
model.param.set('W1', '7[cm]', 'Constraint plate width');
model.param.set('Da', '1[cm]', 'Fixed hole padding');

model.geom('geom1').insertFile('bracket_topology_optimization_stl_geom_sequence.mph', 'geom1');
model.geom('geom1').run('boxsel4');

model.param.label('Geometrical Parameters');
model.param.create('par2');
model.param('par2').set('Lmin', '5 [mm]');
model.param('par2').descr('Lmin', 'Filter radius');
model.param('par2').set('meshsz', 'Lmin');
model.param('par2').descr('meshsz', 'Mesh size');
model.param('par2').set('meshsz2', 'Lmin/2');
model.param('par2').descr('meshsz2', 'Fine mesh size');
model.param('par2').set('P0', '2.5 [MPa]');
model.param('par2').descr('P0', 'Peak load intensity');

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('funcname', 'load');
model.func('an1').set('expr', 'F*cos(atan2(py,abs(px)))');
model.func('an1').set('args', 'F,px,py');
model.func('an1').setIndex('argunit', 'Pa', 0);
model.func('an1').setIndex('argunit', 'm', 1);
model.func('an1').setIndex('argunit', 'm', 2);
model.func('an1').set('fununit', 'Pa');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material('toplnk1').set('link', 'mat1');

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('geom1_cylsel1');

model.group.create('cg1', 'ConstraintGroup');

model.physics('solid').feature('fix1').set('constraintGroup', 'cg1');
model.physics('solid').create('fix2', 'Fixed', 2);
model.physics('solid').feature('fix2').selection.named('geom1_cylsel2');

model.group.create('cg2', 'ConstraintGroup');

model.physics('solid').feature('fix2').set('constraintGroup', 'cg2');
model.physics('solid').create('fix3', 'Fixed', 2);
model.physics('solid').feature('fix3').selection.named('geom1_cylsel3');

model.group.create('cg3', 'ConstraintGroup');

model.physics('solid').feature('fix3').set('constraintGroup', 'cg3');
model.physics('solid').create('fix4', 'Fixed', 2);
model.physics('solid').feature('fix4').selection.named('geom1_cylsel4');

model.group.create('cg4', 'ConstraintGroup');

model.physics('solid').feature('fix4').set('constraintGroup', 'cg4');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.named('geom1_unisel1');
model.physics('solid').feature('bndl1').set('coordinateSystem', 'sys1');
model.physics('solid').feature('bndl1').set('FperArea', {'0' '0' 'load(-P0,Y-YC,Z)'});

model.group.create('lg1', 'LoadGroup');

model.physics('solid').feature('bndl1').set('loadGroup', 'lg1');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.set([1 4 33 37 43 47]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'meshsz');
model.mesh('mesh1').feature('size').set('hmin', 'meshsz/2');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_difsel2');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('geom1_boxsel3');
model.mesh('mesh1').create('cpd1', 'CopyDomain');
model.mesh('mesh1').feature('cpd1').selection('source').geom(3);
model.mesh('mesh1').feature('cpd1').selection('destination').geom(3);
model.mesh('mesh1').feature('cpd1').selection('source').named('geom1_boxsel1');
model.mesh('mesh1').feature('cpd1').selection('destination').named('geom1_boxsel2');

model.param('par2').set('Vfrac', '0.5');
model.param('par2').descr('Vfrac', 'Volume fraction');
model.param('par2').set('simpP', '1');
model.param('par2').descr('simpP', 'SIMP exponent');
model.param('par2').set('proj_beta', '1');
model.param('par2').descr('proj_beta', 'Projection slope');

model.common('dtopo1').selection.named('geom1_difsel1');
model.common('dtopo1').set('filterLengthType', 'Custom');
model.common('dtopo1').set('L_min', 'meshsz');
model.common('dtopo1').set('projectionType', 'TanhProjection');
model.common('dtopo1').set('beta', 'proj_beta');
model.common('dtopo1').set('simpExponentType', 'Custom');
model.common('dtopo1').set('p_SIMP', 'simpP');
model.common('dtopo1').set('discretization', 'constant');
model.common('dtopo1').set('theta_0', 'Vfrac');
model.common.create('ftopom1', 'MaterialTopologyDomain', 'comp1');
model.common('ftopom1').selection.named('geom1_adjsel1');
model.common.create('ftopobm1', 'MaterialTopologyBoundary', 'comp1');
model.common('ftopobm1').selection.named('geom1_cylsel9');
model.common.create('mtopo1', 'MirrorTopology', 'comp1');
model.common('mtopo1').selection.named('geom1_boxsel4');

model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').setSolveFor('/common/mtopo1', false);
model.study('std1').feature('stat').set('disabledcommon', {'mtopo1'});
model.study('std1').feature('stat').set('useloadcase', true);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 2);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 3);
model.study('std1').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std1').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 1);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 2);
model.study('std1').feature('stat').setIndex('constraintgroup', false, 0, 3);
model.study('std1').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', true, 0, 0);
model.study('std1').feature('stat').setIndex('constraintgroup', true, 0, 1);
model.study('std1').feature('stat').setIndex('constraintgroup', true, 0, 2);
model.study('std1').feature('stat').setIndex('constraintgroup', true, 0, 3);
model.study('std1').feature('topo').set('mmamaxiter', 50);
model.study('std1').feature('topo').setIndex('constraintExpression', 'comp1.dtopo1.theta_avg', 0);
model.study('std1').feature('topo').setIndex('constraintLbound', '', 0);
model.study('std1').feature('topo').setIndex('constraintLbound', '', 0);
model.study('std1').feature('topo').setIndex('constraintUbound', 'Vfrac', 0);
model.study('std1').label('One Load Case, No Symmetry');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('o1', 'Optimization');
model.sol('sol1').feature('o1').set('control', 'topo');
model.sol('sol1').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol1').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('o1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_dtopo1_theta_c' 'comp1_dtopo1_theta_f'});
model.sol('sol1').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol1').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').label('Optimization');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_dtopo1_theta_c'});
model.sol('sol1').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('o1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol1').feature('o1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('nlinnormuse', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol1').feature('o1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').label('Topology Optimization');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').placeAfter('plotgroup', 'pg1');
model.nodeGroup.move('grp1', 1);

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Output material volume factor');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Threshold');

model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');

model.result.dataset.create('filt1', 'Filter');
model.result.dataset('filt1').label('Filter');
model.result.dataset('filt1').set('data', 'dset1');
model.result.dataset('filt1').set('expr', 'dtopo1.theta');
model.result.dataset('filt1').set('lowerexpr', '0.5');
model.result.dataset('filt1').set('smooth', 'none');
model.result.dataset('filt1').set('useder', false);
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg2').feature('mslc1').set('rangecoloractive', true);
model.result('pg2').feature('mslc1').set('rangecolormin', 0);
model.result('pg2').feature('mslc1').set('rangecolormax', 1);
model.result('pg2').feature('mslc1').set('xnumber', '1');
model.result('pg2').feature('mslc1').set('ynumber', '1');
model.result('pg2').feature('mslc1').set('znumber', '1');
model.result('pg3').set('data', 'filt1');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', '1');
model.result('pg3').feature('vol1').set('coloring', 'uniform');
model.result('pg3').feature('vol1').set('color', 'gray');
model.result('pg3').feature('vol1').set('titletype', 'none');
model.result.export.create('plot1', 'Plot');
model.result.export('plot1').set('plotgroup', 'pg3');
model.result.export('plot1').label('Topology Optimized Geometry (STL)');
model.result.export('plot1').set('exporttype', 'stlbin');
model.result.export('plot1').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot2', 'Plot');
model.result.export('plot2').set('plotgroup', 'pg3');
model.result.export('plot2').label('Topology Optimized Geometry (PLY)');
model.result.export('plot2').set('exporttype', 'plybin');
model.result.export('plot2').set('filename', 'comp1_dtopo1.ply');
model.result('pg1').run;

model.study('std1').feature('topo').set('plot', true);
model.study('std1').feature('topo').set('plotgroup', 'pg3');
model.study('std1').setGenPlots(false);
model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'D1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'D1', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'D2', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'D2', 1);
model.study('std1').feature('param').setIndex('plistarr', '', 1);
model.study('std1').feature('param').setIndex('punit', 'm', 1);
model.study('std1').feature('param').setIndex('pname', 'simpP', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 2 3 4', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'proj_beta', 1);
model.study('std1').feature('param').setIndex('plistarr', '2 4 6 8', 1);
model.study('std1').feature('param').setIndex('punit', '', 1);
model.study('std1').feature('param').set('reusesol', true);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('o1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('o1', 'Optimization');
model.sol('sol1').feature('o1').set('control', 'topo');
model.sol('sol1').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol1').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('o1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_dtopo1_theta_c' 'comp1_dtopo1_theta_f'});
model.sol('sol1').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol1').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss1').label('Optimization');
model.sol('sol1').feature('o1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_dtopo1_theta_c'});
model.sol('sol1').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('o1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('o1').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol1').feature('o1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('nlinnormuse', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol1').feature('o1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'simpP' 'proj_beta'});
model.batch('p1').set('plistarr', {'1 2 3 4' '2 4 6 8'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result('pg1').run;

model.study('std1').feature('topo').set('probewindow', '');

model.nodeGroup('grp1').label('One Load Case');

model.result('pg1').run;

model.nodeGroup('grp1').add('plotgroup', 'pg1');

model.result('pg3').run;
model.result('pg3').run;

model.physics('solid').feature.duplicate('bndl2', 'bndl1');
model.physics('solid').feature('bndl2').selection.named('geom1_unisel2');

model.group.create('lg2', 'LoadGroup');

model.physics('solid').feature('bndl2').set('loadGroup', 'lg2');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').set('useloadcase', true);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 3);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 0, 3);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 3);
model.study('std2').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std2').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', false, 1, 3);
model.study('std2').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 0, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 0, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 0, 3);
model.study('std2').feature('stat').setIndex('loadgroup', true, 1, 1);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 1, 0);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 1, 2);
model.study('std2').feature('stat').setIndex('constraintgroup', true, 1, 3);
model.study('std2').label('Two Load Cases');

model.sol.create('sol7');
model.sol('sol7').study('std2');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'stat');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol7').feature('v1').set('control', 'stat');
model.sol('sol7').create('s1', 'Stationary');
model.sol('sol7').feature('s1').create('p1', 'Parametric');
model.sol('sol7').feature('s1').feature.remove('pDef');
model.sol('sol7').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol7').feature('s1').set('control', 'stat');
model.sol('sol7').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('s1').create('se1', 'Segregated');
model.sol('sol7').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol7').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_dtopo1_theta_c' 'comp1_dtopo1_theta_f'});
model.sol('sol7').feature('s1').create('i1', 'Iterative');
model.sol('sol7').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol7').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol7').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol7').feature('s1').feature('se1').feature('ss1').label('Optimization');
model.sol('sol7').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_dtopo1_theta_c'});
model.sol('sol7').feature('s1').create('d1', 'Direct');
model.sol('sol7').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol7').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol7').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol7').feature('s1').create('i2', 'Iterative');
model.sol('sol7').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol7').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol7').feature('s1').feature('i2').set('nlinnormuse', true);
model.sol('sol7').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol7').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('s1').feature.remove('fcDef');
model.sol('sol7').attach('std2');
model.sol('sol7').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 2, 0);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid) 1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').label('Topology Optimization');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').placeAfter('plotgroup', 'pg4');
model.nodeGroup.move('grp2', 2);

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Output material volume factor 1');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Threshold 1');

model.nodeGroup('grp2').add('plotgroup', 'pg5');
model.nodeGroup('grp2').add('plotgroup', 'pg6');

model.result.dataset.create('filt2', 'Filter');
model.result.dataset('filt2').label('Filter 1');
model.result.dataset('filt2').set('data', 'dset3');
model.result.dataset('filt2').set('expr', 'dtopo1.theta');
model.result.dataset('filt2').set('lowerexpr', '0.5');
model.result.dataset('filt2').set('smooth', 'none');
model.result.dataset('filt2').set('useder', false);
model.result('pg5').set('data', 'dset3');
model.result('pg5').create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg5').feature('mslc1').set('rangecoloractive', true);
model.result('pg5').feature('mslc1').set('rangecolormin', 0);
model.result('pg5').feature('mslc1').set('rangecolormax', 1);
model.result('pg5').feature('mslc1').set('xnumber', '1');
model.result('pg5').feature('mslc1').set('ynumber', '1');
model.result('pg5').feature('mslc1').set('znumber', '1');
model.result('pg6').set('data', 'filt2');
model.result('pg6').create('vol1', 'Volume');
model.result('pg6').feature('vol1').set('expr', '1');
model.result('pg6').feature('vol1').set('coloring', 'uniform');
model.result('pg6').feature('vol1').set('color', 'gray');
model.result('pg6').feature('vol1').set('titletype', 'none');
model.result.export.create('plot3', 'Plot');
model.result.export('plot3').set('plotgroup', 'pg6');
model.result.export('plot3').label('Topology Optimized Geometry (STL) 1');
model.result.export('plot3').set('exporttype', 'stlbin');
model.result.export('plot3').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot4', 'Plot');
model.result.export('plot4').set('plotgroup', 'pg6');
model.result.export('plot4').label('Topology Optimized Geometry (PLY) 1');
model.result.export('plot4').set('exporttype', 'plybin');
model.result.export('plot4').set('filename', 'comp1_dtopo1.ply');
model.result('pg4').run;

model.study('std2').feature.copy('param1', 'std1/param');
model.study('std2').feature.copy('topo1', 'std1/topo');
model.study('std2').feature('topo1').setIndex('optobj', 'comp1.solid.Ws_tot/4', 0);
model.study('std2').feature('topo1').setIndex('descr', '', 0);
model.study('std2').feature('topo1').set('plotgroup', 'pg6');
model.study('std2').setGenPlots(false);

model.sol('sol7').study('std2');
model.sol('sol7').feature.remove('s1');
model.sol('sol7').feature.remove('v1');
model.sol('sol7').feature.remove('st1');
model.sol('sol7').create('st1', 'StudyStep');
model.sol('sol7').feature('st1').set('study', 'std2');
model.sol('sol7').feature('st1').set('studystep', 'stat');
model.sol('sol7').create('v1', 'Variables');
model.sol('sol7').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol7').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol7').feature('v1').set('control', 'stat');
model.sol('sol7').create('o1', 'Optimization');
model.sol('sol7').feature('o1').set('control', 'topo1');
model.sol('sol7').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol7').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol7').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol7').feature('o1').feature('s1').create('se1', 'Segregated');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol7').feature('o1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_dtopo1_theta_c' 'comp1_dtopo1_theta_f'});
model.sol('sol7').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol7').feature('o1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol7').feature('o1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol7').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol7').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss1').label('Optimization');
model.sol('sol7').feature('o1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_dtopo1_theta_c'});
model.sol('sol7').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol7').feature('o1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol7').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol7').feature('o1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol7').feature('o1').feature('s1').create('i2', 'Iterative');
model.sol('sol7').feature('o1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol7').feature('o1').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol7').feature('o1').feature('s1').feature('i2').set('nlinnormuse', true);
model.sol('sol7').feature('o1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol7').feature('o1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol7').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol7').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol7').feature('o1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol7').feature('o1').feature('s1').feature('se1').set('segterm', 'iter');
model.sol('sol7').feature('o1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol7').feature('o1').feature('s1').feature('pDef').set('plooporder', 'manual');

model.batch.create('p2', 'Parametric');
model.batch('p2').study('std2');
model.batch('p2').create('so1', 'Solutionseq');
model.batch('p2').feature('so1').set('seq', 'sol7');
model.batch('p2').feature('so1').set('store', 'on');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').feature('so1').set('psol', 'none');
model.batch('p2').set('pname', {'simpP' 'proj_beta'});
model.batch('p2').set('plistarr', {'1 2 3 4' '2 4 6 8'});
model.batch('p2').set('sweeptype', 'sparse');
model.batch('p2').set('probesel', 'all');
model.batch('p2').set('probes', {});
model.batch('p2').set('plot', 'off');
model.batch('p2').set('err', 'on');
model.batch('p2').attach('std2');
model.batch('p2').feature('so1').set('clear', 'on');
model.batch('p2').set('control', 'param1');

model.sol.create('sol8');
model.sol('sol8').study('std2');
model.sol('sol8').label('Parametric Solutions 2');

model.batch('p2').feature('so1').set('psol', 'sol8');
model.batch('p2').run('compute');

model.result('pg4').run;

model.study('std2').feature('topo1').set('probewindow', '');

model.nodeGroup('grp2').label('Two Load Cases');

model.result('pg4').run;

model.nodeGroup('grp2').add('plotgroup', 'pg4');

model.result('pg6').run;
model.result('pg6').run;

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').feature('size').set('hmax', 'meshsz/2');
model.mesh('mesh2').feature('size').set('hmin', 'meshsz/4');
model.mesh('mesh2').run;

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/solid', false);
model.study('std3').label('Smooth Design (mesh2)');

model.sol.create('sol13');
model.sol('sol13').study('std3');
model.sol('sol13').create('st1', 'StudyStep');
model.sol('sol13').feature('st1').set('study', 'std3');
model.sol('sol13').feature('st1').set('studystep', 'stat');
model.sol('sol13').create('v1', 'Variables');
model.sol('sol13').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol13').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol13').feature('v1').set('control', 'stat');
model.sol('sol13').create('s1', 'Stationary');
model.sol('sol13').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol13').feature('s1').create('i1', 'Iterative');
model.sol('sol13').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol13').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol13').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol13').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol13').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol13').feature('s1').feature.remove('fcDef');
model.sol('sol13').attach('std3');

model.study('std3').feature('stat').set('useinitsol', true);
model.study('std3').feature('stat').set('initmethod', 'sol');
model.study('std3').feature('stat').set('initstudy', 'std2');

model.sol('sol13').study('std3');
model.sol('sol13').feature.remove('s1');
model.sol('sol13').feature.remove('v1');
model.sol('sol13').feature.remove('st1');
model.sol('sol13').create('st1', 'StudyStep');
model.sol('sol13').feature('st1').set('study', 'std3');
model.sol('sol13').feature('st1').set('studystep', 'stat');
model.sol('sol13').create('v1', 'Variables');
model.sol('sol13').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol13').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol13').feature('v1').set('control', 'stat');
model.sol('sol13').create('s1', 'Stationary');
model.sol('sol13').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol13').feature('s1').create('i1', 'Iterative');
model.sol('sol13').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol13').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with AMG) (opt)');
model.sol('sol13').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol13').feature('s1').feature('i1').feature('mg1').set('prefun', 'amg');
model.sol('sol13').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol13').feature('s1').feature.remove('fcDef');
model.sol('sol13').attach('std3');
model.sol('sol13').runAll;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').label('Topology Optimization');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup.move('grp3', 3);

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Output material volume factor 2');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Threshold 2');

model.nodeGroup('grp3').add('plotgroup', 'pg7');
model.nodeGroup('grp3').add('plotgroup', 'pg8');

model.result.dataset.create('filt3', 'Filter');
model.result.dataset('filt3').label('Filter 2');
model.result.dataset('filt3').set('data', 'dset5');
model.result.dataset('filt3').set('expr', 'dtopo1.theta');
model.result.dataset('filt3').set('lowerexpr', '0.5');
model.result.dataset('filt3').set('smooth', 'none');
model.result.dataset('filt3').set('useder', false);
model.result('pg7').set('data', 'dset5');
model.result('pg7').create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('expr', 'dtopo1.theta');
model.result('pg7').feature('mslc1').set('rangecoloractive', true);
model.result('pg7').feature('mslc1').set('rangecolormin', 0);
model.result('pg7').feature('mslc1').set('rangecolormax', 1);
model.result('pg7').feature('mslc1').set('xnumber', '1');
model.result('pg7').feature('mslc1').set('ynumber', '1');
model.result('pg7').feature('mslc1').set('znumber', '1');
model.result('pg8').set('data', 'filt3');
model.result('pg8').create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('expr', '1');
model.result('pg8').feature('vol1').set('coloring', 'uniform');
model.result('pg8').feature('vol1').set('color', 'gray');
model.result('pg8').feature('vol1').set('titletype', 'none');
model.result.export.create('plot5', 'Plot');
model.result.export('plot5').set('plotgroup', 'pg8');
model.result.export('plot5').label('Topology Optimized Geometry (STL) 2');
model.result.export('plot5').set('exporttype', 'stlbin');
model.result.export('plot5').set('filename', 'comp1_dtopo1.stl');
model.result.export.create('plot6', 'Plot');
model.result.export('plot6').set('plotgroup', 'pg8');
model.result.export('plot6').label('Topology Optimized Geometry (PLY) 2');
model.result.export('plot6').set('exporttype', 'plybin');
model.result.export('plot6').set('filename', 'comp1_dtopo1.ply');
model.result('pg7').run;
model.result.dataset('filt3').createMesh('comp2', 'geom2', 'mesh3', 'imp1');

model.mesh('mesh3').feature('imp1').set('facepartition', 'minimal');
model.mesh('mesh3').feature('imp1').importData;
model.mesh('mesh3').create('ada1', 'Adapt');
model.mesh('mesh3').feature('ada1').set('method', 'modify');
model.mesh('mesh3').feature('ada1').selection.geom('geom2', 2);
model.mesh('mesh3').feature('ada1').selection.all;
model.mesh('mesh3').feature('ada1').set('solution', 'none');
model.mesh('mesh3').feature('ada1').set('exprtype', 'size');
model.mesh('mesh3').feature('ada1').set('sizeexpr', 'meshsz');
model.mesh('mesh3').feature('ada1').set('maxrefinement', 10);
model.mesh('mesh3').feature('ada1').set('maxcoarsening', 10);
model.mesh('mesh3').run('ada1');
model.mesh('mesh3').create('ftet1', 'FreeTet');
model.mesh('mesh3').feature('ftet1').feature('size').set('hauto', 1);
model.mesh('mesh3').run;

model.material.create('matlnk1', 'Link', 'comp2');

model.physics.copy('solid2', 'solid', 'comp2');
model.physics('solid2').prop('ShapeProperty').set('order_displacement', '2s');
model.physics('solid2').feature('fix1').selection.named('mesh3_imp1_geom1_cylsel1');
model.physics('solid2').feature('fix2').selection.named('mesh3_imp1_geom1_cylsel2');
model.physics('solid2').feature('fix3').selection.named('mesh3_imp1_geom1_cylsel3');
model.physics('solid2').feature('fix4').selection.named('mesh3_imp1_geom1_cylsel4');
model.physics('solid2').feature('bndl1').selection.named('mesh3_imp1_geom1_unisel1');
model.physics('solid2').feature('bndl1').set('FperArea', {'0' '0' 'comp1.load(-P0,Y-YC,Z)'});
model.physics('solid2').feature('bndl2').selection.named('mesh3_imp1_geom1_unisel2');
model.physics('solid2').feature('bndl2').set('FperArea', {'0' '0' 'comp1.load(-P0,Y-YC,Z)'});

model.study.create('std4');
model.study('std4').label('Verification');
model.study('std4').setGenPlots(false);
model.study('std1').feature('stat').setSolveFor('/physics/solid2', false);
model.study('std3').feature('stat').setEntry('activate', 'solid2', false);
model.study('std2').feature('stat').setEntry('activate', 'solid2', false);
model.study('std4').feature.copy('stat1', 'std2/stat');
model.study('std4').feature('stat1').setEntry('activate', 'solid2', true);
model.study('std4').feature('stat1').setEntry('activate', 'comp1:topopt', false);

model.sol.create('sol14');
model.sol('sol14').study('std4');
model.sol('sol14').create('st1', 'StudyStep');
model.sol('sol14').feature('st1').set('study', 'std4');
model.sol('sol14').feature('st1').set('studystep', 'stat1');
model.sol('sol14').create('v1', 'Variables');
model.sol('sol14').feature('v1').set('control', 'stat1');
model.sol('sol14').create('s1', 'Stationary');
model.sol('sol14').feature('s1').create('p1', 'Parametric');
model.sol('sol14').feature('s1').feature.remove('pDef');
model.sol('sol14').feature('s1').feature('p1').set('control', 'stat1');
model.sol('sol14').feature('s1').set('control', 'stat1');
model.sol('sol14').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol14').feature('s1').create('se1', 'Segregated');
model.sol('sol14').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol14').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol14').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_u'});
model.sol('sol14').feature('s1').create('d1', 'Direct');
model.sol('sol14').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol14').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol14').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol14').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol14').feature('s1').feature('se1').feature('ss1').label('Solid Mechanics');
model.sol('sol14').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol14').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp2_u'});
model.sol('sol14').feature('s1').create('d2', 'Direct');
model.sol('sol14').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol14').feature('s1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol14').feature('s1').feature('d2').label('Suggested Direct Solver (solid2)');
model.sol('sol14').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol14').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics (2)');
model.sol('sol14').feature('s1').create('i1', 'Iterative');
model.sol('sol14').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol14').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol14').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol14').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with SA AMG) (solid)');
model.sol('sol14').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol14').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol14').feature('s1').create('i2', 'Iterative');
model.sol('sol14').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol14').feature('s1').feature('i2').set('rhob', 400);
model.sol('sol14').feature('s1').feature('i2').set('nlinnormuse', true);
model.sol('sol14').feature('s1').feature('i2').label('Suggested Iterative Solver (solid2)');
model.sol('sol14').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol14').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol14').feature('s1').feature.remove('fcDef');
model.sol('sol14').attach('std4');
model.sol('sol14').runAll;

model.nodeGroup.remove('grp3');

model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Displacement (solid2)');
model.result('pg7').set('data', 'dset7');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').create('def1', 'Deform');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').run;

model.title(['Bracket ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Topology Optimization']);

model.description('This example shows how to perform a topology optimization with several load and constraint cases. The density feature for topology optimization is used together with a parametric sweep where each optimized solution is used as input for a further improved optimization. The final optimized geometry is exported and then imported for a verification analysis in which the now void regions are excluded.');

model.mesh('mesh1').clearMesh;
model.mesh('mesh2').clearMesh;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;

model.label('bracket_topology_optimization_stl.mph');

model.modelNode.label('Components');

out = model;
