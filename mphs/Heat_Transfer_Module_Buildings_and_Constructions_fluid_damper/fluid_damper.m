function out = model
%
% fluid_damper.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Buildings_and_Constructions');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 2);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/nitf1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Dr', '2.83e-2[m]', 'Rod diameter');
model.param.set('Dp', '8.37e-2[m]', 'Piston diameter');
model.param.set('Lp', '0.0254[m]', 'Piston half-length');
model.param.set('Dd', '0.1128[m]', 'Damper outer diameter');
model.param.set('Hw', '1.37e-2[m]', 'Damper wall thickness');
model.param.set('Ld', 'U0+Lp', 'Damper seal position');
model.param.set('U0', '0.1524[m]', 'Damper chamber height');
model.param.set('T0', '300[K]', 'Initial temperature');
model.param.set('hwall', '5[W/(m^2*K)]', 'Heat transfer coefficient');
model.param.set('a0', 'U0-Lp', 'Piston displacement amplitude');
model.param.set('f', '0.4[Hz]', 'Frequency');
model.param.set('ncycle', '16', 'Number of loading cycles');
model.param.set('tmax', 'ncycle/f', 'Total loading time');
model.param.set('tstep', '0.1/f', 'Sampling time interval');

model.func.create('an1', 'Analytic');
model.func('an1').set('expr', 'a0*sin(2*pi*f*t)');
model.func('an1').set('args', 't');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').set('fununit', 'm');
model.func('an1').setIndex('plotargs', 40, 0, 2);
model.func('an1').set('funcname', 'zp');
model.func('an1').label('Piston Displacement');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('zlin1', 'zp(t)*(1+(Lp+Z)/(Ld-Lp))', 'Mesh deformation below piston');
model.variable('var1').set('zlin2', 'zp(t)*(Ld-Z)/(Ld-Lp)', 'Mesh deformation above piston');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'Dr/2' '2*Ld'});
model.geom('geom1').feature('r1').set('pos', {'0' '-Ld'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'Dp/2' '2*Ld'});
model.geom('geom1').feature('r2').set('pos', {'0' '-Ld'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'Dd/2-Hw' '2*Ld'});
model.geom('geom1').feature('r3').set('pos', {'0' '-Ld'});
model.geom('geom1').run('r3');
model.geom('geom1').create('r4', 'Rectangle');
model.geom('geom1').feature('r4').set('size', {'Dd/2' '2*Ld'});
model.geom('geom1').feature('r4').set('pos', {'0' '-Ld'});
model.geom('geom1').run('r4');
model.geom('geom1').create('r5', 'Rectangle');
model.geom('geom1').feature('r5').set('size', {'Dd/2' '2*Lp'});
model.geom('geom1').feature('r5').set('pos', {'0' '-Lp'});
model.geom('geom1').run('fin');

model.physics('spf').selection.set([4 6 7 8 9]);
model.physics('ht').feature('fluid1').selection.set([4 6 7 8 9]);
model.physics('ht').feature('fluid1').set('fluidType', 'gasLiquid');
model.physics('ht').feature('fluid1').set('gamma_not_IG_mat', 'userdef');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Silicone Oil');
model.material('mat2').selection.set([4 6 7 8 9]);
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').set('nu_25C', {'0.0125[m^2/s]'});
model.material('mat2').propertyGroup('def').set('VTC', {'0.6[1]'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'22.5'});
model.material('mat2').propertyGroup('def').set('density', {'950'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'2e3'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', {'nu_25C*rho*(1-VTC*(T-311[K])/(61[K]))/(1+VTC*0.2107)'});

model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([2 7 9 14 16 21 23 28]);
model.physics('ht').feature('temp1').set('T0', 'T0');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 1);
model.physics('ht').feature('hf1').selection.set([29 30 31]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 'hwall');
model.physics('ht').feature('hf1').set('Text', 'T0');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'Incompressible');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([12]);
model.physics('spf').create('wallbc2', 'WallBC', 1);
model.physics('spf').feature('wallbc2').selection.set([22 24 26]);
model.physics('spf').feature('wallbc2').set('TranslationalVelocityOption', 'Manual');

model.common.create('pres1', 'PrescribedDeformation', 'comp1');
model.common('pres1').selection.all;
model.common('pres1').set('prescribedDeformation', {'0' '0' 'zp(t)'});
model.common('pres1').selection.set([2 5 8 11]);
model.common.create('pres2', 'PrescribedDeformation', 'comp1');
model.common('pres2').set('prescribedDeformation', {'0' '0' 'zlin1'});
model.common('pres2').selection.set([1 4 7 10]);
model.common.create('pres3', 'PrescribedDeformation', 'comp1');
model.common('pres3').set('prescribedDeformation', {'0' '0' 'zlin2'});
model.common('pres3').selection.set([3 6 9 12]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([23 25 27 28]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 4);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 4);
model.mesh('mesh1').feature('map1').feature('dis1').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis1').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([1 5 8 12 15 19 22 26 29 31]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 32);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 8);
model.mesh('mesh1').feature('map1').feature('dis2').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis2').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([9 11 13 14]);
model.mesh('mesh1').feature('map1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis3').set('elemcount', 30);
model.mesh('mesh1').feature('map1').feature('dis3').set('elemratio', 10);
model.mesh('mesh1').feature('map1').feature('dis3').set('growthrate', 'exponential');
model.mesh('mesh1').feature('map1').feature('dis3').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([16 18 20 21]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 8);
model.mesh('mesh1').feature('map1').create('dis5', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis5').selection.set([3 10 17 24 30]);
model.mesh('mesh1').feature('map1').feature('dis5').set('numelem', 32);
model.mesh('mesh1').feature('map1').create('dis6', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis6').selection.set([2 4 6 7]);
model.mesh('mesh1').run;

model.probe.create('pdom1', 'DomainPoint');
model.probe('pdom1').model('comp1');
model.probe('pdom1').setIndex('coords2', 'Dd/2-Hw', 0);
model.probe('pdom1').setIndex('coords2', 'U0', 1);
model.probe('pdom1').feature('ppb1').set('probename', 'temppr');
model.probe('pdom1').feature('ppb1').set('unit', 'degF');

model.study('std1').feature('time').set('tlist', 'range(0,tstep,(ncycle-1)/f) range((ncycle-1)/f,tstep/2,tmax)');
model.study('std1').feature('time').set('probefreq', 'tout');

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([4 6 7 8 9]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,tstep,(ncycle-1)/f) range((ncycle-1)/f,tstep/2,tmax)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'pdom1'});
model.sol('sol1').feature('t1').set('probefreq', 'tout');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_nitf1_Uave' 'global' 'comp1_p' 'scaled' 'comp1_T' 'global' 'comp1_u' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_nitf1_Uave' '1e-3' 'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_nitf1_Uave' 'factor' 'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_nitf1_Uave' '0.1' 'comp1_p' '1' 'comp1_T' '0.1' 'comp1_u' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.7);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.probe('pdom1').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('dataisaxisym', 'off');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 172, 0);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Velocity (spf)');
model.result('pg3').set('dataisaxisym', 'off');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 172, 0);
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf.U');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Pressure (spf)');
model.result('pg4').set('dataisaxisym', 'off');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 172, 0);
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').label('Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('expr', 'p');
model.result('pg4').feature('con1').set('number', 40);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').label('Revolution 2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Velocity, 3D (spf)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').set('data', 'rev1');
model.result('pg5').setIndex('looplevel', 172, 0);
model.result('pg5').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Surface');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('expr', 'spf.U');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Temperature and Fluid Flow (nitf1)');
model.result('pg6').set('dataisaxisym', 'off');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 172, 0);
model.result('pg6').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond4/pcond4/pcond1/pg2');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Fluid Temperature');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('solutionparams', 'parent');
model.result('pg6').feature('surf1').set('expr', 'nitf1.T');
model.result('pg6').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result('pg6').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf1').feature('sel1').selection.set([4 6 7 8 9]);
model.result('pg6').feature.create('surf2', 'Surface');
model.result('pg6').feature('surf2').label('Solid Temperature');
model.result('pg6').feature('surf2').set('showsolutionparams', 'on');
model.result('pg6').feature('surf2').set('solutionparams', 'parent');
model.result('pg6').feature('surf2').set('expr', 'nitf1.T');
model.result('pg6').feature('surf2').set('smooth', 'internal');
model.result('pg6').feature('surf2').set('showsolutionparams', 'on');
model.result('pg6').feature('surf2').set('data', 'parent');
model.result('pg6').feature('surf2').feature.create('sel1', 'Selection');
model.result('pg6').feature('surf2').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf2').feature('sel1').selection.set([1 2 3 5 10 11 12]);
model.result('pg6').feature('surf2').set('inheritplot', 'surf1');
model.result('pg6').feature.create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').label('Fluid Flow');
model.result('pg6').feature('arws1').set('showsolutionparams', 'on');
model.result('pg6').feature('arws1').set('solutionparams', 'parent');
model.result('pg6').feature('arws1').set('expr', {'nitf1.ur' 'nitf1.uz'});
model.result('pg6').feature('arws1').set('xnumber', 30);
model.result('pg6').feature('arws1').set('ynumber', 30);
model.result('pg6').feature('arws1').set('arrowtype', 'cone');
model.result('pg6').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('arws1').set('showsolutionparams', 'on');
model.result('pg6').feature('arws1').set('data', 'parent');
model.result('pg6').feature('arws1').feature.create('col1', 'Color');
model.result('pg6').feature('arws1').feature('col1').set('showcolordata', 'off');
model.result('pg6').feature('arws1').feature('col1').set('expr', 'spf.U');
model.result('pg6').feature('arws1').feature.create('filt1', 'Filter');
model.result('pg6').feature('arws1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 172, 0);
model.result('pg7').label('Moving Mesh');
model.result('pg7').create('mesh1', 'Mesh');
model.result('pg7').feature('mesh1').set('meshdomain', 'surface');
model.result('pg7').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg7').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg7').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg7').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg7').feature('mesh1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12]);
model.result('pg7').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg7').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg7').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('unit', 'degF');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('surf1').set('unit', 'degF');
model.result('pg6').run;
model.result('pg6').feature('surf2').set('unit', 'degF');
model.result.dataset.create('cpl1', 'CutPlane');
model.result.dataset('cpl1').set('planetype', 'general');
model.result.dataset('cpl1').set('genmethod', 'pointnormal');
model.result.dataset('cpl1').set('genpnvec', [1 0 0]);
model.result.dataset.duplicate('cpl2', 'cpl1');
model.result.dataset('cpl2').set('genpnvec', [1 1 0]);
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').set('defaultPlotIDs', {'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg2|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg3|ht' 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg4|ht'});
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').label('Temperature (ht) 1');
model.result('pg8').set('data', 'rev2');
model.result('pg8').setIndex('looplevel', 172, 0);
model.result('pg8').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pcond2/pg2');
model.result('pg8').feature.create('vol1', 'Volume');
model.result('pg8').feature('vol1').set('solutionparams', 'parent');
model.result('pg8').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg8').feature('vol1').set('smooth', 'internal');
model.result('pg8').feature('vol1').set('showsolutionparams', 'on');
model.result('pg8').feature('vol1').set('data', 'parent');
model.result('pg8').label('Temperature (ht) 1');
model.result('pg8').run;
model.result('pg8').label('Temperature and Velocity Streamlines');
model.result('pg8').create('str1', 'StreamlineSurface');
model.result('pg8').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg8').run;
model.result('pg8').feature('vol1').set('unit', 'degF');
model.result('pg8').run;
model.result('pg8').feature('str1').set('data', 'cpl1');
model.result('pg8').feature('str1').set('solutionparams', 'parent');
model.result('pg8').feature('str1').set('expr', {'u' 'v' 'w'});
model.result('pg8').feature('str1').set('descr', 'Velocity field (spatial frame)');
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('udist', 0.025);
model.result('pg8').feature('str1').set('color', 'black');
model.result('pg8').feature.duplicate('str2', 'str1');
model.result('pg8').run;
model.result('pg8').feature('str2').set('data', 'cpl2');
model.result('pg8').feature('str2').set('titletype', 'none');
model.result('pg8').run;
model.result('pg1').set('window', 'window2');
model.result('pg1').set('windowtitle', 'Probe Plot 2');
model.result('pg1').run;
model.result('pg1').label('Inner Wall Temperature at End-of-Stroke Position');
model.result('pg1').set('showlegends', false);
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Temperature Along Inner Wall');
model.result('pg9').create('lngr1', 'LineGraph');
model.result('pg9').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg9').feature('lngr1').set('linewidth', 'preference');
model.result('pg9').feature('lngr1').set('expr', 'z/U0');
model.result('pg9').feature('lngr1').set('xdata', 'expr');
model.result('pg9').feature('lngr1').set('xdataunit', 'degF');
model.result('pg9').feature('lngr1').selection.set([22 24 26]);
model.result('pg9').feature('lngr1').set('legend', true);
model.result('pg9').run;
model.result('pg9').set('titletype', 'manual');
model.result('pg9').set('title', 'Temperature along inner wall');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Adimensional height (1)');
model.result('pg9').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').setIndex('looplevel', [41 172], 0);
model.result('pg9').run;
model.result.numerical.create('av1', 'AvSurface');
model.result.numerical('av1').set('intvolume', true);
model.result.numerical('av1').selection.set([4 6 7 8 9]);
model.result.numerical('av1').setIndex('looplevelinput', 'manual', 0);
model.result.numerical('av1').setIndex('looplevel', [162 163 164 165 166 167 168 169 170 171 172], 0);
model.result.numerical('av1').setIndex('expr', 'spf.U', 0);
model.result.numerical('av1').setIndex('unit', 'm/s', 0);
model.result.numerical('av1').setIndex('descr', 'Velocity magnitude', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Surface Average 1');
model.result.numerical('av1').set('table', 'tbl2');
model.result.numerical('av1').setResult;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Average Velocity Over the Last Cycle');
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Temperature along inner wall');
model.result('pg10').create('tblp1', 'Table');
model.result('pg10').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg10').feature('tblp1').set('linewidth', 'preference');
model.result('pg10').feature('tblp1').set('table', 'tbl2');
model.result('pg10').run;
model.result('pg8').run;

model.title('Viscous Heating in a Fluid Damper');

model.description('Fluid dampers have wide applications in, for example, military devices for shock isolation and civil structures for suppressing earthquake-induced shaking and wind-induced vibrations. A fluid damper works by dissipating mechanical energy into heat. This example models the viscous heating and consequent temperature increase in the damping fluid and solid damper parts. The model makes use of a moving mesh to represent large-amplitude motion inside the damper. The simulation results are in good agreement with experimental data.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('fluid_damper.mph');

model.modelNode.label('Components');

out = model;
