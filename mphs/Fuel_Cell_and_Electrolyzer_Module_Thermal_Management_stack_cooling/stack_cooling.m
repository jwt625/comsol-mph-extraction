function out = model
%
% stack_cooling.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Thermal_Management');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');
model.physics.create('dl', 'PorousMediaFlowDarcy', 'geom1');
model.physics('dl').model('comp1');
model.physics.create('ht', 'PorousMediaHeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').feature('cdi').setSolveFor('/physics/dl', true);
model.study('std1').feature('cdi').setSolveFor('/physics/ht', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);
model.study('std1').feature('stat').setSolveFor('/physics/dl', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.geom('geom1').insertFile('stack_cooling_geom_sequence.mph', 'geom1');
model.geom('geom1').run('adjsel1');

model.param.label('Geometry Parameters');
model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('kappa_GDL_TP', '0.3[W/m/K]', 'GDL thru-plane thermal conductivity');
model.param('par2').set('kappa_GDL_IP', '3[W/m/K]', 'GDL in-plane thermal conductivity');
model.param('par2').set('kappa_BPP_eff', '4.5[W/m/K]', 'Effective thermal conductivity, bipolar plate');
model.param('par2').set('E_cell_avg', 'E_cell_avg_start', 'Average cell voltage');
model.param('par2').set('E_stack', 'N_cells*E_cell_avg', 'Stack voltage');
model.param('par2').set('perm_gas_BPP', '5e-9[m^2]', 'Effective permeability, bipolar plate');
model.param('par2').set('i0_H2_ref', '1e2[A/m^2]', 'Exchange current density, hydrogen oxidation');
model.param('par2').set('i0_O2_ref', '1e-4[A/m^2]', 'Exchange current density, oxygen reduction');
model.param('par2').set('a_CL', '5e7[m^2/m^3]', 'Specific area, catalytic layers');
model.param('par2').set('sigmas_GDL', '200[S/m]', 'Electric conductivity, gas diffusion layers');
model.param('par2').set('kappag_GDL', '5e-12[m^2]', 'Gas permeability, gas diffusion layers');
model.param('par2').set('alphaa_O2', '3', 'Anodic transfer coefficient, oxygen reduction');
model.param('par2').set('epsg_GDL', '1-epss_GDL', 'Gas phase volume fraction, gas diffusion layers');
model.param('par2').set('epss_GDL', '0.4', 'Solid phase volume fraction, gas diffusion layers');
model.param('par2').set('L_CL', '10[um]', 'Catalytic layer thickness');
model.param('par2').set('E_cell_avg_start', '0.85[V]', 'Initial average cell voltage in auxiliary sweep');
model.param('par2').set('T_in', '60[degC]', 'Inlet temperature');
model.param('par2').set('p_in_cath', '80[mbar]', 'Inlet gas pressure, cathode side');
model.param('par2').set('p_in_an', '20[mbar]', 'Inlet gas pressure, anode side');
model.param('par2').set('perm_cool_BPP', '1e-8[m^2]', 'Cooling liquid permeability, bipolar plate');
model.param('par2').set('eps_gas_BPP', '0.45', 'Gas volume fraction in bipolar plate');
model.param('par2').set('eps_l_BPP', '0.45', 'Cooling liquid volume fraction in bipolar plate');
model.param('par2').set('sigma_BPP_eff', '1e3[S/m]', 'Effective electric conductivity, bipolar plate');
model.param('par2').set('v_cool_in', '10[cm/s]', 'Cooling liquid inlet velocity');
model.param('par2').set('D_stack', 'D_cell*N_cells+D_cc*2+D_bpp*2', 'Stack thickness');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').label('Steel AISI 4340');
model.material('mat1').set('family', 'steel');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat3').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat3').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat3').label('Nafion, EW 1100, Vapor Equilibrated, Protonated');
model.material('mat3').set('family', 'glass');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat3').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat3').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat3').propertyGroup('def').descr('lambda', '');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat3').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat3').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat3').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat3').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat3').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat3').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat3').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat3').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat3').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat3').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat3').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat3').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat3').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat3').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat3').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat3').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat3').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat3').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat3').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat3').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat3').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat3').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat3').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat3').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat3').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');
model.material('mat1').selection.named('geom1_unisel11');
model.material('mat2').selection.named('geom1_unisel10');
model.material('mat3').selection.named('geom1_unisel7');

model.physics('fc').prop('H2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('MembraneTransport').set('H2O_mem', true);
model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('geom1_unisel7');
model.physics('fc').feature('mem1').feature('init1').set('T0', 'T_in');
model.physics('fc').feature('mem1').feature('wadh2side1').set('ElectrolyteMaterial', 'mat3');
model.physics('fc').feature('mem1').feature('wado2side1').set('ElectrolyteMaterial', 'mat3');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl1').selection.named('geom1_ext7_dom');
model.physics('fc').feature('h2gdl1').set('sigmas', {'sigmas_GDL' '0' '0' '0' 'sigmas_GDL' '0' '0' '0' 'sigmas_GDL'});
model.physics('fc').feature('h2gdl1').set('epsg', 'epsg_GDL');
model.physics('fc').feature('h2gdl1').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl1').selection.named('geom1_ext13_dom');
model.physics('fc').feature('o2gdl1').set('sigmas', {'sigmas_GDL' '0' '0' '0' 'sigmas_GDL' '0' '0' '0' 'sigmas_GDL'});
model.physics('fc').feature('o2gdl1').set('epsg', 'epsg_GDL');
model.physics('fc').feature('o2gdl1').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').create('h2gdl2', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl2').label('H2 Gas Diffusion Layer 2 (manifolds)');
model.physics('fc').feature('h2gdl2').selection.named('geom1_ext3_dom');
model.physics('fc').feature('h2gdl2').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('h2gdl2').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('h2gdl2').set('kappag', {'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').create('o2gdl2', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl2').label('O2 Gas Diffusion Layer 2 (manifolds)');
model.physics('fc').feature('o2gdl2').selection.named('geom1_ext9_dom');
model.physics('fc').feature('o2gdl2').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('o2gdl2').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('o2gdl2').set('kappag', {'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').create('cc1', 'CurrentCollector', 3);
model.physics('fc').feature('cc1').label('Current Collector 1 (end blocks)');
model.physics('fc').feature('cc1').selection.named('geom1_unisel11');
model.physics('fc').feature('cc1').set('sigmas_mat', 'from_mat');
model.physics('fc').create('cc2', 'CurrentCollector', 3);
model.physics('fc').feature('cc2').label('Current Collector (with cooling flow)');
model.physics('fc').feature('cc2').selection.named('geom1_unisel14');
model.physics('fc').feature('cc2').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').create('th2gde1', 'ThinH2GasDiffusionElectrode', 2);
model.physics('fc').feature('th2gde1').selection.named('geom1_intsel1');
model.physics('fc').feature('th2gde1').set('d_gde', 'L_CL');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('i0_ref', 'i0_H2_ref');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Av', 'a_CL');
model.physics('fc').create('to2gde1', 'ThinO2GasDiffusionElectrode', 2);
model.physics('fc').feature('to2gde1').selection.named('geom1_intsel2');
model.physics('fc').feature('to2gde1').set('d_gde', 'L_CL');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('i0_ref', 'i0_O2_ref');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('alphaa', 'alphaa_O2');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Av', 'a_CL');
model.physics('fc').create('h2gdl3', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl3').label('H2 Gas Diffusion Layer 3 (x-directed channels)');
model.physics('fc').feature('h2gdl3').selection.named('geom1_ext5_dom');
model.physics('fc').feature('h2gdl3').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('h2gdl3').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('h2gdl3').set('kappag', {'perm_gas_BPP' '0' '0' '0' '0' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').create('h2gdl4', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl4').label('H2 Gas Diffusion Layer 4 (y-directed channels)');
model.physics('fc').feature('h2gdl4').selection.named('geom1_ext6_dom');
model.physics('fc').feature('h2gdl4').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('h2gdl4').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('h2gdl4').set('kappag', {'0' '0' '0' '0' 'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').create('o2gdl3', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl3').label('O2 Gas Diffusion Layer 3 (x-directed channels)');
model.physics('fc').feature('o2gdl3').selection.named('geom1_ext11_dom');
model.physics('fc').feature('o2gdl3').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('o2gdl3').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('o2gdl3').set('kappag', {'perm_gas_BPP' '0' '0' '0' '0' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').create('o2gdl4', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl4').label('O2 Gas Diffusion Layer 4 (y-directed channels)');
model.physics('fc').feature('o2gdl4').selection.named('geom1_ext12_dom');
model.physics('fc').feature('o2gdl4').set('sigmas', {'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff' '0' '0' '0' 'sigma_BPP_eff'});
model.physics('fc').feature('o2gdl4').set('epsg', 'eps_gas_BPP');
model.physics('fc').feature('o2gdl4').set('kappag', {'0' '0' '0' '0' 'perm_gas_BPP' '0' '0' '0' 'perm_gas_BPP'});
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.named('geom1_boxsel7');
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 2);
model.physics('fc').feature('ecph1').feature('pot1').selection.named('geom1_boxsel8');
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'E_stack');
model.physics('fc').feature('h2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedMixture');
model.physics('fc').feature('h2gasph1').feature('init1').set('T_hum', 'T_in');
model.physics('fc').feature('h2gasph1').feature('init1').set('pA_hum', '1[atm]+p_in_an');
model.physics('fc').feature('h2gasph1').feature('init1').set('pinit', 'p_in_an');
model.physics('fc').feature('h2gasph1').create('h2in1', 'H2Inlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2in1').selection.named('geom1_boxsel3');
model.physics('fc').feature('h2gasph1').create('h2out1', 'H2Outlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2out1').selection.named('geom1_boxsel4');
model.physics('fc').feature('o2gasph1').feature('init1').set('MixtureSpecification', 'HumidifiedAir');
model.physics('fc').feature('o2gasph1').feature('init1').set('T_hum', 'T_in');
model.physics('fc').feature('o2gasph1').feature('init1').set('pA_hum', '1[atm]+p_in_cath');
model.physics('fc').feature('o2gasph1').feature('init1').set('pinit', 'p_in_cath');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.named('geom1_boxsel5');
model.physics('fc').feature('o2gasph1').create('o2out1', 'O2Outlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2out1').selection.named('geom1_boxsel6');
model.physics('fc').prop('MassConsistentStabilization').set('StabilizationO2GasFlowChannels', false);
model.physics('fc').prop('MassConsistentStabilization').set('StabilizationH2GasFlowChannels', false);
model.physics('dl').selection.named('geom1_unisel10');
model.physics('dl').prop('ShapeProperty').set('order_pressure', 1);
model.physics('dl').feature('porous1').feature('pm1').set('epsilon_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('epsilon', 'eps_l_BPP');
model.physics('dl').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('dl').feature('porous1').feature('pm1').set('kappa', {'perm_cool_BPP' '0' '0' '0' 'perm_cool_BPP' '0' '0' '0' 'perm_cool_BPP'});
model.physics('dl').create('inl1', 'Inlet', 2);
model.physics('dl').feature('inl1').selection.named('geom1_boxsel1');
model.physics('dl').feature('inl1').set('U0in', 'v_cool_in');
model.physics('dl').create('out1', 'Outlet', 2);
model.physics('dl').feature('out1').selection.named('geom1_boxsel2');
model.physics('dl').feature('out1').set('BoundaryCondition', 'Pressure');
model.physics('ht').create('solid1', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid1').label('Solid 1 - Membranes');
model.physics('ht').feature('solid1').selection.named('geom1_unisel7');
model.physics('ht').feature('solid1').set('rho_mat', 'userdef');
model.physics('ht').feature('solid1').set('Cp_mat', 'userdef');
model.physics('ht').create('solid2', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid2').label('Solid 2 - GDLs');
model.physics('ht').feature('solid2').selection.named('geom1_unisel15');
model.physics('ht').feature('solid2').set('k_mat', 'userdef');
model.physics('ht').feature('solid2').set('k', {'kappa_GDL_IP' '0' '0' '0' 'kappa_GDL_IP' '0' '0' '0' 'kappa_GDL_TP'});
model.physics('ht').feature('solid2').set('rho_mat', 'userdef');
model.physics('ht').feature('solid2').set('Cp_mat', 'userdef');
model.physics('ht').create('solid3', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid3').label('Solid 3 - End Blocks');
model.physics('ht').feature('solid3').selection.named('geom1_unisel11');
model.physics('ht').create('solid4', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid4').label('Solid 4 - Gas Manifolds');
model.physics('ht').feature('solid4').selection.named('geom1_unisel16');
model.physics('ht').feature('solid4').set('k_mat', 'userdef');
model.physics('ht').feature('solid4').set('k', {'kappa_BPP_eff' '0' '0' '0' 'kappa_BPP_eff' '0' '0' '0' 'kappa_BPP_eff'});
model.physics('ht').feature('solid4').set('rho_mat', 'userdef');
model.physics('ht').feature('solid4').set('Cp_mat', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('u_src', 'root.comp1.dl.u');
model.physics('ht').feature('porous1').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('poro', 'eps_gas_BPP');
model.physics('ht').feature('porous1').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('k_b', {'kappa_BPP_eff' '0' '0' '0' 'kappa_BPP_eff' '0' '0' '0' 'kappa_BPP_eff'});
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('geom1_boxsel1');
model.physics('ht').feature('ifl1').set('Tustr', 'T_in');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('geom1_boxsel2');
model.physics('ht').feature('init1').set('Tinit', 'T_in');

model.multiphysics.create('ech1', 'ElectrochemicalHeating', 'geom1', 3);

model.mesh('mesh1').create('size1', 'Size');
model.mesh('mesh1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('size1').selection.named('geom1_adjsel1');
model.mesh('mesh1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('size1').set('hmax', '2.5e-3');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_unisel7');
model.mesh('mesh1').feature('swe1').selection('sourceface').named('geom1_intsel1');
model.mesh('mesh1').feature('swe1').selection('targetface').named('geom1_intsel2');
model.mesh('mesh1').feature('swe1').set('facemethod', 'tri');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('size').set('hauto', 1);
model.mesh('mesh1').run;

model.view.create('view8', 'geom1');
model.view('view8').model('comp1');
model.view('view8').camera.set('viewscaletype', 'manual');
model.view('view8').camera.set('zscale', 50);
model.view('view8').hideEntities.create('hide1');
model.view('view8').hideEntities('hide1').named('geom1_unisel11');

model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.named('geom1_ext13_dom');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').run('swe2');
model.mesh('mesh1').create('swe3', 'Sweep');
model.mesh('mesh1').feature('swe3').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe3').selection.named('geom1_ext7_dom');
model.mesh('mesh1').feature('swe3').create('dis1', 'Distribution');
model.mesh('mesh1').run('swe3');
model.mesh('mesh1').create('swe4', 'Sweep');
model.mesh('mesh1').feature('swe4').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe4').selection.named('geom1_unisel10');
model.mesh('mesh1').feature('swe4').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe4').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run('swe4');
model.mesh('mesh1').create('swe5', 'Sweep');
model.mesh('mesh1').feature('swe5').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe5').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run('swe5');

model.study('std1').create('cdi2', 'CurrentDistributionInitialization');
model.study('std1').feature.move('cdi2', 1);
model.study('std1').feature('cdi2').set('initType', 'secondary');
model.study('std1').feature('stat').setEntry('activate', 'fc', true);
model.study('std1').feature('stat').setEntry('activate', 'dl', false);
model.study('std1').feature('stat').setEntry('activate', 'ht', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'fc', false);
model.study('std1').feature('stat2').setEntry('activate', 'dl', true);
model.study('std1').feature('stat2').setEntry('activate', 'ht', false);
model.study('std1').create('stat3', 'Stationary');
model.study('std1').feature('stat3').setEntry('activate', 'fc', true);
model.study('std1').feature('stat3').setEntry('activate', 'dl', false);
model.study('std1').feature('stat3').setEntry('activate', 'ht', true);
model.study('std1').feature('stat3').set('useparam', true);
model.study('std1').feature('stat3').setIndex('pname', 'a_CL', 0);
model.study('std1').feature('stat3').setIndex('plistarr', '', 0);
model.study('std1').feature('stat3').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat3').setIndex('pname', 'a_CL', 0);
model.study('std1').feature('stat3').setIndex('plistarr', '', 0);
model.study('std1').feature('stat3').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat3').setIndex('pname', 'E_cell_avg', 0);
model.study('std1').feature('stat3').setIndex('plistarr', '', 0);
model.study('std1').feature('stat3').setIndex('punit', 'V', 0);
model.study('std1').feature('stat3').setIndex('plistarr', 'range(E_cell_avg_start,-0.1,0.55)', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 13 14 15 17 18 19 21 22 23 25 26 27 29 30 32 33 35 36 38 39 41 42 44 45 46 47 49 50 51 53 54 55 57 58 59 61 62 63 65 66 67 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 87 88 89 92 93 94 95 96 99 100 101 102 103 106 107 108 109 110 111 112 114 115 117 118 120 121 123 124 126 127 128 129 130 131 132 133 134 135 136 137 138]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 13 14 15 17 18 19 21 22 23 25 26 27 29 30 32 33 35 36 38 39 41 42 44 45 46 47 49 50 51 53 54 55 57 58 59 61 62 63 65 66 67 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 87 88 89 92 93 94 95 96 99 100 101 102 103 106 107 108 109 110 111 112 114 115 117 118 120 121 123 124 126 127 128 129 130 131 132 133 134 135 136 137 138]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 13 14 15 17 18 19 21 22 23 25 26 27 29 30 32 33 35 36 38 39 41 42 44 45 46 47 49 50 51 53 54 55 57 58 59 61 62 63 65 66 67 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 87 88 89 92 93 94 95 96 99 100 101 102 103 106 107 108 109 110 111 112 114 115 117 118 120 121 123 124 126 127 128 129 130 131 132 133 134 135 136 137 138]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 3 4 5 6 9 11 13 15 17 19 21 23 25 27 29 30 32 33 35 36 38 39 41 42 46 47 50 51 54 55 58 59 62 63 65 66 67 68 69]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([71 72 73 74 75 78 79 80 82 85 86 87 89 92 93 94 96 99 100 101 103 106 107 108 110 114 115 117 118 120 121 123 124 126 127 134 135 136 137 138]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([7 8 9 10 13 14 17 18 21 22 25 26 29 32 35 38 41 44 45 46 49 50 53 54 57 58 61 62 80 81 82 87 88 89 94 95 96 101 102 103 108 109 110 111 112 115 118 121 124 127 128 129 130 131 132 133]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3 4 5 6 7 8 9 10 11 13 14 15 17 18 19 21 22 23 25 26 27 29 30 32 33 35 36 38 39 41 42 44 45 46 47 49 50 51 53 54 55 57 58 59 61 62 63 65 66 67 68 69 70 71 72 73 74 75 78 79 80 81 82 85 86 87 88 89 92 93 94 95 96 99 100 101 102 103 106 107 108 109 110 111 112 114 115 117 118 120 121 123 124 126 127 128 129 130 131 132 133 134 135 136 137 138]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([12 16 20 24 28 31 34 37 40 43 48 52 56 60 64 76 77 83 84 90 91 97 98 104 105 113 116 119 122 125]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 3 4 5 6 9 11 13 15 17 19 21 23 25 27 29 30 32 33 35 36 38 39 41 42 46 47 50 51 54 55 58 59 62 63 65 66 67 68 69]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([71 72 73 74 75 78 79 80 82 85 86 87 89 92 93 94 96 99 100 101 103 106 107 108 110 114 115 117 118 120 121 123 124 126 127 134 135 136 137 138]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'cdi2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'cdi2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').create('su3', 'StoreSolution');
model.sol('sol1').create('st4', 'StudyStep');
model.sol('sol1').feature('st4').set('study', 'std1');
model.sol('sol1').feature('st4').set('studystep', 'stat2');
model.sol('sol1').create('v4', 'Variables');
model.sol('sol1').feature('v4').set('initmethod', 'sol');
model.sol('sol1').feature('v4').set('initsol', 'sol1');
model.sol('sol1').feature('v4').set('notsolmethod', 'sol');
model.sol('sol1').feature('v4').set('notsol', 'sol1');
model.sol('sol1').feature('v4').set('control', 'stat2');
model.sol('sol1').create('s4', 'Stationary');
model.sol('sol1').feature('s4').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s4').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s4').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s4').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s4').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s4').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s4').create('i1', 'Iterative');
model.sol('sol1').feature('s4').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s4').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s4').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s4').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s4').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i1').label('AMG, pressure (dl)');
model.sol('sol1').feature('s4').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'coupled');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature('d1').label('Direct, pressure (dl)');
model.sol('sol1').feature('s4').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s4').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s4').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s4').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s4').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s4').feature.remove('fcDef');
model.sol('sol1').create('su4', 'StoreSolution');
model.sol('sol1').create('st5', 'StudyStep');
model.sol('sol1').feature('st5').set('study', 'std1');
model.sol('sol1').feature('st5').set('studystep', 'stat3');
model.sol('sol1').create('v5', 'Variables');
model.sol('sol1').feature('v5').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v5').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v5').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v5').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v5').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v5').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v5').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v5').set('initmethod', 'sol');
model.sol('sol1').feature('v5').set('initsol', 'sol1');
model.sol('sol1').feature('v5').set('initsoluse', 'sol4');
model.sol('sol1').feature('v5').set('notsolmethod', 'sol');
model.sol('sol1').feature('v5').set('notsol', 'sol1');
model.sol('sol1').feature('v5').set('control', 'stat3');
model.sol('sol1').create('s5', 'Stationary');
model.sol('sol1').feature('s5').set('stol', 1.0E-4);
model.sol('sol1').feature('s5').create('p1', 'Parametric');
model.sol('sol1').feature('s5').feature.remove('pDef');
model.sol('sol1').feature('s5').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s5').feature('p1').set('control', 'stat3');
model.sol('sol1').feature('s5').set('control', 'stat3');
model.sol('sol1').feature('s5').create('se1', 'Segregated');
model.sol('sol1').feature('s5').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s5').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s5').feature('se1').feature('ss1').set('segvar', {'comp1_fc_phil' 'comp1_fc_phis' 'comp1_fc_wH2O_H2' 'comp1_fc_p_H2' 'comp1_fc_wH2O_O2' 'comp1_fc_wN2_O2' 'comp1_fc_p_O2' 'comp1_fc_mu0'});
model.sol('sol1').feature('s5').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('s5').create('i1', 'Iterative');
model.sol('sol1').feature('s5').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s5').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s5').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s5').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s5').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s5').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s5').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s5').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s5').feature('se1').feature('ss1').label('Hydrogen Fuel Cell');
model.sol('sol1').feature('s5').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s5').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s5').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('s5').create('i2', 'Iterative');
model.sol('sol1').feature('s5').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s5').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s5').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s5').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s5').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s5').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s5').feature('i2').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s5').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s5').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s5').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('s5').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s5').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s5').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s5').create('d1', 'Direct');
model.sol('sol1').feature('s5').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s5').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s5').create('i3', 'Iterative');
model.sol('sol1').feature('s5').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s5').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s5').feature('i3').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s5').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s5').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s5').create('d2', 'Direct');
model.sol('sol1').feature('s5').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s5').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s5').feature('d2').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s5').feature.remove('fcDef');
model.sol('sol1').feature('v5').set('notsolnum', 'auto');
model.sol('sol1').feature('v5').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v4').set('notsolnum', 'auto');
model.sol('sol1').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v4').set('solnum', 'auto');
model.sol('sol1').feature('v4').set('solvertype', 'solnum');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v3').set('control', 'user');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('solvefor', false);
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('solvefor', false);
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('solvefor', false);
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('solvefor', false);
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('solvefor', false);
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('solvefor', false);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 4, 0);
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 4, 0);
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 4, 0);
model.result('pg3').label('Mole Fraction, H2, Streamline (fc)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('typeintitle', true);
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'fc.tfluxH2x' 'fc.tfluxH2y' 'fc.tfluxH2z'});
model.result('pg3').feature('str1').set('posmethod', 'start');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col', 'Color');
model.result('pg3').feature('str1').feature('col').set('expr', 'fc.xH2');
model.result('pg3').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 4, 0);
model.result('pg4').label('Mole Fraction, H2, Surface (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species H2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'fc.xH2'});
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 4, 0);
model.result('pg5').label('Mole Fraction, O2, Streamline (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('typeintitle', true);
model.result('pg5').set('prefixintitle', 'Species O2:');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg5').feature('str1').set('posmethod', 'start');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').feature('str1').create('col', 'Color');
model.result('pg5').feature('str1').feature('col').set('expr', 'fc.xO2');
model.result('pg5').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 4, 0);
model.result('pg6').label('Mole Fraction, O2, Surface (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species O2:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'fc.xO2'});
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 4, 0);
model.result('pg7').label('Mole Fraction, H2O, Streamline (fc)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('typeintitle', true);
model.result('pg7').set('prefixintitle', 'Species H2O:');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy' 'fc.tfluxH2Oz'});
model.result('pg7').feature('str1').set('posmethod', 'start');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg7').feature('str1').create('col', 'Color');
model.result('pg7').feature('str1').feature('col').set('expr', 'fc.xH2O');
model.result('pg7').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 4, 0);
model.result('pg8').label('Mole Fraction, H2O, Surface (fc)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species H2O:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'fc.xH2O'});
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 4, 0);
model.result('pg9').label('Mole Fraction, N2, Streamline (fc)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('typeintitle', true);
model.result('pg9').set('prefixintitle', 'Species N2:');
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y' 'fc.tfluxN2z'});
model.result('pg9').feature('str1').set('posmethod', 'start');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result('pg9').feature('str1').create('col', 'Color');
model.result('pg9').feature('str1').feature('col').set('expr', 'fc.xN2');
model.result('pg9').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset1');
model.result('pg10').setIndex('looplevel', 4, 0);
model.result('pg10').label('Mole Fraction, N2, Surface (fc)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('prefixintitle', 'Species N2:');
model.result('pg10').set('expressionintitle', false);
model.result('pg10').set('typeintitle', false);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'fc.xN2'});
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 4, 0);
model.result('pg11').label('Pressure (fc)');
model.result('pg11').create('mslc1', 'Multislice');
model.result('pg11').feature('mslc1').set('expr', {'fc.p'});
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'fc.u' 'fc.v' 'fc.w'});
model.result('pg11').feature('str1').set('posmethod', 'start');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'gray');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset1');
model.result('pg12').setIndex('looplevel', 4, 0);
model.result('pg12').label('Water Activity (Relative Humidity) (fc)');
model.result('pg12').create('mslc1', 'Multislice');
model.result('pg12').feature('mslc1').set('expr', {'fc.aw'});
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').label('Velocity (dl)');
model.result('pg13').set('titletype', 'custom');
model.result('pg13').set('data', 'dset1');
model.result('pg13').setIndex('looplevel', 4, 0);
model.result('pg13').set('defaultPlotID', 'PhysicsInterfaces_PorousMediaFlow/icom6/pdef1/pcond1/pg1');
model.result('pg13').feature.create('str1', 'Streamline');
model.result('pg13').feature('str1').set('showsolutionparams', 'on');
model.result('pg13').feature('str1').set('expr', {'dl.u' 'dl.v' 'dl.w'});
model.result('pg13').feature('str1').set('posmethod', 'start');
model.result('pg13').feature('str1').set('pointtype', 'arrow');
model.result('pg13').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg13').feature('str1').set('smooth', 'internal');
model.result('pg13').feature('str1').set('maxlen', Inf);
model.result('pg13').feature('str1').set('maxtime', Inf);
model.result('pg13').feature('str1').set('showsolutionparams', 'on');
model.result('pg13').feature('str1').set('maxlen', Inf);
model.result('pg13').feature('str1').set('maxtime', Inf);
model.result('pg13').feature('str1').set('showsolutionparams', 'on');
model.result('pg13').feature('str1').set('maxlen', Inf);
model.result('pg13').feature('str1').set('maxtime', Inf);
model.result('pg13').feature('str1').set('showsolutionparams', 'on');
model.result('pg13').feature('str1').set('maxlen', Inf);
model.result('pg13').feature('str1').set('maxtime', Inf);
model.result('pg13').feature('str1').set('showsolutionparams', 'on');
model.result('pg13').feature('str1').set('maxlen', Inf);
model.result('pg13').feature('str1').set('maxtime', Inf);
model.result('pg13').feature('str1').set('data', 'parent');
model.result('pg13').feature('str1').selection.geom('geom1', 2);
model.result('pg13').feature('str1').selection.set([33 34 35 36 37 38 39 40 41 42 45 46 51 52 53 54 55 58 59 64 65 66 67 68 71 72 77 78 79 80 81 84 85 90 91 92 93 94 97 98 103 104 105 108 113 114 115 118 123 124 125 128 133 134 135 138 143 144 145 148 153 154 155 156 157 158 159 160 163 164 169 170 171 172 173 176 177 182 183 184 185 186 189 190 195 196 197 198 199 202 203 208 209 210 211 212 215 216 221 222 223 224 225 226 227 228 229 230 231 232 233 235 236 237 238 239 240 241 242 243 244 245 246 247 250 253 256 259 262 268 274 280 286 345 346 347 348 349 350 351 352 353 354 365 366 367 368 369 370 371 372 373 374 385 386 387 388 389 390 391 392 393 394 405 406 407 408 409 410 411 412 413 414 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 446 447 448 449 456 457 458 459 466 467 468 469 476 477 478 479 486 487 488 489 492 493 494 495 498 499 500 501 504 505 506 507 510 511 512 513 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 542 543 544 545 546 547 550 556 562 568 574 577 581 585 589 593 597]);
model.result('pg13').feature('str1').feature.create('col1', 'Color');
model.result('pg13').feature('str1').feature('col1').set('expr', 'dl.U');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').label('Pressure (dl)');
model.result('pg14').set('data', 'dset1');
model.result('pg14').setIndex('looplevel', 4, 0);
model.result('pg14').set('defaultPlotID', 'PhysicsInterfaces_PorousMediaFlow/icom6/pdef1/pcond1/pg2');
model.result('pg14').feature.create('surf1', 'Surface');
model.result('pg14').feature('surf1').label('Surface');
model.result('pg14').feature('surf1').set('showsolutionparams', 'on');
model.result('pg14').feature('surf1').set('expr', 'p');
model.result('pg14').feature('surf1').set('smooth', 'internal');
model.result('pg14').feature('surf1').set('showsolutionparams', 'on');
model.result('pg14').feature('surf1').set('data', 'parent');
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').label('Temperature (ht)');
model.result('pg15').set('data', 'dset1');
model.result('pg15').setIndex('looplevel', 4, 0);
model.result('pg15').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg15').feature.create('vol1', 'Volume');
model.result('pg15').feature('vol1').set('showsolutionparams', 'on');
model.result('pg15').feature('vol1').set('solutionparams', 'parent');
model.result('pg15').feature('vol1').set('expr', 'T');
model.result('pg15').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg15').feature('vol1').set('smooth', 'internal');
model.result('pg15').feature('vol1').set('showsolutionparams', 'on');
model.result('pg15').feature('vol1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').active(false);
model.result('pg1').feature('arwv1').active(false);
model.result('pg1').run;
model.result('pg1').set('edges', false);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'fc.phis');
model.result('pg1').feature('surf1').set('descr', 'Electric potential');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').feature('mslc1').active(false);
model.result('pg2').feature('arwv1').active(false);
model.result('pg3').run;
model.result('pg3').feature('str1').active(false);
model.result('pg3').run;
model.result('pg3').set('edges', false);
model.result('pg3').create('strmsl1', 'StreamlineMultislice');
model.result('pg3').feature('strmsl1').set('expr', {'fc.tfluxH2x' 'fc.tfluxH2y' 'fc.tfluxH2z'});
model.result('pg3').feature('strmsl1').set('descr', 'Total flux');
model.result('pg3').feature('strmsl1').set('xnumber', '0');
model.result('pg3').feature('strmsl1').set('ynumber', '0');
model.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg3').feature('strmsl1').set('zcoord', 'range(D_cc+D_bpp*0.75,D_cell,D_cc+D_bpp*0.75+N_cells*D_cell)');
model.result('pg3').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg3').feature('strmsl1').set('udist', 0.1);
model.result('pg3').feature('strmsl1').set('pointtype', 'arrow');
model.result('pg3').feature('strmsl1').set('arrowdistr', 'equalinvtime');
model.result('pg3').feature('strmsl1').set('arrowlength', 'proportional');
model.result('pg3').feature('strmsl1').create('col1', 'Color');
model.result('pg3').run;
model.result('pg3').feature('strmsl1').feature('col1').set('expr', 'fc.xH2');
model.result('pg3').feature('strmsl1').feature('col1').set('descr', 'Mole fraction');
model.result('pg3').feature('strmsl1').feature('col1').set('titletype', 'auto');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('str1').active(false);
model.result('pg5').run;
model.result('pg5').set('edges', false);
model.result('pg5').create('strmsl1', 'StreamlineMultislice');
model.result('pg5').feature('strmsl1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg5').feature('strmsl1').set('descr', 'Total flux');
model.result('pg5').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg5').feature('strmsl1').set('zcoord', 'range(D_cc+D_bpp/2+D_cell-D_bpp*0.25,D_cell,D_stack-D_bpp*0.75-D_cc)');
model.result('pg5').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg5').feature('strmsl1').set('udist', 0.1);
model.result('pg5').feature('strmsl1').set('pointtype', 'arrow');
model.result('pg5').feature('strmsl1').set('arrowdistr', 'equalinvtime');
model.result('pg5').feature('strmsl1').set('arrowlength', 'proportional');
model.result('pg5').run;
model.result('pg5').feature('strmsl1').create('col1', 'Color');
model.result('pg5').run;
model.result('pg5').feature('strmsl1').feature('col1').set('expr', 'fc.xO2');
model.result('pg5').feature('strmsl1').feature('col1').set('descr', 'Mole fraction');
model.result('pg5').feature('strmsl1').feature('col1').set('titletype', 'auto');
model.result('pg5').run;
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').feature('mslc1').active(false);
model.result('pg12').run;
model.result('pg12').label('Water Activity in Oxygen GDEs');
model.result('pg12').set('titletype', 'label');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'fc.aw');
model.result('pg12').feature('surf1').set('descr', 'Water activity (relative humidity)');
model.result('pg12').feature('surf1').create('sel1', 'Selection');
model.result('pg12').feature('surf1').feature('sel1').selection.named('geom1_intsel2');
model.result('pg12').run;
model.result('pg12').set('edges', false);
model.result('pg12').run;
model.result.create('pg16', 'PlotGroup3D');
model.result('pg16').run;
model.result('pg16').label('Temperature in MEAs');
model.result('pg16').set('edges', false);
model.result('pg16').create('surf1', 'Surface');
model.result('pg16').feature('surf1').set('expr', 'T');
model.result('pg16').feature('surf1').set('descr', 'Temperature');
model.result('pg16').feature('surf1').set('unit', 'degC');
model.result('pg16').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg16').feature('surf1').create('sel1', 'Selection');
model.result('pg16').feature('surf1').feature('sel1').selection.geom('geom1', 3);
model.result('pg16').feature('surf1').feature('sel1').selection.named('geom1_unisel15');
model.result('pg16').run;
model.result('pg16').feature.duplicate('surf2', 'surf1');
model.result('pg16').run;
model.result('pg16').feature('surf2').set('titletype', 'none');
model.result('pg16').feature('surf2').set('inheritplot', 'surf1');
model.result('pg16').run;
model.result('pg16').feature('surf2').feature('sel1').selection.named('geom1_unisel7');
model.result('pg16').run;
model.result.create('pg17', 'PlotGroup3D');
model.result('pg17').run;
model.result('pg17').label('Temperature in Cooling Channels');
model.result('pg17').set('titletype', 'label');
model.result('pg17').set('edges', false);
model.result('pg17').set('showlegendsunit', true);
model.result('pg17').create('strmsl1', 'StreamlineMultislice');
model.result('pg17').feature('strmsl1').set('expr', {'dl.u' 'dl.v' 'dl.w'});
model.result('pg17').feature('strmsl1').set('descr', 'Total Darcy velocity field');
model.result('pg17').feature('strmsl1').set('xnumber', '0');
model.result('pg17').feature('strmsl1').set('ynumber', '0');
model.result('pg17').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg17').feature('strmsl1').set('zcoord', 'range(D_cc+D_bpp*0.5,D_cell,D_cc+D_bpp*0.5+N_cells*D_cell)');
model.result('pg17').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg17').feature('strmsl1').set('pointtype', 'arrow');
model.result('pg17').feature('strmsl1').set('arrowdistr', 'equalinvtime');
model.result('pg17').feature('strmsl1').create('col1', 'Color');
model.result('pg17').run;
model.result('pg17').feature('strmsl1').feature('col1').set('expr', 'T');
model.result('pg17').feature('strmsl1').feature('col1').set('descr', 'Temperature');
model.result('pg17').feature('strmsl1').feature('col1').set('unit', 'degC');
model.result('pg17').feature('strmsl1').feature('col1').set('colortable', 'HeatCameraLight');
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').setIndex('genpoints', 'W_plate/2', 0, 0);
model.result.dataset('cln1').setIndex('genpoints', '0.95*L_plate', 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 'D_cc', 0, 2);
model.result.dataset('cln1').setIndex('genpoints', 'W_plate/2', 1, 0);
model.result.dataset('cln1').setIndex('genpoints', '0.95*L_plate', 1, 1);
model.result.dataset('cln1').setIndex('genpoints', 'D_cc+D_cell*N_cells+D_bpp', 1, 2);
model.result.create('pg18', 'PlotGroup1D');
model.result('pg18').run;
model.result('pg18').label('Mid-Stack Temperature Toward Cooling Outlets');
model.result('pg18').set('titletype', 'label');
model.result('pg18').create('lngr1', 'LineGraph');
model.result('pg18').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg18').feature('lngr1').set('linewidth', 'preference');
model.result('pg18').run;
model.result('pg18').set('data', 'cln1');
model.result('pg18').run;
model.result('pg18').feature('lngr1').set('expr', 'T');
model.result('pg18').feature('lngr1').set('descr', 'Temperature');
model.result('pg18').feature('lngr1').set('unit', 'degC');
model.result('pg18').feature('lngr1').set('xdata', 'expr');
model.result('pg18').feature('lngr1').set('xdataexpr', 'z');
model.result('pg18').feature('lngr1').set('legend', true);
model.result('pg18').run;
model.result('pg2').run;
model.result('pg2').set('edges', false);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').run;
model.result('pg4').run;
model.result('pg4').set('edges', false);
model.result('pg4').run;
model.result('pg6').run;
model.result('pg6').set('edges', false);
model.result('pg6').run;
model.result('pg8').run;
model.result('pg8').set('edges', false);
model.result('pg8').run;
model.result('pg10').run;
model.result('pg10').set('edges', false);
model.result('pg10').run;
model.result('pg7').run;
model.result.remove('pg7');
model.result.remove('pg9');
model.result.remove('pg11');
model.result.remove('pg13');
model.result.remove('pg14');
model.result('pg8').run;
model.result('pg15').run;
model.result('pg15').set('edges', false);
model.result('pg15').run;
model.result('pg15').feature('vol1').create('tran1', 'Transparency');
model.result('pg15').run;
model.result('pg17').run;
model.result('pg15').run;
model.result('pg15').feature.copy('strmsl1', 'pg17/strmsl1');
model.result('pg15').run;
model.result('pg15').run;
model.result('pg15').feature('strmsl1').feature('col1').active(false);
model.result('pg15').run;
model.result('pg15').feature('strmsl1').set('color', 'black');
model.result('pg15').run;
model.result('pg15').feature('vol1').set('unit', 'degC');
model.result('pg15').run;

model.title('Fuel Cell Stack Cooling');

model.description(['This tutorial models the thermal management of a polymer electrolyte membrane (PEM) fuel cell stack. Operating the stack with similar temperature profile for all cells is important since an uneven temperature distribution may otherwise result in nonuniform water vapor condensation and a large cell-to-cell variation in performance.' newline  newline 'The stack consists of five cells, interlayered with bipolar plates that carry the liquid cooling fluid. The model solves for the temperature, the electrode and electrolyte phase potentials, the mass transport of the reacting species in each separate gas compartment, and the fluid pressures and corresponding velocities in the gas and liquid flow compartments.' newline  newline 'The flow channels of the bipolar plates are not resolved explicitly in the geometry. Instead anisotropic permeabilities are used define the fluid flow patterns inside the stack.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('stack_cooling.mph');

model.modelNode.label('Components');

out = model;
