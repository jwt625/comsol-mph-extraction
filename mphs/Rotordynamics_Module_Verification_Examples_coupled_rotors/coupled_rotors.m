function out = model
%
% coupled_rotors.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Rotordynamics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('rotbm', 'BeamRotor', 'geom1');
model.physics('rotbm').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').setSolveFor('/physics/rotbm', true);

model.param.set('Ow', '0[rpm]');
model.param.descr('Ow', 'Angular speed of the shaft');
model.param.set('rho_shaft', '7832[kg/m^3]');
model.param.descr('rho_shaft', 'Density of the shaft');
model.param.set('E_shaft', '206820[MPa]');
model.param.descr('E_shaft', 'Young''s modulus of the shaft');
model.param.set('G_shaft', '79546[MPa]');
model.param.descr('G_shaft', 'Shear modulus of the shaft');
model.param.set('d_shaft', '12.7[mm]');
model.param.descr('d_shaft', 'Diameter of the shaft');
model.param.set('m_disk', '1.27[kg]');
model.param.descr('m_disk', 'Mass of the disk');
model.param.set('Ip_disk', '0.00256[kg*m^2]');
model.param.descr('Ip_disk', 'Polar moment of inertia of the disk');
model.param.set('Id_disk', '0.00128[kg*m^2]');
model.param.descr('Id_disk', 'Diametral moment of inertia of the disk');
model.param.set('m_coupling', '0.7[kg]');
model.param.descr('m_coupling', 'Mass of the coupling');
model.param.set('m_pulley', '0.87[kg]');
model.param.descr('m_pulley', 'Mass of the pulley');
model.param.set('l1', '88.9[mm]');
model.param.descr('l1', 'Distance of the disk from the clamped end');
model.param.set('l2', '76.2[mm]');
model.param.descr('l2', 'Distance of the coupling end from the disk');
model.param.set('x_disk', 'l1');
model.param.descr('x_disk', 'Position of the disk');
model.param.set('x_coupling', 'l1+l2');
model.param.descr('x_coupling', 'Position of the coupling');
model.param.set('x_support1', 'l1+2*l2');
model.param.descr('x_support1', 'Position of the first pinned support');
model.param.set('x_pulley', 'l1+3*l2');
model.param.descr('x_pulley', 'Position of the pulley');
model.param.set('x_support2', 'l1+4*l2');
model.param.descr('x_support2', 'Position of the second pinned support');

model.geom('geom1').create('pol1', 'Polygon');
model.geom('geom1').feature('pol1').set('source', 'vectors');
model.geom('geom1').feature('pol1').set('x', '0 x_disk x_coupling x_support1 x_pulley x_support2');
model.geom('geom1').feature('pol1').set('y', 0);
model.geom('geom1').feature('pol1').set('z', 0);
model.geom('geom1').run;

model.physics('rotbm').prop('RotorProperties').set('rpt', 'Ow');
model.physics('rotbm').feature('lemm1').set('IsotropicOption', 'EG');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('EG', 'Young''s_modulus_and_shear_modulus');
model.material('mat1').propertyGroup('EG').set('E', {'E_shaft'});
model.material('mat1').propertyGroup('EG').set('G', {'G_shaft'});
model.material('mat1').propertyGroup('def').set('density', {'rho_shaft'});

model.physics('rotbm').feature('rcs1').set('do_circ', 'd_shaft');
model.physics('rotbm').create('disk1', 'Disk', 0);
model.physics('rotbm').feature('disk1').selection.set([2]);
model.physics('rotbm').feature('disk1').set('mass', 'm_disk');
model.physics('rotbm').feature('disk1').set('Ip', 'Ip_disk');
model.physics('rotbm').feature('disk1').set('Id', 'Id_disk');
model.physics('rotbm').create('disk2', 'Disk', 0);
model.physics('rotbm').feature('disk2').label('Disk: Coupling');
model.physics('rotbm').feature('disk2').selection.set([3]);
model.physics('rotbm').feature('disk2').set('mass', 'm_coupling');
model.physics('rotbm').feature.duplicate('disk3', 'disk2');
model.physics('rotbm').feature('disk3').label('Disk: Pulley');
model.physics('rotbm').feature('disk3').selection.set([5]);
model.physics('rotbm').feature('disk3').set('mass', 'm_pulley');
model.physics('rotbm').create('jrb1', 'JournalBearing', 0);
model.physics('rotbm').feature('jrb1').label('Journal Bearing: Fixed');
model.physics('rotbm').feature('jrb1').selection.set([1]);
model.physics('rotbm').feature.duplicate('jrb2', 'jrb1');
model.physics('rotbm').feature('jrb2').label('Journal Bearing: Pinned');
model.physics('rotbm').feature('jrb2').selection.set([4 6]);
model.physics('rotbm').feature('jrb2').set('constrainBendingRotation', false);
model.physics('rotbm').create('cpl1', 'RotorCoupling', 0);
model.physics('rotbm').feature('cpl1').selection.set([3]);

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'Ow', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '1/s', 0);
model.study('std1').feature('param').setIndex('pname', 'Ow', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '1/s', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,2000,50000)', 0);
model.study('std1').feature('param').setIndex('punit', 'rpm', 0);
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 10);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.39370000000000005');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'Ow'});
model.batch('p1').set('plistarr', {'range(0,2000,50000)'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 26, 1);
model.result('pg1').set('defaultPlotID', 'whirl');
model.result('pg1').label('Whirl (rotbm)');
model.result('pg1').create('wp1', 'Whirl');
model.result('pg1').feature('wp1').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('wp1').set('descr', 'Displacement field');
model.result('pg1').feature('wp1').set('nplanes', '1');
model.result('pg1').feature('wp1').set('nrings', '10');
model.result('pg1').feature('wp1').set('colortable', 'TrafficLight');
model.result('pg1').feature('wp1').set('ringcolor', 'blue');
model.result('pg1').feature('wp1').selection.geom('geom1', 1);
model.result('pg1').feature('wp1').selection.set([1 2 3 4 5]);
model.result('pg1').feature('wp1').selection.inherit(false);
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_rotbm');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').create('line1', 'Line');
model.result('pg1').feature('line1').set('expr', {'1'});
model.result('pg1').feature('line1').set('linetype', 'tube');
model.result('pg1').feature('line1').set('radiusexpr', {'rotbm.re '});
model.result('pg1').feature('line1').set('tuberadiusscaleactive', true);
model.result('pg1').feature('line1').set('tuberadiusscale', 1);
model.result('pg1').feature('line1').set('tubeendcaps', false);
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'custom');
model.result('pg1').feature('line1').set('customcolor', [0.9803921580314636 0.7843137383460999 0.7058823704719543]);
model.result('pg1').feature('line1').set('threshold', 'manual');
model.result('pg1').feature('line1').set('thresholdvalue', 0.2);
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').label('Rotor');
model.result('pg1').feature('line1').create('def', 'Deform');
model.result('pg1').feature('line1').feature('def').set('scaleactive', true);
model.result('pg1').feature('line1').feature('def').set('scale', '1');
model.result('pg1').feature('line1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj1', 'PointTrajectories');
model.result('pg1').feature('pttraj1').set('plotdata', 'points');
model.result('pg1').feature('pttraj1').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj1').selection.set([2]);
model.result('pg1').feature('pttraj1').selection.inherit(false);
model.result('pg1').feature('pttraj1').set('linetype', 'none');
model.result('pg1').feature('pttraj1').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj1').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj1').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj1').set('custompointcolor', [0.8039215803146362 0.5215686559677124 0.24705882370471954]);
model.result('pg1').feature('pttraj1').set('semimajorexpr', {'0.5*rotbm.disk1.de*rotbm.e20x ' '0.5*rotbm.disk1.de*rotbm.e20y ' '0.5*rotbm.disk1.de*rotbm.e20z '});
model.result('pg1').feature('pttraj1').set('semiminorexpr', {'0.5*rotbm.disk1.de*rotbm.e30x ' '0.5*rotbm.disk1.de*rotbm.e30y ' '0.5*rotbm.disk1.de*rotbm.e30z '});
model.result('pg1').feature('pttraj1').set('ellipsecount', 1);
model.result('pg1').feature('pttraj1').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj1').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj1').set('titletype', 'none');
model.result('pg1').feature('pttraj1').label('Disk 1');
model.result('pg1').feature('pttraj1').create('def', 'Deform');
model.result('pg1').feature('pttraj1').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj1').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj1').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj2', 'PointTrajectories');
model.result('pg1').feature('pttraj2').set('plotdata', 'points');
model.result('pg1').feature('pttraj2').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj2').selection.set([3]);
model.result('pg1').feature('pttraj2').selection.inherit(false);
model.result('pg1').feature('pttraj2').set('linetype', 'none');
model.result('pg1').feature('pttraj2').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj2').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj2').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj2').set('custompointcolor', [0.8705882430076599 0.7215686440467834 0.529411792755127]);
model.result('pg1').feature('pttraj2').set('semimajorexpr', {'2*rotbm.re*rotbm.e20x ' '2*rotbm.re*rotbm.e20y ' '2*rotbm.re*rotbm.e20z '});
model.result('pg1').feature('pttraj2').set('semiminorexpr', {'2*rotbm.re*rotbm.e30x ' '2*rotbm.re*rotbm.e30y ' '2*rotbm.re*rotbm.e30z '});
model.result('pg1').feature('pttraj2').set('ellipsecount', 1);
model.result('pg1').feature('pttraj2').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj2').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj2').set('titletype', 'none');
model.result('pg1').feature('pttraj2').label('Disk: Coupling');
model.result('pg1').feature('pttraj2').create('def', 'Deform');
model.result('pg1').feature('pttraj2').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj2').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj2').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj3', 'PointTrajectories');
model.result('pg1').feature('pttraj3').set('plotdata', 'points');
model.result('pg1').feature('pttraj3').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj3').selection.set([5]);
model.result('pg1').feature('pttraj3').selection.inherit(false);
model.result('pg1').feature('pttraj3').set('linetype', 'none');
model.result('pg1').feature('pttraj3').set('expr', {'X' 'Y' 'Z'});
model.result('pg1').feature('pttraj3').set('pointtype', 'ellipse');
model.result('pg1').feature('pttraj3').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj3').set('custompointcolor', [0.8705882430076599 0.7215686440467834 0.529411792755127]);
model.result('pg1').feature('pttraj3').set('semimajorexpr', {'2*rotbm.re*rotbm.e20x ' '2*rotbm.re*rotbm.e20y ' '2*rotbm.re*rotbm.e20z '});
model.result('pg1').feature('pttraj3').set('semiminorexpr', {'2*rotbm.re*rotbm.e30x ' '2*rotbm.re*rotbm.e30y ' '2*rotbm.re*rotbm.e30z '});
model.result('pg1').feature('pttraj3').set('ellipsecount', 1);
model.result('pg1').feature('pttraj3').set('ellipsearrowscaleactive', true);
model.result('pg1').feature('pttraj3').set('ellipsearrowtype', 'none');
model.result('pg1').feature('pttraj3').set('titletype', 'none');
model.result('pg1').feature('pttraj3').label('Disk: Pulley');
model.result('pg1').feature('pttraj3').create('def', 'Deform');
model.result('pg1').feature('pttraj3').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj3').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj3').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj4', 'PointTrajectories');
model.result('pg1').feature('pttraj4').set('plotdata', 'points');
model.result('pg1').feature('pttraj4').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj4').selection.set([1]);
model.result('pg1').feature('pttraj4').selection.inherit(false);
model.result('pg1').feature('pttraj4').set('linetype', 'none');
model.result('pg1').feature('pttraj4').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj4').set('expr', {'X-1.0*rotbm.re*rotbm.jrb1.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb1.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj4').set('arrowexpr', {'rotbm.re*rotbm.jrb1.e3gx ' 'rotbm.re*rotbm.jrb1.e3gy ' 'rotbm.re*rotbm.jrb1.e3gz '});
model.result('pg1').feature('pttraj4').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj4').set('arrowbase', 'head');
model.result('pg1').feature('pttraj4').set('arrowscale', '10');
model.result('pg1').feature('pttraj4').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj4').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj4').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj4').set('titletype', 'none');
model.result('pg1').feature('pttraj4').label('Journal Bearing: Fixed');
model.result('pg1').feature('pttraj4').create('def', 'Deform');
model.result('pg1').feature('pttraj4').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj4').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj4').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').create('pttraj5', 'PointTrajectories');
model.result('pg1').feature('pttraj5').set('plotdata', 'points');
model.result('pg1').feature('pttraj5').selection.geom('geom1', 0);
model.result('pg1').feature('pttraj5').selection.set([4 6]);
model.result('pg1').feature('pttraj5').selection.inherit(false);
model.result('pg1').feature('pttraj5').set('linetype', 'none');
model.result('pg1').feature('pttraj5').set('pointtype', 'arrow');
model.result('pg1').feature('pttraj5').set('expr', {'X-1.0*rotbm.re*rotbm.jrb2.e3gx ' 'Y-1.0*rotbm.re*rotbm.jrb2.e3gy ' 'Z-1.0*rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowexpr', {'rotbm.re*rotbm.jrb2.e3gx ' 'rotbm.re*rotbm.jrb2.e3gy ' 'rotbm.re*rotbm.jrb2.e3gz '});
model.result('pg1').feature('pttraj5').set('arrowtype', 'arrowhead');
model.result('pg1').feature('pttraj5').set('arrowbase', 'head');
model.result('pg1').feature('pttraj5').set('arrowscale', '10');
model.result('pg1').feature('pttraj5').set('arrowscaleactive', true);
model.result('pg1').feature('pttraj5').set('pointcolor', 'custom');
model.result('pg1').feature('pttraj5').set('custompointcolor', [0.5882353186607361 0.8627451062202454 0.5882353186607361]);
model.result('pg1').feature('pttraj5').set('titletype', 'none');
model.result('pg1').feature('pttraj5').label('Journal Bearing: Pinned');
model.result('pg1').feature('pttraj5').create('def', 'Deform');
model.result('pg1').feature('pttraj5').feature('def').set('scaleactive', true);
model.result('pg1').feature('pttraj5').feature('def').set('scale', '1');
model.result('pg1').feature('pttraj5').feature('def').set('expr', {'-rotbm.De_max*rotbm.e30x ' '-rotbm.De_max*rotbm.e30y ' '-rotbm.De_max*rotbm.e30z '});
model.result('pg1').run;
model.result('pg1').set('looplevel', [3 26]);
model.result('pg1').run;
model.result('pg1').feature('wp1').set('nplanes', 6);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').create('glob1', 'Global');
model.result('pg2').feature('glob1').set('unit', {''});
model.result('pg2').feature('glob1').set('expr', {'rotbm.omegaf'});
model.result('pg2').feature('glob1').set('descr', {'Forward angular frequency'});
model.result('pg2').feature('glob1').set('xdata', 'expr');
model.result('pg2').feature('glob1').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob1').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob1').label('Forward Whirl Mode');
model.result('pg2').feature('glob1').set('linestyle', 'dashed');
model.result('pg2').feature('glob1').set('linecolor', 'blue');
model.result('pg2').feature('glob1').set('linewidth', 3);
model.result('pg2').feature('glob1').set('legend', false);
model.result('pg2').feature('glob1').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob1').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob1').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob1').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob1').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('labelprefix', 'f: ');
model.result('pg2').feature('glob1').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob1').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob1').feature('gmrk1').set('customcolor', [1 0.501960813999176 0.250980406999588]);
model.result('pg2').feature('glob1').feature('gmrk1').set('anchorpoint', 'lowermiddle');
model.result('pg2').set('defaultPlotID', 'campbell');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').create('glob2', 'Global');
model.result('pg2').feature('glob2').set('expr', {'rotbm.omegab'});
model.result('pg2').feature('glob2').set('xdata', 'expr');
model.result('pg2').feature('glob2').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob2').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob2').set('linestyle', 'dotted');
model.result('pg2').feature('glob2').set('linecolor', 'blue');
model.result('pg2').feature('glob2').set('linewidth', 3);
model.result('pg2').feature('glob2').set('legend', false);
model.result('pg2').feature('glob2').label('Backward Whirl Mode');
model.result('pg2').feature('glob2').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob2').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob2').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob2').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob2').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('labelprefix', 'b: ');
model.result('pg2').feature('glob2').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob2').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob2').feature('gmrk1').set('customcolor', [0.7490196228027344 0.1411764770746231 0.3686274588108063]);
model.result('pg2').feature('glob2').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob3', 'Global');
model.result('pg2').feature('glob3').set('expr', {'rotbm.omegan'});
model.result('pg2').feature('glob3').set('xdata', 'expr');
model.result('pg2').feature('glob3').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob3').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob3').set('linecolor', 'blue');
model.result('pg2').feature('glob3').set('linewidth', 3);
model.result('pg2').feature('glob3').set('legend', false);
model.result('pg2').feature('glob3').label('Planar or Torsional Mode');
model.result('pg2').feature('glob3').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob3').create('gmrk1', 'GraphMarker');
model.result('pg2').feature('glob3').feature('gmrk1').set('displaymode', 'intersection');
model.result('pg2').feature('glob3').feature('gmrk1').set('intersectionline', 'identity');
model.result('pg2').feature('glob3').feature('gmrk1').set('precision', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('labelprefix', 't,p: ');
model.result('pg2').feature('glob3').feature('gmrk1').set('pointradius', 4);
model.result('pg2').feature('glob3').feature('gmrk1').set('color', 'custom');
model.result('pg2').feature('glob3').feature('gmrk1').set('customcolor', [0.03529411926865578 0.4627451002597809 0.03529411926865578]);
model.result('pg2').feature('glob3').feature('gmrk1').set('anchorpoint', 'uppermiddle');
model.result('pg2').create('glob4', 'Global');
model.result('pg2').feature('glob4').set('expr', {'if(rotbm.Ovg<=1.4*rotbm.omega,rotbm.Ovg,NaN)'});
model.result('pg2').feature('glob4').set('data', 'dset2');
model.result('pg2').feature('glob4').set('xdata', 'expr');
model.result('pg2').feature('glob4').set('xdataexpr', 'rotbm.Ovg');
model.result('pg2').feature('glob4').set('xdataunit', 'rad/s');
model.result('pg2').feature('glob4').set('linecolor', 'red');
model.result('pg2').feature('glob4').set('linewidth', 3);
model.result('pg2').feature('glob4').label('omega=Omega');
model.result('pg2').feature('glob4').set('xdatasolnumtype', 'outer');
model.result('pg2').feature('glob4').set('solutionparams', 'manual');
model.result('pg2').feature('glob4').setIndex('looplevelinput', 'last', 0);
model.result('pg2').feature('glob4').set('legend', true);
model.result('pg2').feature('glob4').set('legendmethod', 'manual');
model.result('pg2').feature('glob4').setIndex('legends', '\omega=\Omega', 0);
model.result('pg2').set('ylabel', 'Angular frequency (rad/s)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Campbell plot');
model.result('pg2').label('Campbell Plot (rotbm)');
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg2').setIndex('looplevelindices', 'range(1,1,8)', 0);
model.result('pg2').set('axislimits', true);
model.result('pg2').set('ymax', 5500);
model.result('pg2').set('ymin', -200);
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Mode Shape');
model.result('pg3').set('data', 'dset2');
model.result('pg3').set('looplevel', [6 5]);
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('radiusexpr', 'rotbm.re');
model.result('pg3').feature('line1').set('colortable', 'AuroraAustralis');
model.result('pg3').feature('line1').set('colorlegend', false);
model.result('pg3').feature('line1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('line1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('line1').feature('def1').set('scale', 0.3);
model.result('pg3').run;
model.result('pg1').run;

model.title('Rotors Connected by a Spline Coupling');

model.description(['In this example, learn how to model two rotors connected by a spline coupling. The first rotor is a fixed cantilevered rotor and the second rotor is simply supported. The model assumes that only translational motion is coupled between the rotors through the coupling, while the rotations of both rotors are uncoupled.' newline  newline 'The tutorial demonstrates how to perform an eigenfrequency analysis at different speeds of the rotor, where the gyroscopic effects in the rotor stiffen the forward modes and soften the backward modes. The simulation results are illustrated in a Campbell plot and the critical speeds are compared and found close to those obtained in references.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;
model.sol('sol11').clearSolutionData;
model.sol('sol12').clearSolutionData;
model.sol('sol13').clearSolutionData;
model.sol('sol14').clearSolutionData;
model.sol('sol15').clearSolutionData;
model.sol('sol16').clearSolutionData;
model.sol('sol17').clearSolutionData;
model.sol('sol18').clearSolutionData;
model.sol('sol19').clearSolutionData;
model.sol('sol20').clearSolutionData;
model.sol('sol21').clearSolutionData;
model.sol('sol22').clearSolutionData;
model.sol('sol23').clearSolutionData;
model.sol('sol24').clearSolutionData;
model.sol('sol25').clearSolutionData;
model.sol('sol26').clearSolutionData;
model.sol('sol27').clearSolutionData;
model.sol('sol28').clearSolutionData;

model.label('coupled_rotors.mph');

model.modelNode.label('Components');

out = model;
