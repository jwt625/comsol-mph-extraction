function out = model
%
% electronic_enclosure_cooling.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Power_Electronics_and_Electronic_Cooling');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');
model.physics('ht').prop('ShapeProperty').set('order_temperature', '1');
model.physics.create('spf', 'TurbulentFlowAlgebraicYplus', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('AdvancedSettingProperty').set('UsePseudoTime', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');

model.multiphysics.create('nitf1', 'NonIsothermalFlow', 'geom1', 3);
model.multiphysics('nitf1').set('Fluid_physics', 'spf');
model.multiphysics('nitf1').set('Heat_physics', 'ht');

model.study.create('std1');
model.study('std1').create('wdi', 'WallDistanceInitialization');
model.study('std1').feature('wdi').set('solnum', 'auto');
model.study('std1').feature('wdi').set('notsolnum', 'auto');
model.study('std1').feature('wdi').set('outputmap', {});
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').set('ngenAUX', '1');
model.study('std1').feature('wdi').set('goalngenAUX', '1');
model.study('std1').feature('wdi').setSolveFor('/physics/ht', true);
model.study('std1').feature('wdi').setSolveFor('/physics/spf', true);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', true);
model.study('std1').feature('wdi').setSolveFor('/physics/ht', false);
model.study('std1').feature('wdi').setSolveFor('/multiphysics/nitf1', false);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/nitf1', true);

model.geom('geom1').lengthUnit('cm');

model.param.set('OR', '0.4');
model.param.descr('OR', 'Opening ratio of the grille');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'electronic_enclosure_cooling.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Air');
model.selection('sel1').set([1]);

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom(2);
model.view('view1').hideEntities('hide1').add([1 2 4 41 776]);

model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Plastic');
model.selection('sel2').set([6 7 10 11 14 20 21 22 25 26 30 37 38 41 42 45 46]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Fins');
model.selection('sel3').geom(2);
model.selection('sel3').set([142 143 144 145 146 147 148 149 150 151 152 153 175 176 177 178 179 180 181 182 183 184 185 186 292 322 378 441 495 529 636 651 666 677]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Enclosure Sides');
model.selection('sel4').geom(2);
model.selection('sel4').set([1 2 4 41 776]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Aluminum Boundaries');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel3' 'sel4'});
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Transformer Shell');
model.selection('sel5').set([3 8 9 18 23 24 34 39 40]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Small Transformer Coils');
model.selection('sel6').set([12 27]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Large Transformer Coil');
model.selection('sel7').set([43]);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Transformer Coils');
model.selection('uni2').set('input', {'sel6' 'sel7'});
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Inductors');
model.selection('sel8').set([5 19 33]);
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Steel Parts');
model.selection('uni3').set('input', {'sel5' 'sel8'});
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Large Capacitors');
model.selection('sel9').set([17 48]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Medium Capacitors');
model.selection('sel10').set([4 15 29 35 44 50]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Small Capacitors');
model.selection('sel11').set([2 13 31 36]);
model.selection.create('uni4', 'Union');
model.selection('uni4').model('comp1');
model.selection('uni4').label('Capacitors');
model.selection('uni4').set('input', {'sel9' 'sel10' 'sel11'});
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Transistors Silicon Cores');
model.selection('sel12').set([16 28 32 47 49]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Copper Layers');
model.selection('adj1').set('input', {'sel8'});
model.selection.create('sel13', 'Explicit');
model.selection('sel13').model('comp1');
model.selection('sel13').label('Grille');
model.selection('sel13').geom(2);
model.selection('sel13').set([777]);
model.selection.create('sel14', 'Explicit');
model.selection('sel14').model('comp1');
model.selection('sel14').label('Fan');
model.selection('sel14').geom(2);
model.selection('sel14').set([87]);
model.selection.create('sel15', 'Explicit');
model.selection('sel15').model('comp1');
model.selection('sel15').label('Circuit Board');
model.selection('sel15').geom(2);
model.selection('sel15').set([3]);
model.selection('sel15').set('groupcontang', true);
model.selection.create('uni5', 'Union');
model.selection('uni5').model('comp1');
model.selection('uni5').label('Conductive Layers');
model.selection('uni5').set('entitydim', 2);
model.selection('uni5').set('input', {'uni1' 'adj1' 'sel15'});
model.selection.create('sel16', 'Explicit');
model.selection('sel16').model('comp1');
model.selection('sel16').label('Wire Group Surface');
model.selection('sel16').geom(2);
model.selection('sel16').set([538 539 556 557 763 764 765 766 767 768 769 770 771 772 773 774]);
model.selection.create('sel17', 'Explicit');
model.selection('sel17').model('comp1');
model.selection('sel17').label('Small Wire Surface');
model.selection('sel17').geom(2);
model.selection('sel17').set([82 83 84 85]);
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Component Boundaries');
model.selection('adj2').set('input', {'sel2' 'uni2' 'uni3' 'uni4' 'sel12'});
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Heat Exchange Surface');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'sel3' 'adj2'});
model.selection('dif1').set('subtract', {'sel15'});
model.selection.create('sel18', 'Explicit');
model.selection('sel18').model('comp1');
model.selection('sel18').label('Curved Area');
model.selection('sel18').geom(2);
model.selection('sel18').set([5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135]);
model.selection.create('uni6', 'Union');
model.selection('uni6').model('comp1');
model.selection('uni6').label('Walls');
model.selection('uni6').set('entitydim', 2);
model.selection('uni6').set('input', {'uni5' 'sel16' 'sel17' 'dif1' 'sel18'});

model.title('Parameterized Electronic Enclosure Geometry');

model.description('This is a template MPH-file containing the physics interfaces and the parameterized geometry for the model Forced Convection Cooling of an Enclosure with Fan and Grille.');

model.label('electronic_enclosure_cooling_geom.mph');

model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'k_grille');
model.func('an1').set('expr', '12084*OR^6-42281*OR^5+60989*OR^4-46559*OR^3+19963*OR^2-4618.5*OR+462.89');
model.func('an1').set('args', 'OR');
model.func('an1').setIndex('argunit', 1, 0);
model.func('an1').set('fununit', 'm^-4');
model.func('an1').setIndex('plotargs', 0.8, 0, 2);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Acrylic plastic');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat2').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('noise', true);
model.material('mat2').set('lighting', 'phong');
model.material('mat2').set('shininess', 1000);
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '1470[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('density', '1190[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '3.2[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').label('Steel AISI 4340');
model.material('mat3').set('family', 'steel');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat3').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.28');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat4').label('Aluminum');
model.material('mat4').set('family', 'aluminum');
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat4').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.33');
model.material('mat4').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat4').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat4').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat5').label('Copper');
model.material('mat5').set('family', 'copper');
model.material('mat5').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat5').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat5').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.35');
model.material('mat5').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat5').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat5').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat5').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat6').label('Silicon');
model.material('mat6').set('family', 'custom');
model.material('mat6').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat6').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat6').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat6').set('noise', true);
model.material('mat6').set('fresnel', 0.7);
model.material('mat6').set('metallic', 0);
model.material('mat6').set('pearl', 0);
model.material('mat6').set('diffusewrap', 0);
model.material('mat6').set('clearcoat', 0);
model.material('mat6').set('reflectance', 0);
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat6').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat6').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat6').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat6').propertyGroup('Enu').set('nu', '0.28');
model.material('mat6').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat7').label('Aluminum 6063-T83');
model.material('mat7').set('family', 'aluminum');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]' '0' '0' '0' '3.030e7[S/m]'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]' '0' '0' '0' '23.4e-6[1/K]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]' '0' '0' '0' '201[W/(m*K)]'});
model.material('mat7').propertyGroup('Enu').set('E', '69[GPa]');
model.material('mat7').propertyGroup('Enu').set('nu', '0.33');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat8').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat8').label('Copper 1');
model.material('mat8').set('family', 'copper');
model.material('mat8').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat8').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat8').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat8').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat8').propertyGroup('Enu').set('nu', '0.35');
model.material('mat8').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat8').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat8').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat8').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').selection.named('sel1');
model.material('mat2').selection.named('sel2');
model.material('mat3').selection.named('uni3');
model.material('mat4').selection.named('uni4');
model.material('mat5').selection.named('uni2');
model.material('mat6').selection.named('sel12');
model.material('mat7').label('Heat Sink');
model.material('mat7').selection.geom('geom1', 2);
model.material('mat7').selection.named('uni1');
model.material('mat7').propertyGroup.create('shell', 'Shell');
model.material('mat7').propertyGroup('shell').set('lth', {'2[mm]'});
model.material('mat8').label('Copper layers');
model.material('mat8').selection.geom('geom1', 2);
model.material('mat8').selection.named('adj1');
model.material('mat8').propertyGroup.create('shell', 'Shell');
model.material('mat8').propertyGroup('shell').set('lth', {'2[mm]'});
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').label('FR4 (Circuit Board)');
model.material('mat9').selection.geom('geom1', 2);
model.material('mat9').selection.named('sel15');
model.material('mat9').propertyGroup.create('shell', 'Shell');
model.material('mat9').propertyGroup('def').set('heatcapacity', '');
model.material('mat9').propertyGroup('def').set('density', '');
model.material('mat9').propertyGroup('def').set('thermalconductivity', '');
model.material('mat9').propertyGroup('shell').set('lth', {'2[mm]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', {'1369[J/(kg*K)]'});
model.material('mat9').propertyGroup('def').set('density', {'1900[kg/m^3]'});
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'10' '10' '0.3'});

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('T_amb', '30[degC]');

model.physics('ht').feature('fluid1').selection.named('sel1');
model.physics('ht').feature('init1').set('Tinit_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('hs1', 'HeatSource', 3);
model.physics('ht').feature('hs1').label('Heat Source 1: Transistors');
model.physics('ht').feature('hs1').selection.named('sel12');
model.physics('ht').feature('hs1').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs1').set('P0', 25);
model.physics('ht').create('hs2', 'HeatSource', 3);
model.physics('ht').feature('hs2').label('Heat Source 2: Large Transformer Coil');
model.physics('ht').feature('hs2').selection.named('sel7');
model.physics('ht').feature('hs2').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs2').set('P0', 5);
model.physics('ht').create('hs3', 'HeatSource', 3);
model.physics('ht').feature('hs3').label('Heat Source 3: Small Transformer Coils');
model.physics('ht').feature('hs3').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs3').set('P0', 3);
model.physics('ht').feature('hs3').selection.named('sel6');
model.physics('ht').create('hs4', 'HeatSource', 3);
model.physics('ht').feature('hs4').label('Heat Source 4: Inductor');
model.physics('ht').feature('hs4').selection.named('sel8');
model.physics('ht').feature('hs4').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs4').set('P0', 2);
model.physics('ht').create('hs5', 'HeatSource', 3);
model.physics('ht').feature('hs5').label('Heat Source 5: Large Capacitors');
model.physics('ht').feature('hs5').selection.named('sel9');
model.physics('ht').feature('hs5').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs5').set('P0', 2);
model.physics('ht').create('hs6', 'HeatSource', 3);
model.physics('ht').feature('hs6').label('Heat Source 6: Medium Capacitors');
model.physics('ht').feature('hs6').selection.named('sel10');
model.physics('ht').feature('hs6').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs6').set('P0', 3);
model.physics('ht').create('hs7', 'HeatSource', 3);
model.physics('ht').feature('hs7').label('Heat Source 7: Small Capacitors');
model.physics('ht').feature('hs7').selection.named('sel11');
model.physics('ht').feature('hs7').set('heatSourceType', 'HeatRate');
model.physics('ht').feature('hs7').set('P0', 1);
model.physics('ht').create('ifl1', 'Inflow', 2);
model.physics('ht').feature('ifl1').selection.named('sel13');
model.physics('ht').feature('ifl1').set('Tustr_src', 'root.comp1.ampr1.T_amb');
model.physics('ht').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht').feature('sls1').selection.named('uni5');
model.physics('ht').feature('sls1').set('LayerType', 'Conductive');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 2);
model.physics('ht').feature('ofl1').selection.named('sel14');
model.physics('spf').selection.named('sel1');
model.physics('spf').prop('TurbulenceModelProperty').set('WallTreatment', 'LowReynoldsNumber');
model.physics('spf').create('iwbc1', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc1').selection.named('sel3');
model.physics('spf').create('fan1', 'ExtFan', 2);
model.physics('spf').feature('fan1').selection.named('sel14');
model.physics('spf').feature('fan1').set('FlowDirection', 'Outlet');
model.physics('spf').feature('fan1').set('FlowCondition', 'StaticPressureCurveData');
model.physics('spf').feature('fan1').set('V0data', {'0' '0.000833333' '0.001666667' '0.0025' '0.002916667' '0.003333333' '0.00375' '0.004166667' '0.004583333' '0.004833333'});
model.physics('spf').feature('fan1').set('spcd', [12.3 11.4 9 6.3 6 5.8 4.3 2.2 0.7 0]);
model.physics('spf').feature('fan1').set('InterpFunctionType', 'PiecewiseCubic');
model.physics('spf').create('grille1', 'Grille', 2);
model.physics('spf').feature('grille1').selection.named('sel13');
model.physics('spf').feature('grille1').set('qlc', 'k_grille(OR)*nitf1.rho/2');
model.physics('spf').feature('init1').set('u_init', [-1 0 0]);

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('hauto', 6);
model.mesh('mesh1').feature('map1').selection.named('sel16');
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('hauto', 3);
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 0.5);
model.mesh('mesh1').feature('map1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmin', 0.4);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.named('sel17');
model.mesh('mesh1').feature('map2').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map2').create('size1', 'Size');
model.mesh('mesh1').feature('map2').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('map2').feature('size1').set('hauto', 2);
model.mesh('mesh1').feature('map2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map2').feature('size1').set('hmax', 0.15);
model.mesh('mesh1').run('map2');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('dif1');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 0.5);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmin', 0.4);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.05);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurve', 1);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hnarrowactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hnarrow', 1);
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('sel18');
model.mesh('mesh1').feature('ftri2').create('size1', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size1').set('table', 'cfd');
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('bl1').selection.named('sel1');
model.mesh('mesh1').feature('bl1').set('sharpcorners', 'trim');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('uni6');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, wall distance (spf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, wall distance (spf)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('se1', 'Segregated');
model.sol('sol1').feature('s2').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s2').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('segvar', {'comp1_p' 'comp1_u'});
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('s2').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('s2').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('segvar', {'comp1_yPlus'});
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subdamp', 0.45);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subiter', 3);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subtermconst', 'itertol');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('subntolfact', 1);
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i2').set('rhob', 400);
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('AMG, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('se1').feature('ss3').set('linsolver', 'i2');
model.sol('sol1').feature('s2').feature('se1').feature('ss3').label('Turbulence Variables');
model.sol('sol1').feature('s2').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s2').feature('se1').set('subinitcfl', 2);
model.sol('sol1').feature('s2').feature('se1').set('submincfl', 10000);
model.sol('sol1').feature('s2').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s2').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s2').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s2').feature('se1').set('segcflaa', true);
model.sol('sol1').feature('s2').feature('se1').set('segcflaacfl', 9000);
model.sol('sol1').feature('s2').feature('se1').set('segcflaafact', 1);
model.sol('sol1').feature('s2').feature('se1').set('maxsegiter', 400);
model.sol('sol1').feature('s2').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s2').feature('se1').feature('ll1').set('lowerlimit', 'comp1.yPlus 0 comp1.T 0 ');
model.sol('sol1').feature('s2').create('d2', 'Direct');
model.sol('sol1').feature('s2').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d2').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').create('d3', 'Direct');
model.sol('sol1').feature('s2').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d3').label('Direct, turbulence variables (spf)');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.set([1 2 3 4 41 138 139 142 143 144 145 146 147 148 149 150 151 152 153 158 162 165 171 172 175 176 177 178 179 180 181 182 183 184 185 186 189 190 191 192 193 194 222 223 224 225 239 242 260 261 281 284 292 306 307 308 309 312 313 316 317 322 328 329 334 339 342 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 364 365 366 367 368 369 370 371 372 373 378 419 420 421 422 435 436 441 446 447 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 481 484 495 508 511 517 518 529 531 534 541 542 543 544 545 546 547 548 549 550 553 560 561 569 570 576 579 584 587 628 629 636 643 644 645 646 651 652 653 655 658 666 669 670 677 692 693 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 733 736 749 752 776]);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Temperature (ht)');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg1').selection.geom('geom1', 3);
model.result('pg1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]);
model.result('pg1').feature.create('vol1', 'Volume');
model.result('pg1').feature('vol1').label('Domain');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('solutionparams', 'parent');
model.result('pg1').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg1').feature('vol1').set('smooth', 'internal');
model.result('pg1').feature('vol1').set('showsolutionparams', 'on');
model.result('pg1').feature('vol1').set('data', 'parent');
model.result('pg1').feature.create('vol2', 'Volume');
model.result('pg1').feature('vol2').label('Layered Shell');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').set('showsolutionparams', 'on');
model.result('pg1').feature('vol2').set('solutionparams', 'parent');
model.result('pg1').feature('vol2').set('titletype', 'none');
model.result('pg1').feature('vol2').set('smooth', 'internal');
model.result('pg1').feature('vol2').set('showsolutionparams', 'on');
model.result('pg1').feature('vol2').set('data', 'lshl1');
model.result('pg1').feature('vol2').set('inheritplot', 'vol1');
model.result('pg1').feature.create('line1', 'Line');
model.result('pg1').feature('line1').label('Layered Shell Edges');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('solutionparams', 'parent');
model.result('pg1').feature('line1').set('expr', '1');
model.result('pg1').feature('line1').set('titletype', 'none');
model.result('pg1').feature('line1').set('coloring', 'uniform');
model.result('pg1').feature('line1').set('color', 'fromtheme');
model.result('pg1').feature('line1').set('smooth', 'internal');
model.result('pg1').feature('line1').set('showsolutionparams', 'on');
model.result('pg1').feature('line1').set('data', 'lshl1');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg2').feature.create('slc1', 'Slice');
model.result('pg2').feature('slc1').label('Slice');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('expr', 'spf.U');
model.result('pg2').feature('slc1').set('smooth', 'internal');
model.result('pg2').feature('slc1').set('showsolutionparams', 'on');
model.result('pg2').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'none');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Interior Walls');
model.result.dataset('surf2').set('data', 'none');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 140 141 154 155 156 157 159 160 161 163 164 166 167 168 169 170 173 174 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 206 207 210 212 214 215 216 218 219 220 221 222 223 224 225 226 227 228 229 232 233 238 240 241 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 282 283 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 302 304 305 306 307 308 309 310 311 314 315 316 317 322 323 324 325 326 327 330 331 332 333 335 336 338 340 341 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 390 391 394 396 398 399 400 402 403 404 405 406 407 408 409 412 413 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 441 442 443 444 445 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 482 483 485 486 487 488 489 491 492 493 494 495 496 497 498 499 500 501 503 505 506 507 509 510 512 513 514 515 516 519 520 521 522 523 524 529 530 532 533 535 536 537 538 539 541 542 543 544 545 546 547 548 549 550 551 552 554 555 556 557 558 559 562 563 564 565 566 567 568 571 572 573 574 575 577 578 580 581 582 583 585 586 588 589 590 591 592 593 594 595 596 597 598 602 603 606 608 610 611 612 614 615 616 617 618 619 620 621 624 625 626 627 630 631 632 633 634 635 636 637 638 643 644 645 646 647 648 649 650 651 652 653 654 656 657 659 660 661 666 667 668 671 672 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 732 734 735 737 738 739 740 741 742 743 744 745 746 747 748 750 751 753 754 755 756 757 759 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776]);
model.result.dataset('surf2').set('data', 'dset1');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([142 143 144 145 146 147 148 149 150 151 152 153 175 176 177 178 179 180 181 182 183 184 185 186]);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Pressure (spf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg4');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'p');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'surf1');
model.result('pg3').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg3').feature.create('slit1', 'SurfaceSlit');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').set('showsolutionparams', 'on');
model.result('pg3').feature('slit1').set('upexpr', 'up(p)');
model.result('pg3').feature('slit1').set('downexpr', 'down(p)');
model.result('pg3').feature('slit1').set('titletype', 'none');
model.result('pg3').feature('slit1').set('smooth', 'internal');
model.result('pg3').feature('slit1').set('showsolutionparams', 'on');
model.result('pg3').feature('slit1').set('data', 'surf2');
model.result('pg3').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Wall Resolution (spf)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond1/pcond2/pg3');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Wall Resolution');
model.result('pg4').feature('surf1').set('data', 'surf1');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'spf.Delta_wPlus');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'surf1');
model.result('pg4').feature.create('slit1', 'SurfaceSlit');
model.result('pg4').feature('slit1').label('Wall Resolution, Interior Walls');
model.result('pg4').feature('slit1').set('data', 'surf2');
model.result('pg4').feature('slit1').set('showsolutionparams', 'on');
model.result('pg4').feature('slit1').set('upexpr', 'spf.Delta_wPlus_u');
model.result('pg4').feature('slit1').set('downexpr', 'spf.Delta_wPlus_d');
model.result('pg4').feature('slit1').set('smooth', 'internal');
model.result('pg4').feature('slit1').set('showsolutionparams', 'on');
model.result('pg4').feature('slit1').set('data', 'surf2');
model.result('pg4').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature and Fluid Flow (nitf1)');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').set('data', 'dset1');
model.result('pg5').set('defaultPlotID', 'MultiphysicsNonIsothermalFlow/cfcom1/pdef1/pcond4/pcond3/pg1');
model.result('pg5').feature.create('surf1', 'Surface');
model.result('pg5').feature('surf1').label('Wall Temperature');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('solutionparams', 'parent');
model.result('pg5').feature('surf1').set('expr', 'ht.Tvar');
model.result('pg5').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('surf1').set('smooth', 'internal');
model.result('pg5').feature('surf1').set('showsolutionparams', 'on');
model.result('pg5').feature('surf1').set('data', 'parent');
model.result('pg5').feature('surf1').feature.create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg5').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 159 160 161 163 164 166 167 168 169 170 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 206 207 210 212 214 215 216 218 219 220 221 222 223 224 225 226 227 228 229 232 233 238 240 241 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 282 283 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 302 304 305 306 307 308 309 310 311 314 315 316 317 322 323 324 325 326 327 330 331 332 333 335 336 338 340 341 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 390 391 394 396 398 399 400 402 403 404 405 406 407 408 409 412 413 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 441 442 443 444 445 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 482 483 485 486 487 488 489 491 492 493 494 495 496 497 498 499 500 501 503 505 506 507 509 510 512 513 514 515 516 519 520 521 522 523 524 529 530 532 533 535 536 537 538 539 541 542 543 544 545 546 547 548 549 550 551 552 554 555 556 557 558 559 562 563 564 565 566 567 568 571 572 573 574 575 577 578 580 581 582 583 585 586 588 589 590 591 592 593 594 595 596 597 598 602 603 606 608 610 611 612 614 615 616 617 618 619 620 621 624 625 626 627 630 631 632 633 634 635 636 637 638 643 644 645 646 647 648 649 650 651 652 653 654 656 657 659 660 661 666 667 668 671 672 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 732 734 735 737 738 739 740 741 742 743 744 745 746 747 748 750 751 753 754 755 756 757 759 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776]);
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').label('Solid Temperature');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'nitf1.T');
model.result('pg5').feature('vol1').set('smooth', 'internal');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').feature('vol1').feature.create('sel1', 'Selection');
model.result('pg5').feature('vol1').feature('sel1').selection.geom('geom1', 3);
model.result('pg5').feature('vol1').feature('sel1').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]);
model.result('pg5').feature('vol1').set('inheritplot', 'surf1');
model.result('pg5').feature.create('arwv1', 'ArrowVolume');
model.result('pg5').feature('arwv1').label('Fluid Flow');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('solutionparams', 'parent');
model.result('pg5').feature('arwv1').set('expr', {'nitf1.ux' 'nitf1.uy' 'nitf1.uz'});
model.result('pg5').feature('arwv1').set('xnumber', 30);
model.result('pg5').feature('arwv1').set('ynumber', 30);
model.result('pg5').feature('arwv1').set('znumber', 30);
model.result('pg5').feature('arwv1').set('arrowtype', 'cone');
model.result('pg5').feature('arwv1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('arwv1').set('showsolutionparams', 'on');
model.result('pg5').feature('arwv1').set('data', 'parent');
model.result('pg5').feature('arwv1').feature.create('col1', 'Color');
model.result('pg5').feature('arwv1').feature('col1').set('showcolordata', 'off');
model.result('pg5').feature('arwv1').feature('col1').set('expr', 'spf.U');
model.result('pg5').feature('arwv1').feature.create('filt1', 'Filter');
model.result('pg5').feature('arwv1').feature('filt1').set('expr', 'spf.U>nitf1.Uave');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature.remove('vol1');
model.result('pg1').run;
model.result('pg1').feature('vol2').set('unit', 'degC');
model.result('pg1').feature('vol2').set('colortable', 'HeatCameraLight');
model.result('pg1').run;
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('unit', 'degC');
model.result('pg1').feature('surf1').set('inheritplot', 'vol2');
model.result('pg1').run;
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('str1').set('descr', 'Velocity field');
model.result('pg1').feature('str1').selection.named('sel13');
model.result('pg1').feature('str1').set('linetype', 'tube');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').create('col1', 'Color');
model.result('pg1').run;
model.result('pg1').feature('str1').feature('col1').set('expr', 'spf.U');
model.result('pg1').feature('str1').feature('col1').set('descr', 'Velocity magnitude');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg4').run;
model.result('pg5').run;
model.result('pg1').run;

model.title('Forced Convection Cooling of an Enclosure with Fan and Grille');

model.description('This study simulates the thermal behavior of a computer power supply unit (PSU). Such electronic enclosures typically include cooling devices to avoid electronic components being damaged by excessively high temperatures. In this example, an extracting fan and a perforated grille cause an airflow in the enclosure to cool internal heating.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('electronic_enclosure_cooling.mph');

model.modelNode.label('Components');

out = model;
