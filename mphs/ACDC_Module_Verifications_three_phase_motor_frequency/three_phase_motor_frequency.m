function out = model
%
% three_phase_motor_frequency.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Verifications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/mf', true);

model.param.set('f0', '60[Hz]');
model.param.descr('f0', 'Supply frequency');
model.param.set('w0', '2*pi*f0');
model.param.descr('w0', 'Supply angular frequency');
model.param.set('n0', '1000');
model.param.descr('n0', 'Number of turns');
model.param.set('L', '1[m]');
model.param.descr('L', 'Length of the motor');
model.param.set('Omega', '200[rad/s]');
model.param.descr('Omega', 'Angular speed of the rotor');
model.param.set('coil_wire_current', '2045.175[A]*sqrt(2)/n0');
model.param.descr('coil_wire_current', 'Current amplitude in coil wire');

model.geom('geom1').insertFile('three_phase_motor_frequency_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.set([19]);
model.cpl('intop1').label('Integration, Steel');
model.cpl('intop1').set('opname', 'int_steel');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.set([18]);
model.cpl('intop2').label('Integration, Aluminum');
model.cpl('intop2').set('opname', 'int_al');

model.coordSystem.create('sys2', 'geom1', 'Cylindrical');
model.coordSystem.create('ie1', 'geom1', 'InfiniteElement');
model.coordSystem('ie1').selection.set([1 2]);
model.coordSystem('ie1').set('ScalingType', 'Cylindrical');

model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').selection.set([15 18 19]);
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').selection.set([4 13]);
model.physics('mf').feature('coil1').label('Coil, Phase A');
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('coilGroup', true);
model.physics('mf').feature('coil1').set('ICoil', 'coil_wire_current');
model.physics('mf').feature('coil1').set('N', 'n0');
model.physics('mf').feature('coil1').create('rcd1', 'ReverseCoilGroupDomain', 2);
model.physics('mf').feature('coil1').feature('rcd1').selection.set([13]);
model.physics('mf').feature.duplicate('coil2', 'coil1');
model.physics('mf').feature('coil2').label('Coil, Phase B');
model.physics('mf').feature('coil2').selection.set([7 9]);
model.physics('mf').feature('coil2').feature('rcd1').selection.set([7]);
model.physics('mf').feature('coil2').set('ICoil', 'coil_wire_current*exp(j*2*pi/3)');
model.physics('mf').feature.duplicate('coil3', 'coil2');
model.physics('mf').feature('coil3').label('Coil, Phase C');
model.physics('mf').feature('coil3').selection.set([5 11]);
model.physics('mf').feature('coil3').set('ICoil', 'coil_wire_current*exp(-j*2*pi/3)');
model.physics('mf').feature('coil3').feature('rcd1').selection.set([5]);
model.physics('mf').create('vlt1', 'Velocity', 2);
model.physics('mf').feature('vlt1').selection.set([18 19]);
model.physics('mf').feature('vlt1').set('coordinateSystem', 'sys2');
model.physics('mf').feature('vlt1').set('v', {'0' 'Omega*sys2.r' '0'});
model.physics('mf').create('fcal1', 'ForceCalculation', 2);
model.physics('mf').feature('fcal1').selection.set([18 19]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat1').label('Copper');
model.material('mat1').set('family', 'copper');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.35');
model.material('mat1').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat1').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat1').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat1').propertyGroup('linzRes').addInput('temperature');
model.material('mat1').selection.set([4 5 7 9 11 13]);
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Aluminum');
model.material('mat2').selection.set([18]);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'3.72e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Rotor Steel');
model.material('mat3').selection.set([19]);
model.material('mat3').propertyGroup('def').set('relpermeability', {'30'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1.6e6[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Stator Steel');
model.material('mat4').selection.set([15]);
model.material('mat4').propertyGroup('def').set('relpermeability', {'30'});
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1'});

model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'f0', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'Hz', 0);
model.study('std1').feature('param').setIndex('pname', 'Omega', 0);
model.study('std1').feature('param').setIndex('plistarr', 'range(0,20,1200)', 0);
model.study('std1').feature('freq').set('plist', 'f0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'Omega'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(0,20,1200)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('sweeptype', 'sparse');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'param');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 61, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'mf.Az');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').run;
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').run;
model.result('pg2').label('Current Density');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', '\OMEGA: eval(Omega) rad/s Surface: Current density (A/m<sup>2</sup>) Lines: Magnetic flux density');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'mf.Jz');
model.result('pg2').feature('surf1').set('descr', 'Current density, z-component');
model.result('pg2').run;
model.result('pg2').create('con1', 'Contour');
model.result('pg2').feature('con1').set('expr', 'mf.Az');
model.result('pg2').feature('con1').set('descr', 'Magnetic vector potential, z-component');
model.result('pg2').feature('con1').set('coloring', 'uniform');
model.result('pg2').feature('con1').set('color', 'gray');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 20, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 41, 0);
model.result('pg2').run;
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').label('Reference Data');
model.result.table('tbl1').importData('three_phase_motor_frequency_data.txt');
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Torque');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Torque (N*m)');
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Angular Velocity (rad/s)');
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'mf.Tz_0'});
model.result('pg3').feature('glob1').set('descr', {'Torque, z-component'});
model.result('pg3').feature('glob1').set('unit', {'N*m'});
model.result('pg3').feature('glob1').set('legendmethod', 'manual');
model.result('pg3').feature('glob1').setIndex('legends', 'Computed', 0);
model.result('pg3').run;
model.result('pg3').create('tblp1', 'Table');
model.result('pg3').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg3').feature('tblp1').set('linewidth', 'preference');
model.result('pg3').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg3').feature('tblp1').set('plotcolumns', [2]);
model.result('pg3').feature('tblp1').set('linestyle', 'none');
model.result('pg3').feature('tblp1').set('linemarker', 'cycle');
model.result('pg3').feature('tblp1').set('legend', true);
model.result('pg3').feature('tblp1').set('legendmethod', 'manual');
model.result('pg3').feature('tblp1').setIndex('legends', 'Reference', 0);
model.result('pg3').run;
model.result('pg3').run;
model.result.duplicate('pg4', 'pg3');
model.result('pg4').run;
model.result('pg4').label('Coil Voltage');
model.result('pg4').set('title', 'Coil Voltage per Turn (V, RMS)');
model.result('pg4').run;
model.result('pg4').feature('glob1').setIndex('expr', 'abs(mf.coil1.Vind)/(n0*sqrt(2))', 0);
model.result('pg4').run;
model.result('pg4').feature('tblp1').set('plotcolumns', [3]);
model.result('pg4').run;
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Rotor Losses');
model.result('pg5').set('title', 'Rotor Losses (W)');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'int_steel(mf.Qh*L)+int_al(mf.Qh*L)', 0);
model.result('pg5').run;
model.result('pg5').feature('tblp1').set('plotcolumns', [4]);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Steel Losses');
model.result('pg6').set('title', 'Steel Losses (W)');
model.result('pg6').run;
model.result('pg6').feature('glob1').setIndex('expr', 'int_steel(mf.Qh*L)', 0);
model.result('pg6').run;
model.result('pg6').feature('tblp1').set('plotcolumns', [5]);
model.result('pg6').run;
model.result('pg2').run;
model.result.export.create('anim1', 'Animation');
model.result.export('anim1').set('target', 'player');
model.result.export('anim1').set('fontsize', '9');
model.result.export('anim1').set('colortheme', 'globaltheme');
model.result.export('anim1').set('customcolor', [1 1 1]);
model.result.export('anim1').set('background', 'color');
model.result.export('anim1').set('gltfincludelines', 'on');
model.result.export('anim1').set('title1d', 'on');
model.result.export('anim1').set('legend1d', 'on');
model.result.export('anim1').set('logo1d', 'on');
model.result.export('anim1').set('options1d', 'on');
model.result.export('anim1').set('title2d', 'on');
model.result.export('anim1').set('legend2d', 'on');
model.result.export('anim1').set('logo2d', 'on');
model.result.export('anim1').set('options2d', 'off');
model.result.export('anim1').set('title3d', 'on');
model.result.export('anim1').set('legend3d', 'on');
model.result.export('anim1').set('logo3d', 'on');
model.result.export('anim1').set('options3d', 'off');
model.result.export('anim1').set('axisorientation', 'on');
model.result.export('anim1').set('grid', 'on');
model.result.export('anim1').set('axes1d', 'on');
model.result.export('anim1').set('axes2d', 'on');
model.result.export('anim1').set('showgrid', 'on');
model.result.export('anim1').showFrame;
model.result.export('anim1').set('sweeptype', 'dde');
model.result.export('anim1').set('repeat', 'forever');
model.result('pg2').run;

model.title('Frequency Domain Study of Three-Phase Motor');

model.description(['This three-phase induction motor model is used to compare with Testing Electromagnetic Analysis Method (TEAM) workshop problem 30.' newline  newline 'The Magnetic Fields physics is used to model the motor in the frequency domain at 60' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'Hz. The Velocity (Lorentz Term) feature is used to model the armature' native2unicode(hex2dec({'20' '19'}), 'unicode') 's rotation.' newline  newline 'Solving the model generates values for the motor' native2unicode(hex2dec({'20' '19'}), 'unicode') 's electromagnetic torque, induced voltage, and rotor losses at various rotor speeds. These computed results are then compared to the TEAM problem' native2unicode(hex2dec({'20' '19'}), 'unicode') 's analytical results.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('three_phase_motor_frequency.mph');

model.modelNode.label('Components');

out = model;
