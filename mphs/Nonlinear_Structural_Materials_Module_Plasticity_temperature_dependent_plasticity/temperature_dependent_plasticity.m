function out = model
%
% temperature_dependent_plasticity.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Plasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics('solid').prop('StructuralTransientBehavior').set('StructuralTransientBehavior', 'Quasistatic');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.multiphysics.create('te1', 'ThermalExpansion', 'geom1', 3);
model.multiphysics('te1').set('Heat_physics', 'ht');
model.multiphysics('te1').set('Solid_physics', 'solid');
model.multiphysics('te1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/te1', true);

model.param.set('internalPressure', '70[bar]');
model.param.descr('internalPressure', 'Internal pressure');
model.param.set('t', '0[s]');
model.param.descr('t', 'Time variable; used for stationary analysis');

model.geom('geom1').insertFile('temperature_dependent_plasticity_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.physics('solid').feature('lemm1').create('plsty1', 'Plasticity', 3);
model.physics('solid').feature('lemm1').feature('plsty1').selection.set([1 3]);
model.physics('solid').feature('lemm1').feature('plsty1').set('IsotropicHardeningModel', 'HardeningFunction');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Stainless Steel');
model.material('mat1').selection.set([1 3]);
model.material('mat1').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat1').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat1').propertyGroup('def').set('density', {'8000'});
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'fE');
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 20, 0, 0);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 194, 0, 1);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 100, 1, 0);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 189, 1, 1);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 200, 2, 0);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 179, 2, 1);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 300, 3, 0);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('table', 175, 3, 1);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('argunit', 'degC', 0);
model.material('mat1').propertyGroup('Enu').func('int1').setIndex('fununit', 'GPa', 0);
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Enu').set('E', {'fE(T)'});
model.material('mat1').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('def').func('int1').set('funcname', 'fA');
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', 20, 0, 0);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', '16e-6', 0, 1);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', 100, 1, 0);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', '16.5e-6', 1, 1);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', 200, 2, 0);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', '17e-6', 2, 1);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', 300, 3, 0);
model.material('mat1').propertyGroup('def').func('int1').setIndex('table', '17.5e-6', 3, 1);
model.material('mat1').propertyGroup('def').func('int1').setIndex('argunit', 'degC', 0);
model.material('mat1').propertyGroup('def').func('int1').setIndex('fununit', '1/K', 0);
model.material('mat1').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup('def').func('int2').set('funcname', 'fK');
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 20, 0, 0);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 13.9, 0, 1);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 100, 1, 0);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 15.5, 1, 1);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 200, 2, 0);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 16.8, 2, 1);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 300, 3, 0);
model.material('mat1').propertyGroup('def').func('int2').setIndex('table', 17.8, 3, 1);
model.material('mat1').propertyGroup('def').func('int2').setIndex('argunit', 'degC', 0);
model.material('mat1').propertyGroup('def').func('int2').setIndex('fununit', 'W/(m*degC)', 0);
model.material('mat1').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat1').propertyGroup('def').func('int3').set('funcname', 'fCp');
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 20, 0, 0);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 482, 0, 1);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 100, 1, 0);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 504, 1, 1);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 200, 2, 0);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 521, 2, 1);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 300, 3, 0);
model.material('mat1').propertyGroup('def').func('int3').setIndex('table', 530, 3, 1);
model.material('mat1').propertyGroup('def').func('int3').setIndex('argunit', 'degC', 0);
model.material('mat1').propertyGroup('def').func('int3').setIndex('fununit', 'J/(kg*degC)', 0);
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'fK(T)'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'fCp(T)'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'fA(T)'});
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic_material_model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('source', 'file');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('filename', 'temperature_dependent_plasticity_function.txt');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').setIndex('funcs', 'sY', 0, 0);
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').setIndex('argunit', 'degC', 0);
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').setIndex('argunit', 1, 1);
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').setIndex('fununit', 'Pa', 0);
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').importData;
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', {'sY(T,0)'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', {'sY(T,epe)-sY(T,0)'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Carbon Steel');
model.material('mat2').selection.set([2 4]);
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat2').propertyGroup('def').set('density', {'8000'});
model.material('mat2').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('Enu').func('int1').set('funcname', 'fE');
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 20, 0, 0);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 208, 0, 1);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 100, 1, 0);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 202, 1, 1);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 200, 2, 0);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 196, 2, 1);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 300, 3, 0);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('table', 189, 3, 1);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('argunit', 'degC', 0);
model.material('mat2').propertyGroup('Enu').func('int1').setIndex('fununit', 'GPa', 0);
model.material('mat2').propertyGroup('Enu').addInput('temperature');
model.material('mat2').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('def').func('int1').set('funcname', 'fA');
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', 20, 0, 0);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', '10.9e-6', 0, 1);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', 100, 1, 0);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', '12.4e-6', 1, 1);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', 200, 2, 0);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', '13.8e-6', 2, 1);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', 300, 3, 0);
model.material('mat2').propertyGroup('def').func('int1').setIndex('table', '14.9e-6', 3, 1);
model.material('mat2').propertyGroup('def').func('int1').setIndex('argunit', 'degC', 0);
model.material('mat2').propertyGroup('def').func('int1').setIndex('fununit', '1/K', 0);
model.material('mat2').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup('def').func('int2').set('funcname', 'fK');
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 20, 0, 0);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 51.2, 0, 1);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 100, 1, 0);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 48.3, 1, 1);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 200, 2, 0);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 45.5, 2, 1);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 300, 3, 0);
model.material('mat2').propertyGroup('def').func('int2').setIndex('table', 42.7, 3, 1);
model.material('mat2').propertyGroup('def').func('int2').setIndex('argunit', 'degC', 0);
model.material('mat2').propertyGroup('def').func('int2').setIndex('fununit', 'W/(m*degC)', 0);
model.material('mat2').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat2').propertyGroup('def').func('int3').set('funcname', 'fCp');
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 20, 0, 0);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 489, 0, 1);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 100, 1, 0);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 519, 1, 1);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 200, 2, 0);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 546, 2, 1);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 300, 3, 0);
model.material('mat2').propertyGroup('def').func('int3').setIndex('table', 569, 3, 1);
model.material('mat2').propertyGroup('def').func('int3').setIndex('argunit', 'degC', 0);
model.material('mat2').propertyGroup('def').func('int3').setIndex('fununit', 'J/(kg*degC)', 0);
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('Enu').set('E', {'fE(T)'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'fK(T)'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'fCp(T)'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'fA(T)'});

model.func.create('step1', 'Step');
model.func('step1').model('comp1');
model.func('step1').set('funcname', 'pipeWaterTemp');
model.func('step1').set('location', '1[s]');
model.func('step1').set('from', '280[degC]');
model.func('step1').set('to', '20[degC]');
model.func.create('int1', 'Interpolation');
model.func('int1').model('comp1');
model.func('int1').set('funcname', 'vesselWaterTemp');
model.func('int1').setIndex('table', 0, 0, 0);
model.func('int1').setIndex('table', 280, 0, 1);
model.func('int1').setIndex('table', 1800, 1, 0);
model.func('int1').setIndex('table', 20, 1, 1);
model.func('int1').setIndex('argunit', 's', 0);
model.func('int1').setIndex('fununit', 'degC', 0);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Symmetry Boundaries');
model.selection('sel1').geom(2);
model.selection('sel1').set([1 3 4 5 7 8 11 13 16 17 19 22]);

model.physics('ht').feature('init1').set('Tinit', '280[degC]');
model.physics('ht').create('sym1', 'Symmetry', 2);
model.physics('ht').feature('sym1').selection.named('sel1');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.set([9 20 23]);
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 10);
model.physics('ht').feature('hf1').set('Text', '50[degC]');
model.physics('ht').create('hf2', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf2').selection.set([10 15]);
model.physics('ht').feature('hf2').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf2').set('h', 100);
model.physics('ht').feature('hf2').set('Text', 'pipeWaterTemp(t)');
model.physics('ht').create('hf3', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf3').selection.set([2]);
model.physics('ht').feature('hf3').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf3').set('h', 100);
model.physics('ht').feature('hf3').set('Text', 'vesselWaterTemp(t)');
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.named('sel1');
model.physics('solid').create('sym2', 'SymmetrySolid', 2);
model.physics('solid').feature('sym2').selection.set([4 8]);
model.physics('solid').feature('sym2').set('NormalDirectionTranslation', 'FreeDisplacement');
model.physics('solid').create('sym3', 'SymmetrySolid', 2);
model.physics('solid').feature('sym3').selection.set([24 25]);
model.physics('solid').feature('sym3').set('NormalDirectionTranslation', 'FreeDisplacement');
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([2 10 15]);
model.physics('solid').feature('bndl1').set('LoadType', 'FollowerPressure');
model.physics('solid').feature('bndl1').set('FollowerPressure', 'internalPressure');
model.physics('solid').create('bndl2', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl2').selection.set([4 8]);
model.physics('solid').feature('bndl2').set('FperArea', {'0' '0' '4.76*internalPressure'});
model.physics('solid').create('sl1', 'StressLinearization', -1);
model.physics('solid').feature('sl1').set('TypeSelection', 'Distributed');
model.physics('solid').feature('sl1').selection('BoundarySelection').set([9]);
model.physics('solid').feature('sl1').selection('DomainSelection').set([1 2]);

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.set([19]);
model.mesh('mesh1').feature('fq1').create('size1', 'Size');
model.mesh('mesh1').feature('fq1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('fq1').feature('size1').set('hmax', 0.015);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([4]);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').create('fq2', 'FreeQuad');
model.mesh('mesh1').feature('fq2').selection.set([9]);
model.mesh('mesh1').feature('fq2').create('size1', 'Size');
model.mesh('mesh1').feature('fq2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('fq2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('fq2').feature('size1').set('hmax', 0.05);
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.set([2]);
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe2').feature('dis1').set('elemratio', 3);
model.mesh('mesh1').feature('swe2').feature('dis1').set('reverse', true);
model.mesh('mesh1').create('swe3', 'Sweep');
model.mesh('mesh1').feature('swe3').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe3').selection.set([3]);
model.mesh('mesh1').feature('swe3').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe3').feature('dis1').set('numelem', 2);
model.mesh('mesh1').create('swe4', 'Sweep');
model.mesh('mesh1').feature('swe4').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe4').feature('dis1').set('numelem', 2);
model.mesh('mesh1').run('swe4');

model.study('std1').label('Study 1: Initialization');
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('se1', 'Segregated');
model.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_T'});
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('subdamp', 1);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Temperature');
model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_solid_sym2_un' 'comp1_solid_sym3_un'});
model.sol('sol1').feature('s1').create('d2', 'Direct');
model.sol('sol1').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d2').set('nliniterrefine', true);
model.sol('sol1').feature('s1').feature('d2').label('Suggested Direct Solver solid (te1)');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Solid Mechanics');
model.sol('sol1').feature('s1').feature('se1').set('segtermonres', 'off');
model.sol('sol1').feature('s1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('s1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver solid (te1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, heat transfer variables ht (te1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/solid', false);
model.study('std2').feature('time').setSolveFor('/physics/ht', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/te1', true);
model.study('std2').feature('time').set('tlist', 'range(0,0.2,2) range(60,60,1800)');
model.study('std2').feature('time').set('useinitsol', true);
model.study('std2').feature('time').set('initmethod', 'sol');
model.study('std2').feature('time').set('initstudy', 'std1');
model.study('std2').feature('time').set('usesol', true);
model.study('std2').feature('time').set('notsolmethod', 'sol');
model.study('std2').feature('time').set('notstudy', 'std1');
model.study('std2').label('Study 2: Heat Transfer');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'time');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'time');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,0.2,2) range(60,60,1800)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('atolmethod', {'comp1_T' 'global' 'comp1_u' 'global' 'comp1_solid_sym2_un' 'global' 'comp1_solid_sym3_un' 'global'});
model.sol('sol2').feature('t1').set('atol', {'comp1_T' '1e-3' 'comp1_u' '1e-3' 'comp1_solid_sym2_un' '1e-3' 'comp1_solid_sym3_un' '1e-3'});
model.sol('sol2').feature('t1').set('atolvaluemethod', {'comp1_T' 'factor' 'comp1_u' 'factor' 'comp1_solid_sym2_un' 'factor' 'comp1_solid_sym3_un' 'factor'});
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('estrat', 'exclude');
model.sol('sol2').feature('t1').set('maxorder', 2);
model.sol('sol2').feature('t1').set('control', 'time');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('d1').label('Direct, heat transfer variables ht (te1)');
model.sol('sol2').feature('t1').create('d2', 'Direct');
model.sol('sol2').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('d2').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('t1').feature('d2').set('nliniterrefine', true);
model.sol('sol2').feature('t1').feature('d2').label('Suggested Direct Solver solid (te1)');
model.sol('sol2').feature('t1').create('i1', 'Iterative');
model.sol('sol2').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i1').set('rhob', 40);
model.sol('sol2').feature('t1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('t1').feature('i1').label('Suggested Iterative Solver solid (te1)');
model.sol('sol2').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('t1').create('i2', 'Iterative');
model.sol('sol2').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('t1').feature('i2').set('maxlinit', 10000);
model.sol('sol2').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('t1').feature('i2').label('AMG, heat transfer variables ht (te1)');
model.sol('sol2').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol2').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol2').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol2').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol2').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').runAll;

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/solid', true);
model.study('std3').feature('stat').setSolveFor('/physics/ht', false);
model.study('std3').feature('stat').setSolveFor('/multiphysics/te1', true);
model.study('std3').feature('stat').set('useinitsol', true);
model.study('std3').feature('stat').set('initmethod', 'sol');
model.study('std3').feature('stat').set('initstudy', 'std1');
model.study('std3').feature('stat').set('usesol', true);
model.study('std3').feature('stat').set('notsolmethod', 'sol');
model.study('std3').feature('stat').set('notstudy', 'std2');
model.study('std3').feature('stat').set('notsolnum', 'all');
model.study('std3').feature('stat').set('useparam', true);
model.study('std3').feature('stat').setIndex('pname', 'internalPressure', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'Pa', 0);
model.study('std3').feature('stat').setIndex('pname', 'internalPressure', 0);
model.study('std3').feature('stat').setIndex('plistarr', '', 0);
model.study('std3').feature('stat').setIndex('punit', 'Pa', 0);
model.study('std3').feature('stat').setIndex('pname', 't', 0);
model.study('std3').feature('stat').setIndex('plistarr', 'range(0,0.2,2) range(60,60,1800)', 0);
model.study('std3').feature('stat').setIndex('punit', 's', 0);
model.study('std3').label('Study 3: Plasticity');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol3').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol3').feature('s1').set('control', 'stat');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver solid (te1)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver solid (te1)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s1').create('d2', 'Direct');
model.sol('sol3').feature('s1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('d2').label('Direct, heat transfer variables ht (te1)');
model.sol('sol3').feature('s1').create('i2', 'Iterative');
model.sol('sol3').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol3').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol3').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol3').feature('s1').feature('i2').set('maxlinit', 10000);
model.sol('sol3').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol3').feature('s1').feature('i2').label('AMG, heat transfer variables ht (te1)');
model.sol('sol3').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol3').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 41, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.dataset.create('cln1', 'CutLine3D');
model.result.dataset('cln1').set('data', 'dset3');
model.result.dataset('cln1').set('genpoints', {'comp1.solid.sl1.pt0X' 'comp1.solid.sl1.pt0Y' 'comp1.solid.sl1.pt0Z'; 'comp1.solid.sl1.pt1X' 'comp1.solid.sl1.pt1Y' 'comp1.solid.sl1.pt1Z'});
model.result.dataset('cln1').set('spacevars', {'sllx'});
model.result.dataset('cln1').label('Linearization Line (Stress Linearization 1)');
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'cln1');
model.result('pg2').label('Stress Linearization 1 (solid)');
model.result('pg2').set('defaultPlotID', 'stressLinearizationsolidsl1');
model.result('pg2').set('legendpos', 'middleright');
model.result('pg2').set('data', 'cln1');
model.result('pg2').setIndex('looplevelinput', 'last', 0);
model.result('pg2').create('lngr1', 'LineGraph');
model.result('pg2').feature('lngr1').set('expr', 'comp1.solid.sl1.Slls22');
model.result('pg2').feature('lngr1').label('Computed');
model.result('pg2').feature('lngr1').set('descr', 'Computed');
model.result('pg2').feature('lngr1').set('linestyle', 'cyclereset');
model.result('pg2').feature('lngr1').set('linecolor', 'custom');
model.result('pg2').feature('lngr1').set('legend', true);
model.result('pg2').feature('lngr1').set('autoplotlabel', true);
model.result('pg2').feature('lngr1').set('autosolution', false);
model.result('pg2').feature('lngr1').set('customlinecolor', [0.07058823853731155 0.2235294133424759 0.9529411792755127]);
model.result('pg2').create('lnsg1', 'LineSegments');
model.result('pg2').feature('lnsg1').label('Membrane Stress');
model.result('pg2').feature('lnsg1').setIndex('xexpr', 'comp1.solid.sl1.xs', 0);
model.result('pg2').feature('lnsg1').setIndex('xexpr', 'comp1.solid.sl1.xe', 1);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'comp1.solid.sl1.ySm22', 0);
model.result('pg2').feature('lnsg1').setIndex('yexpr', 'comp1.solid.sl1.ySm22', 1);
model.result('pg2').feature('lnsg1').set('linestyle', 'cyclereset');
model.result('pg2').feature('lnsg1').set('linecolor', 'custom');
model.result('pg2').feature('lnsg1').set('legend', true);
model.result('pg2').feature('lnsg1').set('autoplotlabel', true);
model.result('pg2').feature('lnsg1').set('autosolution', false);
model.result('pg2').feature('lnsg1').set('customlinecolor', [0.1568627506494522 0.7254902124404907 0.24313725531101227]);
model.result('pg2').create('lnsg2', 'LineSegments');
model.result('pg2').feature('lnsg2').label('Membrane Plus Bending Stress');
model.result('pg2').feature('lnsg2').setIndex('xexpr', 'comp1.solid.sl1.xs ', 0);
model.result('pg2').feature('lnsg2').setIndex('xexpr', 'comp1.solid.sl1.xe ', 1);
model.result('pg2').feature('lnsg2').setIndex('yexpr', 'comp1.solid.sl1.ySmbs22', 0);
model.result('pg2').feature('lnsg2').setIndex('yexpr', 'comp1.solid.sl1.ySmbe22', 1);
model.result('pg2').feature('lnsg2').set('linestyle', 'cyclereset');
model.result('pg2').feature('lnsg2').set('linecolor', 'custom');
model.result('pg2').feature('lnsg2').set('legend', true);
model.result('pg2').feature('lnsg2').set('autoplotlabel', true);
model.result('pg2').feature('lnsg2').set('autosolution', false);
model.result('pg2').feature('lnsg2').set('customlinecolor', [0.8235294222831726 0.019607843831181526 0.019607843831181526]);
model.result('pg1').run;

model.view.create('view4', 3);
model.view('view4').camera.setIndex('position', -0.727, 0);
model.view('view4').camera.setIndex('position', -3.4, 1);
model.view('view4').camera.set('position', [-0.727 -3.4 -3.27]);
model.view('view4').camera.set('zoomanglefull', 13.871);
model.view('view4').camera.setIndex('target', 1, 0);
model.view('view4').camera.setIndex('target', 0.39, 1);
model.view('view4').camera.set('target', [1 0.39 0.15]);
model.view('view4').camera.setIndex('up', 0.923, 0);
model.view('view4').camera.setIndex('up', -0.082, 1);
model.view('view4').camera.setIndex('up', -0.375, 2);
model.view('view4').camera.setIndex('viewoffset', 0.00575, 0);
model.view('view4').camera.set('viewoffset', [0.00575 -0.0292]);
model.view('view4').set('locked', true);
model.view.create('view5', 3);
model.view('view5').camera.setIndex('position', 3.325, 0);
model.view('view5').camera.setIndex('position', 4.401, 1);
model.view('view5').camera.set('position', {'3.325' '4.401' '2.90'});
model.view('view5').camera.set('zoomanglefull', 13.871);
model.view('view5').camera.setIndex('target', 1, 0);
model.view('view5').camera.setIndex('target', 0.39, 1);
model.view('view5').camera.set('target', [1 0.39 0.15]);
model.view('view5').camera.setIndex('up', 0.9, 0);
model.view('view5').camera.setIndex('up', -0.315, 1);
model.view('view5').camera.set('up', [0.9 -0.315 -0.301]);
model.view('view5').camera.setIndex('viewoffset', 0.00575, 0);
model.view('view5').camera.set('viewoffset', [0.00575 -0.0292]);
model.view('view5').set('showgrid', false);
model.view('view5').set('locked', true);

model.result('pg1').run;
model.result('pg1').set('view', 'view4');
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').run;
model.result('pg1').feature('vol1').feature('def').set('scaleactive', true);
model.result('pg1').feature('vol1').feature('def').set('scale', 0);
model.result('pg1').run;

model.view('view4').set('showgrid', false);

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 41, 0);
model.result('pg3').label('Equivalent Plastic Strain (solid)');
model.result('pg3').set('defaultPlotID', 'equivalentPlasticStrain');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'solid.epeGp'});
model.result('pg3').feature('surf1').set('inheritplot', 'none');
model.result('pg3').feature('surf1').set('resolution', 'normal');
model.result('pg3').feature('surf1').set('colortabletype', 'discrete');
model.result('pg3').feature('surf1').set('bandcount', 11);
model.result('pg3').feature('surf1').set('colortable', 'AuroraAustralisDark');
model.result('pg3').feature('surf1').set('descractive', true);
model.result('pg3').feature('surf1').set('descr', 'Equivalent plastic strain');
model.result('pg3').label('Equivalent Plastic Strain (solid)');
model.result('pg3').run;
model.result('pg3').set('view', 'view4');
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 31, 0);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 41, 0);
model.result('pg4').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg4').feature.create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('solutionparams', 'parent');
model.result('pg4').feature('vol1').set('expr', 'T');
model.result('pg4').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg4').feature('vol1').set('smooth', 'internal');
model.result('pg4').feature('vol1').set('showsolutionparams', 'on');
model.result('pg4').feature('vol1').set('data', 'parent');
model.result('pg4').label('Temperature (ht)');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('vol1').set('unit', 'degC');
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Stress Intensity, Maximum');
model.result.evaluationGroup('eg1').set('data', 'dset3');
model.result.evaluationGroup('eg1').create('max1', 'MaxSurface');
model.result.evaluationGroup('eg1').feature('max1').selection.set([9]);
model.result.evaluationGroup('eg1').feature('max1').set('expr', {'solid.SImb'});
model.result.evaluationGroup('eg1').feature('max1').set('descr', {'Stress intensity, membrane plus bending'});
model.result.evaluationGroup('eg1').feature('max1').set('unit', {'N/m^2'});
model.result.evaluationGroup('eg1').feature('max1').set('includepos', true);
model.result.evaluationGroup('eg1').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'none');
model.result('pg5').create('tblp1', 'Table');
model.result('pg5').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg5').feature('tblp1').set('evaluationgroup', 'eg1');
model.result('pg5').feature('tblp1').set('linewidth', 'preference');
model.result('pg5').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').label('Stress Intensity, Maximum');
model.result('pg5').run;
model.result('pg5').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg5').feature('tblp1').set('plotcolumns', [2]);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').run;
model.result('pg6').label('Stress Intensity');
model.result('pg6').set('data', 'dset3');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', 'solid.SImb');
model.result('pg6').feature('surf1').set('descr', 'Stress intensity, membrane plus bending');
model.result('pg6').feature('surf1').create('mrkr1', 'Marker');
model.result('pg6').run;
model.result('pg6').feature('surf1').feature('mrkr1').set('display', 'max');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 30, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').run;

model.physics('solid').feature('sl1').set('pt0sls', [0.77782 0.77782 0.295]);

model.sol('sol3').updateSolution;

model.result('pg1').run;
model.result.configuration.create('gsty1', 'GraphStyle');
model.result.configuration('gsty1').set('linewidth', 2);
model.result.configuration('gsty1').set('autopoint', false);
model.result.configuration('gsty1').set('autoplotlabel', true);
model.result('pg2').run;
model.result('pg2').setIndex('looplevelinput', 'manual', 0);
model.result('pg2').setIndex('looplevel', [1 41], 0);
model.result('pg2').set('styleconfig', 'gsty1');
model.result('pg2').set('legendpos', 'lowerleft');
model.result('pg2').run;
model.result('pg4').run;

model.title('Temperature-Dependent Plasticity in Pressure Vessel');

model.description('A pressure vessel is subjected to a rapid temperature change. The temperature gradients during the cooldown cause plastic deformations in the stainless steel cladding, where the yield stress and hardening functions depend on the temperature.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('temperature_dependent_plasticity.mph');

model.modelNode.label('Components');

out = model;
