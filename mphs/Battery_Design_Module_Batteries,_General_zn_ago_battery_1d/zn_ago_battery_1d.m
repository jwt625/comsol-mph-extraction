function out = model
%
% zn_ago_battery_1d.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Battery_Design_Module/Batteries,_General');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 1);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('batbe', 'BatteryBinaryElectrolyte', 'geom1');
model.physics('batbe').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/batbe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('L_Zn', '0.13[cm]', 'Thickness, negative electrode');
model.param.set('L_sep', '0.05[cm]', 'Thickness, separator');
model.param.set('L_AgO', '0.11[cm]', 'Thickness, positive electrode');
model.param.set('t_plus', '0.22', 'Transport number');
model.param.set('T', '300[K]', 'Operating temperature');
model.param.set('rho', '1500[kg/m^3]', 'Electrolyte solution density');
model.param.set('rho_Ag', '10.49[g/cm^3]', 'Density of Ag');
model.param.set('rho_AgO', '7.48[g/cm^3]', 'Density of AgO');
model.param.set('rho_Ag2O', '7.14[g/cm^3]', 'Density of Ag2O');
model.param.set('rho_Zn', '7.14[g/cm^3]', 'Density of Zn');
model.param.set('rho_ZnO', '5.606[g/cm^3]', 'Density of ZnO');
model.param.set('M_K', '39.1[g/mol]', 'Potassium molar mass');
model.param.set('M_OH', '17[g/mol]', 'Anion molar mass');
model.param.set('M_H2O', '18[g/mol]', 'Solvent molar mass');
model.param.set('MW_Ag', '107.87[g/mol]', 'Molecular weight of Ag');
model.param.set('MW_AgO', '123.87[g/mol]', 'Molecular weight of AgO');
model.param.set('MW_Ag2O', '231.74[g/mol]', 'Molecular weight of Ag2O');
model.param.set('MW_Zn', '65.38[g/mol]', 'Molecular weight of Zn');
model.param.set('MW_ZnO', '81.408[g/mol]', 'Molecular weight of ZnO');
model.param.set('D_OH', '5.26e-9[m^2/s]', 'Diffusion coefficient of OH ion');
model.param.set('D_K', '1.96e-9[m^2/s]', 'Diffusion coefficient of Zn ion');
model.param.set('sigma_Ag', '6.28e7[S/m]', 'Electronic conductivity of Ag');
model.param.set('sigma_AgO', '8.33e4[S/m]', 'Electronic conductivity of AgO');
model.param.set('sigma_Ag2O', '1e-6[S/m]', 'Electronic conductivity of Ag2O');
model.param.set('sigma_Zn', '1.83e7[S/m]', 'Electronic conductivity of Zn');
model.param.set('sigma_ZnO', '1[S/m]', 'Electronic conductivity of ZnO');
model.param.set('cl_init', '8.9[mol/dm^3]', 'Initial electrolyte concentration');
model.param.set('Coh_ref', 'cl_init*0.40', 'Reference electrolyte concentration');
model.param.set('cZn_init', '1.3e3[mol/m^3]*cZn_param', 'Initial concentration of Zn in the electrode');
model.param.set('cAg2O_init', '1e-6[mol/m^3]', 'Initial concentration of Ag2O in the electrode');
model.param.set('cAgO_init', '7e3[mol/m^3]', 'Initial concentration of AgO in the electrode');
model.param.set('Eeq1', '0.342[V]', 'Equilibrium potential of reaction1');
model.param.set('Eeq2', '0.604[V]', 'Equilibrium potential of reaction2');
model.param.set('Eeq3', '-1.305[V]', 'Equilibrium potential of reaction3');
model.param.set('i01', '2e-6[A/cm^2]', 'Exchange current density of reaction1');
model.param.set('i02', '2e-6[A/cm^2]', 'Exchange current density of reaction2');
model.param.set('i03', '1.75e-6[A/cm^2]', 'Exchange current density of reaction3');
model.param.set('alphaa1', '0.5', 'Anodic transfer coefficient for reaction1');
model.param.set('alphaa2', '0.2', 'Anodic transfer coefficient for reaction2');
model.param.set('alphaa3', '0.85', 'Anodic transfer coefficient for reaction3');
model.param.set('n', '2', 'Number of transferred electrons');
model.param.set('a', '10[cm^2/cm^3]', 'Specific surface area of electrodes');
model.param.set('eps_e_sep', '0.5', 'Porosity of separator');
model.param.set('eps_e_pos', '0.7', 'Initial porosity of positive electrode');
model.param.set('eps_e_neg', '0.5', 'Initial porosity of negative electrode');
model.param.set('cZn_param', '1', 'For parametric sweep');

model.func.create('pw1', 'Piecewise');
model.func('pw1').set('funcname', 'I');
model.func('pw1').set('smooth', 'cont');
model.func('pw1').set('smoothzone', 0.01);
model.func('pw1').set('pieces', {'0' '120' '0.05';  ...
'120' '220' '0.1';  ...
'220' '320' '0.15';  ...
'320' '420' '0.2';  ...
'420' '600' '0.3';  ...
'600' '800' '0.4'});
model.func('pw1').set('argunit', 's');
model.func('pw1').set('fununit', 'A/cm^2');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('cAg', 'batbe.c_pce1_Ag', 'Concentration of Ag');
model.variable('var1').set('cAgO', 'batbe.c_pce1_AgO', 'Concentration of AgO');
model.variable('var1').set('cAg2O', 'batbe.c_pce1_Ag2O', 'Concentration of Ag2O');
model.variable('var1').set('cZn', 'batbe.c_pce2_Zn', 'Concentration of Zn');
model.variable('var1').set('cZnO', 'batbe.c_pce2_ZnO', 'Concentration of ZnO');
model.variable('var1').set('mAg', 'max(cAg*MW_Ag/(cAg*MW_Ag+cAgO*MW_AgO+cAg2O*MW_Ag2O),eps)', 'Mass fraction of Ag');
model.variable('var1').set('mAgO', 'max(cAgO*MW_AgO/(cAg*MW_Ag+cAgO*MW_AgO+cAg2O*MW_Ag2O),eps)', 'Mass fraction of AgO');
model.variable('var1').set('mAg2O', 'max(cAg2O*MW_Ag2O/(cAg*MW_Ag+cAgO*MW_AgO+cAg2O*MW_Ag2O),eps)', 'Mass fraction of Ag2O');
model.variable('var1').set('mZn', 'max(cZn*MW_Zn/(cZn*MW_Zn+cZnO*MW_ZnO),eps)', 'Mass fraction of Zn');
model.variable('var1').set('mZnO', 'max(cZnO*MW_ZnO/(cZn*MW_Zn+cZnO*MW_ZnO),eps)', 'Mass fraction of ZnO');
model.variable('var1').set('sigmaleff', '(batbe.epsl*F_const^2/R_const/T)*(D_K+D_OH)*cl', 'Effective electrolyte conductivity');
model.variable('var1').set('sigmaseff_pos', 'sigma_Ag*mAg^1.5+sigma_AgO*mAgO^1.5+sigma_Ag2O*mAg2O^1.5', 'Effective electrical conductivity Positive');
model.variable('var1').set('sigmaseff_neg', 'sigma_Zn*mZn^1.5+sigma_ZnO*mZnO^1.5', 'Effective electrical conductivity Negative');

model.geom('geom1').create('i1', 'Interval');
model.geom('geom1').feature('i1').set('specify', 'len');
model.geom('geom1').feature('i1').setIndex('len', 'L_AgO', 0);
model.geom('geom1').feature('i1').setIndex('len', 'L_sep', 1);
model.geom('geom1').feature('i1').setIndex('len', 'L_Zn', 2);
model.geom('geom1').run('fin');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'EndTerminal');
model.cpl('intop1').selection.geom('geom1', 0);
model.cpl('intop1').selection.set([1]);

model.physics('batbe').prop('BatBeSpecies').set('ManMinus', 'M_OH');
model.physics('batbe').prop('BatBeSpecies').set('McatPlus', 'M_K');
model.physics('batbe').prop('BatBeSpecies').set('M0', 'M_H2O');
model.physics('batbe').feature('sep1').set('sigmal_mat', 'userdef');
model.physics('batbe').feature('sep1').set('sigmal', {'sigmaleff' '0' '0' '0' 'sigmaleff' '0' '0' '0' 'sigmaleff'});
model.physics('batbe').feature('sep1').set('Dl_mat', 'userdef');
model.physics('batbe').feature('sep1').set('Dl', 'D_OH');
model.physics('batbe').feature('sep1').set('transpNum_mat', 'userdef');
model.physics('batbe').feature('sep1').set('transpNum', 't_plus');
model.physics('batbe').feature('sep1').set('fcl_mat', 'userdef');
model.physics('batbe').feature('sep1').set('rho_mat', 'userdef');
model.physics('batbe').feature('sep1').set('rho', 'rho');
model.physics('batbe').feature('sep1').set('epsl', 'eps_e_sep');
model.physics('batbe').feature('sep1').set('IonicCorrModel', 'NoCorr');
model.physics('batbe').create('pce1', 'PorousElectrode', 1);
model.physics('batbe').feature('pce1').selection.set([1]);
model.physics('batbe').feature('pce1').label('Porous Electrode: AgO (positive electrode)');
model.physics('batbe').feature('pce1').set('sigmal_mat', 'userdef');
model.physics('batbe').feature('pce1').set('sigmal', {'sigmaleff' '0' '0' '0' 'sigmaleff' '0' '0' '0' 'sigmaleff'});
model.physics('batbe').feature('pce1').set('Dl_mat', 'userdef');
model.physics('batbe').feature('pce1').set('Dl', 'D_OH');
model.physics('batbe').feature('pce1').set('transpNum_mat', 'userdef');
model.physics('batbe').feature('pce1').set('transpNum', 't_plus');
model.physics('batbe').feature('pce1').set('fcl_mat', 'userdef');
model.physics('batbe').feature('pce1').set('rho_mat', 'userdef');
model.physics('batbe').feature('pce1').set('rho', 'rho');
model.physics('batbe').feature('pce1').set('sigma', {'sigmaseff_pos' '0' '0' '0' 'sigmaseff_pos' '0' '0' '0' 'sigmaseff_pos'});
model.physics('batbe').feature('pce1').set('IntercalationOption', 'NonIntercalatingParticles');
model.physics('batbe').feature('pce1').set('epss', '1-batbe.epsl');
model.physics('batbe').feature('pce1').set('epsl', 'eps_e_pos');
model.physics('batbe').feature('pce1').set('IonicCorrModel', 'NoCorr');
model.physics('batbe').feature('pce1').set('ElectricCorrModel', 'NoCorr');
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 0, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 0, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 0, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 'Ag2O', 0, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 'rho_Ag2O', 0, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 'MW_Ag2O', 0, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 1, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 1, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 'AgO', 1, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 'rho_AgO', 1, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 'MW_AgO', 1, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 2, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 2, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 2, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 2, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 2, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 's1', 2, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 8960, 2, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 0.06355, 2, 0);
model.physics('batbe').feature('pce1').setIndex('Species', 'Ag', 2, 0);
model.physics('batbe').feature('pce1').setIndex('rhos', 'rho_Ag', 2, 0);
model.physics('batbe').feature('pce1').setIndex('Ms', 'MW_Ag', 2, 0);
model.physics('batbe').feature('pce1').feature('per1').set('Eeq_mat', 'NernstEquation');
model.physics('batbe').feature('pce1').feature('per1').set('Eeq_ref', 'Eeq1');
model.physics('batbe').feature('pce1').feature('per1').set('CRNernst', '(cl/Coh_ref)^2*(cAg/cAg2O)^2');
model.physics('batbe').feature('pce1').feature('per1').set('CONernst', 'cAg2O/cAg2O_init');
model.physics('batbe').feature('pce1').feature('per1').set('ElectrodeKinetics', 'ButlerVolmer');
model.physics('batbe').feature('pce1').feature('per1').set('i0Type', 'FromNernstEquation');
model.physics('batbe').feature('pce1').feature('per1').set('i0_ref', 'i01');
model.physics('batbe').feature('pce1').feature('per1').set('alphaa', 'alphaa1*n');
model.physics('batbe').feature('pce1').feature('per1').set('ActiveSpecificSurfaceAreaType', 'userdef');
model.physics('batbe').feature('pce1').feature('per1').set('Av', 'a');
model.physics('batbe').feature('pce1').feature('per1').set('nm', 'n');
model.physics('batbe').feature('pce1').feature('per1').setIndex('Vib', -1, 0, 0);
model.physics('batbe').feature('pce1').feature('per1').setIndex('Vib', 2, 2, 0);
model.physics('batbe').feature('pce1').feature('per1').set('dEeqdT_mat', 'userdef');
model.physics('batbe').feature('pce1').create('per2', 'PorousElectrodeReaction', 1);
model.physics('batbe').feature('pce1').feature('per2').set('Eeq_mat', 'NernstEquation');
model.physics('batbe').feature('pce1').feature('per2').set('Eeq_ref', 'Eeq2');
model.physics('batbe').feature('pce1').feature('per2').set('CRNernst', '(cl/Coh_ref)^2*(cAg2O/cAgO_init)');
model.physics('batbe').feature('pce1').feature('per2').set('CONernst', 'max(cAgO/cAgO_init,1e-6)^2');
model.physics('batbe').feature('pce1').feature('per2').set('ElectrodeKinetics', 'ButlerVolmer');
model.physics('batbe').feature('pce1').feature('per2').set('i0Type', 'FromNernstEquation');
model.physics('batbe').feature('pce1').feature('per2').set('i0_ref', 'i02');
model.physics('batbe').feature('pce1').feature('per2').set('alphaa', 'alphaa2*n');
model.physics('batbe').feature('pce1').feature('per2').set('ActiveSpecificSurfaceAreaType', 'userdef');
model.physics('batbe').feature('pce1').feature('per2').set('Av', 'a');
model.physics('batbe').feature('pce1').feature('per2').set('nm', 'n');
model.physics('batbe').feature('pce1').feature('per2').setIndex('Vib', 1, 0, 0);
model.physics('batbe').feature('pce1').feature('per2').setIndex('Vib', -2, 1, 0);
model.physics('batbe').feature('pce1').feature('per2').set('dEeqdT_mat', 'userdef');
model.physics('batbe').feature('pce1').create('ivdds1', 'InitialValuesForDissolvingDepositingSpecies', 1);
model.physics('batbe').feature('pce1').feature('ivdds1').setIndex('c0', 'cAg2O_init', 0, 0);
model.physics('batbe').feature('pce1').feature('ivdds1').setIndex('c0', 'cAgO_init', 1, 0);
model.physics('batbe').create('pce2', 'PorousElectrode', 1);
model.physics('batbe').feature('pce2').label('Porous Electrode: Zn (negative electrode)');
model.physics('batbe').feature('pce2').selection.set([3]);
model.physics('batbe').feature('pce2').set('sigmal_mat', 'userdef');
model.physics('batbe').feature('pce2').set('sigmal', {'sigmaleff' '0' '0' '0' 'sigmaleff' '0' '0' '0' 'sigmaleff'});
model.physics('batbe').feature('pce2').set('Dl_mat', 'userdef');
model.physics('batbe').feature('pce2').set('Dl', 'D_OH');
model.physics('batbe').feature('pce2').set('transpNum_mat', 'userdef');
model.physics('batbe').feature('pce2').set('transpNum', 't_plus');
model.physics('batbe').feature('pce2').set('fcl_mat', 'userdef');
model.physics('batbe').feature('pce2').set('rho_mat', 'userdef');
model.physics('batbe').feature('pce2').set('rho', 'rho');
model.physics('batbe').feature('pce2').set('sigma', {'sigmaseff_neg' '0' '0' '0' 'sigmaseff_neg' '0' '0' '0' 'sigmaseff_neg'});
model.physics('batbe').feature('pce2').set('IntercalationOption', 'NonIntercalatingParticles');
model.physics('batbe').feature('pce2').set('epss', '1-batbe.epsl');
model.physics('batbe').feature('pce2').set('epsl', 'eps_e_neg');
model.physics('batbe').feature('pce2').set('IonicCorrModel', 'NoCorr');
model.physics('batbe').feature('pce2').set('ElectricCorrModel', 'NoCorr');
model.physics('batbe').feature('pce2').setIndex('Species', 's1', 0, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 8960, 0, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 0.06355, 0, 0);
model.physics('batbe').feature('pce2').setIndex('Species', 's1', 0, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 8960, 0, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 0.06355, 0, 0);
model.physics('batbe').feature('pce2').setIndex('Species', 'Zn', 0, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 'rho_Zn', 0, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 'MW_Zn', 0, 0);
model.physics('batbe').feature('pce2').setIndex('Species', 's1', 1, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce2').setIndex('Species', 's1', 1, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 8960, 1, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 0.06355, 1, 0);
model.physics('batbe').feature('pce2').setIndex('Species', 'ZnO', 1, 0);
model.physics('batbe').feature('pce2').setIndex('rhos', 'rho_ZnO', 1, 0);
model.physics('batbe').feature('pce2').setIndex('Ms', 'MW_ZnO', 1, 0);
model.physics('batbe').feature('pce2').feature('per1').set('Eeq_mat', 'NernstEquation');
model.physics('batbe').feature('pce2').feature('per1').set('Eeq_ref', 'Eeq3');
model.physics('batbe').feature('pce2').feature('per1').set('CRNernst', '(cl/Coh_ref)^2*(cZn/cZn_init)');
model.physics('batbe').feature('pce2').feature('per1').set('CONernst', 'cZnO/cZn_init');
model.physics('batbe').feature('pce2').feature('per1').set('ElectrodeKinetics', 'ButlerVolmer');
model.physics('batbe').feature('pce2').feature('per1').set('i0Type', 'FromNernstEquation');
model.physics('batbe').feature('pce2').feature('per1').set('i0_ref', 'i03');
model.physics('batbe').feature('pce2').feature('per1').set('alphaa', 'alphaa3*n');
model.physics('batbe').feature('pce2').feature('per1').set('ActiveSpecificSurfaceAreaType', 'userdef');
model.physics('batbe').feature('pce2').feature('per1').set('Av', 'a');
model.physics('batbe').feature('pce2').feature('per1').set('nm', 'n');
model.physics('batbe').feature('pce2').feature('per1').setIndex('Vib', 1, 0, 0);
model.physics('batbe').feature('pce2').feature('per1').setIndex('Vib', -1, 1, 0);
model.physics('batbe').feature('pce2').feature('per1').set('dEeqdT_mat', 'userdef');
model.physics('batbe').feature('pce2').create('ivdds1', 'InitialValuesForDissolvingDepositingSpecies', 1);
model.physics('batbe').feature('pce2').feature('ivdds1').setIndex('c0', 'cZn_init', 0, 0);
model.physics('batbe').create('egnd1', 'ElectricGround', 0);
model.physics('batbe').feature('egnd1').selection.set([4]);
model.physics('batbe').create('ecd1', 'ElectrodeNormalCurrentDensity', 0);
model.physics('batbe').feature('ecd1').selection.set([1]);
model.physics('batbe').feature('ecd1').set('nis', '-I(t)');
model.physics('batbe').feature('init1').set('phil', '-Eeq3');
model.physics('batbe').feature('init1').set('cl', 'cl_init');
model.physics('batbe').feature('init1').set('phis', 'Eeq2-Eeq3');
model.physics('batbe').create('init2', 'init', 1);
model.physics('batbe').feature('init2').selection.set([2 3]);
model.physics('batbe').feature('init2').set('phil', '-Eeq3');
model.physics('batbe').feature('init2').set('cl', 'cl_init');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'L_Zn', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'L_Zn', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', 'm', 0);
model.study('std1').feature('param').setIndex('pname', 'cZn_param', 0);
model.study('std1').feature('param').setIndex('plistarr', '1 20', 0);
model.study('std1').feature('time').set('tlist', '0 1000');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_cl').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_cl').set('scaleval', '1000');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '0 1000');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '(1)[s]');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Direct (batbe)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (batbe)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (batbe)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'cZn_param'});
model.batch('p1').set('plistarr', {'1 20'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.sol('sol1').feature('v1').feature('comp1_batbe_pce1_c').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_batbe_pce1_c').set('scaleval', 10000);
model.sol('sol1').feature('v1').feature('comp1_batbe_pce2_c').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_batbe_pce2_c').set('scaleval', 10000);
model.sol('sol1').feature('t1').set('tout', 'tsteps');
model.sol('sol1').feature('t1').create('st1', 'StopCondition');
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', '', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondterminateon', 'true', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondActive', true, 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopconddesc', 'Stop expression 1', 0);
model.sol('sol1').feature('t1').feature('st1').setIndex('stopcondarr', 'comp1.EndTerminal(comp1.phis)<1.25', 0);
model.sol('sol1').feature('t1').feature('st1').set('storestopcondsol', 'stepbefore_stepafter');
model.sol('sol1').feature('t1').feature('st1').set('stopcondwarn', false);

model.study('std1').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').run('compute');

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Current Density');
model.result('pg1').set('data', 'dset2');
model.result('pg1').create('ptgr1', 'PointGraph');
model.result('pg1').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg1').feature('ptgr1').set('linewidth', 'preference');
model.result('pg1').feature('ptgr1').selection.set([1]);
model.result('pg1').feature('ptgr1').set('expr', 'I(t)');
model.result('pg1').feature('ptgr1').set('unit', 'A/cm^2');
model.result('pg1').run;
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Discharge current density (A/cm<sup>2</sup>)');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Applied discharge current density');
model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Cell Voltage');
model.result('pg2').run;
model.result('pg2').feature('ptgr1').set('expr', 'phis');
model.result('pg2').feature('ptgr1').set('descr', 'Electric potential');
model.result('pg2').feature('ptgr1').set('legend', true);
model.result('pg2').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg2').feature('ptgr1').setIndex('legends', 'Low value of initial Zn conc', 0);
model.result('pg2').feature('ptgr1').setIndex('legends', 'High value of initial Zn conc', 1);
model.result('pg2').run;
model.result('pg2').set('ylabel', 'Cell potential (V)');
model.result('pg2').set('title', 'Cell potential (V)');
model.result('pg2').set('legendpos', 'lowerleft');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Species: Positive electrode (cZn_param = 1)');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevelinput', 'first', 1);
model.result('pg3').setIndex('looplevelinput', 'interp', 0);
model.result('pg3').setIndex('interp', '0 100 200 300', 0);
model.result('pg3').create('lngr1', 'LineGraph');
model.result('pg3').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg3').feature('lngr1').set('linewidth', 'preference');
model.result('pg3').feature('lngr1').selection.set([1]);
model.result('pg3').feature('lngr1').set('expr', 'cAg');
model.result('pg3').feature('lngr1').set('descr', 'Concentration of Ag');
model.result('pg3').feature('lngr1').set('xdata', 'expr');
model.result('pg3').feature('lngr1').set('xdataexpr', 'x');
model.result('pg3').feature('lngr1').set('xdataunit', 'cm');
model.result('pg3').feature('lngr1').set('legend', true);
model.result('pg3').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg3').feature('lngr1').set('legendpattern', 'Ag eval(t,s) s');
model.result('pg3').feature.duplicate('lngr2', 'lngr1');
model.result('pg3').run;
model.result('pg3').feature('lngr2').set('expr', 'cAgO');
model.result('pg3').feature('lngr2').set('descr', 'Concentration of AgO');
model.result('pg3').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg3').feature('lngr2').set('linestyle', 'dashed');
model.result('pg3').feature('lngr2').set('legendpattern', 'AgO eval(t,s) s');
model.result('pg3').run;
model.result('pg3').set('xlabelactive', true);
model.result('pg3').set('xlabel', 'Thickness of positive electrode (cm)');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Variation of species in positive electrode');
model.result('pg3').set('legendpos', 'middleleft');
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Species: Negative electrode (cZn_param = 1)');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevelinput', 'first', 1);
model.result('pg4').setIndex('looplevelinput', 'interp', 0);
model.result('pg4').setIndex('interp', '0 100 200 300', 0);
model.result('pg4').create('lngr1', 'LineGraph');
model.result('pg4').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg4').feature('lngr1').set('linewidth', 'preference');
model.result('pg4').feature('lngr1').selection.set([3]);
model.result('pg4').feature('lngr1').set('expr', 'cZnO');
model.result('pg4').feature('lngr1').set('descr', 'Concentration of ZnO');
model.result('pg4').feature('lngr1').set('xdata', 'expr');
model.result('pg4').feature('lngr1').set('xdataexpr', 'x');
model.result('pg4').feature('lngr1').set('xdataunit', 'cm');
model.result('pg4').feature('lngr1').set('legend', true);
model.result('pg4').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg4').feature('lngr1').set('legendpattern', 'ZnO eval(t,s) s');
model.result('pg4').feature.duplicate('lngr2', 'lngr1');
model.result('pg4').run;
model.result('pg4').feature('lngr2').set('expr', 'cZn');
model.result('pg4').feature('lngr2').set('descr', 'Concentration of Zn');
model.result('pg4').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg4').feature('lngr2').set('linestyle', 'dashed');
model.result('pg4').feature('lngr2').set('legendpattern', 'Zn eval(t,s) s');
model.result('pg4').run;
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Thickness of negative electrode (cm)');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('title', 'Variation of species in negative electrode');
model.result('pg4').set('legendpos', 'middleright');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Species: Positive electrode (cZn_param = 20)');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevelinput', 'last', 1);
model.result('pg5').setIndex('looplevelinput', 'interp', 0);
model.result('pg5').setIndex('interp', '0 200 400 600 700', 0);
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').selection.set([1]);
model.result('pg5').feature('lngr1').set('expr', 'cAg');
model.result('pg5').feature('lngr1').set('descr', 'Concentration of Ag');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').feature('lngr1').set('xdataunit', 'cm');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg5').feature('lngr1').set('legendpattern', 'Ag eval(t,s) s');
model.result('pg5').feature.duplicate('lngr2', 'lngr1');
model.result('pg5').run;
model.result('pg5').feature('lngr2').set('expr', 'cAgO');
model.result('pg5').feature('lngr2').set('descr', 'Concentration of AgO');
model.result('pg5').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg5').feature('lngr2').set('linestyle', 'dashed');
model.result('pg5').feature('lngr2').set('legendpattern', 'AgO eval(t,s) s');
model.result('pg5').run;
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Thickness of positive electrode (cm)');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Variation of species in positive electrode');
model.result('pg5').set('legendpos', 'middleleft');
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Species: Negative electrode (cZn_param = 20)');
model.result('pg6').set('data', 'dset2');
model.result('pg6').setIndex('looplevelinput', 'last', 1);
model.result('pg6').setIndex('looplevelinput', 'interp', 0);
model.result('pg6').setIndex('interp', '0 200 400 600 700', 0);
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').selection.set([3]);
model.result('pg6').feature('lngr1').set('expr', 'cZnO');
model.result('pg6').feature('lngr1').set('descr', 'Concentration of ZnO');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('xdataunit', 'cm');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'evaluated');
model.result('pg6').feature('lngr1').set('legendpattern', 'ZnO eval(t,s) s');
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'cZn');
model.result('pg6').feature('lngr2').set('descr', 'Concentration of Zn');
model.result('pg6').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg6').feature('lngr2').set('linestyle', 'dashed');
model.result('pg6').feature('lngr2').set('legendpattern', 'Zn eval(t,s) s');
model.result('pg6').run;
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'Thickness of negative electrode (cm)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Concentration (mol/m<sup>3</sup>)');
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('title', 'Variation of species in negative electrode');
model.result('pg6').set('legendpos', 'middleright');

model.title('1D Isothermal Zinc-Silver Oxide Battery');

model.description('This example uses the Battery with Binary Electrolyte interface for studying the discharge of a zinc-silver oxide battery. The electrochemical reactions in the positive and negative electrodes lead to changes in porosity and species concentration in the electrodes. The geometry is in one dimension and the model is isothermal.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('zn_ago_battery_1d.mph');

model.modelNode.label('Components');

out = model;
