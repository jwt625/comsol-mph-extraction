function out = model
%
% sofc_unit_cell.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'SolidOxide');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '700[degC]');
model.physics.create('fp', 'FreeAndPorousMediaFlow', 'geom1');
model.physics('fp').model('comp1');
model.physics('fp').field('velocity').field('u_c');
model.physics('fp').field('velocity').component({'u_c' 'v_c' 'w_c'});
model.physics('fp').field('pressure').field('p_c');
model.physics.create('fp2', 'FreeAndPorousMediaFlow', 'geom1');
model.physics('fp2').model('comp1');
model.physics('fp2').field('velocity').field('u_a');
model.physics('fp2').field('velocity').component({'u_a' 'v_a' 'w_a'});
model.physics('fp2').field('pressure').field('p_a');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').feature('cdi').setSolveFor('/physics/fp', true);
model.study('std1').feature('cdi').setSolveFor('/physics/fp2', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);
model.study('std1').feature('stat').setSolveFor('/physics/fp', true);
model.study('std1').feature('stat').setSolveFor('/physics/fp2', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('p_atm', '1[atm]', 'Atmospheric pressure');
model.param.set('T', '800[degC]', 'Temperature');
model.param.set('perm_a', '1e-14[m^2]', 'Anode permeability');
model.param.set('perm_c', '1e-14[m^2]', 'Cathode permeability');
model.param.set('V_cell', '1[V]', 'Cell voltage');
model.param.set('i0_a', '1[A/m^2]', 'Exchange current density, anode');
model.param.set('i0_c', '1[A/m^2]', 'Exchange current density, cathode');
model.param.set('Sa_a', '5e9[1/m]', 'Specific surface area, anode');
model.param.set('Sa_c', '5e9[1/m]', 'Specific surface area, cathode');
model.param.set('fl_a', '0.2', 'Electrolyte conductivity correction factor, anode');
model.param.set('fl_c', '0.2', 'Electrolyte conductivity correction factor, cathode');
model.param.set('kseff_a', '1000[S/m]', 'Solid effective conductivity, anode');
model.param.set('kseff_c', '1000[S/m]', 'Solid effective conductivity, cathode');
model.param.set('e_por', '0.4', 'Porosity');
model.param.set('MH2', '2[g/mol]', 'Molar mass, H2');
model.param.set('MO2', '32[g/mol]', 'Molar mass, O2');
model.param.set('MN2', '28[g/mol]', 'Molar mass, N2');
model.param.set('W_channel', '0.5e-3[m]', 'Gas flow channel width');
model.param.set('W_rib', '0.5e-3[m]', 'Rib width');
model.param.set('H_gde', '1e-4[m]', 'Gas diffusion electrode thickness');
model.param.set('H_electrolyte', '1e-4[m]', 'Electrolyte thickness');
model.param.set('H_channel', '0.5e-3[m]', 'Gas flow channel height');
model.param.set('L', '10e-3[m]', 'Flow channel length');
model.param.set('I_max', '1.5[A/cm^2]*L*(W_rib+W_channel)', 'Cell area');
model.param.set('lambda_O2', '2', 'Oxygen stoichiometry (for flow rate calculation)');
model.param.set('lambda_H2', '2', 'Hydrogen stoichiometry (for flow rate calculation)');
model.param.set('xO2_in', '0.21', 'Inlet upstream oxygen molar fraction');
model.param.set('xN2_in', '1-xO2_in', 'Inlet upstream nitrogen molar fraction');
model.param.set('m_H2', 'lambda_H2*I_max/(2*F_const)*MH2', 'Hydrogen inlet flow rate');
model.param.set('m_O2', 'lambda_O2*I_max/(4*F_const)*MO2', 'Oxygen inlet flow rate');
model.param.set('m_N2', 'm_O2*xN2_in*MN2/(xO2_in*MO2)', 'Nitrogen inlet flow rate');
model.param.set('d_pore', '500[nm]', 'Pore diameter');
model.param.set('gamma_O2', '0.25', 'Partial pressure exponent, oxygen');
model.param.set('gamma_H2', '0.11', 'Partial pressure exponent, hydrogen');
model.param.set('gamma_H2O', '0.67', 'Partial pressure exponent, water');
model.param.set('alpha_a_H2', '1', 'Anodic transfer coefficient, hydrogen oxidation');
model.param.set('alpha_c_H2', '0.1', 'Cathodic transfer coefficient, hydrogen oxidation');
model.param.set('alpha_a_O2', '0.1', 'Anodic transfer coefficient, oxygen reduction');
model.param.set('alpha_c_O2', '0.4', 'Cathodic transfer coefficient, oxygen reduction');
model.param.set('A_cell', 'L*(W_rib+W_channel)');

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickplane', 'yz');
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'W_channel+W_rib' '1'});
model.geom('geom1').feature('wp1').geom.feature('r1').setIndex('size', 'H_gde', 1);
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('r2', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r2').set('size', {'W_channel+W_rib' '1'});
model.geom('geom1').feature('wp1').geom.feature('r2').setIndex('size', 'H_electrolyte', 1);
model.geom('geom1').feature('wp1').geom.feature('r2').set('pos', {'0' '-H_electrolyte'});
model.geom('geom1').feature('wp1').geom.run('r2');
model.geom('geom1').feature('wp1').geom.create('r3', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r3').set('size', {'W_channel+W_rib' '1'});
model.geom('geom1').feature('wp1').geom.feature('r3').setIndex('size', 'H_gde', 1);
model.geom('geom1').feature('wp1').geom.feature('r3').set('pos', {'0' '-H_electrolyte-H_gde'});
model.geom('geom1').feature('wp1').geom.run('r3');
model.geom('geom1').feature('wp1').geom.create('r4', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r4').set('size', {'W_channel' 'H_channel'});
model.geom('geom1').feature('wp1').geom.feature('r4').set('pos', {'W_rib/2' 'H_gde'});
model.geom('geom1').feature('wp1').geom.run('r4');
model.geom('geom1').feature('wp1').geom.create('r5', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r5').set('size', {'W_channel' 'H_channel'});
model.geom('geom1').feature('wp1').geom.feature('r5').set('pos', {'W_rib/2' '-H_gde-H_electrolyte-H_channel'});
model.geom('geom1').feature('wp1').geom.run('r5');
model.geom('geom1').run('wp1');
model.geom('geom1').feature.create('ext1', 'Extrude');
model.geom('geom1').feature('ext1').set('workplane', 'wp1');
model.geom('geom1').feature('ext1').selection('input').set({'wp1'});
model.geom('geom1').feature('ext1').setIndex('distance', 'L', 0);
model.geom('geom1').runPre('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Anode Flow Channel');
model.selection('sel1').set([4]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Anode Gas Diffusion Electrode');
model.selection('sel2').set([1]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Cathode Gas Diffusion Electrode');
model.selection('sel3').set([3]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Cathode Flow Channel');
model.selection('sel4').set([5]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Membrane');
model.selection('sel5').set([2]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Anode Flow Domains');
model.selection('uni1').set('input', {'sel1' 'sel2'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Cathode Flow Domains');
model.selection('uni2').set('input', {'sel3' 'sel4'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').label('Yttria-Stabilized Zirconia, 8YSZ, (ZrO2)0.92-(Y2O3)0.08');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcname', 'log_sigmaT_vs_invT');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('table', {'0.8202666666666667' '2.2431906614786';  ...
'0.8526222222222222' '2.0972762645914402';  ...
'0.8912' '1.922178988326849';  ...
'0.9335111111111112' '1.7373540856031133';  ...
'0.9820444444444445' '1.5233463035019446';  ...
'1.0268444444444444' '1.319066147859922';  ...
'1.0766222222222224' '1.0856031128404666';  ...
'1.1463111111111113' '0.745136186770428';  ...
'1.2160000000000002' '0.3754863813229572';  ...
'1.296888888888889' '-0.03307392996108938';  ...
'1.384' '-0.5097276264591439';  ...
'1.4860444444444445' '-1.073929961089494';  ...
'1.6042666666666667' '-1.735408560311284';  ...
'1.7424000000000002' '-2.5136186770428006'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1/K'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Electrolytes for solid oxide fuel cells, J. Fergus, Journal of Power Sources 162 (2006) 30' native2unicode(hex2dec({'20' '13'}), 'unicode') '40.' newline  newline 'Conductivity values averaged from Figure 2.' newline ]);
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('T_reg', 'max(min(T,1/0.8203e-3),1/1.74e-3)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').descr('T_reg', 'Temperature (regularized to valid range)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');

model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('sel5');
model.physics('fc').create('h2fch1', 'H2FlowChannel', 3);
model.physics('fc').feature('h2fch1').selection.named('sel1');
model.physics('fc').create('o2fch1', 'O2FlowChannel', 3);
model.physics('fc').feature('o2fch1').selection.named('sel4');
model.physics('fc').create('h2gde1', 'H2GasDiffusionElectrode', 3);
model.physics('fc').feature('h2gde1').selection.named('sel2');
model.physics('fc').feature('h2gde1').set('sigmas', {'kseff_a' '0' '0' '0' 'kseff_a' '0' '0' '0' 'kseff_a'});
model.physics('fc').feature('h2gde1').set('IonicCorrModel', 'userdef');
model.physics('fc').feature('h2gde1').set('fl', 'fl_a');
model.physics('fc').feature('h2gde1').set('epsg', 'e_por');
model.physics('fc').feature('h2gde1').set('IncludePoreWallInteractions', true);
model.physics('fc').feature('h2gde1').set('d_pore', 'd_pore');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_a');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('i0Type', 'LumpedMultistep');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('rgenericH2', 'gamma_H2');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('rgenericH2O', 'gamma_H2O');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('alphaa', 'alpha_a_H2');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('alphac', 'alpha_c_H2');
model.physics('fc').feature('h2gde1').feature('h2gder1').set('Av', 'Sa_a');
model.physics('fc').create('o2gde1', 'O2GasDiffusionElectrode', 3);
model.physics('fc').feature('o2gde1').selection.named('sel3');
model.physics('fc').feature('o2gde1').set('sigmas', {'kseff_c' '0' '0' '0' 'kseff_c' '0' '0' '0' 'kseff_c'});
model.physics('fc').feature('o2gde1').set('IonicCorrModel', 'userdef');
model.physics('fc').feature('o2gde1').set('fl', 'fl_c');
model.physics('fc').feature('o2gde1').set('epsg', 'e_por');
model.physics('fc').feature('o2gde1').set('IncludePoreWallInteractions', true);
model.physics('fc').feature('o2gde1').set('d_pore', 'd_pore');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('i0_ref', 'i0_c');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('i0Type', 'LumpedMultistep');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('rgenericO2', 'gamma_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('alphaa', 'alpha_a_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('alphac', 'alpha_c_O2');
model.physics('fc').feature('o2gde1').feature('o2gder1').set('Av', 'Sa_c');
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.set([3 20]);
model.physics('fc').feature('ecph1').create('pot1', 'ElectricPotential', 2);
model.physics('fc').feature('ecph1').feature('pot1').selection.set([10 22]);
model.physics('fc').feature('ecph1').feature('pot1').set('phisbnd', 'V_cell');
model.physics('fc').feature('h2gasph1').create('h2in1', 'H2Inlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2in1').selection.set([11]);

model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').geom(2);
model.selection('sel6').label('Anode Inlet');
model.selection('sel6').set([11]);

model.physics('fc').feature('h2gasph1').feature('h2in1').selection.named('sel6');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('fc').feature('h2gasph1').create('h2out1', 'H2Outlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2out1').selection.set([29]);

model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').geom(2);
model.selection('sel7').label('Anode Outlet');
model.selection('sel7').set([29]);

model.physics('fc').feature('h2gasph1').feature('h2out1').selection.named('sel7');
model.physics('fc').feature('o2gasph1').feature('init1').set('x0N2', 'xN2_in');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.set([30]);

model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').geom(2);
model.selection('sel8').label('Cathode Inlet');
model.selection('sel8').set([30]);

model.physics('fc').feature('o2gasph1').feature('o2in1').selection.named('sel8');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('J0N2', 'm_N2');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('w0bndN2', 0.8);
model.physics('fc').feature('o2gasph1').create('o2out1', 'O2Outlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2out1').selection.set([15]);

model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').geom(2);
model.selection('sel9').label('Cathode Outlet');
model.selection('sel9').set([15]);

model.physics('fc').feature('o2gasph1').feature('o2out1').selection.named('sel9');
model.physics('fp').label('Free and Porous Media Flow - Cathode');
model.physics('fp').selection.named('uni2');
model.physics('fp').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('fp').prop('PhysicalModelProperty').set('pref', 'p_atm');
model.physics('fp').create('porous1', 'PorousMedium', 3);
model.physics('fp').feature('porous1').selection.named('sel3');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('epsilon_p', 'e_por');
model.physics('fp').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('fp').feature('porous1').feature('pm1').set('kappa', {'perm_c' '0' '0' '0' 'perm_c' '0' '0' '0' 'perm_c'});
model.physics('fp').create('inl1', 'InletBoundary', 2);
model.physics('fp').feature('inl1').selection.named('sel8');
model.physics('fp').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('fp').feature('inl1').set('mfr', 'm_O2+m_N2');
model.physics('fp').create('out1', 'OutletBoundary', 2);
model.physics('fp').feature('out1').selection.named('sel9');
model.physics('fp').feature('out1').set('NormalFlow', true);
model.physics('fp2').label('Free and Porous Media Flow - Anode');
model.physics('fp2').selection.named('uni1');
model.physics('fp2').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('fp2').prop('PhysicalModelProperty').set('pref', 'p_atm');
model.physics('fp2').create('porous1', 'PorousMedium', 3);
model.physics('fp2').feature('porous1').selection.named('sel2');
model.physics('fp2').feature('porous1').feature('pm1').set('epsilon_p_mat', 'userdef');
model.physics('fp2').feature('porous1').feature('pm1').set('epsilon_p', 'e_por');
model.physics('fp2').feature('porous1').feature('pm1').set('kappa_mat', 'userdef');
model.physics('fp2').feature('porous1').feature('pm1').set('kappa', {'perm_a' '0' '0' '0' 'perm_a' '0' '0' '0' 'perm_a'});
model.physics('fp2').create('inl1', 'InletBoundary', 2);
model.physics('fp2').feature('inl1').selection.named('sel6');
model.physics('fp2').feature('inl1').set('BoundaryCondition', 'MassFlow');
model.physics('fp2').feature('inl1').set('mfr', 'm_H2');
model.physics('fp2').create('out1', 'OutletBoundary', 2);
model.physics('fp2').feature('out1').selection.named('sel7');
model.physics('fp2').feature('out1').set('NormalFlow', true);

model.multiphysics.create('rfh1', 'ReactingFlowH2GasPhase', 'geom1', 3);
model.multiphysics('rfh1').set('Fluid_physics', 'fp2');
model.multiphysics.create('rfo1', 'ReactingFlowO2GasPhase', 'geom1', 3);

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([2 10 15 18 24 27]);
model.mesh('mesh1').feature('edg1').create('size1', 'Size');
model.mesh('mesh1').feature('edg1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('edg1').feature('size1').set('hmax', 'W_channel/8');
model.mesh('mesh1').run('edg1');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([1 4 7 11 15]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([12 17 22 26]);
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 10);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([7 34]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 8);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature.duplicate('dis3', 'dis2');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([1 30]);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('map1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis4').selection.set([4 32]);
model.mesh('mesh1').feature('map1').feature('dis4').set('numelem', 3);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'W_channel');
model.mesh('mesh1').run;

model.probe.create('dom1', 'Domain');
model.probe('dom1').model('comp1');
model.probe('dom1').set('intsurface', true);
model.probe('dom1').set('intvolume', true);
model.probe('dom1').label('Cell Current Density Probe');
model.probe('dom1').set('probename', 'I_cell');
model.probe('dom1').selection.named('sel2');
model.probe('dom1').set('expr', 'fc.ivtot');
model.probe('dom1').set('descr', 'Electrode reaction source');
model.probe('dom1').set('expr', 'fc.ivtot*H_gde');
model.probe('dom1').set('descractive', true);
model.probe('dom1').set('descr', 'Average cell current density');

model.study('std1').feature('cdi').setEntry('activateCoupling', 'rfh1', false);
model.study('std1').feature('cdi').setEntry('activateCoupling', 'rfo1', false);
model.study('std1').feature('stat').setEntry('activate', 'fc', false);
model.study('std1').feature('stat').setEntry('activate', 'fp2', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'rfh1', false);
model.study('std1').feature('stat').setEntry('activateCoupling', 'rfo1', false);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').setEntry('activate', 'fc', false);
model.study('std1').feature('stat2').setEntry('activate', 'fp', false);
model.study('std1').feature('stat2').setEntry('activateCoupling', 'rfh1', false);
model.study('std1').feature('stat2').setEntry('activateCoupling', 'rfo1', false);
model.study('std1').create('stat3', 'Stationary');
model.study('std1').feature('stat3').set('useparam', true);
model.study('std1').feature('stat3').setIndex('pname', 'p_atm', 0);
model.study('std1').feature('stat3').setIndex('plistarr', '', 0);
model.study('std1').feature('stat3').setIndex('punit', 'Pa', 0);
model.study('std1').feature('stat3').setIndex('pname', 'p_atm', 0);
model.study('std1').feature('stat3').setIndex('plistarr', '', 0);
model.study('std1').feature('stat3').setIndex('punit', 'Pa', 0);
model.study('std1').feature('stat3').setIndex('pname', 'V_cell', 0);
model.study('std1').feature('stat3').setIndex('plistarr', 'range(1,-0.1,0.5)', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('d1').label('Direct, fluid flow variables (fp2)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s3').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s3').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s3').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('AMG, fluid flow variables (fp2)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp2_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp2_inl1_Pmf'});
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').create('su3', 'StoreSolution');
model.sol('sol1').create('st4', 'StudyStep');
model.sol('sol1').feature('st4').set('study', 'std1');
model.sol('sol1').feature('st4').set('studystep', 'stat3');
model.sol('sol1').create('v4', 'Variables');
model.sol('sol1').feature('v4').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v4').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v4').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v4').set('initmethod', 'sol');
model.sol('sol1').feature('v4').set('initsol', 'sol1');
model.sol('sol1').feature('v4').set('initsoluse', 'sol4');
model.sol('sol1').feature('v4').set('notsolmethod', 'sol');
model.sol('sol1').feature('v4').set('notsol', 'sol1');
model.sol('sol1').feature('v4').set('control', 'stat3');
model.sol('sol1').create('s4', 'Stationary');
model.sol('sol1').feature('s4').set('stol', 1.0E-4);
model.sol('sol1').feature('s4').create('p1', 'Parametric');
model.sol('sol1').feature('s4').feature.remove('pDef');
model.sol('sol1').feature('s4').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s4').feature('p1').set('control', 'stat3');
model.sol('sol1').feature('s4').set('control', 'stat3');
model.sol('sol1').feature('s4').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s4').create('se1', 'Segregated');
model.sol('sol1').feature('s4').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('s4').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('segvar', {'comp1_fc_phil' 'comp1_fc_phis' 'comp1_fc_wH2O_H2' 'comp1_fc_wN2_O2' 'comp1_fc_h2gasph1_h2in1_wbndH2O' 'comp1_fc_o2gasph1_o2in1_wbndN2'});
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('subjtech', 'onevery');
model.sol('sol1').feature('s4').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('s4').feature('se1').feature('ss1').label('Hydrogen Fuel Cell');
model.sol('sol1').feature('s4').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('segvar', {'comp1_p_c' 'comp1_u_c' 'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('subdamp', 0.5);
model.sol('sol1').feature('s4').create('d2', 'Direct');
model.sol('sol1').feature('s4').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature('d2').label('Direct, fluid flow variables (fp)');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').set('linsolver', 'd2');
model.sol('sol1').feature('s4').feature('se1').feature('ss2').label('Velocity U_c, Pressure P_c');
model.sol('sol1').feature('s4').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('segvar', {'comp1_p_a' 'comp1_u_a' 'comp1_fp2_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('subdamp', 0.5);
model.sol('sol1').feature('s4').create('d3', 'Direct');
model.sol('sol1').feature('s4').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature('d3').label('Direct, fluid flow variables (fp2)');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').set('linsolver', 'd3');
model.sol('sol1').feature('s4').feature('se1').feature('ss3').label('Velocity U_a, Pressure P_a');
model.sol('sol1').feature('s4').feature('se1').set('maxsegiter', 200);
model.sol('sol1').feature('s4').feature('se1').set('segstabacc', 'segcflcmp');
model.sol('sol1').feature('s4').feature('se1').set('subinitcfl', 5);
model.sol('sol1').feature('s4').feature('se1').set('subkppid', 0.65);
model.sol('sol1').feature('s4').feature('se1').set('subkdpid', 0.05);
model.sol('sol1').feature('s4').feature('se1').set('subkipid', 0.05);
model.sol('sol1').feature('s4').feature('se1').set('subcfltol', 0.1);
model.sol('sol1').feature('s4').create('i1', 'Iterative');
model.sol('sol1').feature('s4').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s4').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').create('i2', 'Iterative');
model.sol('sol1').feature('s4').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s4').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').create('i3', 'Iterative');
model.sol('sol1').feature('s4').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s4').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s4').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s4').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s4').feature('i3').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i3').label('AMG, fluid flow variables (fp)');
model.sol('sol1').feature('s4').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').create('i4', 'Iterative');
model.sol('sol1').feature('s4').feature('i4').set('linsolver', 'gmres');
model.sol('sol1').feature('s4').feature('i4').set('prefuntype', 'left');
model.sol('sol1').feature('s4').feature('i4').set('itrestart', 50);
model.sol('sol1').feature('s4').feature('i4').set('rhob', 20);
model.sol('sol1').feature('s4').feature('i4').set('maxlinit', 1000);
model.sol('sol1').feature('s4').feature('i4').set('nlinnormuse', 'on');
model.sol('sol1').feature('s4').feature('i4').label('AMG, fluid flow variables (fp2)');
model.sol('sol1').feature('s4').feature('i4').create('mg1', 'Multigrid');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_fp2_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_fp2_inl1_Pmf'});
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s4').feature('i4').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s4').feature.remove('fcDef');
model.sol('sol1').feature('v4').set('notsolnum', 'auto');
model.sol('sol1').feature('v4').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v3').set('solnum', 'auto');
model.sol('sol1').feature('v3').set('solvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s4').create('fc1', 'FullyCoupled');

model.probe('dom1').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 6, 0);
model.result('pg2').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 6, 0);
model.result('pg3').label('Electrolyte Potential (fc)');
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg3').create('arwv1', 'ArrowVolume');
model.result('pg3').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg3').feature('arwv1').set('arrowbase', 'center');
model.result('pg3').feature('arwv1').set('color', 'gray');
model.result('pg3').feature('arwv1').create('filt1', 'Filter');
model.result('pg3').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg3').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 6, 0);
model.result('pg4').label('Mole Fraction, H2, Streamline (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('typeintitle', true);
model.result('pg4').set('prefixintitle', 'Species H2:');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'fc.tfluxH2x' 'fc.tfluxH2y' 'fc.tfluxH2z'});
model.result('pg4').feature('str1').set('posmethod', 'start');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').feature('str1').create('col', 'Color');
model.result('pg4').feature('str1').feature('col').set('expr', 'fc.xH2');
model.result('pg4').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 6, 0);
model.result('pg5').label('Mole Fraction, H2, Surface (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species H2:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', false);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'fc.xH2'});
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 6, 0);
model.result('pg6').label('Mole Fraction, O2, Streamline (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('typeintitle', true);
model.result('pg6').set('prefixintitle', 'Species O2:');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg6').feature('str1').set('posmethod', 'start');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg6').feature('str1').create('col', 'Color');
model.result('pg6').feature('str1').feature('col').set('expr', 'fc.xO2');
model.result('pg6').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 6, 0);
model.result('pg7').label('Mole Fraction, O2, Surface (fc)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species O2:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', false);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'fc.xO2'});
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 6, 0);
model.result('pg8').label('Mole Fraction, H2O, Streamline (fc)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('typeintitle', true);
model.result('pg8').set('prefixintitle', 'Species H2O:');
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy' 'fc.tfluxH2Oz'});
model.result('pg8').feature('str1').set('posmethod', 'start');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result('pg8').feature('str1').create('col', 'Color');
model.result('pg8').feature('str1').feature('col').set('expr', 'fc.xH2O');
model.result('pg8').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 6, 0);
model.result('pg9').label('Mole Fraction, H2O, Surface (fc)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('prefixintitle', 'Species H2O:');
model.result('pg9').set('expressionintitle', false);
model.result('pg9').set('typeintitle', false);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'fc.xH2O'});
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset1');
model.result('pg10').setIndex('looplevel', 6, 0);
model.result('pg10').label('Mole Fraction, N2, Streamline (fc)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('typeintitle', true);
model.result('pg10').set('prefixintitle', 'Species N2:');
model.result('pg10').create('str1', 'Streamline');
model.result('pg10').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y' 'fc.tfluxN2z'});
model.result('pg10').feature('str1').set('posmethod', 'start');
model.result('pg10').feature('str1').set('pointtype', 'arrow');
model.result('pg10').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg10').feature('str1').set('color', 'gray');
model.result('pg10').feature('str1').create('col', 'Color');
model.result('pg10').feature('str1').feature('col').set('expr', 'fc.xN2');
model.result('pg10').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 6, 0);
model.result('pg11').label('Mole Fraction, N2, Surface (fc)');
model.result('pg11').set('titletype', 'custom');
model.result('pg11').set('prefixintitle', 'Species N2:');
model.result('pg11').set('expressionintitle', false);
model.result('pg11').set('typeintitle', false);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'fc.xN2'});
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').label('Velocity (fp)');
model.result('pg12').set('frametype', 'spatial');
model.result('pg12').set('data', 'dset1');
model.result('pg12').setIndex('looplevel', 6, 0);
model.result('pg12').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg12').feature.create('slc1', 'Slice');
model.result('pg12').feature('slc1').label('Slice');
model.result('pg12').feature('slc1').set('showsolutionparams', 'on');
model.result('pg12').feature('slc1').set('expr', 'fp.U');
model.result('pg12').feature('slc1').set('smooth', 'internal');
model.result('pg12').feature('slc1').set('showsolutionparams', 'on');
model.result('pg12').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('Exterior Walls');
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([7 8 9 10 16 18 21 22 25 28]);
model.result.create('pg13', 'PlotGroup3D');
model.result('pg13').label('Pressure (fp)');
model.result('pg13').set('data', 'surf1');
model.result('pg13').setIndex('looplevel', 6, 0);
model.result('pg13').set('frametype', 'spatial');
model.result('pg13').set('data', 'surf1');
model.result('pg13').setIndex('looplevel', 6, 0);
model.result('pg13').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg13').feature.create('surf1', 'Surface');
model.result('pg13').feature('surf1').label('Surface');
model.result('pg13').feature('surf1').set('showsolutionparams', 'on');
model.result('pg13').feature('surf1').set('expr', 'p_c');
model.result('pg13').feature('surf1').set('colortable', 'Dipole');
model.result('pg13').feature('surf1').set('smooth', 'internal');
model.result('pg13').feature('surf1').set('showsolutionparams', 'on');
model.result('pg13').feature('surf1').set('data', 'parent');
model.result('pg13').feature('surf1').feature.create('tran1', 'Transparency');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').label('Velocity (fp2)');
model.result('pg14').set('frametype', 'spatial');
model.result('pg14').set('data', 'dset1');
model.result('pg14').setIndex('looplevel', 6, 0);
model.result('pg14').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg14').feature.create('slc1', 'Slice');
model.result('pg14').feature('slc1').label('Slice');
model.result('pg14').feature('slc1').set('showsolutionparams', 'on');
model.result('pg14').feature('slc1').set('expr', 'fp2.U');
model.result('pg14').feature('slc1').set('smooth', 'internal');
model.result('pg14').feature('slc1').set('showsolutionparams', 'on');
model.result('pg14').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Exterior Walls 1');
model.result.dataset('surf2').set('data', 'dset1');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([1 2 3 6 12 13 19 20 23 26]);
model.result.create('pg15', 'PlotGroup3D');
model.result('pg15').label('Pressure (fp2)');
model.result('pg15').set('data', 'surf2');
model.result('pg15').setIndex('looplevel', 6, 0);
model.result('pg15').set('frametype', 'spatial');
model.result('pg15').set('data', 'surf2');
model.result('pg15').setIndex('looplevel', 6, 0);
model.result('pg15').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond1/pg4');
model.result('pg15').feature.create('surf1', 'Surface');
model.result('pg15').feature('surf1').label('Surface');
model.result('pg15').feature('surf1').set('showsolutionparams', 'on');
model.result('pg15').feature('surf1').set('expr', 'p_a');
model.result('pg15').feature('surf1').set('colortable', 'Dipole');
model.result('pg15').feature('surf1').set('smooth', 'internal');
model.result('pg15').feature('surf1').set('showsolutionparams', 'on');
model.result('pg15').feature('surf1').set('data', 'parent');
model.result('pg15').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').run;
model.result('pg5').run;
model.result('pg7').run;
model.result.create('pg16', 'PlotGroup1D');
model.result('pg16').run;
model.result('pg16').label('Polarization Curve');
model.result('pg16').set('titletype', 'none');
model.result('pg16').set('xlabelactive', true);
model.result('pg16').set('xlabel', 'Average current density (A/m<sup>2</sup>)');
model.result('pg16').set('ylabelactive', true);
model.result('pg16').set('ylabel', 'Cell voltage (V)');
model.result('pg16').set('showlegends', false);
model.result('pg16').create('glob1', 'Global');
model.result('pg16').feature('glob1').set('markerpos', 'datapoints');
model.result('pg16').feature('glob1').set('linewidth', 'preference');
model.result('pg16').feature('glob1').setIndex('expr', 'V_cell', 0);
model.result('pg16').feature('glob1').setIndex('unit', 'V', 0);
model.result('pg16').feature('glob1').setIndex('descr', 'Cell Voltage', 0);
model.result('pg16').feature('glob1').set('xdata', 'expr');
model.result('pg16').feature('glob1').set('xdataexpr', 'I_cell');
model.result('pg16').run;
model.result.create('pg17', 'PlotGroup1D');
model.result('pg17').run;
model.result('pg17').label('Power vs. Current');
model.result('pg17').set('titletype', 'none');
model.result('pg17').set('xlabelactive', true);
model.result('pg17').set('xlabel', 'Average current density (A/m<sup>2</sup>)');
model.result('pg17').set('ylabelactive', true);
model.result('pg17').set('ylabel', 'Average cell power (W/m<sup>2</sup>)');
model.result('pg17').set('showlegends', false);
model.result('pg17').create('glob1', 'Global');
model.result('pg17').feature('glob1').set('markerpos', 'datapoints');
model.result('pg17').feature('glob1').set('linewidth', 'preference');
model.result('pg17').feature('glob1').setIndex('expr', 'V_cell*I_cell', 0);
model.result('pg17').feature('glob1').setIndex('unit', 'W/m^2', 0);
model.result('pg17').feature('glob1').setIndex('descr', 'Average Cell Power', 0);
model.result('pg17').feature('glob1').set('xdata', 'expr');
model.result('pg17').feature('glob1').set('xdataexpr', 'I_cell');
model.result('pg17').run;
model.result.create('pg18', 'PlotGroup3D');
model.result('pg18').run;
model.result('pg18').label('Electrolyte Current Density');
model.result('pg18').create('surf1', 'Surface');
model.result('pg18').feature('surf1').set('expr', 'fc.Ilz');
model.result('pg18').feature('surf1').set('descr', 'Electrolyte current density vector, z-component');
model.result('pg18').feature('surf1').create('sel1', 'Selection');
model.result('pg18').feature('surf1').feature('sel1').selection.set([9]);
model.result('pg18').run;

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('I_tot', 'intop_cc(fc.nIs)', 'Total cell current');
model.variable('var1').set('P_phil', '-(d(fc.phil,x)*fc.Ilx+d(fc.phil,y)*fc.Ily+d(fc.phil,z)*fc.Ilz)', 'Local power loss, ion transport');
model.variable('var1').set('P_phis', '-(d(fc.phis,x)*fc.Isx+d(fc.phis,y)*fc.Isy+d(fc.phis,z)*fc.Isz)', 'Local power loss, electron transport');
model.variable('var1').set('P_act_h2', 'fc.iv_h2gder1*fc.eta_h2gder1', 'Local power loss, hydrogen oxidation activation');
model.variable('var1').set('P_act_o2', 'fc.iv_o2gder1*fc.eta_o2gder1', 'Local power loss, oxygen oxidation activation');
model.variable('var1').set('eta_phil', '(intop_h2_gde(P_phil)+intop_mem(P_phil)+intop_o2_gde(P_phil))/I_tot', 'Cell-averaged electrolyte transport overpotential');
model.variable('var1').set('eta_phis', '(intop_h2_gde(P_phis)+intop_o2_gde(P_phis))/I_tot', 'Cell-averaged electron transport overpotential');
model.variable('var1').set('eta_act_h2', 'intop_h2_gde(P_act_h2)/I_tot', 'Cell-averaged hydrogen oxidation activation overpotential');
model.variable('var1').set('eta_act_o2', 'intop_o2_gde(P_act_o2)/I_tot', 'Cell-averaged oxygen reduction activation overpotential');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_cc');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([10 22]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_h2_gde');
model.cpl('intop2').selection.named('sel2');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').set('opname', 'intop_o2_gde');
model.cpl('intop3').selection.named('sel3');
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').set('opname', 'intop_mem');
model.cpl('intop4').selection.named('sel5');

model.probe('dom1').genResult('none');

model.sol('sol1').updateSolution;

model.result('pg2').run;
model.result.create('pg19', 'PlotGroup1D');
model.result('pg19').run;
model.result('pg19').label('Overpotentials Comparison');
model.result('pg19').create('glob1', 'Global');
model.result('pg19').feature('glob1').set('markerpos', 'datapoints');
model.result('pg19').feature('glob1').set('linewidth', 'preference');
model.result('pg19').feature('glob1').set('expr', {'eta_phil'});
model.result('pg19').feature('glob1').set('descr', {'Cell-averaged electrolyte transport overpotential'});
model.result('pg19').feature('glob1').set('expr', {'eta_phil' 'eta_phis'});
model.result('pg19').feature('glob1').set('descr', {'Cell-averaged electrolyte transport overpotential' 'Cell-averaged electron transport overpotential'});
model.result('pg19').feature('glob1').set('expr', {'eta_phil' 'eta_phis' 'eta_act_h2'});
model.result('pg19').feature('glob1').set('descr', {'Cell-averaged electrolyte transport overpotential' 'Cell-averaged electron transport overpotential' 'Cell-averaged hydrogen oxidation activation overpotential'});
model.result('pg19').feature('glob1').set('expr', {'eta_phil' 'eta_phis' 'eta_act_h2' 'eta_act_o2'});
model.result('pg19').feature('glob1').set('descr', {'Cell-averaged electrolyte transport overpotential' 'Cell-averaged electron transport overpotential' 'Cell-averaged hydrogen oxidation activation overpotential' 'Cell-averaged oxygen reduction activation overpotential'});
model.result('pg19').feature('glob1').set('xdataexpr', 'I_cell');
model.result('pg19').feature('glob1').set('xdatadescr', 'Cell Current Density Probe');
model.result('pg19').run;
model.result('pg19').feature('glob1').set('legendmethod', 'manual');
model.result('pg19').feature('glob1').setIndex('legends', 'Electrolyte transport', 0);
model.result('pg19').feature('glob1').setIndex('legends', 'Electron transport', 1);
model.result('pg19').feature('glob1').setIndex('legends', 'Hydrogen oxidation activation', 2);
model.result('pg19').feature('glob1').setIndex('legends', 'Oxygen reduction activation', 3);
model.result('pg19').run;
model.result('pg19').set('xlabelactive', true);
model.result('pg19').set('xlabel', 'Average cell current density (A/m<sup>2</sup>)');
model.result('pg19').set('ylabelactive', true);
model.result('pg19').set('ylabel', 'Overpotential (V)');
model.result('pg19').set('titletype', 'none');
model.result('pg19').set('legendpos', 'upperleft');
model.result('pg19').run;

model.title('Current Density Distribution in a Solid Oxide Fuel Cell');

model.description('This example presents a study of the current density distribution in a solid oxide fuel cell (SOFC). The model includes the full coupling between the mass balances at the anode and cathode, the momentum balances in the gas channels, the gas flow in the porous electrodes, the balance of the ionic current carried by the oxide ion, and an electronic-current balance.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.label('sofc_unit_cell.mph');

model.modelNode.label('Components');

out = model;
