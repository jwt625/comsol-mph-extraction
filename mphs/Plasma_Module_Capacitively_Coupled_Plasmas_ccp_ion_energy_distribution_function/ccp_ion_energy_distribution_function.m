function out = model
%
% ccp_ion_energy_distribution_function.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Plasma_Module/Capacitively_Coupled_Plasmas');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('ptp', 'ColdPlasmaTimePeriodic', 'geom1');
model.physics('ptp').model('comp1');

model.study.create('std1');
model.study('std1').create('tper', 'TimePeriodic');
model.study('std1').feature('tper').set('solnum', 'auto');
model.study('std1').feature('tper').set('notsolnum', 'auto');
model.study('std1').feature('tper').set('outputmap', {});
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').set('ngenAUX', '1');
model.study('std1').feature('tper').set('ngen', '2');
model.study('std1').feature('tper').set('goalngenAUX', '1');
model.study('std1').feature('tper').setSolveFor('/physics/ptp', true);

model.geom('geom1').lengthUnit('mm');

model.param.set('r0', '160[mm]');
model.param.set('h0', '4.5[cm]');
model.param.set('r1', '110[mm]');
model.param.set('h1', '40[mm]');
model.param.set('Prf', '1[W]');
model.param.set('f0', '13.56[MHz]');
model.param.set('p0', '0.02[torr]');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'r0' 'h0'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'r0-r1' 'h1'});
model.geom('geom1').feature('r2').set('pos', {'r1' '-h1'});
model.geom('geom1').run('r2');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'r1' 'r2'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').runPre('fin');
model.geom('geom1').create('cha1', 'Chamfer');
model.geom('geom1').feature('cha1').selection('point').set('uni1', 4);
model.geom('geom1').feature('cha1').set('dist', 10);
model.geom('geom1').run('cha1');
model.geom('geom1').create('fil1', 'Fillet');
model.geom('geom1').feature('fil1').selection('point').set('cha1', [3 5]);
model.geom('geom1').feature('fil1').set('radius', 6);
model.geom('geom1').run('fil1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 97.5, 0);
model.geom('geom1').feature('pt1').setIndex('p', 'h0', 1);
model.geom('geom1').run('pt1');
model.geom('geom1').create('ls1', 'LineSegment');
model.geom('geom1').feature('ls1').selection('vertex1').set('fil1', 3);
model.geom('geom1').feature('ls1').selection('vertex2').set('pt1', 1);
model.geom('geom1').run('ls1');
model.geom('geom1').run('fin');
model.geom('geom1').create('mce1', 'MeshControlEdges');
model.geom('geom1').feature('mce1').selection('input').set('fin', 4);
model.geom('geom1').run('mce1');

model.physics('ptp').prop('ExtraDimensionSettings').set('Period_xd', '1/f0');
model.physics('ptp').prop('ExtraDimensionSettings').set('Nelemptp', 30);
model.physics('ptp').prop('ExtraDimensionSettings').set('HeavySpeciesSelection', 'BaseGeometry');
model.physics('ptp').create('xsec1', 'CrossSectionImport', -1);
model.physics('ptp').feature('xsec1').set('Filepath', 'Ar_xsecs.txt');
model.physics('ptp').feature('xsec1').runCommand('importData');
model.physics('ptp').create('rxn1', 'Reaction', 2);
model.physics('ptp').feature('rxn1').set('formula', 'Ars+Ars=>e+Ar+Ar+');
model.physics('ptp').feature('rxn1').set('kf', '2.3E7');
model.physics('ptp').create('rxn2', 'Reaction', 2);
model.physics('ptp').feature('rxn2').set('formula', 'Ars+Ar=>Ar+Ar');
model.physics('ptp').feature('rxn2').set('kf', 1807);
model.physics('ptp').feature('Ar').set('FromMassConstraint', true);
model.physics('ptp').feature('Ar').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ars').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar_1p').set('InitIon', true);
model.physics('ptp').feature('Ar_1p').set('PresetSpeciesData', 'Ar');
model.physics('ptp').feature('Ar_1p').set('MobilityDiffusivitySpecification', 'SpecifyMobilityComputeDiffusivity');
model.physics('ptp').feature('Ar_1p').set('IonTemperatureSpecification', 'LocalFieldApproximation');
model.physics('ptp').feature('Ar_1p').set('MobilitySpecification', 'ArIoninAr');
model.physics('ptp').create('sr1', 'SurfaceReaction', 1);
model.physics('ptp').feature('sr1').set('formula', 'Ar+=>Ar');
model.physics('ptp').feature('sr1').set('gammaf', 0);
model.physics('ptp').feature('sr1').selection.set([2 3]);
model.physics('ptp').feature.duplicate('sr2', 'sr1');
model.physics('ptp').feature('sr2').selection.set([4 5 6 7 8 9]);
model.physics('ptp').feature('sr2').set('gammai', 0);
model.physics('ptp').feature('sr2').set('ebari', 0);
model.physics('ptp').feature.duplicate('sr3', 'sr1');
model.physics('ptp').feature('sr3').set('formula', 'Ars=>Ar');
model.physics('ptp').feature('sr3').set('gammaf', 1);
model.physics('ptp').feature.duplicate('sr4', 'sr2');
model.physics('ptp').feature('sr4').set('formula', 'Ars=>Ar');
model.physics('ptp').feature('sr4').set('gammaf', 1);
model.physics('ptp').feature('pes1').set('T', '300[K]');
model.physics('ptp').feature('pes1').set('pA', 'p0');
model.physics('ptp').create('wall1', 'WallDriftDiffusion', 1);
model.physics('ptp').feature('wall1').selection.all;
model.physics('ptp').create('gnd1', 'Ground', 1);
model.physics('ptp').feature('gnd1').selection.set([3]);
model.physics('ptp').create('dct1', 'DielectricContact', 1);
model.physics('ptp').feature('dct1').selection.set([4 5 6 7 8 9]);
model.physics('ptp').create('mct1', 'MetalContact', 1);
model.physics('ptp').feature('mct1').set('Prf', 'Prf');
model.physics('ptp').feature('mct1').set('fp', 'f0');
model.physics('ptp').feature('mct1').set('CompBias', true);
model.physics('ptp').feature('mct1').selection.set([2]);

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.set([1 12]);
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemcount', 30);
model.mesh('mesh1').feature('edg1').feature('dis1').set('elemratio', 5);
model.mesh('mesh1').feature('edg1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').create('edg2', 'Edge');
model.mesh('mesh1').feature('edg2').selection.set([3 10]);
model.mesh('mesh1').feature('edg2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg2').feature('dis1').set('numelem', 20);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([1]);
model.mesh('mesh1').run('map1');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').set('smoothcontrol', false);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 2);
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(2);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').set('smoothtransition', false);
model.mesh('mesh1').feature('bl1').set('sharpcorners', 'trim');
model.mesh('mesh1').feature('bl1').feature('blp').selection.all;
model.mesh('mesh1').feature('bl1').feature('blp').selection.set([2 3 4 5 6 7 8 9 10 11]);
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('blstretch', 1.4);
model.mesh('mesh1').run;

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'tper');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_dct1_sigs_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vdcb_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ars_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_Ne_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_V_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_dct1_sigs_per').set('scaleval', '1E-7');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Vdcb_per').set('scaleval', '100');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ars_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Jdep_per').set('scaleval', '10');
model.sol('sol1').feature('v1').feature('comp1_En_per').set('scaleval', '35');
model.sol('sol1').feature('v1').feature('comp1_ptp_mct1_Va_per').set('scaleval', '500');
model.sol('sol1').feature('v1').feature('comp1_ptp_Ar_1p_W_per').set('scaleval', '10');
model.sol('sol1').feature('v1').set('control', 'tper');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('errorchk', 'off');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ptp)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('nlinnormlevel', 0.01);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (ptp)');
model.sol('sol1').feature('s1').feature('i1').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('domdofmax', 150000);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('ndom', 4);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('usecoarse', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').set('meshoverlap', false);
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dd1').feature('ds').feature('d1').set('errorchk', false);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('rstep', 5);
model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.05);
model.sol('sol1').feature('s1').feature('fc1').set('minsteprecovery', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('updweightsauto', 'wthresh');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdamp', 'current');
model.sol('sol1').feature('s1').feature('fc1').set('updweightsdampval', 0.1);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 200);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('termonres', false);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'ptp.neav'});
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'ptp.Teav'});
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'ptp.Vav'});
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'ptp.Pcap_av'});
model.result('pg4').feature('surf1').set('resolution', 'norefine');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg2').feature('surf1').set('colortable', 'Prism');
model.result('pg3').feature('surf1').set('colortable', 'Dipole');
model.result('pg4').feature('surf1').set('colortable', 'ThermalWave');
model.result('pg4').label('Capacitive Power Deposition, Period Averaged (ptp)');
model.result('pg1').label('Electron Density, Period Averaged (ptp)');
model.result('pg2').label('Electron Temperature, Period Averaged (ptp)');
model.result('pg3').label('Electric Potential, Period Averaged (ptp)');
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').set('solution', 'sol1');
model.result.dataset('dset2').set('geom', 'ptp_xdim');
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', {'x1_ptp'});
model.result('pg5').feature('lngr1').selection.all;
model.result('pg5').feature('lngr1').set('expr', {'ptp.mct1.V'});
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'V', 0);
model.result('pg5').create('lngr2', 'LineGraph');
model.result('pg5').feature('lngr2').set('xdata', 'expr');
model.result('pg5').feature('lngr2').set('xdataexpr', {'x1_ptp'});
model.result('pg5').feature('lngr2').selection.all;
model.result('pg5').feature('lngr2').set('expr', {'ptp.mct1.I'});
model.result('pg5').feature('lngr2').set('resolution', 'norefine');
model.result('pg5').feature('lngr2').set('legend', true);
model.result('pg5').feature('lngr2').set('legendmethod', 'manual');
model.result('pg5').feature('lngr2').setIndex('legends', 'I', 0);
model.result('pg5').set('twoyaxes', true);
model.result('pg5').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg5').set('titletype', 'none');
model.result('pg5').set('xlabelactive', true);
model.result('pg5').set('xlabel', 'Period fraction');
model.result('pg5').label('Current and Voltage, Metal Contact 1 (ptp)');
model.result('pg1').run;

model.study('std1').feature('tper').set('useparam', true);
model.study('std1').feature('tper').setIndex('pname', 'r0', 0);
model.study('std1').feature('tper').setIndex('plistarr', '', 0);
model.study('std1').feature('tper').setIndex('punit', 'm', 0);
model.study('std1').feature('tper').setIndex('pname', 'r0', 0);
model.study('std1').feature('tper').setIndex('plistarr', '', 0);
model.study('std1').feature('tper').setIndex('punit', 'm', 0);
model.study('std1').feature('tper').setIndex('pname', 'Prf', 0);
model.study('std1').feature('tper').setIndex('plistarr', '1 30', 0);
model.study('std1').feature('tper').setIndex('punit', 'W', 0);

model.sol('sol1').feature('s1').feature('fc1').set('rstepabs', 0.03);
model.sol('sol1').feature('s1').feature('fc1').set('plot', true);
model.sol('sol1').feature('s1').feature('pDef').set('paramtuning', true);
model.sol('sol1').feature('s1').feature('pDef').set('pinitstep', 0.25);
model.sol('sol1').feature('s1').feature('pDef').set('pmaxstep', 0.5);
model.sol('sol1').runAll;

model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('tptd', 'TimePeriodicToTimeDependent');
model.study('std2').feature('tptd').set('plotgroup', 'Default');
model.study('std2').feature('tptd').set('initialtime', '0');
model.study('std2').feature('tptd').set('solnum', 'auto');
model.study('std2').feature('tptd').set('notsolnum', 'auto');
model.study('std2').feature('tptd').set('outputmap', {});
model.study('std2').feature('tptd').setSolveFor('/physics/ptp', true);
model.study('std2').feature('tptd').set('tlist', 'range(0,(1/f0)/101,1/f0)');
model.study('std2').feature('tptd').set('usesol', true);
model.study('std2').feature('tptd').set('notsolmethod', 'sol');
model.study('std2').feature('tptd').set('notstudy', 'std1');
model.study('std2').feature('tptd').set('notsolnum', 'last');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'tptd');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'tptd');
model.sol('sol2').create('t1', 'Time');
model.sol('sol2').feature('t1').set('tlist', 'range(0,(1/f0)/101,1/f0)');
model.sol('sol2').feature('t1').set('plot', 'off');
model.sol('sol2').feature('t1').set('plotgroup', 'Default');
model.sol('sol2').feature('t1').set('plotfreq', 'tout');
model.sol('sol2').feature('t1').set('probesel', 'all');
model.sol('sol2').feature('t1').set('probes', {});
model.sol('sol2').feature('t1').set('probefreq', 'tsteps');
model.sol('sol2').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol2').feature('t1').set('reacf', true);
model.sol('sol2').feature('t1').set('storeudot', true);
model.sol('sol2').feature('t1').set('tstepsbdf', 'intermediate');
model.sol('sol2').feature('t1').set('endtimeinterpolation', true);
model.sol('sol2').feature('t1').set('control', 'tptd');
model.sol('sol2').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('t1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset3');
model.result('pg6').setIndex('looplevel', 102, 0);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'ptp.ne'});
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 102, 0);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'ptp.Te'});
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevel', 102, 0);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'V'});
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result('pg7').feature('surf1').set('colortable', 'Prism');
model.result('pg8').feature('surf1').set('colortable', 'Dipole');
model.result('pg6').label('Electron Density (ptp)');
model.result('pg7').label('Electron Temperature (ptp)');
model.result('pg8').label('Electric Potential (ptp)');
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').set('data', 'dset3');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('unit', {''});
model.result('pg9').feature('glob1').set('expr', {'ptp.mct1.V'});
model.result('pg9').feature('glob1').set('descr', {'Electric potential'});
model.result('pg9').feature('glob1').set('legend', true);
model.result('pg9').feature('glob1').set('legendmethod', 'manual');
model.result('pg9').feature('glob1').setIndex('legends', 'V', 0);
model.result('pg9').create('glob2', 'Global');
model.result('pg9').feature('glob2').set('unit', {''});
model.result('pg9').feature('glob2').set('expr', {'ptp.mct1.I'});
model.result('pg9').feature('glob2').set('descr', {'Current'});
model.result('pg9').feature('glob2').set('legend', true);
model.result('pg9').feature('glob2').set('legendmethod', 'manual');
model.result('pg9').feature('glob2').setIndex('legends', 'I', 0);
model.result('pg9').set('twoyaxes', true);
model.result('pg9').setIndex('plotonsecyaxis', true, 0, 1);
model.result('pg9').label('Current and Voltage, Metal Contact 1 (ptp) 1');
model.result('pg6').run;

model.physics.create('cpt', 'ChargedParticleTracing', 'geom1');
model.physics('cpt').model('comp1');

model.study('std1').feature('tper').setSolveFor('/physics/cpt', false);
model.study('std2').feature('tptd').setSolveFor('/physics/cpt', false);

model.func.create('an1', 'Analytic');
model.func('an1').model('comp1');
model.func('an1').set('expr', '(7*1e-10-0.6*1e-10*log(x))^2');
model.func('an1').setIndex('argunit', 'eV', 0);
model.func('an1').set('fununit', 'm^2');
model.func('an1').set('funcname', 'Qex');
model.func.create('an2', 'Analytic');
model.func('an2').model('comp1');
model.func('an2').set('expr', '2e-19/(x^(0.5)*(1+x))+3e-19*x/(1+x/3)^(2.3)');
model.func('an2').setIndex('argunit', 'eV', 0);
model.func('an2').set('fununit', 'm^2');
model.func('an2').set('funcname', 'Qele');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('Mion', '0.04[kg/mol]/N_A_const');

model.physics('cpt').feature('pp1').set('mp', 'Mion');
model.physics('cpt').feature('pp1').set('Z', 1);
model.physics('cpt').create('ef1', 'ElectricForce', 2);
model.physics('cpt').feature('ef1').selection.set([1]);
model.physics('cpt').feature('ef1').set('SpecifyForceUsing', 'ElectricPotential');
model.physics('cpt').feature('ef1').set('V_src', 'root.comp1.V');
model.physics('cpt').feature('ef1').set('TimeDependenceOfField', 'Periodic');
model.physics('cpt').feature('ef1').set('UsePPR', true);
model.physics('cpt').create('col1', 'Collisions', 2);
model.physics('cpt').feature('col1').set('Nd', 'ptp.Nn');
model.physics('cpt').feature('col1').set('T', '300[K]');
model.physics('cpt').feature('col1').selection.set([1]);
model.physics('cpt').feature('col1').create('cex1', 'ResonantChargeExchange', 2);
model.physics('cpt').feature('col1').feature('cex1').set('xsec', 'Qex(cpt.Ep)');
model.physics('cpt').feature('col1').feature('cex1').set('chis', '5[deg]');
model.physics('cpt').feature('col1').create('ela1', 'Elastic', 2);
model.physics('cpt').feature('col1').feature('ela1').set('xsec', 'Qele(cpt.Ep)');
model.physics('cpt').create('relg1', 'ReleaseGrid', -1);
model.physics('cpt').feature('relg1').setIndex('rt', 'range(0,(1/f0)/30,1/f0)', 0);
model.physics('cpt').feature('relg1').setIndex('x0', 40, 0);
model.physics('cpt').feature('relg1').setIndex('x0', 8, 1);
model.physics('cpt').feature('relg1').set('InitialVelocity', 'Maxwellian');
model.physics('cpt').feature('relg1').set('SamplingFromDistribution', 'Random');
model.physics('cpt').feature('relg1').setIndex('M', 30, 0);
model.physics('cpt').feature('relg1').set('T0', '300[K]');

model.study.create('std3');
model.study('std3').create('time', 'Transient');
model.study('std3').feature('time').setSolveFor('/physics/ptp', false);
model.study('std3').feature('time').setSolveFor('/physics/cpt', true);
model.study('std3').feature('time').set('tlist', 'range(0,(1/f0),(1/f0)*40)');
model.study('std3').feature('time').set('usesol', true);
model.study('std3').feature('time').set('notsolmethod', 'sol');
model.study('std3').feature('time').set('notstudy', 'std2');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'time');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'time');
model.sol('sol3').create('t1', 'Time');
model.sol('sol3').feature('t1').set('tlist', 'range(0,(1/f0),(1/f0)*40)');
model.sol('sol3').feature('t1').set('plot', 'off');
model.sol('sol3').feature('t1').set('plotgroup', 'pg1');
model.sol('sol3').feature('t1').set('plotfreq', 'tout');
model.sol('sol3').feature('t1').set('probesel', 'all');
model.sol('sol3').feature('t1').set('probes', {});
model.sol('sol3').feature('t1').set('probefreq', 'tsteps');
model.sol('sol3').feature('t1').set('rtol', 1.0E-5);
model.sol('sol3').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol3').feature('t1').set('reacf', true);
model.sol('sol3').feature('t1').set('storeudot', true);
model.sol('sol3').feature('t1').set('tstepsgenalpha', 'strict');
model.sol('sol3').feature('t1').set('endtimeinterpolation', true);
model.sol('sol3').feature('t1').set('timemethod', 'genalpha');
model.sol('sol3').feature('t1').set('estrat', 'exclude');
model.sol('sol3').feature('t1').set('control', 'time');
model.sol('sol3').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').create('i1', 'Iterative');
model.sol('sol3').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol3').feature('t1').feature('fc1').set('linsolver', 'i1');
model.sol('sol3').feature('t1').feature('fc1').set('ntolfact', 0.1);
model.sol('sol3').feature('t1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol3').feature('t1').set('maxstepgenalpha', '1E-9');
model.sol('sol3').runAll;

model.result.dataset.create('part1', 'Particle');
model.result.dataset('part1').set('solution', 'sol3');
model.result.dataset('part1').set('posdof', {'comp1.qr' 'comp1.qz'});
model.result.dataset('part1').set('geom', 'geom1');
model.result.dataset('part1').set('pgeom', 'pgeom_cpt');
model.result.dataset('part1').set('pgeomspec', 'fromphysics');
model.result.dataset('part1').set('physicsinterface', 'cpt');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').set('data', 'part1');
model.result('pg10').setIndex('looplevel', 41, 0);
model.result('pg10').label('Particle Trajectories (cpt)');
model.result('pg10').create('traj1', 'ParticleTrajectories');
model.result('pg10').feature('traj1').set('pointtype', 'point');
model.result('pg10').feature('traj1').set('linetype', 'none');
model.result('pg10').feature('traj1').create('col1', 'Color');
model.result('pg10').feature('traj1').feature('col1').set('expr', 'cpt.V');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Ion Energy Distribution Function (IEDF)');
model.result('pg11').set('data', 'part1');
model.result('pg11').setIndex('looplevelinput', 'last', 0);
model.result('pg11').create('hist1', 'Histogram');
model.result('pg11').feature('hist1').set('markerpos', 'datapoints');
model.result('pg11').feature('hist1').set('linewidth', 'preference');
model.result('pg11').feature('hist1').set('expr', 'cpt.Ep');
model.result('pg11').feature('hist1').set('unit', 'eV');
model.result('pg11').feature('hist1').set('method', 'limits');
model.result('pg11').feature('hist1').set('limits', 'range(0,2,400)');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').run;
model.result('pg12').label('Ion Angular Energy Distribution Function (IAEDF)');
model.result('pg12').set('data', 'part1');
model.result('pg12').stepLast(0);
model.result('pg12').run;
model.result('pg12').create('hist1', 'Histogram');
model.result('pg12').feature('hist1').set('xexpr', 'atan(cpt.vr/cpt.vz)');
model.result('pg12').feature('hist1').set('xunit', [native2unicode(hex2dec({'00' 'b0'}), 'unicode') ]);
model.result('pg12').feature('hist1').set('xdescractive', true);
model.result('pg12').feature('hist1').set('xdescr', 'Angle');
model.result('pg12').feature('hist1').set('yexpr', 'cpt.Ep');
model.result('pg12').feature('hist1').set('yunit', 'eV');
model.result('pg12').feature('hist1').set('xmethod', 'limits');
model.result('pg12').feature('hist1').set('xlimits', 'range(-10,0.40816326530612246,10)');
model.result('pg12').feature('hist1').set('ymethod', 'limits');
model.result('pg12').feature('hist1').set('ylimits', 'range(0,2,400)');
model.result('pg12').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').set('expr', {'ptp.mct1.Va_per'});
model.result.numerical('gev1').set('descr', {'Voltage amplitude'});
model.result.numerical('gev1').set('unit', {'V'});
model.result.numerical('gev1').set('expr', {'ptp.mct1.Va_per' 'ptp.mct1.Vdcb_per'});
model.result.numerical('gev1').set('descr', {'Voltage amplitude' 'DC bias voltage'});
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation 1');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').setResult;
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result('pg11').run;
model.result('pg12').run;

model.title('Ion Energy Distribution Function in a Capacitively Coupled Plasma Reactor');

model.description('This model computes the ion energy distribution function (IEDF) for a commercial capacitively coupled plasma reactor. The results show good agreement with experimental data.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;

model.label('ccp_ion_energy_distribution_function.mph');

model.modelNode.label('Components');

out = model;
