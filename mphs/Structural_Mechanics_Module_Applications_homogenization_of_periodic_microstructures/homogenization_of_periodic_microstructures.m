function out = model
%
% homogenization_of_periodic_microstructures.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('cc', 'CurvilinearCoordinates', 'geom1');
model.physics('cc').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/cc', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

model.param.label('General Parameters');
model.param.set('pA0', '1[bar]');
model.param.descr('pA0', 'Absolute pressure');
model.param.set('T0', '293.15[K]');
model.param.descr('T0', 'Temperature');
model.param.set('useUniFibSqrPac', '1');
model.param.descr('useUniFibSqrPac', 'Unidirectional fiber composite square packing, activation boolean');
model.param.set('useUniFibHexPac', '0');
model.param.descr('useUniFibHexPac', 'Unidirectional fiber composite hexagonal packing, activation boolean');
model.param.set('useBiFib', '0');
model.param.descr('useBiFib', 'Bidirectional fiber composite, activation boolean');
model.param.set('useBiNonCrimpFib', '0');
model.param.descr('useBiNonCrimpFib', 'Bidirectional noncrimp fiber composite, activation boolean');
model.param.set('useBiPlainWeaveFib', '0');
model.param.descr('useBiPlainWeaveFib', 'Bidirectional plain weave fiber composite, activation boolean');
model.param.set('usePrimCubicPart', '0');
model.param.descr('usePrimCubicPart', 'Particulate composite primitive cubic, activation boolean');
model.param.set('useBodyCubicPart', '0');
model.param.descr('useBodyCubicPart', 'Particulate composite body centered cubic, activation boolean');
model.param.set('useFaceCubicPart', '0');
model.param.descr('useFaceCubicPart', 'Particulate composite face centered cubic, activation boolean');
model.param.set('useHoneycomb', '0');
model.param.descr('useHoneycomb', 'Honeycomb, activation boolean');
model.param.set('useSandwich', '0');
model.param.descr('useSandwich', 'Sandwich, activation boolean');
model.param.create('par2');
model.param('par2').label('Parameters: Unidirectional Fiber Composite, Square Packing');
model.param('par2').set('df1', '0.71365[mm]');
model.param('par2').descr('df1', 'Fiber diameter');
model.param('par2').set('wm1', '1[mm]');
model.param('par2').descr('wm1', 'Cell width');
model.param('par2').set('dm1', '1[mm]');
model.param('par2').descr('dm1', 'Cell depth');
model.param('par2').set('hm1', '1[mm]');
model.param('par2').descr('hm1', 'Cell height');
model.param('par2').set('internal_voids1', '0');
model.param('par2').descr('internal_voids1', 'Set 1 to create internal voids');
model.param.create('par3');
model.param('par3').label('Parameters: Unidirectional Fiber Composite, Hexagonal Packing');
model.param('par3').set('df2', '0.61804[mm]');
model.param('par3').descr('df2', 'Fiber diameter');
model.param('par3').set('sf2', '1');
model.param('par3').descr('sf2', 'Ratio of corner fiber diameter to center fiber diameter');
model.param('par3').set('wm2', '1[mm]');
model.param('par3').descr('wm2', 'Cell width');
model.param('par3').set('dm2', '1[mm]');
model.param('par3').descr('dm2', 'Cell depth');
model.param('par3').set('hm2', '1.5[mm]');
model.param('par3').descr('hm2', 'Cell height');
model.param.create('par4');
model.param('par4').label('Parameters: Bidirectional Fiber Composite');
model.param('par4').set('df3', '0.61804[mm]');
model.param('par4').descr('df3', 'Fiber diameter');
model.param('par4').set('sf3', '1');
model.param('par4').descr('sf3', 'Ratio of corner fiber diameter to center fiber diameter');
model.param('par4').set('wm3', '1[mm]');
model.param('par4').descr('wm3', 'Cell width');
model.param('par4').set('dm3', '1[mm]');
model.param('par4').descr('dm3', 'Cell depth');
model.param('par4').set('hm3', '1.5[mm]');
model.param('par4').descr('hm3', 'Cell height');
model.param.create('par5');
model.param('par5').label('Parameters: Bidirectional Noncrimp Fiber Composite');
model.param('par5').set('wfx4', '0.65[mm]');
model.param('par5').descr('wfx4', 'Width of fiber strand in X direction');
model.param('par5').set('hfx4', '0.065[mm]');
model.param('par5').descr('hfx4', 'Height of fiber strand in X direction');
model.param('par5').set('wfy4', '0.65[mm]');
model.param('par5').descr('wfy4', 'Width of fiber strand in Y direction');
model.param('par5').set('hfy4', '0.065[mm]');
model.param('par5').descr('hfy4', 'Height of fiber strand in Y direction');
model.param('par5').set('wm4', '1[mm]');
model.param('par5').descr('wm4', 'Cell width');
model.param('par5').set('dm4', '1[mm]');
model.param('par5').descr('dm4', 'Cell depth');
model.param('par5').set('hm4', '0.2[mm]');
model.param('par5').descr('hm4', 'Cell height');
model.param.create('par6');
model.param('par6').label('Parameters: Bidirectional Plain Weave Fiber Composite');
model.param('par6').set('afx5', '0.06[mm]');
model.param('par6').descr('afx5', 'First semiaxis of fiber strand in X direction');
model.param('par6').set('bfx5', '0.03[mm]');
model.param('par6').descr('bfx5', 'Second semiaxis of fiber strand in X direction');
model.param('par6').set('afy5', '0.06[mm]');
model.param('par6').descr('afy5', 'First semiaxis of fiber strand in Y direction');
model.param('par6').set('bfy5', '0.03[mm]');
model.param('par6').descr('bfy5', 'Second semiaxis of fiber strand in Y direction');
model.param('par6').set('nfx5', '2');
model.param('par6').descr('nfx5', 'Number of fibers strands in X direction');
model.param('par6').set('nfy5', '2');
model.param('par6').descr('nfy5', 'Number of fibers strands in Y direction');
model.param('par6').set('gap5', '0.03[mm]');
model.param('par6').descr('gap5', 'Gap between crossing fiber strands');
model.param('par6').set('wm5', '1[mm]');
model.param('par6').descr('wm5', 'Cell width');
model.param('par6').set('dm5', '1[mm]');
model.param('par6').descr('dm5', 'Cell depth');
model.param('par6').set('hm5', '0.2[mm]');
model.param('par6').descr('hm5', 'Cell height');
model.param.create('par7');
model.param('par7').label('Parameters: Particulate Composite, Primitive Cubic');
model.param('par7').set('dp6', '0.57588[mm]');
model.param('par7').descr('dp6', 'Particle diameter');
model.param('par7').set('wm6', '1[mm]');
model.param('par7').descr('wm6', 'Cell width');
model.param('par7').set('dm6', '1[mm]');
model.param('par7').descr('dm6', 'Cell depth');
model.param('par7').set('hm6', '1[mm]');
model.param('par7').descr('hm6', 'Cell height');
model.param('par7').set('internal_voids6', '0');
model.param('par7').descr('internal_voids6', 'Set 1 to create internal voids');
model.param.create('par8');
model.param('par8').label('Parameters: Particulate Composite, Body-Centered Cubic');
model.param('par8').set('dp7', '0.45708[mm]');
model.param('par8').descr('dp7', 'Particle diameter');
model.param('par8').set('sf7', '1');
model.param('par8').descr('sf7', 'Ratio of corner particle diameter to center particle diameter');
model.param('par8').set('wm7', '1[mm]');
model.param('par8').descr('wm7', 'Cell width');
model.param('par8').set('dm7', '1[mm]');
model.param('par8').descr('dm7', 'Cell depth');
model.param('par8').set('hm7', '1[mm]');
model.param('par8').descr('hm7', 'Cell height');
model.param.create('par9');
model.param('par9').label('Parameters: Particulate Composite, Face-Centered Cubic');
model.param('par9').set('dp8', '0.45708[mm]');
model.param('par9').descr('dp8', 'Particle diameter');
model.param('par9').set('sf8', '1');
model.param('par9').descr('sf8', 'Ratio of corner particle diameter to center particle diameter');
model.param('par9').set('wm8', '1[mm]');
model.param('par9').descr('wm8', 'Cell width');
model.param('par9').set('dm8', '1[mm]');
model.param('par9').descr('dm8', 'Cell depth');
model.param('par9').set('hm8', '1[mm]');
model.param('par9').descr('hm8', 'Cell height');
model.param.create('par10');
model.param('par10').label('Parameters: Honeycomb');
model.param('par10').set('lh9', '0.5[mm]');
model.param('par10').descr('lh9', 'Length of horizontal wall of honeycomb cross section');
model.param('par10').set('lo9', '0.5[mm]');
model.param('par10').descr('lo9', 'Length of oblique wall of honeycomb cross section');
model.param('par10').set('theta9', '120[deg]');
model.param('par10').descr('theta9', 'Angle between horizontal and oblique walls of honeycomb cross section');
model.param('par10').set('th9', '0.05[mm]');
model.param('par10').descr('th9', 'Thickness of honeycomb walls');
model.param('par10').set('hm9', '1[mm]');
model.param('par10').descr('hm9', 'Cell height');
model.param.create('par11');
model.param('par11').label('Parameters: Sandwich');
model.param('par11').set('nm10', '3');
model.param('par11').descr('nm10', 'Number of layers');
model.param('par11').set('wm10', '1[mm]');
model.param('par11').descr('wm10', 'Cell width');
model.param('par11').set('dm10', '1[mm]');
model.param('par11').descr('dm10', 'Cell depth');
model.param('par11').set('hm10', '1[mm]');
model.param('par11').descr('hm10', 'Cell height');

model.geom.load({'part1'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/unidirectional_fiber_square_packing.mph', {'part1'});
model.geom.load({'part2'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/unidirectional_fiber_hexagonal_packing.mph', {'part1'});
model.geom.load({'part3'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/bidirectional_fiber.mph', {'part1'});
model.geom.load({'part4'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/bidirectional_non_crimp_fiber.mph', {'part1'});
model.geom.load({'part5'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Fiber_Composites/bidirectional_plain_weave_fiber.mph', {'part1'});
model.geom.load({'part6'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Particulate_Composites/particulate_primitive_cubic.mph', {'part1'});
model.geom.load({'part7'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Particulate_Composites/particulate_body_centered_cubic.mph', {'part1'});
model.geom.load({'part8'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Particulate_Composites/particulate_face_centered_cubic.mph', {'part1'});
model.geom.load({'part9'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Honeycombs/honeycomb_hexagonal_cross_section.mph', {'part1'});
model.geom.load({'part10'}, 'COMSOL_Multiphysics/Unit_Cells_and_RVEs/Miscellaneous/sandwich.mph', {'part1'});
model.geom('geom1').create('if1', 'If');
model.geom('geom1').feature.createAfter('endif1', 'EndIf', 'if1');
model.geom('geom1').feature('if1').set('condition', 'useUniFibSqrPac==1');
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'df', 'df1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'wm', 'wm1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'dm', 'dm1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'hm', 'hm1');
model.geom('geom1').feature('pi1').setEntry('inputexpr', 'internal_voids', 'internal_voids1');
model.geom('geom1').run('pi1');
model.geom('geom1').create('if2', 'If');
model.geom('geom1').feature.createAfter('endif2', 'EndIf', 'if2');
model.geom('geom1').feature.move('endif2', 4);
model.geom('geom1').feature.move('if2', 3);
model.geom('geom1').feature('if2').set('condition', 'useUniFibHexPac==1');
model.geom('geom1').run('if2');
model.geom('geom1').create('pi2', 'PartInstance');
model.geom('geom1').feature('pi2').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi2').set('part', 'part2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'df1', 'df2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'sf', 'sf2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'wm', 'wm2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'dm', 'dm2');
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'hm', 'hm2');
model.geom('geom1').run('pi2');
model.geom('geom1').create('if3', 'If');
model.geom('geom1').feature.createAfter('endif3', 'EndIf', 'if3');
model.geom('geom1').feature('if3').set('condition', 'useBiFib==1');
model.geom('geom1').feature.move('endif3', 7);
model.geom('geom1').feature.move('if3', 6);
model.geom('geom1').run('if3');
model.geom('geom1').create('pi3', 'PartInstance');
model.geom('geom1').feature('pi3').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi3').set('part', 'part3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'df1', 'df3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'sf', 'sf3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'wm', 'wm3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'dm', 'dm3');
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'hm', 'hm3');
model.geom('geom1').run('pi3');
model.geom('geom1').create('if4', 'If');
model.geom('geom1').feature.createAfter('endif4', 'EndIf', 'if4');
model.geom('geom1').feature('if4').set('condition', 'useBiNonCrimpFib==1');
model.geom('geom1').feature.move('endif4', 10);
model.geom('geom1').feature.move('if4', 9);
model.geom('geom1').run('if4');
model.geom('geom1').create('pi4', 'PartInstance');
model.geom('geom1').feature('pi4').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi4').set('part', 'part4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'wfx', 'wfx4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'hfx', 'hfx4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'wfy', 'wfy4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'hfy', 'hfy4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'wm', 'wm4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'dm', 'dm4');
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'hm', 'hm4');
model.geom('geom1').run('pi4');
model.geom('geom1').create('if5', 'If');
model.geom('geom1').feature.createAfter('endif5', 'EndIf', 'if5');
model.geom('geom1').feature('if5').set('condition', 'useBiPlainWeaveFib==1');
model.geom('geom1').feature.move('endif5', 13);
model.geom('geom1').feature.move('if5', 12);
model.geom('geom1').run('if5');
model.geom('geom1').create('pi5', 'PartInstance');
model.geom('geom1').feature('pi5').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi5').set('part', 'part5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'afx', 'afx5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'bfx', 'bfx5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'afy', 'afy5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'bfy', 'bfy5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'nfx', 'nfx5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'nfy', 'nfy5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'gap', 'gap5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'wm', 'wm5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'dm', 'dm5');
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'hm', 'hm5');
model.geom('geom1').run('pi5');
model.geom('geom1').create('if6', 'If');
model.geom('geom1').feature.createAfter('endif6', 'EndIf', 'if6');
model.geom('geom1').feature('if6').set('condition', 'usePrimCubicPart==1');
model.geom('geom1').feature.move('endif6', 16);
model.geom('geom1').feature.move('if6', 15);
model.geom('geom1').run('if6');
model.geom('geom1').create('pi6', 'PartInstance');
model.geom('geom1').feature('pi6').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi6').set('part', 'part6');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'dp', 'dp6');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'wm', 'wm6');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'dm', 'dm6');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'hm', 'hm6');
model.geom('geom1').feature('pi6').setEntry('inputexpr', 'internal_voids', 'internal_voids6');
model.geom('geom1').run('pi6');
model.geom('geom1').create('if7', 'If');
model.geom('geom1').feature.createAfter('endif7', 'EndIf', 'if7');
model.geom('geom1').feature('if7').set('condition', 'useBodyCubicPart==1');
model.geom('geom1').feature.move('endif7', 19);
model.geom('geom1').feature.move('if7', 18);
model.geom('geom1').run('if7');
model.geom('geom1').create('pi7', 'PartInstance');
model.geom('geom1').feature('pi7').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi7').set('part', 'part7');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'dp1', 'dp7');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'sp', 'sf7');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'wm', 'wm7');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'dm', 'dm7');
model.geom('geom1').feature('pi7').setEntry('inputexpr', 'hm', 'hm7');
model.geom('geom1').run('pi7');
model.geom('geom1').create('if8', 'If');
model.geom('geom1').feature.createAfter('endif8', 'EndIf', 'if8');
model.geom('geom1').feature('if8').set('condition', 'useFaceCubicPart==1');
model.geom('geom1').feature.move('endif8', 22);
model.geom('geom1').feature.move('if8', 21);
model.geom('geom1').run('if8');
model.geom('geom1').create('pi8', 'PartInstance');
model.geom('geom1').feature('pi8').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi8').set('part', 'part8');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'dp1', 'dp8');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'sp', 'sf8');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'wm', 'wm8');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'dm', 'dm8');
model.geom('geom1').feature('pi8').setEntry('inputexpr', 'hm', 'hm8');
model.geom('geom1').run('pi8');
model.geom('geom1').create('if9', 'If');
model.geom('geom1').feature.createAfter('endif9', 'EndIf', 'if9');
model.geom('geom1').feature('if9').set('condition', 'useHoneycomb==1');
model.geom('geom1').feature.move('endif9', 25);
model.geom('geom1').feature.move('if9', 24);
model.geom('geom1').run('if9');
model.geom('geom1').create('pi9', 'PartInstance');
model.geom('geom1').feature('pi9').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi9').set('part', 'part9');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'lh', 'lh9');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'lo', 'lo9');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'theta', 'theta9');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'th', 'th9');
model.geom('geom1').feature('pi9').setEntry('inputexpr', 'hm', 'hm9');
model.geom('geom1').run('pi9');
model.geom('geom1').create('if10', 'If');
model.geom('geom1').feature.createAfter('endif10', 'EndIf', 'if10');
model.geom('geom1').feature('if10').set('condition', 'useSandwich==1');
model.geom('geom1').feature.move('endif10', 28);
model.geom('geom1').feature.move('if10', 27);
model.geom('geom1').run('if10');
model.geom('geom1').create('pi10', 'PartInstance');
model.geom('geom1').feature('pi10').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi10').set('part', 'part10');
model.geom('geom1').feature('pi10').setEntry('inputexpr', 'nm', 'nm10');
model.geom('geom1').feature('pi10').setEntry('inputexpr', 'wm', 'wm10');
model.geom('geom1').feature('pi10').setEntry('inputexpr', 'dm', 'dm10');
model.geom('geom1').feature('pi10').setEntry('inputexpr', 'hm', 'hm10');
model.geom('geom1').run('fin');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').label('Matrix Union');
model.geom('geom1').feature('unisel1').set('input', {'pi1_dif1' 'pi2_dif1' 'pi3_dif1' 'pi4_dif1' 'pi5_difsel1' 'pi6_dif1' 'pi7_dif1' 'pi8_dif1' 'pi9_dif1'});

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Selection: Domain Material');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Selection: All Domains');
model.selection('sel2').all;
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Selection: Reinforcement');
model.selection('uni1').set('input', {'geom1_pi1_cyl1_dom' 'geom1_pi2_ext1_dom' 'geom1_pi3_uni1_dom' 'geom1_pi4_uni1_dom' 'geom1_pi5_uni1_dom' 'geom1_pi6_sph1_dom' 'geom1_pi7_uni1_dom' 'geom1_pi8_uni1_dom' 'geom1_pi9_ext1_dom'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Selection: Matrix');
model.selection('uni2').set('input', {'geom1_pi1_dif1_dom' 'geom1_pi2_dif1_dom' 'geom1_pi3_dif1_dom' 'geom1_pi4_dif1_dom' 'geom1_pi5_difsel1' 'geom1_pi6_dif1_dom' 'geom1_pi7_dif1_dom' 'geom1_pi8_dif1_dom' 'geom1_pi9_dif1_dom' 'geom1_pi10_uni1_dom'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('Selection: All');
model.selection('uni3').set('input', {'geom1_pi1_boxsel1' 'geom1_pi2_boxsel1' 'geom1_pi3_boxsel1' 'geom1_pi4_boxsel1' 'geom1_pi5_boxsel1' 'geom1_pi6_boxsel1' 'geom1_pi7_boxsel1' 'geom1_pi8_boxsel1' 'geom1_pi9_boxsel1' 'geom1_pi10_boxsel7'});
model.selection.create('uni4', 'Union');
model.selection('uni4').model('comp1');
model.selection('uni4').label('Selection: Pair 1');
model.selection('uni4').set('entitydim', 2);
model.selection('uni4').set('input', {'geom1_pi1_unisel1' 'geom1_pi2_unisel1' 'geom1_pi3_unisel1' 'geom1_pi4_unisel1' 'geom1_pi5_unisel2' 'geom1_pi6_unisel1' 'geom1_pi7_unisel1' 'geom1_pi8_unisel1' 'geom1_pi9_unisel1' 'geom1_pi10_unisel1'});
model.selection.create('uni5', 'Union');
model.selection('uni5').model('comp1');
model.selection('uni5').label('Selection: Pair 2');
model.selection('uni5').set('entitydim', 2);
model.selection('uni5').set('input', {'geom1_pi1_unisel2' 'geom1_pi2_unisel2' 'geom1_pi3_unisel2' 'geom1_pi4_unisel2' 'geom1_pi5_unisel3' 'geom1_pi6_unisel2' 'geom1_pi7_unisel2' 'geom1_pi8_unisel2' 'geom1_pi9_unisel2' 'geom1_pi10_unisel2'});
model.selection.create('uni6', 'Union');
model.selection('uni6').model('comp1');
model.selection('uni6').label('Selection: Pair 3');
model.selection('uni6').set('entitydim', 2);
model.selection('uni6').set('input', {'geom1_pi1_unisel3' 'geom1_pi2_unisel3' 'geom1_pi3_unisel3' 'geom1_pi4_unisel3' 'geom1_pi5_unisel4' 'geom1_pi6_unisel3' 'geom1_pi7_unisel3' 'geom1_pi8_unisel3' 'geom1_pi9_unisel3' 'geom1_pi10_unisel3'});
model.selection.create('uni7', 'Union');
model.selection('uni7').model('comp1');
model.selection('uni7').label('Selection: Pair 1, Source');
model.selection('uni7').set('entitydim', 2);
model.selection('uni7').set('input', {'geom1_pi1_sel1' 'geom1_pi2_sel1' 'geom1_pi3_sel1' 'geom1_pi4_sel1' 'geom1_pi5_sel1' 'geom1_pi6_sel1' 'geom1_pi7_sel1' 'geom1_pi8_sel1' 'geom1_pi9_sel1' 'geom1_pi10_boxsel1'});
model.selection.create('uni8', 'Union');
model.selection('uni8').model('comp1');
model.selection('uni8').label('Selection: Pair 1, Destination');
model.selection('uni8').set('entitydim', 2);
model.selection('uni8').set('input', {'geom1_pi1_sel2' 'geom1_pi2_sel2' 'geom1_pi3_sel2' 'geom1_pi4_sel2' 'geom1_pi5_sel2' 'geom1_pi6_sel2' 'geom1_pi7_sel2' 'geom1_pi8_sel2' 'geom1_pi9_sel2' 'geom1_pi10_boxsel2'});
model.selection.create('uni9', 'Union');
model.selection('uni9').model('comp1');
model.selection('uni9').label('Selection: Pair 2, Source');
model.selection('uni9').set('entitydim', 2);
model.selection('uni9').set('input', {'geom1_pi1_sel3' 'geom1_pi2_sel3' 'geom1_pi3_sel3' 'geom1_pi4_sel3' 'geom1_pi5_sel3' 'geom1_pi6_sel3' 'geom1_pi7_sel3' 'geom1_pi8_sel3' 'geom1_pi9_sel3' 'geom1_pi10_boxsel3'});
model.selection.create('uni10', 'Union');
model.selection('uni10').model('comp1');
model.selection('uni10').label('Selection: Pair 2, Destination');
model.selection('uni10').set('entitydim', 2);
model.selection('uni10').set('input', {'geom1_pi1_sel4' 'geom1_pi2_sel4' 'geom1_pi3_sel4' 'geom1_pi4_sel4' 'geom1_pi5_sel4' 'geom1_pi6_sel4' 'geom1_pi7_sel4' 'geom1_pi8_sel4' 'geom1_pi9_sel4' 'geom1_pi10_boxsel4'});
model.selection.create('uni11', 'Union');
model.selection('uni11').model('comp1');
model.selection('uni11').label('Selection: Pair 3, Source');
model.selection('uni11').set('entitydim', 2);
model.selection('uni11').set('input', {'geom1_pi1_sel5' 'geom1_pi2_sel5' 'geom1_pi3_sel5' 'geom1_pi4_sel5' 'geom1_pi5_sel5' 'geom1_pi6_sel5' 'geom1_pi7_sel5' 'geom1_pi8_sel5' 'geom1_pi9_sel5' 'geom1_pi10_boxsel5'});
model.selection.create('uni12', 'Union');
model.selection('uni12').model('comp1');
model.selection('uni12').label('Selection: Pair 3, Destination');
model.selection('uni12').set('entitydim', 2);
model.selection('uni12').set('input', {'geom1_pi1_sel6' 'geom1_pi2_sel6' 'geom1_pi3_sel6' 'geom1_pi4_sel6' 'geom1_pi5_sel6' 'geom1_pi6_sel6' 'geom1_pi7_sel6' 'geom1_pi8_sel6' 'geom1_pi9_sel6' 'geom1_pi10_boxsel6'});

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.named('uni1');
model.cpl('intop1').label('Integration over reinforcement');
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').selection.named('uni2');
model.cpl('intop2').label('Integration over matrix');
model.cpl.create('intop3', 'Integration', 'geom1');
model.cpl('intop3').set('axisym', true);
model.cpl('intop3').selection.named('uni3');
model.cpl('intop3').label('Integration over all');
model.cpl.create('intop4', 'Integration', 'geom1');
model.cpl('intop4').set('axisym', true);
model.cpl('intop4').selection.geom('geom1', 2);
model.cpl('intop4').selection.named('uni4');
model.cpl('intop4').label('Integration over pair 1');
model.cpl.create('intop5', 'Integration', 'geom1');
model.cpl('intop5').set('axisym', true);
model.cpl('intop5').selection.geom('geom1', 2);
model.cpl('intop5').selection.named('uni5');
model.cpl('intop5').label('Integration over pair 2');
model.cpl.create('intop6', 'Integration', 'geom1');
model.cpl('intop6').set('axisym', true);
model.cpl('intop6').selection.geom('geom1', 2);
model.cpl('intop6').selection.named('uni6');
model.cpl('intop6').label('Integration over pair 3');

model.coordSystem.create('sys2', 'geom1', 'VectorBase');
model.coordSystem('sys2').setIndex('base', 0, 0, 0);
model.coordSystem('sys2').setIndex('base', 1, 0, 1);
model.coordSystem('sys2').setIndex('base', -1, 1, 0);
model.coordSystem('sys2').setIndex('base', 0, 1, 1);
model.coordSystem('sys2').set('orthonormal', true);
model.coordSystem('sys2').set('frametype', 'material');

model.view('view1').hideObjects.create('hide1');
model.view('view1').hideObjects('hide1').init(3);
model.view('view1').hideObjects('hide1').named('unisel1');
model.view('view1').hideObjects('hide1').active(false);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.set([]);
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Acrylic plastic');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat2').set('diffuse', 'custom');
model.material('mat2').set('customdiffuse', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('ambient', 'custom');
model.material('mat2').set('customambient', [0.39215686274509803 0.7843137254901961 0.39215686274509803]);
model.material('mat2').set('noise', true);
model.material('mat2').set('lighting', 'phong');
model.material('mat2').set('shininess', 1000);
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]' '0' '0' '0' '7.0e-5[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '1470[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('density', '1190[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]' '0' '0' '0' '0.18[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '3.2[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.35');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat3').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat3').label('Aluminum');
model.material('mat3').set('family', 'aluminum');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]' '0' '0' '0' '238[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]' '0' '0' '0' '3.774e7[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'23e-6[1/K]' '0' '0' '0' '23e-6[1/K]' '0' '0' '0' '23e-6[1/K]'});
model.material('mat3').propertyGroup('def').set('density', '2700[kg/m^3]');
model.material('mat3').propertyGroup('Enu').set('E', '70[GPa]');
model.material('mat3').propertyGroup('Enu').set('nu', '0.33');
model.material('mat3').propertyGroup('Murnaghan').set('l', '-250[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('m', '-330[GPa]');
model.material('mat3').propertyGroup('Murnaghan').set('n', '-350[GPa]');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat4').label('Brick');
model.material('mat4').set('family', 'brick');
model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'6e-6[1/K]' '0' '0' '0' '6e-6[1/K]' '0' '0' '0' '6e-6[1/K]'});
model.material('mat4').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat4').propertyGroup('def').set('heatcapacity', '900[J/(kg*K)]');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]'});
model.material('mat4').propertyGroup('Enu').set('E', '17[GPa]');
model.material('mat4').propertyGroup('Enu').set('nu', '0.2');
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat5').label('Cast iron');
model.material('mat5').set('family', 'custom');
model.material('mat5').set('customspecular', [0.9803921568627451 0.9803921568627451 0.9803921568627451]);
model.material('mat5').set('diffuse', 'custom');
model.material('mat5').set('customdiffuse', [0.39215686274509803 0.39215686274509803 0.39215686274509803]);
model.material('mat5').set('ambient', 'custom');
model.material('mat5').set('customambient', [0.39215686274509803 0.39215686274509803 0.39215686274509803]);
model.material('mat5').set('noise', true);
model.material('mat5').set('noisescale', 0.14);
model.material('mat5').set('noisefreq', 2.1);
model.material('mat5').set('fresnel', 0.1);
model.material('mat5').set('roughness', 0.1);
model.material('mat5').set('diffusewrap', 0);
model.material('mat5').set('reflectance', 0);
model.material('mat5').propertyGroup('def').set('thermalexpansioncoefficient', {'11e-6[1/K]' '0' '0' '0' '11e-6[1/K]' '0' '0' '0' '11e-6[1/K]'});
model.material('mat5').propertyGroup('def').set('density', '7000[kg/m^3]');
model.material('mat5').propertyGroup('def').set('heatcapacity', '420[J/(kg*K)]');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'50[W/(m*K)]' '0' '0' '0' '50[W/(m*K)]' '0' '0' '0' '50[W/(m*K)]'});
model.material('mat5').propertyGroup('Enu').set('E', '140[GPa]');
model.material('mat5').propertyGroup('Enu').set('nu', '0.25');
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat6').label('Concrete');
model.material('mat6').set('family', 'concrete');
model.material('mat6').propertyGroup('def').set('thermalexpansioncoefficient', {'10e-6[1/K]' '0' '0' '0' '10e-6[1/K]' '0' '0' '0' '10e-6[1/K]'});
model.material('mat6').propertyGroup('def').set('density', '2300[kg/m^3]');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'1.8[W/(m*K)]' '0' '0' '0' '1.8[W/(m*K)]' '0' '0' '0' '1.8[W/(m*K)]'});
model.material('mat6').propertyGroup('def').set('heatcapacity', '880[J/(kg*K)]');
model.material('mat6').propertyGroup('Enu').set('E', '25[GPa]');
model.material('mat6').propertyGroup('Enu').set('nu', '0.20');
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat7').propertyGroup.create('linzRes', 'Linearized resistivity');
model.material('mat7').label('Copper');
model.material('mat7').set('family', 'copper');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('electricconductivity', {'5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]' '0' '0' '0' '5.998e7[S/m]'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'17e-6[1/K]' '0' '0' '0' '17e-6[1/K]' '0' '0' '0' '17e-6[1/K]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', '385[J/(kg*K)]');
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('density', '8960[kg/m^3]');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]' '0' '0' '0' '400[W/(m*K)]'});
model.material('mat7').propertyGroup('Enu').set('E', '110[GPa]');
model.material('mat7').propertyGroup('Enu').set('nu', '0.35');
model.material('mat7').propertyGroup('linzRes').set('rho0', '1.72e-8[ohm*m]');
model.material('mat7').propertyGroup('linzRes').set('alpha', '0.0039[1/K]');
model.material('mat7').propertyGroup('linzRes').set('Tref', '298[K]');
model.material('mat7').propertyGroup('linzRes').addInput('temperature');
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat8').label('Iron');
model.material('mat8').set('family', 'iron');
model.material('mat8').propertyGroup('def').set('relpermeability', {'4000' '0' '0' '0' '4000' '0' '0' '0' '4000'});
model.material('mat8').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat8').propertyGroup('def').set('thermalexpansioncoefficient', {'12.2e-6[1/K]' '0' '0' '0' '12.2e-6[1/K]' '0' '0' '0' '12.2e-6[1/K]'});
model.material('mat8').propertyGroup('def').set('heatcapacity', '440[J/(kg*K)]');
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('density', '7870[kg/m^3]');
model.material('mat8').propertyGroup('def').set('thermalconductivity', {'76.2[W/(m*K)]' '0' '0' '0' '76.2[W/(m*K)]' '0' '0' '0' '76.2[W/(m*K)]'});
model.material('mat8').propertyGroup('Enu').set('E', '200[GPa]');
model.material('mat8').propertyGroup('Enu').set('nu', '0.29');
model.material.create('mat9', 'Common', 'comp1');
model.material('mat9').propertyGroup.create('Lame', ['Lam' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' parameters']);
model.material('mat9').propertyGroup.create('MooneyRivlin', 'Mooney-Rivlin');
model.material('mat9').propertyGroup.create('Yeoh', 'Yeoh');
model.material('mat9').propertyGroup.create('Varga', 'Varga');
model.material('mat9').propertyGroup.create('ArrudaBoyce', 'Arruda-Boyce');
model.material('mat9').label('Rubber');
model.material('mat9').set('family', 'rubber');
model.material('mat9').propertyGroup('def').set('density', '');
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat9').propertyGroup('def').set('lossfactor', '');
model.material('mat9').propertyGroup('def').set('thermalconductivity', '');
model.material('mat9').propertyGroup('def').set('heatcapacity', '');
model.material('mat9').propertyGroup('def').set('density', '1100[kg/m^3]');
model.material('mat9').propertyGroup('def').set('thermalexpansioncoefficient', {'200e-6[1/K]' '0' '0' '0' '200e-6[1/K]' '0' '0' '0' '200e-6[1/K]'});
model.material('mat9').propertyGroup('def').set('lossfactor', '0.06');
model.material('mat9').propertyGroup('def').set('thermalconductivity', {'0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]'});
model.material('mat9').propertyGroup('def').set('heatcapacity', '1900[J/(kg*K)]');
model.material('mat9').propertyGroup('Lame').set('lambLame', '24.5[MPa]');
model.material('mat9').propertyGroup('Lame').set('muLame', '0.5[MPa]');
model.material('mat9').propertyGroup('MooneyRivlin').label('Mooney-Rivlin');
model.material('mat9').propertyGroup('MooneyRivlin').set('C10', '0.219[MPa]');
model.material('mat9').propertyGroup('MooneyRivlin').set('C01', '0.031[MPa]');
model.material('mat9').propertyGroup('MooneyRivlin').set('C11', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C20', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C02', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C21', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C12', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C30', '0');
model.material('mat9').propertyGroup('MooneyRivlin').set('C03', '0');
model.material('mat9').propertyGroup('Yeoh').set('c1YE', '100[kPa]');
model.material('mat9').propertyGroup('Yeoh').set('c2YE', '6[kPa]');
model.material('mat9').propertyGroup('Yeoh').set('c3YE', '-30[Pa]');
model.material('mat9').propertyGroup('Varga').set('c1VA', '1.05[MPa]');
model.material('mat9').propertyGroup('Varga').set('c2VA', '0.45[MPa]');
model.material('mat9').propertyGroup('ArrudaBoyce').label('Arruda-Boyce');
model.material('mat9').propertyGroup('ArrudaBoyce').set('Nseg', '32');
model.material('mat9').propertyGroup('ArrudaBoyce').set('mu0', '0.5[MPa]');
model.material.create('mat10', 'Common', 'comp1');
model.material('mat10').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat10').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat10').label('Silica glass');
model.material('mat10').set('family', 'custom');
model.material('mat10').set('diffuse', 'custom');
model.material('mat10').set('ambient', 'custom');
model.material('mat10').set('noise', true);
model.material('mat10').set('fresnel', 0.99);
model.material('mat10').set('roughness', 0.02);
model.material('mat10').set('diffusewrap', 0);
model.material('mat10').set('reflectance', 0);
model.material('mat10').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat10').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat10').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat10').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat10').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat10').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat10').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat10').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat10').propertyGroup('Enu').set('nu', '0.17');
model.material('mat10').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material.create('mat11', 'Common', 'comp1');
model.material('mat11').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat11').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat11').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat11').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat11').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat11').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat11').propertyGroup.create('Swift', 'Swift');
model.material('mat11').propertyGroup.create('Voce', 'Voce');
model.material('mat11').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat11').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat11').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat11').propertyGroup.create('Norton', 'Norton');
model.material('mat11').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat11').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat11').label('Structural steel');
model.material('mat11').set('family', 'custom');
model.material('mat11').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat11').set('diffuse', 'custom');
model.material('mat11').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat11').set('ambient', 'custom');
model.material('mat11').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat11').set('noise', true);
model.material('mat11').set('fresnel', 0.9);
model.material('mat11').set('roughness', 0.3);
model.material('mat11').set('diffusewrap', 0);
model.material('mat11').set('reflectance', 0);
model.material('mat11').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat11').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat11').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat11').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat11').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat11').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat11').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat11').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat11').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat11').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat11').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat11').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat11').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat11').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat11').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat11').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat11').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat11').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat11').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat11').propertyGroup('Enu').addInput('temperature');
model.material('mat11').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat11').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat11').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat11').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat11').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat11').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat11').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat11').propertyGroup('Ludwik').addInput('temperature');
model.material('mat11').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat11').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat11').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat11').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat11').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat11').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat11').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat11').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat11').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat11').propertyGroup('Voce').addInput('temperature');
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat11').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat11').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat11').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat11').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat11').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat11').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat11').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat11').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat11').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat11').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat11').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat11').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat11').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat11').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');
model.material.create('mat12', 'Common', 'comp1');
model.material('mat12').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat12').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat12').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat12').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat12').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat12').label('Water, liquid');
model.material('mat12').set('family', 'water');
model.material('mat12').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat12').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat12').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat12').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat12').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat12').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat12').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat12').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat12').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat12').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat12').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat12').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat12').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat12').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat12').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat12').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat12').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat12').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat12').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat12').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat12').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat12').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat12').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat12').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat12').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat12').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat12').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat12').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat12').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat12').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat12').propertyGroup('def').set('bulkviscosity', '');
model.material('mat12').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat12').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat12').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat12').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat12').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat12').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat12').propertyGroup('def').set('density', 'rho(T)');
model.material('mat12').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat12').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat12').propertyGroup('def').addInput('temperature');
model.material('mat11').selection.named('uni1');
model.material('mat6').selection.named('uni2');

model.physics('cc').selection.named('uni1');
model.physics('cc').prop('Settings').set('CreateBasis', true);
model.physics('cc').feature('css1').set('SecondVector', 'z');
model.physics('cc').create('diff1', 'DiffusionMethod', 3);
model.physics('cc').feature('diff1').selection.named('uni1');
model.physics('cc').feature('diff1').create('inl1', 'Inlet', 2);
model.physics('cc').feature('diff1').feature('inl1').selection.named('uni7');
model.physics('cc').feature('diff1').feature.duplicate('inl2', 'inl1');
model.physics('cc').feature('diff1').feature('inl2').selection.named('uni9');
model.physics('cc').feature('diff1').create('out1', 'Outlet', 2);
model.physics('cc').feature('diff1').feature('out1').selection.named('uni8');
model.physics('cc').feature('diff1').feature.duplicate('out2', 'out1');
model.physics('cc').feature('diff1').feature('out2').selection.named('uni10');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').feature('ftri1').selection.named('uni11');
model.mesh('mesh1').create('id1', 'IdenticalMesh');
model.mesh('mesh1').feature('id1').selection('group1').named('uni11');
model.mesh('mesh1').feature('id1').selection('group2').named('uni12');
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature('ftri2').selection.named('uni7');
model.mesh('mesh1').create('id2', 'IdenticalMesh');
model.mesh('mesh1').feature('id2').selection('group1').named('uni7');
model.mesh('mesh1').feature('id2').selection('group2').named('uni8');
model.mesh('mesh1').create('ftri3', 'FreeTri');
model.mesh('mesh1').feature('ftri3').selection.named('uni9');
model.mesh('mesh1').create('id3', 'IdenticalMesh');
model.mesh('mesh1').feature('id3').selection('group1').named('uni9');
model.mesh('mesh1').feature('id3').selection('group2').named('uni10');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').label('Study: Curvilinear Coordinates');
model.study('std1').feature('stat').set('useadvanceddisable', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', false);
model.study('std1').feature('stat').setSolveFor('/physics/ht', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Vector Field (cc)');
model.result('pg1').set('titlecolor', 'black');
model.result('pg1').set('edgecolor', 'black');
model.result('pg1').set('legendcolor', 'black');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'CurvilinearCoordinates/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.1);
model.result('pg1').feature('str1').set('linetype', 'tube');
model.result('pg1').feature('str1').set('smooth', 'internal');
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('maxlen', Inf);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').label('Coordinate system (cc)');
model.result('pg2').create('sys1', 'CoordSysVolume');
model.result('pg2').feature('sys1').set('sys', 'cc_cs');
model.result('pg1').run;

model.physics('solid').create('rd1', 'RigidDomain', 3);
model.physics('solid').feature('rd1').selection.named('uni3');
model.physics('solid').feature('rd1').set('minput_strainreferencetemperature_src', 'userdef');
model.physics('solid').feature('rd1').set('minput_strainreferencetemperature', 'T0');
model.physics('solid').feature('rd1').create('fix1', 'FixedConstraint', -1);

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/cc', true);
model.study('std2').feature('stat').setSolveFor('/physics/solid', true);
model.study('std2').feature('stat').setSolveFor('/physics/ht', true);
model.study('std2').label('Study: Homogenized Density');
model.study('std2').setGenPlots(false);
model.study('std2').feature('stat').set('useadvanceddisable', true);
model.study('std2').feature('stat').setSolveFor('/physics/cc', false);
model.study('std2').feature('stat').setSolveFor('/physics/ht', false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_rot').set('scaleval', '0.1');
model.sol('sol2').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '1.7320508075688774E-5');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Homogenized Density');
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').set('includeparameters', false);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', '(intop1(solid.rho)+intop2(solid.rho))/(intop1(1)+intop2(1))', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'kg/m^3', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Density', 0);
model.result.evaluationGroup('eg1').run;

model.physics('solid').feature('lemm1').set('minput_pressure', 'pA0');
model.physics('solid').feature('lemm1').set('SolidModel', 'Orthotropic');
model.physics('solid').feature.duplicate('lemm2', 'lemm1');
model.physics('solid').feature('lemm2').set('coordinateSystem', 'sys2');
model.physics('solid').feature('lemm2').active(false);
model.physics('solid').feature.move('lemm2', 3);
model.physics('solid').create('cp1', 'CellPeriodicity', 3);
model.physics('solid').feature('cp1').label('Cell Periodicity: Elasticity Matrix');
model.physics('solid').feature('cp1').selection.named('uni3');
model.physics('solid').feature('cp1').set('BoundaryExpansion', 'PrescribedStrain');
model.physics('solid').feature('cp1').set('EffectivePropertiese', 'ElasticityMatrixStandard');
model.physics('solid').feature('cp1').runCommand('createLoadGroupsandStudy');
model.physics('solid').feature('cp1').create('bp1', 'BoundaryPair', 2);
model.physics('solid').feature('cp1').feature('bp1').selection.named('uni4');
model.physics('solid').feature('cp1').feature('bp1').set('constraintOptions', 'weakConstraints');
model.physics('solid').feature('cp1').create('bp2', 'BoundaryPair', 2);
model.physics('solid').feature('cp1').feature('bp2').selection.named('uni5');
model.physics('solid').feature('cp1').feature('bp2').set('constraintOptions', 'weakConstraints');
model.physics('solid').feature('cp1').create('bp3', 'BoundaryPair', 2);
model.physics('solid').feature('cp1').feature('bp3').selection.named('uni6');
model.physics('solid').feature('cp1').feature('bp3').set('constraintOptions', 'weakConstraints');

model.study('solidcp1std').feature('solidcp1stat').set('useadvanceddisable', true);
model.study('solidcp1std').feature('solidcp1stat').set('disabledphysics', {'solid/rd1'});
model.study('solidcp1std').feature('solidcp1stat').setSolveFor('/physics/cc', false);
model.study('solidcp1std').feature('solidcp1stat').setSolveFor('/physics/ht', false);
model.study('solidcp1std').feature('solidcp1stat').set('usesol', true);
model.study('solidcp1std').feature('solidcp1stat').set('notsolmethod', 'sol');
model.study('solidcp1std').feature('solidcp1stat').set('notstudy', 'std1');
model.study('solidcp1std').label('Study: Homogenized Elasticity Matrix');

model.sol('solidcp1sol').study('solidcp1std');
model.sol('solidcp1sol').feature.remove('s1');
model.sol('solidcp1sol').feature.remove('v1');
model.sol('solidcp1sol').feature.remove('st1');
model.sol('solidcp1sol').create('st1', 'StudyStep');
model.sol('solidcp1sol').feature('st1').set('study', 'solidcp1std');
model.sol('solidcp1sol').feature('st1').set('studystep', 'solidcp1stat');
model.sol('solidcp1sol').create('v1', 'Variables');
model.sol('solidcp1sol').feature('v1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').create('s1', 'Stationary');
model.sol('solidcp1sol').feature('s1').create('p1', 'Parametric');
model.sol('solidcp1sol').feature('s1').feature.remove('pDef');
model.sol('solidcp1sol').feature('s1').feature('p1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').feature('s1').set('control', 'solidcp1stat');
model.sol('solidcp1sol').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('solidcp1sol').feature('s1').create('fc1', 'FullyCoupled');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('solidcp1sol').feature('s1').create('d1', 'Direct');
model.sol('solidcp1sol').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('solidcp1sol').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('solidcp1sol').feature('s1').create('i1', 'Iterative');
model.sol('solidcp1sol').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('solidcp1sol').feature('s1').feature('i1').set('rhob', 400);
model.sol('solidcp1sol').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('solidcp1sol').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('solidcp1sol').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_u_lm'});
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_u_lm'});
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('solidcp1sol').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('solidcp1sol').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('solidcp1sol').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('solidcp1sol').feature('s1').feature.remove('fcDef');
model.sol('solidcp1sol').attach('solidcp1std');
model.sol('solidcp1sol').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 6, 0);
model.result('pg3').set('defaultPlotID', 'stress');
model.result('pg3').label('Stress (solid)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg3').feature('vol1').set('threshold', 'manual');
model.result('pg3').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg3').feature('vol1').set('colortable', 'Rainbow');
model.result('pg3').feature('vol1').set('colortabletrans', 'none');
model.result('pg3').feature('vol1').set('colorscalemode', 'linear');
model.result('pg3').feature('vol1').set('resolution', 'custom');
model.result('pg3').feature('vol1').set('refine', 2);
model.result('pg3').feature('vol1').set('colortable', 'Prism');
model.result('pg3').feature('vol1').create('def', 'Deform');
model.result('pg3').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg3').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('solidcp1stdEg', 'EvaluationGroup');
model.result.evaluationGroup('solidcp1stdEg').set('defaultPlotID', 'homogenizedMaterialTablecp1');
model.result.evaluationGroup('solidcp1stdEg').set('data', 'dset3');
model.result.evaluationGroup('solidcp1stdEg').set('includeparameters', 'off');
model.result.evaluationGroup('solidcp1stdEg').setIndex('looplevelinput', 'last', 0);
model.result.evaluationGroup('solidcp1stdEg').label('Material Properties (Study: Homogenized Elasticity Matrix)');
model.result.evaluationGroup('solidcp1stdEg').create('gmevcp1', 'EvalGlobalMatrix');
model.result.evaluationGroup('solidcp1stdEg').feature('gmevcp1').set('expr', 'root.comp1.solid.cp1.D');
model.result.evaluationGroup('solidcp1stdEg').feature('gmevcp1').set('descr', 'Elasticity matrix');
model.result.evaluationGroup('solidcp1stdEg').run;
model.result('pg3').run;
model.result.evaluationGroup('solidcp1stdEg').label('Homogenized Elasticity Matrix');

model.physics('solid').feature('lemm1').create('te1', 'ThermalExpansion', 3);
model.physics('solid').feature('lemm1').feature('te1').set('minput_pressure', 'pA0');
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature_src', 'userdef');
model.physics('solid').feature('lemm1').feature('te1').set('minput_temperature', '293.15[K] +1[K]');
model.physics('solid').feature('lemm2').create('te1', 'ThermalExpansion', 3);
model.physics('solid').feature('lemm2').feature('te1').set('minput_pressure', 'pA0');
model.physics('solid').feature('lemm2').feature('te1').set('minput_temperature_src', 'userdef');
model.physics('solid').feature('lemm2').feature('te1').set('minput_temperature', '293.15[K] +1[K]');
model.physics('solid').feature.duplicate('cp2', 'cp1');
model.physics('solid').feature('cp2').label('Cell Periodicity: Coefficient of Thermal Expansion');
model.physics('solid').feature('cp2').set('BoundaryExpansion', 'FreeExpansion');
model.physics('solid').feature('cp2').set('EffectiveProperties', 'ThermalExpansion');

model.study.create('std3');
model.study('std3').create('stat', 'Stationary');
model.study('std3').feature('stat').setSolveFor('/physics/cc', true);
model.study('std3').feature('stat').setSolveFor('/physics/solid', true);
model.study('std3').feature('stat').setSolveFor('/physics/ht', true);
model.study('std3').label('Study: Homogenized Coefficient of Thermal Expansion');
model.study('std3').feature('stat').set('useadvanceddisable', true);
model.study('std3').feature('stat').set('disabledphysics', {'solid/rd1' 'solid/cp1'});
model.study('std3').feature('stat').setSolveFor('/physics/cc', false);
model.study('std3').feature('stat').setSolveFor('/physics/ht', false);
model.study('std3').feature('stat').set('usesol', true);
model.study('std3').feature('stat').set('notsolmethod', 'sol');
model.study('std3').feature('stat').set('notstudy', 'std1');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'stat');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'stat');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_u_lm'});
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_u_lm'});
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol3').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset4');
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid) 1');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std3Eg', 'EvaluationGroup');
model.result.evaluationGroup('std3Eg').set('defaultPlotID', 'homogenizedMaterialTablecp2');
model.result.evaluationGroup('std3Eg').set('data', 'dset4');
model.result.evaluationGroup('std3Eg').set('includeparameters', 'off');
model.result.evaluationGroup('std3Eg').label('Material Properties (Study: Homogenized Coefficient of Thermal Expansion)');
model.result.evaluationGroup('std3Eg').create('gmevcp2', 'EvalGlobalMatrix');
model.result.evaluationGroup('std3Eg').feature('gmevcp2').set('expr', 'root.comp1.solid.cp2.alpha');
model.result.evaluationGroup('std3Eg').feature('gmevcp2').set('descr', 'Coefficient of thermal expansion');
model.result.evaluationGroup('std3Eg').run;
model.result('pg4').run;
model.result.evaluationGroup('std3Eg').label('Homogenized Coefficient of Thermal Expansion');

model.physics('ht').feature('solid1').set('minput_pressure', 'pA0');
model.physics('ht').feature.duplicate('solid2', 'solid1');
model.physics('ht').feature('solid2').set('coordinateSystem', 'sys2');
model.physics('ht').feature('solid2').active(false);
model.physics('ht').create('constr1', 'PointwiseConstraint', 0);
model.physics('ht').feature('constr1').set('constraintExpression', 'T-T0');
model.physics('ht').feature('constr1').selection.set([1]);

model.study.create('std4');
model.study('std4').create('stat', 'Stationary');
model.study('std4').feature('stat').setSolveFor('/physics/cc', true);
model.study('std4').feature('stat').setSolveFor('/physics/solid', true);
model.study('std4').feature('stat').setSolveFor('/physics/ht', true);
model.study('std4').label('Study: Homogenized Heat Capacity');
model.study('std4').setGenPlots(false);
model.study('std4').feature('stat').set('useadvanceddisable', true);
model.study('std4').feature('stat').setSolveFor('/physics/cc', false);
model.study('std4').feature('stat').setSolveFor('/physics/solid', false);
model.study('std4').feature('stat').set('usesol', true);
model.study('std4').feature('stat').set('notsolmethod', 'sol');
model.study('std4').feature('stat').set('notstudy', 'std1');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'stat');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'stat');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol4').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol4').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol4').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol4').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol4').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol4').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol4').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol4').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol4').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').attach('std4');
model.sol('sol4').runAll;

model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').label('Homogenized Heat Capacity');
model.result.evaluationGroup('eg2').set('data', 'dset5');
model.result.evaluationGroup('eg2').set('includeparameters', false);
model.result.evaluationGroup('eg2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', '(intop1(ht.rho*ht.Cp)+intop2(ht.rho*ht.Cp))/(intop1(ht.rho)+intop2(ht.rho))', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('unit', 'J/(kg*K)', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Heat Capacity', 0);
model.result.evaluationGroup('eg2').run;

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('dTx', '1[K]');
model.variable('var1').descr('dTx', 'Temperature offset, x direction');
model.variable('var1').set('dTy', '1[K]');
model.variable('var1').descr('dTy', 'Temperature offset, y direction');
model.variable('var1').set('dTz', '1[K]');
model.variable('var1').descr('dTz', 'Temperature offset, z direction');
model.variable('var1').set('wm', '2*intop3(1)/intop4(1)');
model.variable('var1').descr('wm', 'Cell width');
model.variable('var1').set('dm', '2*intop3(1)/intop5(1)');
model.variable('var1').descr('dm', 'Cell depth');
model.variable('var1').set('hm', '2*intop3(1)/intop6(1)');
model.variable('var1').descr('hm', 'Cell height');
model.variable('var1').set('k11', 'withsol(''sol5'',intop4(-ht.ndflux*ht.nx)/(2*dm*hm*dTx/wm),setval(loadcase,1))');
model.variable('var1').descr('k11', 'Thermal conductivity, 11 component');
model.variable('var1').set('k12', 'withsol(''sol5'',intop4(-ht.ndflux*ht.nx)/(2*dm*hm*dTy/dm),setval(loadcase,2))');
model.variable('var1').descr('k12', 'Thermal conductivity, 12 component');
model.variable('var1').set('k13', 'withsol(''sol5'',intop4(-ht.ndflux*ht.nx)/(2*dm*hm*dTz/hm),setval(loadcase,3))');
model.variable('var1').descr('k13', 'Thermal conductivity, 13 component');
model.variable('var1').set('k22', 'withsol(''sol5'',intop5(-ht.ndflux*ht.ny)/(2*wm*hm*dTy/dm),setval(loadcase,2))');
model.variable('var1').descr('k22', 'Thermal conductivity, 22 component');
model.variable('var1').set('k23', 'withsol(''sol5'',intop5(-ht.ndflux*ht.ny)/(2*wm*hm*dTz/hm),setval(loadcase,3))');
model.variable('var1').descr('k23', 'Thermal conductivity, 23 component');
model.variable('var1').set('k33', 'withsol(''sol5'',intop6(-ht.ndflux*ht.nz)/(2*wm*dm*dTz/hm),setval(loadcase,3))');
model.variable('var1').descr('k33', 'Thermal conductivity, 33 component');

model.common.create('mat1', 'Matrix', 'comp1');
model.common('mat1').set('format', 'symmetric');
model.common('mat1').setIndex('matrix', 'k11', 0, 0);
model.common('mat1').setIndex('matrix', 'k12', 0, 1);
model.common('mat1').setIndex('matrix', 'k13', 0, 2);
model.common('mat1').setIndex('matrix', 'k22', 1, 1);
model.common('mat1').setIndex('matrix', 'k23', 1, 2);
model.common('mat1').setIndex('matrix', 'k33', 2, 2);

model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('pc1', 'PeriodicHeat', 2);
model.physics('ht').feature('pc1').selection.named('uni4');
model.physics('ht').feature('pc1').set('DeltaT', '-dTx*group.cp11');
model.physics('ht').create('pc2', 'PeriodicHeat', 2);
model.physics('ht').feature('pc2').selection.named('uni5');
model.physics('ht').feature('pc2').set('DeltaT', '-dTy*group.cp22');
model.physics('ht').create('pc3', 'PeriodicHeat', 2);
model.physics('ht').feature('pc3').selection.named('uni6');
model.physics('ht').feature('pc3').set('DeltaT', '-dTz*group.cp33');

model.study.create('std5');
model.study('std5').create('stat', 'Stationary');
model.study('std5').feature('stat').setSolveFor('/physics/cc', true);
model.study('std5').feature('stat').setSolveFor('/physics/solid', true);
model.study('std5').feature('stat').setSolveFor('/physics/ht', true);
model.study('std5').feature('stat').set('useadvanceddisable', true);
model.study('std5').feature('stat').setSolveFor('/physics/cc', false);
model.study('std5').feature('stat').setSolveFor('/physics/solid', false);
model.study('std5').feature('stat').set('usesol', true);
model.study('std5').feature('stat').set('notsolmethod', 'sol');
model.study('std5').feature('stat').set('notstudy', 'std1');
model.study('std5').feature('stat').set('useloadcase', true);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 5);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 1', 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 0, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 0, 5);
model.study('std5').feature('stat').setIndex('loadgroup', true, 0, 0);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 5);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 2', 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 1, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 1, 5);
model.study('std5').feature('stat').setIndex('loadgroup', true, 1, 1);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 5);
model.study('std5').feature('stat').setIndex('loadcase', 'Load case 3', 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 0);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 0);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 1);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 1);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 2);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 2);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 3);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 3);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 4);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 4);
model.study('std5').feature('stat').setIndex('loadgroup', false, 2, 5);
model.study('std5').feature('stat').setIndex('loadgroupweight', '1.0', 2, 5);
model.study('std5').feature('stat').setIndex('loadgroup', true, 2, 2);
model.study('std5').label('Study: Homogenized Thermal Conductivity');

model.sol.create('sol5');
model.sol('sol5').study('std5');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std5');
model.sol('sol5').feature('st1').set('studystep', 'stat');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').set('control', 'stat');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').create('p1', 'Parametric');
model.sol('sol5').feature('s1').feature.remove('pDef');
model.sol('sol5').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol5').feature('s1').set('control', 'stat');
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol5').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol5').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol5').feature('s1').create('d1', 'Direct');
model.sol('sol5').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol5').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol5').feature('s1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol5').feature('s1').create('i1', 'Iterative');
model.sol('sol5').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol5').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol5').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol5').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol5').feature('s1').feature('i1').set('maxlinit', 10000);
model.sol('sol5').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol5').feature('s1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol5').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol5').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol5').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol5').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol5').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol5').feature('s1').feature('fc1').set('termonres', 'off');
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').attach('std5');
model.sol('sol5').runAll;

model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('data', 'dset6');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').set('data', 'dset6');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'T');
model.result('pg5').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('vol1').set('smooth', 'internal');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg5').run;
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').label('Homogenized Thermal Conductivity');
model.result.evaluationGroup('eg3').set('data', 'dset6');
model.result.evaluationGroup('eg3').setIndex('looplevelinput', 'first', 0);
model.result.evaluationGroup('eg3').set('includeparameters', false);
model.result.evaluationGroup('eg3').create('gpev1', 'EvalPointMatrix');
model.result.evaluationGroup('eg3').feature('gpev1').selection.set([1]);
model.result.evaluationGroup('eg3').feature('gpev1').set('expr', 'T1');
model.result.evaluationGroup('eg3').feature('gpev1').set('descr', 'T1 - Matrix 1');
model.result.evaluationGroup('eg3').feature('gpev1').set('descractive', true);
model.result.evaluationGroup('eg3').feature('gpev1').set('descr', 'Thermal Conductivity');
model.result.evaluationGroup('eg3').run;

model.study('std2').feature('stat').set('disabledphysics', {'solid/cp1' 'solid/cp2'});
model.study('solidcp1std').feature('solidcp1stat').set('disabledphysics', {'solid/rd1' 'solid/lemm1/te1' 'solid/lemm2/te1' 'solid/cp2'});
model.study('std4').feature('stat').set('disabledphysics', {'ht/pc1' 'ht/pc2' 'ht/pc3'});

model.result('pg3').run;
model.result('pg3').stepFirst(0);
model.result('pg3').run;

model.title('Homogenization of Periodic Microstructures');

model.description('This model computes the homogenized mechanical and thermal material properties of heterogeneous, periodic microstructures represented by unit cells.');

model.label('homogenization_of_periodic_microstructures.mph');

model.result('pg3').run;

model.material('mat6').selection.set([]);
model.material('mat11').selection.set([]);

model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('templatesource', 'brief');
model.result.report('rpt1').set('format', 'docx');
model.result.report('rpt1').set('filename', 'user:///homogenization_of_periodic_microstructures.docx');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('titleimage', 'none');
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature('toc1').label('Table of Contents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Software Information');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('std1', 'Study');
model.result.report('rpt1').feature('sec1').feature('std1').set('noderef', 'std2');
model.result.report('rpt1').feature('sec1').feature('std1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('std2', 'Study');
model.result.report('rpt1').feature('sec1').feature('std2').set('noderef', 'solidcp1std');
model.result.report('rpt1').feature('sec1').feature('std2').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('std3', 'Study');
model.result.report('rpt1').feature('sec1').feature('std3').set('noderef', 'std3');
model.result.report('rpt1').feature('sec1').feature('std3').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('std4', 'Study');
model.result.report('rpt1').feature('sec1').feature('std4').set('noderef', 'std4');
model.result.report('rpt1').feature('sec1').feature('std4').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec1').feature.create('std5', 'Study');
model.result.report('rpt1').feature('sec1').feature('std5').set('noderef', 'std5');
model.result.report('rpt1').feature('sec1').feature('std5').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Application parameters');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').label('General Parameters');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 5, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 6, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 7, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 8, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 9, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 10, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param1').setIndex('children', false, 11, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param2', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param2').label('Parameters: Unidirectional Fiber Composite, Square Packing');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param2').set('noderef', 'par2');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param2').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param3', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param3').label('Parameters: Unidirectional Fiber Composite, Hexagonal Packing');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param3').set('noderef', 'par3');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param4', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param4').label('Parameters: Bidirectional Fiber Composite');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param4').set('noderef', 'par4');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param5', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param5').label('Parameters: Bidirectional Non-Crimp Fiber Composite');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param5').set('noderef', 'par5');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param6', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param6').label('Parameters: Bidirectional Plain Weave Fiber Composite');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param6').set('noderef', 'par6');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param7', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param7').label('Parameters: Particulate Composite, Primitive Cubic');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param7').set('noderef', 'par7');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param7').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param8', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param8').label('Parameters: Particulate Composite, Body-Centered Cubic');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param8').set('noderef', 'par8');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param9', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param9').label('Parameters: Particulate Composite, Face-Centered Cubic');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param9').set('noderef', 'par9');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param10', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param10').label('Parameters: Honeycomb');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param10').set('noderef', 'par10');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('param11', 'Parameter');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param11').label('Parameters: Sandwich');
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param11').set('noderef', 'par11');
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').set('heading', 'Geometry');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Constituent Materials');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec1').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec1').feature('mat1').set('includeimage', false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec2', 'sec1');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec2').feature('mat1').set('noderef', 'mat2');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec3', 'sec2');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec3').feature('mat1').set('noderef', 'mat3');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec4', 'sec3');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec4').feature('mat1').set('noderef', 'mat4');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec5', 'sec4');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec5').feature('mat1').set('noderef', 'mat5');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec6', 'sec5');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec6').feature('mat1').set('noderef', 'mat6');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec7', 'sec6');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec7').feature('mat1').set('noderef', 'mat7');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec8', 'sec7');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec8').feature('mat1').set('noderef', 'mat8');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec9', 'sec8');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec9').feature('mat1').set('noderef', 'mat9');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec10', 'sec9');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec10').feature('mat1').set('noderef', 'mat10');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec11', 'sec10');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec11').feature('mat1').set('noderef', 'mat11');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.duplicate('sec12', 'sec11');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec12').feature('mat1').set('noderef', 'mat12');
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').set('heading', 'Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').set('heading', 'Homogenized Density');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('evgr1', 'EvaluationGroup');
model.result.report('rpt1').feature('sec3').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').set('heading', 'Homogenized Elasticity Tensor');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('evgr1', 'EvaluationGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('evgr1').set('noderef', 'solidcp1stdEg');
model.result.report('rpt1').feature('sec3').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec3').set('heading', 'Homogenized Coefficient of Thermal Expansion');
model.result.report('rpt1').feature('sec3').feature('sec3').feature.create('evgr1', 'EvaluationGroup');
model.result.report('rpt1').feature('sec3').feature('sec3').feature('evgr1').set('noderef', 'std3Eg');
model.result.report('rpt1').feature('sec3').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec4').set('heading', 'Homogenized Heat Capacity');
model.result.report('rpt1').feature('sec3').feature('sec4').feature.create('evgr1', 'EvaluationGroup');
model.result.report('rpt1').feature('sec3').feature('sec4').feature('evgr1').set('noderef', 'eg2');
model.result.report('rpt1').feature('sec3').feature.create('sec5', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec5').set('heading', 'Homogenized Thermal Conductivity');
model.result.report('rpt1').feature('sec3').feature('sec5').feature.create('evgr1', 'EvaluationGroup');
model.result.report('rpt1').feature('sec3').feature('sec5').feature('evgr1').set('noderef', 'eg3');
model.result.report('rpt1').feature('sec1').feature('std1').active(false);
model.result.report('rpt1').feature('sec1').feature('std2').active(false);
model.result.report('rpt1').feature('sec1').feature('std3').active(false);
model.result.report('rpt1').feature('sec1').feature('std4').active(false);
model.result.report('rpt1').feature('sec1').feature('std5').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param3').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param4').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param5').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param6').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param7').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param8').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param9').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param10').active(false);
model.result.report('rpt1').feature('sec2').feature('sec1').feature('param11').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec1').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec2').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec3').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec4').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec5').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec6').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec7').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec8').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec9').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec10').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec11').active(false);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('sec12').active(false);
model.result.report('rpt1').feature('sec3').feature('sec1').active(false);
model.result.report('rpt1').feature('sec3').feature('sec2').active(false);
model.result.report('rpt1').feature('sec3').feature('sec3').active(false);
model.result.report('rpt1').feature('sec3').feature('sec4').active(false);
model.result.report('rpt1').feature('sec3').feature('sec5').active(false);

model.title('Homogenized Material Properties of Periodic Microstructures');

model.description(['Periodic microstructures are frequently found in composite materials, metallic foams, and sandwich structures. They can be represented by a unit cell repeated along the three cartesian directions.' newline  newline 'This app computes homogenized material properties of various periodic microstructures and makes them available in an MPH- or an XML-file that can subsequently be imported into a COMSOL Multiphysics session.' newline  newline 'Ten different microstructures represented by periodic unit cells are available. The cell dimensions and the constituent materials are modifiable by the user. The app calculates the homogenized density, elasticity matrix, coefficient of thermal expansion, heat capacity, and thermal conductivity of the unit cell, which thereafter can be used in a macroscopic model.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('solidcp1sol').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('homogenization_of_periodic_microstructures.mph');

model.modelNode.label('Components');

out = model;
