function out = model
%
% soec_co2.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Electrolyzers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('we', 'WaterElectrolyzer', 'geom1');
model.physics('we').model('comp1');
model.physics('we').prop('H2GasMixture').set('H2O', '1');
model.physics('we').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'SolidOxide');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'Electrolyzer');
model.physics('we').prop('DefaultElectrodeReactionSettings').set('TRHE', '700[degC]');
model.physics.create('ht', 'HeatTransferInSolidsAndFluids', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/we', true);
model.study('std1').feature('cdi').setSolveFor('/physics/ht', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/we', true);
model.study('std1').feature('stat').setSolveFor('/physics/ht', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T_in', '1073[K]', 'Operating temperature');
model.param.set('epsg', '0.4', 'Electrode porosity');
model.param.set('epsl', '0.4', 'Electrolyte volume fraction');
model.param.set('taug', '3', 'Electrode tortuosity');
model.param.set('dc', '500[um]', 'Cathode thickness');
model.param.set('dm', '100[um]', 'Membrane thickness');
model.param.set('da', '100[um]', 'Anode thickness');
model.param.set('dg', '1[mm]', 'Gas flow channel height');
model.param.set('di', '500[um]', 'Interconnect thickness');
model.param.set('L', '20[mm]', 'Planar SOEC length');
model.param.set('W', '3.7[mm]', 'Planar SOEC thickness');
model.param.set('Mflux_in', '0.001[kg/s]', 'Gas mass flux');
model.param.set('E_app', '0.5[V]', 'SOEC operating potential');
model.param.set('kc', '11[W/m/K]', 'Cathode thermal conductivity');
model.param.set('ka', '6[W/m/K]', 'Anode thermal conductivity');
model.param.set('km', '2.7[W/m/K]', 'Electrolyte thermal conductivity');
model.param.set('ki', '1.1[W/m/K]', 'Interconnect thermal conductivity');
model.param.set('x0_H2O', '0.498', 'Initial mole fraction of H2O');
model.param.set('x0_CO2', '0.5', 'Initial mole fraction of CO2');
model.param.set('x0_CO', '0.001', 'Initial mole fraction of CO');
model.param.set('x0_H2', '0.001', 'Initial mole fraction of H2');
model.param.set('w0_H2O', 'x0_H2O*18[g/mol]/(x0_H2O*18[g/mol]+x0_CO2*44[g/mol]+x0_CO*28[g/mol]+x0_H2*2[g/mol])', 'Initial mass fraction of H2O');
model.param.set('w0_CO2', 'x0_CO2*44[g/mol]/(x0_H2O*18[g/mol]+x0_CO2*44[g/mol]+x0_CO*28[g/mol]+x0_H2*2[g/mol])', 'Initial mass fraction of CO2');
model.param.set('w0_CO', 'x0_CO*28[g/mol]/(x0_H2O*18[g/mol]+x0_CO2*44[g/mol]+x0_CO*28[g/mol]+x0_H2*2[g/mol])', 'Initial mass fraction of CO');
model.param.set('x0_N2', '0.79', 'Initial mole fraction of N2');
model.param.set('w0_N2', 'x0_N2*28[g/mol]/(x0_N2*28[g/mol]+0.21*32[g/mol])', 'Initial mass fraction of N2');
model.param.set('kappag_GDE', '1e-10[m^2]', 'Gas permeability, gas diffusion electrode');
model.param.set('S', '1e9[m^2/m^3]', 'Electrode specific surface area');
model.param.set('i0_ref_HER', '1[A/m^2]', 'Reference exchange current density for H2O electrolysis');
model.param.set('i0_ref_COER', '1[A/m^2]', 'Reference exchange current density for CO2 electrolysis');
model.param.set('i0_ref_OER', '1[A/m^2]', 'Reference exchange current density for oxygen evolution reaction');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L' 'W'});
model.geom('geom1').feature('r1').setIndex('layer', 'di', 0);
model.geom('geom1').feature('r1').setIndex('layer', 'dg', 1);
model.geom('geom1').feature('r1').setIndex('layer', 'da', 2);
model.geom('geom1').feature('r1').setIndex('layer', 'dm', 3);
model.geom('geom1').feature('r1').setIndex('layer', 'dc', 4);
model.geom('geom1').feature('r1').setIndex('layer', 'dg', 5);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('k_wgsr', '0.0171*exp(-103191[J/mol]/(R_const*T)) [mol/m^3/s]', 'Water gas shift reaction rate constant');

model.cpl.create('genproj1', 'GeneralProjection', 'geom1');
model.cpl('genproj1').selection.set([5]);

model.physics('we').prop('H2GasMixture').set('CO2', true);
model.physics('we').prop('H2GasMixture').set('CO', true);
model.physics('we').prop('H2GasMixture').set('GasMixtureDarcy', true);
model.physics('we').prop('O2GasMixture').set('N2', true);
model.physics('we').prop('O2GasMixture').set('GasPhaseDiffusion', true);
model.physics('we').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('we').create('mem1', 'Membrane', 2);
model.physics('we').feature('mem1').selection.set([4]);
model.physics('we').create('h2gde1', 'H2GasDiffusionElectrode', 2);
model.physics('we').feature('h2gde1').selection.set([5]);
model.physics('we').feature('h2gde1').set('epsl', 'epsl');
model.physics('we').feature('h2gde1').set('DiffusionCorrModel', 'Tortuosity');
model.physics('we').feature('h2gde1').set('epsg', 'epsg');
model.physics('we').feature('h2gde1').set('taug', {'taug' '0' '0' '0' 'taug' '0' '0' '0' 'taug'});
model.physics('we').feature('h2gde1').set('kappag', {'kappag_GDE' '0' '0' '0' 'kappag_GDE' '0' '0' '0' 'kappag_GDE'});
model.physics('we').feature('h2gde1').feature('h2gder1').label('H2 Gas Diffusion Electrode Reaction: Water Electrolysis');
model.physics('we').feature('h2gde1').feature('h2gder1').set('i0_ref', 'i0_ref_HER');
model.physics('we').feature('h2gde1').feature('h2gder1').set('alphaa', 0.5);
model.physics('we').feature('h2gde1').feature('h2gder1').set('Av', 'S');
model.physics('we').feature('h2gde1').create('h2gder2', 'H2GasDiffusionElectrodeReaction', 2);
model.physics('we').feature('h2gde1').feature('h2gder2').label('H2 Gas Diffusion Electrode Reaction: CO2 Electrolysis');
model.physics('we').feature('h2gde1').feature('h2gder2').set('nuCO2', -1);
model.physics('we').feature('h2gde1').feature('h2gder2').set('nuCO', 1);
model.physics('we').feature('h2gde1').feature('h2gder2').set('i0_ref', 'i0_ref_COER');
model.physics('we').feature('h2gde1').feature('h2gder2').set('Av', 'S');
model.physics('we').create('o2gde1', 'O2GasDiffusionElectrode', 2);
model.physics('we').feature('o2gde1').selection.set([3]);
model.physics('we').feature('o2gde1').set('epsl', 'epsl');
model.physics('we').feature('o2gde1').set('DiffusionCorrModel', 'Tortuosity');
model.physics('we').feature('o2gde1').set('epsg', 'epsg');
model.physics('we').feature('o2gde1').set('taug', {'taug' '0' '0' '0' 'taug' '0' '0' '0' 'taug'});
model.physics('we').feature('o2gde1').set('kappag', {'kappag_GDE' '0' '0' '0' 'kappag_GDE' '0' '0' '0' 'kappag_GDE'});
model.physics('we').feature('o2gde1').feature('o2gder1').set('i0_ref', 'i0_ref_OER');
model.physics('we').feature('o2gde1').feature('o2gder1').set('Av', 'S');
model.physics('we').create('h2fch1', 'H2FlowChannel', 2);
model.physics('we').feature('h2fch1').selection.set([6]);
model.physics('we').feature('h2fch1').set('GasPermeabilityModel', 'StraightChannels');
model.physics('we').feature('h2fch1').set('H_ch', 'dg');
model.physics('we').feature('h2fch1').set('W_ch', 'dg');
model.physics('we').create('o2fch1', 'O2FlowChannel', 2);
model.physics('we').feature('o2fch1').selection.set([2]);
model.physics('we').feature('o2fch1').set('GasPermeabilityModel', 'StraightChannels');
model.physics('we').feature('o2fch1').set('H_ch', 'dg');
model.physics('we').feature('o2fch1').set('W_ch', 'dg');
model.physics('we').create('cc1', 'CurrentCollector', 2);
model.physics('we').feature('cc1').selection.set([1 7]);
model.physics('we').feature('cc1').set('sigmas_mat', 'from_mat');
model.physics('we').feature('ecph1').create('inito2dom1', 'InitialValuesO2Domains', 2);
model.physics('we').feature('ecph1').feature('inito2dom1').selection.set([3]);
model.physics('we').feature('ecph1').feature('inito2dom1').set('initphis', 'E_app');
model.physics('we').feature('ecph1').create('egnd1', 'ElectricGround', 1);
model.physics('we').feature('ecph1').feature('egnd1').selection.set([12]);
model.physics('we').feature('ecph1').create('pot1', 'ElectricPotential', 1);
model.physics('we').feature('ecph1').feature('pot1').selection.set([6]);
model.physics('we').feature('ecph1').feature('pot1').set('phisbnd', 'E_app');
model.physics('we').feature('h2gasph1').feature('init1').set('x0H2O', 'x0_H2O');
model.physics('we').feature('h2gasph1').feature('init1').set('x0CO2', 'x0_CO2');
model.physics('we').feature('h2gasph1').feature('init1').set('x0CO', 'x0_CO');
model.physics('we').feature('h2gasph1').create('wgsr1', 'WaterGasShiftReaction', 2);
model.physics('we').feature('h2gasph1').feature('wgsr1').set('k_wgsr', 'k_wgsr');
model.physics('we').feature('h2gasph1').feature('wgsr1').set('pref', '1[Pa]');
model.physics('we').feature('h2gasph1').create('h2in1', 'H2Inlet', 1);
model.physics('we').feature('h2gasph1').feature('h2in1').selection.set([11]);
model.physics('we').feature('h2gasph1').feature('h2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('we').feature('h2gasph1').feature('h2in1').set('J0H2O', 'Mflux_in*w0_H2O');
model.physics('we').feature('h2gasph1').feature('h2in1').set('J0CO2', 'Mflux_in*w0_CO2');
model.physics('we').feature('h2gasph1').feature('h2in1').set('J0CO', 'Mflux_in*w0_CO');
model.physics('we').feature('h2gasph1').feature('h2in1').set('w0bndH2O', 'w0_H2O');
model.physics('we').feature('h2gasph1').feature('h2in1').set('w0bndCO2', 'w0_CO2');
model.physics('we').feature('h2gasph1').feature('h2in1').set('w0bndCO', 'w0_CO');
model.physics('we').feature('h2gasph1').feature('h2in1').set('FlowBoundaryCondition', 'TotalMassFlowRate');
model.physics('we').feature('h2gasph1').feature('h2in1').set('J0', 'Mflux_in');
model.physics('we').feature('h2gasph1').create('h2out1', 'H2Outlet', 1);
model.physics('we').feature('h2gasph1').feature('h2out1').selection.set([21]);
model.physics('we').feature('o2gasph1').feature('init1').set('x0N2', 'x0_N2');
model.physics('we').feature('o2gasph1').create('o2in1', 'O2Inlet', 1);
model.physics('we').feature('o2gasph1').feature('o2in1').selection.set([3]);
model.physics('we').feature('o2gasph1').feature('o2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('we').feature('o2gasph1').feature('o2in1').set('J0N2', 'Mflux_in*w0_N2');
model.physics('we').feature('o2gasph1').feature('o2in1').set('w0bndN2', 'w0_N2');
model.physics('we').feature('o2gasph1').feature('o2in1').set('FlowBoundaryCondition', 'TotalMassFlowRate');
model.physics('we').feature('o2gasph1').feature('o2in1').set('J0', 'Mflux_in');
model.physics('we').feature('o2gasph1').create('o2out1', 'O2Outlet', 1);
model.physics('we').feature('o2gasph1').feature('o2out1').selection.set([17]);
model.physics('ht').prop('PhysicalModelProperty').set('Tref', 'T_in');
model.physics('ht').feature('solid1').label('Solid: Interconnects');
model.physics('ht').feature('fluid1').label('Fluid: Flow Channels');
model.physics('ht').feature('fluid1').selection.set([2 6]);
model.physics('ht').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('fluid1').set('minput_pressure', 'we.pA');
model.physics('ht').feature('fluid1').set('u', {'we.u' 'we.v' '0'});
model.physics('ht').feature('fluid1').set('k_mat', 'root.comp1.we.kgas_mix_tensorxx');
model.physics('ht').feature('fluid1').set('fluidType', 'gasLiquid');
model.physics('ht').feature('fluid1').set('rho_mat', 'root.comp1.we.rho');
model.physics('ht').feature('fluid1').set('Cp_mat', 'root.comp1.we.Cp_mix');
model.physics('ht').feature('init1').set('Tinit', 'T_in');
model.physics('ht').create('porous1', 'PorousMediumHeatTransferModel', 2);
model.physics('ht').feature('porous1').label('Porous Medium: Cathode GDE');
model.physics('ht').feature('porous1').selection.set([5]);
model.physics('ht').feature('porous1').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('porous1').feature('fluid1').set('minput_pressure', 'we.pA');
model.physics('ht').feature('porous1').feature('fluid1').set('u', {'we.u' 'we.v' '0'});
model.physics('ht').feature('porous1').feature('fluid1').set('k_mat', 'root.comp1.we.kgas_mix_tensorxx');
model.physics('ht').feature('porous1').feature('fluid1').set('rho_mat', 'root.comp1.we.rho');
model.physics('ht').feature('porous1').feature('fluid1').set('Cp_mat', 'root.comp1.we.Cp_mix');
model.physics('ht').feature('porous1').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('poro', 'epsg');
model.physics('ht').feature('porous1').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('k_b', {'kc' '0' '0' '0' 'kc' '0' '0' '0' 'kc'});
model.physics('ht').feature('porous1').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous1').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').create('porous2', 'PorousMediumHeatTransferModel', 2);
model.physics('ht').feature('porous2').label('Porous Medium: Anode GDE');
model.physics('ht').feature('porous2').selection.set([3]);
model.physics('ht').feature('porous2').feature('fluid1').set('minput_pressure_src', 'userdef');
model.physics('ht').feature('porous2').feature('fluid1').set('minput_pressure', 'we.pA');
model.physics('ht').feature('porous2').feature('fluid1').set('u', {'we.u' 'we.v' '0'});
model.physics('ht').feature('porous2').feature('fluid1').set('k_mat', 'root.comp1.we.kgas_mix_tensorxx');
model.physics('ht').feature('porous2').feature('fluid1').set('rho_mat', 'root.comp1.we.rho');
model.physics('ht').feature('porous2').feature('fluid1').set('Cp_mat', 'root.comp1.we.Cp_mix');
model.physics('ht').feature('porous2').feature('pm1').set('poro_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('poro', 'epsg');
model.physics('ht').feature('porous2').feature('pm1').set('k_b_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('k_b', {'ka' '0' '0' '0' 'ka' '0' '0' '0' 'ka'});
model.physics('ht').feature('porous2').feature('pm1').set('rho_b_mat', 'userdef');
model.physics('ht').feature('porous2').feature('pm1').set('Cp_b_mat', 'userdef');
model.physics('ht').create('solid2', 'SolidHeatTransferModel', 2);
model.physics('ht').feature('solid2').label('Solid: Membrane');
model.physics('ht').feature('solid2').selection.set([4]);
model.physics('ht').feature('solid2').set('k_mat', 'userdef');
model.physics('ht').feature('solid2').set('k', {'km' '0' '0' '0' 'km' '0' '0' '0' 'km'});
model.physics('ht').feature('solid2').set('rho_mat', 'userdef');
model.physics('ht').feature('solid2').set('Cp_mat', 'userdef');
model.physics('ht').create('ifl1', 'Inflow', 1);
model.physics('ht').feature('ifl1').selection.set([3 11]);
model.physics('ht').feature('ifl1').set('Tustr', 'T_in');
model.physics('ht').create('ofl1', 'ConvectiveOutflow', 1);
model.physics('ht').feature('ofl1').selection.set([17 21]);
model.physics('ht').create('pc1', 'PeriodicHeat', 1);
model.physics('ht').feature('pc1').selection.set([2 15]);

model.multiphysics.create('ech1', 'ElectrochemicalHeating', 'geom1', 2);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').label('Yttria-Stabilized Zirconia, 8YSZ, (ZrO2)0.92-(Y2O3)0.08');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcname', 'log_sigmaT_vs_invT');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('table', {'0.8202666666666667' '2.2431906614786';  ...
'0.8526222222222222' '2.0972762645914402';  ...
'0.8912' '1.922178988326849';  ...
'0.9335111111111112' '1.7373540856031133';  ...
'0.9820444444444445' '1.5233463035019446';  ...
'1.0268444444444444' '1.319066147859922';  ...
'1.0766222222222224' '1.0856031128404666';  ...
'1.1463111111111113' '0.745136186770428';  ...
'1.2160000000000002' '0.3754863813229572';  ...
'1.296888888888889' '-0.03307392996108938';  ...
'1.384' '-0.5097276264591439';  ...
'1.4860444444444445' '-1.073929961089494';  ...
'1.6042666666666667' '-1.735408560311284';  ...
'1.7424000000000002' '-2.5136186770428006'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1/K'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg' '0' '0' '0' '(10^(log_sigmaT_vs_invT(1000/T_reg))[S/cm*K])/T_reg'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Electrolytes for solid oxide fuel cells, J. Fergus, Journal of Power Sources 162 (2006) 30' native2unicode(hex2dec({'20' '13'}), 'unicode') '40.' newline  newline 'Conductivity values averaged from Figure 2.' newline ]);
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('T_reg', 'max(min(T,1/0.8203e-3),1/1.74e-3)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').descr('T_reg', 'Temperature (regularized to valid range)');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat1').selection.set([3 4 5]);
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').label('Steel AISI 4340');
model.material('mat2').set('family', 'steel');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '205[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').selection.set([1 7]);

model.mesh('mesh1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('dis1').selection.set([2 4 6 8 10 12 14 15]);
model.mesh('mesh1').feature('dis1').set('numelem', 100);
model.mesh('mesh1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('dis2').selection.set([1 13 16 22]);
model.mesh('mesh1').feature('dis2').set('numelem', 2);
model.mesh('mesh1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('dis3').selection.set([3 11 17 21]);
model.mesh('mesh1').feature('dis3').set('numelem', 10);
model.mesh('mesh1').create('dis4', 'Distribution');
model.mesh('mesh1').feature('dis4').selection.set([7 19]);
model.mesh('mesh1').feature('dis4').set('numelem', 2);
model.mesh('mesh1').create('dis5', 'Distribution');
model.mesh('mesh1').feature('dis5').selection.set([9 20]);
model.mesh('mesh1').feature('dis5').set('type', 'predefined');
model.mesh('mesh1').feature('dis5').set('elemcount', 20);
model.mesh('mesh1').feature('dis5').set('elemratio', 10);
model.mesh('mesh1').feature('dis5').set('growthrate', 'exponential');
model.mesh('mesh1').create('dis6', 'Distribution');
model.mesh('mesh1').feature('dis6').selection.set([5 18]);
model.mesh('mesh1').feature('dis6').set('type', 'predefined');
model.mesh('mesh1').feature('dis6').set('elemcount', 10);
model.mesh('mesh1').feature('dis6').set('elemratio', 5);
model.mesh('mesh1').feature('dis6').set('growthrate', 'exponential');
model.mesh('mesh1').feature('dis6').set('reverse', true);
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').run;

model.study('std1').feature('cdi').set('initType', 'secondary');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'T_in', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'T_in', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'K', 0);
model.study('std1').feature('stat').setIndex('pname', 'E_app', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0.5 1 1.5', 0);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (we)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_we_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_wCO_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndCO2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndCO').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_wCO2_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_we_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_wCO_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndCO2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_h2gasph1_h2in1_wbndCO').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_we_wCO2_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s2').set('control', 'stat');
model.sol('sol1').feature('s2').create('seDef', 'Segregated');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('d1').label('Direct, heat transfer variables (ht) (Merged)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (we)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (we)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i3', 'Iterative');
model.sol('sol1').feature('s2').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i3').set('prefuntype', 'left');
model.sol('sol1').feature('s2').feature('i3').set('itrestart', 50);
model.sol('sol1').feature('s2').feature('i3').set('rhob', 20);
model.sol('sol1').feature('s2').feature('i3').set('maxlinit', 10000);
model.sol('sol1').feature('s2').feature('i3').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i3').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('s2').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('termonres', 'off');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('s2').feature.remove('seDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 3, 0);
model.result('pg1').label('Electrode Potential with Respect to Ground (we)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'we.phis'});
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('expr', {'we.Isx' 'we.Isy'});
model.result('pg1').feature('arws1').set('arrowbase', 'center');
model.result('pg1').feature('arws1').set('color', 'gray');
model.result('pg1').feature('arws1').create('filt1', 'Filter');
model.result('pg1').feature('arws1').feature('filt1').set('expr', 'isdefined(root.comp1.we.phis)');
model.result('pg1').feature('arws1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 3, 0);
model.result('pg2').label('Electrolyte Potential (we)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'we.phil'});
model.result('pg2').create('arws1', 'ArrowSurface');
model.result('pg2').feature('arws1').set('expr', {'we.Ilx' 'we.Ily'});
model.result('pg2').feature('arws1').set('arrowbase', 'center');
model.result('pg2').feature('arws1').set('color', 'gray');
model.result('pg2').feature('arws1').create('filt1', 'Filter');
model.result('pg2').feature('arws1').feature('filt1').set('expr', 'isdefined(we.phil)');
model.result('pg2').feature('arws1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 3, 0);
model.result('pg3').label('Mole Fraction, H2 (we)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'we.xH2'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'we.tfluxH2x' 'we.tfluxH2y'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 3, 0);
model.result('pg4').label('Mole Fraction, O2 (we)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species O2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', true);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'we.xO2'});
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('expr', {'we.tfluxO2x' 'we.tfluxO2y'});
model.result('pg4').feature('str1').set('posmethod', 'uniform');
model.result('pg4').feature('str1').set('recover', 'pprint');
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 3, 0);
model.result('pg5').label('Mole Fraction, H2O (we)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species H2O:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'we.xH2O'});
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'we.tfluxH2Ox' 'we.tfluxH2Oy'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 3, 0);
model.result('pg6').label('Mole Fraction, N2 (we)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species N2:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'we.xN2'});
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('expr', {'we.tfluxN2x' 'we.tfluxN2y'});
model.result('pg6').feature('str1').set('posmethod', 'uniform');
model.result('pg6').feature('str1').set('recover', 'pprint');
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 3, 0);
model.result('pg7').label('Mole Fraction, CO2 (we)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('prefixintitle', 'Species CO2:');
model.result('pg7').set('expressionintitle', false);
model.result('pg7').set('typeintitle', true);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'we.xCO2'});
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'we.tfluxCO2x' 'we.tfluxCO2y'});
model.result('pg7').feature('str1').set('posmethod', 'uniform');
model.result('pg7').feature('str1').set('recover', 'pprint');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 3, 0);
model.result('pg8').label('Mole Fraction, CO (we)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species CO:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', true);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'we.xCO'});
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('expr', {'we.tfluxCOx' 'we.tfluxCOy'});
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('recover', 'pprint');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').set('color', 'gray');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 3, 0);
model.result('pg9').label('Pressure (we)');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'we.p'});
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'we.u' 'we.v'});
model.result('pg9').feature('str1').set('posmethod', 'uniform');
model.result('pg9').feature('str1').set('recover', 'pprint');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Temperature (ht)');
model.result('pg10').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('solutionparams', 'parent');
model.result('pg10').feature('surf1').set('expr', 'T');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg8').run;
model.result('pg8').run;
model.result('pg10').run;
model.result('pg10').run;
model.result('pg10').feature('surf1').set('expr', 'T-T_in');
model.result('pg10').run;
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Surface: Change in Temperature (K)');
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').run;
model.result('pg11').label('Water Gas Shift Reaction Rate');
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', 'we.r_wgsr');
model.result('pg11').run;
model.result.create('pg12', 'PlotGroup1D');
model.result('pg12').run;
model.result('pg12').label('Current Density Distribution');
model.result('pg12').setIndex('looplevelinput', 'last', 0);
model.result('pg12').set('titletype', 'manual');
model.result('pg12').set('title', 'Current Density Distribution, Cathode Side');
model.result('pg12').set('xlabelactive', true);
model.result('pg12').set('xlabel', 'Electrode length (m)');
model.result('pg12').set('ylabelactive', true);
model.result('pg12').set('ylabel', 'Integrated current density in y-direction (A/cm<sup>2</sup>)');
model.result('pg12').create('lngr1', 'LineGraph');
model.result('pg12').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr1').set('linewidth', 'preference');
model.result('pg12').feature('lngr1').selection.set([10]);
model.result('pg12').feature('lngr1').set('expr', 'genproj1(we.iv_h2gder1)');
model.result('pg12').feature('lngr1').set('unit', 'A/cm^2');
model.result('pg12').feature('lngr1').set('linewidth', 2);
model.result('pg12').feature('lngr1').set('legend', true);
model.result('pg12').feature('lngr1').set('legendmethod', 'manual');
model.result('pg12').feature('lngr1').setIndex('legends', 'H2O', 0);
model.result('pg12').run;
model.result('pg12').create('lngr2', 'LineGraph');
model.result('pg12').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg12').feature('lngr2').set('linewidth', 'preference');
model.result('pg12').feature('lngr2').selection.set([10]);
model.result('pg12').feature('lngr2').set('expr', 'genproj1(we.iv_h2gder2)');
model.result('pg12').feature('lngr2').set('unit', 'A/cm^2');
model.result('pg12').feature('lngr2').set('linewidth', 2);
model.result('pg12').feature('lngr2').set('legend', true);
model.result('pg12').feature('lngr2').set('legendmethod', 'manual');
model.result('pg12').feature('lngr2').setIndex('legends', 'CO2', 0);
model.result('pg12').run;
model.result('pg12').run;

model.title('Water and Carbon Dioxide Co-Electrolysis in a Solid Oxide Electrolyzer Cell');

model.description(['This example models co-electrolysis of water and carbon dioxide using a solid oxide electrolyzer cell. The model includes the full coupling between the mass balances and gas flow in the hydrogen and oxygen gas diffusion electrodes, the momentum balances in the hydrogen and oxygen gas flow channels, the energy balance across the cell, the balance of the ionic current carried by the oxide ion, and an electronic-current balance. A reversible water gas shift reaction is included in the hydrogen gas diffusion electrode and hydrogen gas flow channel.' newline  newline 'The model computes the spatial distributions of the various species across the gas diffusion electrodes and gas flow channels. The spatial distribution of the total current density along the electrode length is also evaluated in the model using the general projection operator.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('soec_co2.mph');

model.modelNode.label('Components');

out = model;
