function out = model
%
% loudspeaker_driver_transient.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('mf', 'InductionCurrents', 'geom1');
model.physics('mf').model('comp1');
model.physics.create('actd', 'TransientPressureAcoustics', 'geom1');
model.physics('actd').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 1);
model.multiphysics('asb1').set('Acoustics_physics', 'actd');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/mf', true);
model.study('std1').feature('stat').setSolveFor('/physics/actd', true);
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);
model.study('std1').feature('stat').setSolveFor('/multiphysics/asb1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('N0', '100', 'Number of turns in coil');
model.param.set('V0', '10[V]', 'Peak driving voltage');
model.param.set('c0', '343[m/s]', 'Speed of sound in air');
model.param.set('f0', '70[Hz]', 'Driving frequency');
model.param.set('omega0', '2*pi*f0', 'Driving angular frequency');
model.param.set('T0', '1/f0', 'Driving signal period');
model.param.set('T_end', '4*T0', 'End time for simulation');
model.param.set('f_d', '40[Hz]', 'Frequency at which stiffness damping factor is given');
model.param.set('omega_d', '2*pi*f_d', 'Angular frequency at which stiffness damping factor is given');
model.param.set('E_com', '2[GPa]', 'Young''s modulus (composite)');
model.param.set('nu_com', '0.42', 'Poisson''s ratio (composite)');
model.param.set('eta_s_com', '0.04', 'Isotropic loss factor (composite)');
model.param.set('K_com', 'E_com/(3*(1-2*nu_com))', 'Bulk modulus (composite)');
model.param.set('G_com', 'E_com/(2*(1+nu_com))', 'Shear modulus (composite)');
model.param.set('E_gf', '70[GPa]', 'Young''s modulus (glass fiber)');
model.param.set('nu_gf', '0.33', 'Poisson''s ratio (glass fiber)');
model.param.set('eta_s_gf', '0.04', 'Isotropic loss factor (glass fiber)');
model.param.set('K_gf', 'E_gf/(3*(1-2*nu_gf))', 'Bulk modulus (glass fiber)');
model.param.set('G_gf', 'E_gf/(2*(1+nu_gf))', 'Shear modulus (glass fiber)');
model.param.set('mu0', 'mu0_const', 'Vacuum permeability');

model.geom('geom1').insertFile('loudspeaker_driver_transient_geom_sequence.mph', 'geom1');
model.geom('geom1').run('igv1');

model.func.create('rm1', 'Ramp');
model.func('rm1').set('location', '0.1*T0');
model.func('rm1').set('slope', '1/T0');
model.func('rm1').set('cutoffactive', true);
model.func('rm1').set('smoothzonelocactive', true);
model.func('rm1').set('smoothzoneloc', '0.2*T0');
model.func('rm1').set('smoothzonecutoffactive', true);
model.func('rm1').set('smoothzonecutoff', '0.2*T0');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Coil');
model.selection('sel1').set([14]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Solid Mechanics Domains');
model.selection('sel2').set([4 8 9 10 11 12 13 14 15 16 19]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Magnetic Domains');
model.selection('sel3').set([2 3 7 8 9 10 11 12 14 15 17 18]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Acoustic Domains');
model.selection('sel4').set([1 2 3 5 6]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Solid Mechanics Exterior Boundaries');
model.selection('adj1').set('input', {'sel2'});

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.named('sel1');
model.cpl('aveop1').set('axisym', false);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('BHCurve', 'B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func.create('BH', 'Interpolation');
model.material('mat2').propertyGroup.create('EffectiveBHCurve', 'Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func.create('BHeff', 'Interpolation');
model.material('mat2').label('Soft Iron (With Losses)');
model.material('mat2').set('family', 'iron');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]' '0' '0' '0' '1.12e7[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('BHCurve').label('B-H Curve');
model.material('mat2').propertyGroup('BHCurve').func('BH').label('Interpolation 1');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('table', {'0' '0';  ...
'663.146' '1';  ...
'1067.5' '1.1';  ...
'1705.23' '1.2';  ...
'2463.11' '1.3';  ...
'3841.67' '1.4';  ...
'5425.74' '1.5';  ...
'7957.75' '1.6';  ...
'12298.3' '1.7';  ...
'20462.8' '1.8';  ...
'32169.6' '1.9';  ...
'61213.4' '2';  ...
'111408' '2.1';  ...
'188487.757' '2.2';  ...
'267930.364' '2.3';  ...
'347507.836' '2.4'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('extrap', 'linear');
model.material('mat2').propertyGroup('BHCurve').func('BH').set('fununit', {'T'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineinv', true);
model.material('mat2').propertyGroup('BHCurve').func('BH').set('defineprimfun', true);
model.material('mat2').propertyGroup('BHCurve').set('normB', 'BH(normHin)');
model.material('mat2').propertyGroup('BHCurve').set('normH', 'BH_inv(normBin)');
model.material('mat2').propertyGroup('BHCurve').set('Wpm', 'BH_prim(normHin)');
model.material('mat2').propertyGroup('BHCurve').descr('normHin', 'Magnetic field norm');
model.material('mat2').propertyGroup('BHCurve').descr('normBin', 'Magnetic flux density norm');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('BHCurve').addInput('magneticfluxdensity');
model.material('mat2').propertyGroup('EffectiveBHCurve').label('Effective B-H Curve');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').label('Interpolation 1');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('table', {'0' '0';  ...
'663.146' '1.000000051691021';  ...
'1067.5' '1.4936495124126294';  ...
'1705.23' '1.9415328461315795';  ...
'2463.11' '2.257765669366018';  ...
'3841.67' '2.609980642431287';  ...
'5425.74' '2.8664452090837504';  ...
'7957.75' '3.1441438097176118';  ...
'12298.3' '3.448538051654125';  ...
'20462.8' '3.7816711973679054';  ...
'32169.6' '4.058345590113038';  ...
'61213.4' '4.420646552950275';  ...
'111408' '4.721274089545955';  ...
'188487.757' '4.972148140718701';  ...
'267930.364' '5.145510860855953';  ...
'347507.836' '5.245510861426532'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('extrap', 'linear');
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('fununit', {'T'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('argunit', {'A/m'});
model.material('mat2').propertyGroup('EffectiveBHCurve').func('BHeff').set('defineinv', true);
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normBeff', 'BHeff(normHeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').set('normHeff', 'BHeff_inv(normBeffin)');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normHeffin', 'Effective magnetic field norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').descr('normBeffin', 'Effective magnetic flux density norm');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfield');
model.material('mat2').propertyGroup('EffectiveBHCurve').addInput('magneticfluxdensity');
model.material('mat2').selection.set([7 17]);
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Composite');
model.material('mat3').propertyGroup('def').set('youngsmodulus', '2[GPa]');
model.material('mat3').propertyGroup('def').set('poissonsratio', '0.42');
model.material('mat3').propertyGroup('def').set('density', '1200[kg/m^3]');
model.material('mat3').propertyGroup('def').set('lossfactor', '0.04');
model.material('mat3').selection.set([4 16]);
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Cloth');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat4').propertyGroup('def').set('youngsmodulus', '0.58[GPa]');
model.material('mat4').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat4').propertyGroup('def').set('density', '650[kg/m^3]');
model.material('mat4').selection.set([15]);
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Foam');
model.material('mat5').propertyGroup('def').set('youngsmodulus', '5[MPa]');
model.material('mat5').propertyGroup('def').set('poissonsratio', '0.4');
model.material('mat5').propertyGroup('def').set('density', '67[kg/m^3]');
model.material('mat5').selection.set([19]);
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Coil');
model.material('mat6').propertyGroup('def').set('lossfactor', '0.05');
model.material('mat6').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat6').propertyGroup('def').set('youngsmodulus', '110[GPa]');
model.material('mat6').propertyGroup('def').set('poissonsratio', '0.35');
model.material('mat6').propertyGroup('def').set('density', '4500[kg/m^3]');
model.material('mat6').selection.set([14]);
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').label('Glass Fiber');
model.material('mat7').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('youngsmodulus', '70[GPa]');
model.material('mat7').propertyGroup('def').set('poissonsratio', '0.33');
model.material('mat7').propertyGroup('def').set('density', '2000[kg/m^3]');
model.material('mat7').propertyGroup('def').set('lossfactor', '0.04');
model.material('mat7').selection.set([8 9 10 11 12 13]);
model.material.create('mat8', 'Common', 'comp1');
model.material('mat8').propertyGroup.create('RemanentFluxDensity', 'Remanent flux density');
model.material('mat8').label('Generic Ferrite');
model.material('mat8').propertyGroup('def').set('lossfactor', '0.01');
model.material('mat8').propertyGroup('def').set('electricconductivity', {'0' '0' '0' '0' '0' '0' '0' '0' '0'});
model.material('mat8').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('def').set('poissonsratio', '0.3');
model.material('mat8').propertyGroup('def').set('youngsmodulus', '200[GPa]');
model.material('mat8').propertyGroup('def').set('density', '5000[kg/m^3]');
model.material('mat8').propertyGroup('RemanentFluxDensity').set('murec', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat8').propertyGroup('RemanentFluxDensity').set('normBr', '0.4[T]');
model.material('mat8').selection.set([18]);

model.physics('mf').selection.named('sel3');
model.physics('mf').create('als1', 'AmperesLawSolid', 2);
model.physics('mf').feature('als1').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Generic Ferrite']);
model.physics('mf').feature('als1').selection.set([18]);
model.physics('mf').feature('als1').set('ConstitutiveRelationBH', 'RemanentFluxDensity');
model.physics('mf').feature('als1').set('e_crel_BH_RemanentFluxDensity', [0 0 1]);
model.physics('mf').create('als2', 'AmperesLawSolid', 2);
model.physics('mf').feature('als2').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Soft Iron']);
model.physics('mf').feature('als2').selection.set([7 17]);
model.physics('mf').feature('als2').set('ConstitutiveRelationBH', 'BHCurve');
model.physics('mf').create('als3', 'AmperesLawSolid', 2);
model.physics('mf').feature('als3').selection.named('sel2');
model.physics('mf').feature('als3').label(['Amp' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're''s Law in Solids - Nonconductive Solids']);
model.physics('mf').create('coil1', 'Coil', 2);
model.physics('mf').feature('coil1').selection.named('sel1');
model.physics('mf').feature('coil1').setIndex('materialType', 'solid', 0);
model.physics('mf').feature('coil1').set('ConductorModel', 'Multi');
model.physics('mf').feature('coil1').set('CoilExcitation', 'Voltage');
model.physics('mf').feature('coil1').set('VCoil', 'V0*sin(2*pi*f0*t)*rm1(t[1/s])');
model.physics('mf').feature('coil1').set('N', 'N0');
model.physics('mf').feature('coil1').set('coilWindArea', '2.4e-8[m^2]');
model.physics('actd').selection.named('sel4');
model.physics('actd').prop('TransientSettings').set('fmax', '3*f0');
model.physics('solid').selection.named('sel2');
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp1').set('beta_dK', '0.14/omega_d');
model.physics('solid').feature('lemm1').feature('dmp1').selection.set([15]);
model.physics('solid').feature('lemm1').create('dmp2', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp2').set('beta_dK', '0.46/omega_d');
model.physics('solid').feature('lemm1').feature('dmp2').selection.set([19]);
model.physics('solid').feature('lemm1').create('dmp3', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp3').set('DampingType', 'ViscousDamping');
model.physics('solid').feature('lemm1').feature('dmp3').set('etab', 'eta_s_gf*K_gf/omega0');
model.physics('solid').feature('lemm1').feature('dmp3').set('etav', 'eta_s_gf*G_gf/omega0');
model.physics('solid').feature('lemm1').feature('dmp3').selection.set([8 9 10 11 12 13]);
model.physics('solid').feature('lemm1').create('dmp4', 'Damping', 2);
model.physics('solid').feature('lemm1').feature('dmp4').set('DampingType', 'ViscousDamping');
model.physics('solid').feature('lemm1').feature('dmp4').set('etab', 'eta_s_com*K_com/omega0');
model.physics('solid').feature('lemm1').feature('dmp4').set('etav', 'eta_s_com*G_com/omega0');
model.physics('solid').feature('lemm1').feature('dmp4').selection.set([4 16]);
model.physics('solid').create('fix1', 'Fixed', 1);
model.physics('solid').feature('fix1').selection.set([70 74]);

model.multiphysics.create('mmcpl1', 'Magnetomechanics', 'geom1', 2);
model.multiphysics('mmcpl1').set('OnlyLorentz', true);
model.multiphysics('mmcpl1').selection.named('sel1');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1 6]);
model.coordSystem('pml1').set('PMLgamma', '3');

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').selection.all;
model.common('free1').selection.set([3 5]);
model.common('free1').set('smoothingType', 'laplace');
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([3 6]);

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '15[mm]');
model.mesh('mesh1').feature('size').set('hmin', '0.10[mm]');
model.mesh('mesh1').feature('size').set('hcurve', 0.25);
model.mesh('mesh1').run('size');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('map1').selection.set([4 8 9 10 11 12 14 15 16 19]);
model.mesh('mesh1').feature('map1').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([18 30 33 37]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').selection.set([9 14]);
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', '0.15[mm]');
model.mesh('mesh1').feature('map1').create('size2', 'Size');
model.mesh('mesh1').feature('map1').feature('size2').selection.set([12 15]);
model.mesh('mesh1').feature('map1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size2').set('hmax', '0.7[mm]');
model.mesh('mesh1').feature('map1').create('size3', 'Size');
model.mesh('mesh1').feature('map1').feature('size3').selection.set([4 16 19]);
model.mesh('mesh1').feature('map1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size3').set('hmax', '1.0[mm]');
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([19]);
model.mesh('mesh1').feature('map1').feature('dis2').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis2').set('elemcount', 20);
model.mesh('mesh1').feature('map1').feature('dis2').set('elemratio', 3);
model.mesh('mesh1').feature('map1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis3').selection.set([15]);
model.mesh('mesh1').feature('map1').feature('dis3').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis3').set('elemcount', 10);
model.mesh('mesh1').feature('map1').feature('dis3').set('elemratio', 3);
model.mesh('mesh1').feature('map1').feature('dis3').set('reverse', true);
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([2 3 5 7 13 17 18]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([7 17 18]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', '3[mm]');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmin', '0.5[mm]');
model.mesh('mesh1').run;
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').set('adjustedgdistr', true);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.set([76 77]);
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 8);
model.mesh('mesh1').run;

model.study('std1').feature('stat').setEntry('activate', 'solid', false);
model.study('std1').feature('stat').setEntry('activate', 'frame:spatial1', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('tlist', '{range(0, T0/5, 14*T0/5) range(3*T0, T0/50, T_end)}');
model.study('std1').feature('time').set('autoremesh', true);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 5]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([3 5]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1.1147291150768422E-4');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature('fc1').set('ntolfact', 1);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1.1147291150768422E-4');
model.sol('sol1').feature('v2').feature('comp1_u').set('scaleval', '1e-2*0.2906888370749727');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', '{range(0, T0/5, 14*T0/5) range(3*T0, T0/50, T_end)}');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('tout', 'tstepsclosest');
model.sol('sol1').feature('t1').set('rtol', 1.0E-4);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('timestepgenalpha', '1/(60*3*f0)');
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('timestepbdf', '1/(60*3*f0)');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol('sol1').feature('t1').set('initialstepbdf', '1/(100*3*f0)');
model.sol('sol1').feature('t1').set('maxstepconstraintbdf', 'const');
model.sol('sol1').feature('t1').set('maxstepbdf', 'min(1e100,1/(30*3*f0))');
model.sol('sol1').feature('t1').set('initialstepgenalphaactive', true);
model.sol('sol1').feature('t1').set('initialstepgenalpha', '1/(100*3*f0)');
model.sol('sol1').feature('t1').set('maxstepconstraintgenalpha', 'const');
model.sol('sol1').feature('t1').set('maxstepgenalpha', 'min(1e100,1/(30*3*f0))');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('arDef').set('autoremeshgeom', 'geom1');
model.sol('sol1').feature('t1').feature('arDef').set('stopcondtype', 'quality');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('fc1').set('ntolfact', 0.2);
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').set('tout', 'tlist');
model.sol('sol1').feature('t1').feature('arDef').set('stopcondtype', 'distortion');
model.sol('sol1').feature('t1').feature('arDef').set('stopdistval', '2.5');
model.sol('sol1').feature('t1').feature('arDef').set('storesolmesh', false);

model.study('std1').label('Study 1 - Time Dependent Analysis');

model.sol.create('sol3');
model.sol('sol3').label('Remeshed Solution 1');
model.sol('sol3').study('std1');
model.sol('sol1').feature('t1').feature('arDef').set('tadapsol', 'sol3');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Magnetic Flux Density Norm (mf)');
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 137, 0);
model.result('pg1').set('dataisaxisym', 'off');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset3');
model.result('pg1').setIndex('looplevel', 137, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('solutionparams', 'parent');
model.result('pg1').feature('surf1').set('colortable', 'Prism');
model.result('pg1').feature('surf1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('surf1').set('colorcalibration', -0.8);
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature.create('str1', 'Streamline');
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('solutionparams', 'parent');
model.result('pg1').feature('str1').set('titletype', 'none');
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('udist', 0.03);
model.result('pg1').feature('str1').set('maxlen', 0.4);
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('inheritcolor', false);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('showsolutionparams', 'on');
model.result('pg1').feature('str1').set('maxtime', Inf);
model.result('pg1').feature('str1').set('data', 'parent');
model.result('pg1').feature('str1').selection.geom('geom1', 1);
model.result('pg1').feature('str1').selection.set([2 3 4 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 28 29 30 31 32 33 34 35 36 38 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 79 80 84 85 86 87 89 90 92]);
model.result('pg1').feature('str1').set('inheritplot', 'surf1');
model.result('pg1').feature('str1').feature.create('col1', 'Color');
model.result('pg1').feature('str1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('str1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('str1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('str1').feature.create('filt1', 'Filter');
model.result('pg1').feature('str1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg1').feature.create('con1', 'Contour');
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('solutionparams', 'parent');
model.result('pg1').feature('con1').set('expr', 'r*mf.Aphi');
model.result('pg1').feature('con1').set('titletype', 'none');
model.result('pg1').feature('con1').set('number', 10);
model.result('pg1').feature('con1').set('levelrounding', false);
model.result('pg1').feature('con1').set('coloring', 'uniform');
model.result('pg1').feature('con1').set('colorlegend', false);
model.result('pg1').feature('con1').set('color', 'custom');
model.result('pg1').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg1').feature('con1').set('resolution', 'fine');
model.result('pg1').feature('con1').set('inheritcolor', false);
model.result('pg1').feature('con1').set('showsolutionparams', 'on');
model.result('pg1').feature('con1').set('data', 'parent');
model.result('pg1').feature('con1').set('inheritplot', 'surf1');
model.result('pg1').feature('con1').feature.create('filt1', 'Filter');
model.result('pg1').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'none');
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('data', 'dset3');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Magnetic Flux Density Norm, Revolved Geometry (mf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('showlegendsmaxmin', true);
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 137, 0);
model.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom6/pdef1/pcond2/pcond3/pg1');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('colortable', 'Prism');
model.result('pg2').feature('vol1').set('colortabletrans', 'nonlinear');
model.result('pg2').feature('vol1').set('colorcalibration', -0.8);
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('solutionparams', 'parent');
model.result('pg2').feature('con1').set('expr', 'r*mf.Aphi');
model.result('pg2').feature('con1').set('titletype', 'none');
model.result('pg2').feature('con1').set('number', 10);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('coloring', 'uniform');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result('pg2').feature('con1').set('color', 'custom');
model.result('pg2').feature('con1').set('customcolor', [0.3764705955982208 0.3764705955982208 0.3764705955982208]);
model.result('pg2').feature('con1').set('resolution', 'fine');
model.result('pg2').feature('con1').set('inheritcolor', false);
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result('pg2').feature('con1').set('inheritplot', 'vol1');
model.result('pg2').feature('con1').feature.create('filt1', 'Filter');
model.result('pg2').feature('con1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result('pg2').feature('con1').feature('filt1').set('shownodespec', 'on');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset3');
model.result('pg3').setIndex('looplevel', 137, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'actd.p_t'});
model.result('pg3').feature('surf1').set('colortable', 'Wave');
model.result('pg3').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure (actd)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 137, 0);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'actd.p_t'});
model.result('pg4').feature('surf1').set('colortable', 'Wave');
model.result('pg4').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Acoustic Pressure, 3D (actd)');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset3');
model.result('pg5').setIndex('looplevel', 137, 0);
model.result('pg5').set('defaultPlotID', 'stress');
model.result('pg5').label('Stress (solid)');
model.result('pg5').set('frametype', 'spatial');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg5').feature('surf1').set('threshold', 'manual');
model.result('pg5').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colortabletrans', 'none');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').set('resolution', 'normal');
model.result('pg5').feature('surf1').set('colortable', 'Prism');
model.result.dataset.create('dset3solidrev', 'Revolve2D');
model.result.dataset('dset3solidrev').set('data', 'dset3');
model.result.dataset('dset3solidrev').set('revangle', 225);
model.result.dataset('dset3solidrev').set('startangle', -90);
model.result.dataset('dset3solidrev').set('hasspacevars', true);
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset3solidrev');
model.result('pg6').setIndex('looplevel', 137, 0);
model.result('pg6').set('defaultPlotID', 'stress3D');
model.result('pg6').label('Stress, 3D (solid)');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'solid.misesGp'});
model.result('pg6').feature('surf1').set('threshold', 'manual');
model.result('pg6').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg6').feature('surf1').set('colortable', 'Rainbow');
model.result('pg6').feature('surf1').set('colortabletrans', 'none');
model.result('pg6').feature('surf1').set('colorscalemode', 'linear');
model.result('pg6').feature('surf1').set('colortable', 'Prism');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset3');
model.result('pg7').setIndex('looplevel', 137, 0);
model.result('pg7').label('Moving Mesh');
model.result('pg7').create('mesh1', 'Mesh');
model.result('pg7').feature('mesh1').set('meshdomain', 'surface');
model.result('pg7').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg7').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg7').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg7').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg7').feature('mesh1').feature('sel1').selection.set([3 4 5 8 9 10 11 12 13 14 15 16 19]);
model.result('pg7').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg7').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg7').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;

model.view.create('view2', 2);
model.view('view2').axis.set('xmin', 0.003848241874948144);
model.view('view2').axis.set('xmax', 0.03614714741706848);
model.view('view2').axis.set('ymin', -0.06745218485593796);
model.view('view2').axis.set('ymax', -0.04477901756763458);

model.result('pg1').run;
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Magnetic Flux Density Norm');
model.result('pg1').set('paramindicator', 't = eval(t) s');
model.result('pg1').set('view', 'view2');
model.result('pg1').run;
model.result('pg1').feature('str1').active(false);
model.result('pg1').feature('con1').active(false);
model.result('pg1').run;
model.result('pg1').create('str2', 'Streamline');
model.result('pg1').feature('str2').selection.set([40]);
model.result('pg1').feature('str2').set('color', 'gray');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Acoustic pressure, Time = eval(t) s');
model.result('pg3').set('paramindicator', '');
model.result('pg3').set('titlenumberformat', 'auto');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').run;
model.result('pg3').feature('surf1').set('rangecoloractive', true);
model.result('pg3').feature('surf1').set('rangecolormin', -150);
model.result('pg3').feature('surf1').set('rangecolormax', 150);
model.result('pg3').feature('surf1').create('sel1', 'Selection');
model.result('pg3').feature('surf1').feature('sel1').selection.set([2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.result('pg3').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Pressure at Listening Point');
model.result('pg8').set('data', 'dset3');
model.result('pg8').setIndex('looplevelinput', 'interp', 0);
model.result('pg8').setIndex('interp', 'range(3*T0, T0/50, T_end)', 0);
model.result('pg8').set('titletype', 'label');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([6]);
model.result('pg8').feature('ptgr1').set('expr', 'p');
model.result('pg8').run;
model.result.numerical.create('pev1', 'EvalPoint');
model.result.numerical('pev1').label('Pressure at Point');
model.result.numerical('pev1').set('data', 'dset3');
model.result.numerical('pev1').setIndex('looplevelinput', 'interp', 0);
model.result.numerical('pev1').setIndex('interp', 'range(3*T0, T0/50, T_end)', 0);
model.result.numerical('pev1').selection.set([6]);
model.result.numerical('pev1').setIndex('expr', 'p', 0);
model.result.numerical('pev1').setIndex('unit', 'Pa', 0);
model.result.numerical('pev1').setIndex('descr', 'Pressure', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Pressure at Point');
model.result.numerical('pev1').set('table', 'tbl1');
model.result.numerical('pev1').setResult;
model.result.table('tbl1').label('Pressure at Point');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'resultTable');
model.func('int1').setIndex('funcs', 'p_point', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').set('interp', 'cubicspline');
model.func('int1').set('extrap', 'interior');
model.func('int1').setIndex('argunit', 's', 0);
model.func('int1').setIndex('fununit', 'Pa', 0);
model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'p_periodic');
model.func('an1').set('expr', 'p_point(t)');
model.func('an1').set('args', 't');
model.func('an1').set('periodic', true);
model.func('an1').set('periodiclower', '3*T0');
model.func('an1').set('periodicupper', '4*T0');
model.func('an1').setIndex('argunit', 's', 0);
model.func('an1').set('fununit', 'Pa');
model.func('an1').setIndex('plotargs', '4*T0', 0, 2);

model.modelNode.create('comp2', true);

model.physics.create('ge', 'GlobalEquations');
model.physics('ge').model('comp2');

model.study('std1').feature('stat').setSolveFor('/physics/ge', false);
model.study('std1').feature('time').setSolveFor('/physics/ge', false);

model.physics('ge').prop('EquationForm').set('form', 'Automatic');
model.physics('ge').feature('ge1').setIndex('name', 'P', 0, 0);
model.physics('ge').feature('ge1').setIndex('equation', 'P - p_periodic(t)', 0, 0);
model.physics('ge').feature('ge1').set('DependentVariableQuantity', 'pressure');
model.physics('ge').feature('ge1').set('SourceTermQuantity', 'pressure');

model.study.create('std2');
model.study('std2').create('time', 'Transient');
model.study('std2').feature('time').setSolveFor('/physics/mf', true);
model.study('std2').feature('time').setSolveFor('/physics/actd', true);
model.study('std2').feature('time').setSolveFor('/physics/solid', true);
model.study('std2').feature('time').setSolveFor('/physics/ge', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/asb1', true);
model.study('std2').feature('time').setSolveFor('/multiphysics/mmcpl1', true);
model.study('std2').feature('time').set('tlist', 'range(0, T0/200, 10*T0)');
model.study('std2').feature('time').setEntry('activate', 'mf', false);
model.study('std2').feature('time').setEntry('activate', 'actd', false);
model.study('std2').feature('time').setEntry('activate', 'solid', false);
model.study('std2').feature('time').setEntry('activate', 'frame:spatial1', false);
model.study('std2').feature('time').setEntry('activateCoupling', 'asb1', false);
model.study('std2').create('tffft', 'TimeToFreqFFT');
model.study('std2').feature('tffft').set('fftendtime', '10*T0');
model.study('std2').feature('tffft').set('fftmaxfreq', '10*f0');
model.study('std2').feature('tffft').setEntry('activate', 'mf', false);
model.study('std2').feature('tffft').setEntry('activate', 'actd', false);
model.study('std2').feature('tffft').setEntry('activate', 'solid', false);
model.study('std2').feature('tffft').setEntry('activate', 'frame:spatial1', false);
model.study('std2').feature('tffft').setEntry('activateCoupling', 'asb1', false);
model.study('std2').label('Study 2 - Periodic Signal Extraction and FFT');
model.study('std2').setGenPlots(false);

model.sol.create('sol4');

model.mesh('mesh39').stat.selection.geom(2);
model.mesh('mesh39').stat.selection.set([3 5]);
model.mesh('mesh39').stat.selection.geom(2);
model.mesh('mesh39').stat.selection.set([3 5]);

model.sol('sol4').study('std2');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std2');
model.sol('sol4').feature('st1').set('studystep', 'time');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol4').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1.028334089680975E-4');
model.sol('sol4').feature('v1').set('control', 'time');
model.sol('sol4').create('t1', 'Time');
model.sol('sol4').feature('t1').set('tlist', 'range(0, T0/200, 10*T0)');
model.sol('sol4').feature('t1').set('plot', 'off');
model.sol('sol4').feature('t1').set('plotgroup', 'pg1');
model.sol('sol4').feature('t1').set('plotfreq', 'tout');
model.sol('sol4').feature('t1').set('probesel', 'all');
model.sol('sol4').feature('t1').set('probes', {});
model.sol('sol4').feature('t1').set('probefreq', 'tsteps');
model.sol('sol4').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol4').feature('t1').set('endtimeinterpolation', true);
model.sol('sol4').feature('t1').set('control', 'time');
model.sol('sol4').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('t1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol4').feature('t1').feature.remove('fcDef');
model.sol('sol4').create('su1', 'StoreSolution');
model.sol('sol4').create('st2', 'StudyStep');
model.sol('sol4').feature('st2').set('study', 'std2');
model.sol('sol4').feature('st2').set('studystep', 'tffft');
model.sol('sol4').create('v2', 'Variables');
model.sol('sol4').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol4').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1.028334089680975E-4');
model.sol('sol4').feature('v2').set('initmethod', 'sol');
model.sol('sol4').feature('v2').set('initsol', 'sol4');
model.sol('sol4').feature('v2').set('initsoluse', 'sol5');
model.sol('sol4').feature('v2').set('notsolmethod', 'sol');
model.sol('sol4').feature('v2').set('notsol', 'sol4');
model.sol('sol4').feature('v2').set('control', 'tffft');
model.sol('sol4').create('fft1', 'FFT');
model.sol('sol4').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol4').feature('fft1').set('fftinputdata', 'fftperiodic');
model.sol('sol4').feature('fft1').set('fftoutorder', 'sym');
model.sol('sol4').feature('fft1').set('ffttranstype', 'transfft');
model.sol('sol4').feature('fft1').set('cname', 't');
model.sol('sol4').feature('fft1').set('clist', {'0'});
model.sol('sol4').feature('fft1').set('clistctrl', {'fft1_const'});
model.sol('sol4').feature('fft1').set('control', 'tffft');
model.sol('sol4').feature('v2').set('notsolnum', 'auto');
model.sol('sol4').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol4').attach('std2');
model.sol('sol4').feature('t1').set('timemethod', 'genalpha');
model.sol('sol4').feature('t1').set('tstepsgenalpha', 'manual');
model.sol('sol4').feature('t1').set('timestepgenalpha', '1/(6*f0)/60');
model.sol('sol4').runAll;

model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('SPL at Listening Point, FFT');
model.result('pg9').set('data', 'dset4');
model.result('pg9').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').setIndex('looplevel', [5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101], 0);
model.result('pg9').set('titletype', 'label');
model.result('pg9').set('xlabelactive', true);
model.result('pg9').set('xlabel', 'Frequency (Hz)');
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Sound Pressure Level (dB)');
model.result('pg9').set('xlog', true);
model.result('pg9').create('oct1', 'OctaveBand');
model.result('pg9').feature('oct1').set('quantity', 'bandpower');
model.result('pg9').feature('oct1').set('markerpos', 'datapoints');
model.result('pg9').feature('oct1').set('linewidth', 'preference');
model.result('pg9').feature('oct1').selection.geom('geom1');
model.result('pg9').feature('oct1').set('expr', 'comp2.P');
model.result('pg9').feature('oct1').set('quantity', 'continuous');
model.result('pg9').feature('oct1').set('legendmethod', 'manual');
model.result('pg9').feature('oct1').set('legend', true);
model.result('pg9').feature('oct1').setIndex('legends', 'Continous PSD', 0);
model.result('pg9').run;
model.result('pg9').create('oct2', 'OctaveBand');
model.result('pg9').feature('oct2').set('quantity', 'bandpower');
model.result('pg9').feature('oct2').set('markerpos', 'datapoints');
model.result('pg9').feature('oct2').set('linewidth', 'preference');
model.result('pg9').feature('oct2').selection.geom('geom1');
model.result('pg9').feature('oct2').set('expr', 'comp2.P');
model.result('pg9').feature('oct2').set('quantity', 'bandaveragepsd');
model.result('pg9').feature('oct2').set('bandtype', 'octave3');
model.result('pg9').feature('oct2').set('type', 'outline');
model.result('pg9').feature('oct2').set('legendmethod', 'manual');
model.result('pg9').feature('oct2').set('legend', true);
model.result('pg9').feature('oct2').setIndex('legends', '1/3 octave bands (PSD)', 0);
model.result('pg9').run;
model.result('pg9').feature.duplicate('oct3', 'oct1');
model.result('pg9').run;
model.result('pg9').feature('oct3').set('data', 'dset4');
model.result('pg9').feature('oct3').setIndex('looplevelinput', 'manualindices', 0);
model.result('pg9').feature('oct3').setIndex('looplevelindices', 'range(11, 10, 101)', 0);
model.result('pg9').feature('oct3').set('linestyle', 'none');
model.result('pg9').feature('oct3').set('linemarker', 'circle');
model.result('pg9').feature('oct3').set('legend', false);
model.result('pg9').feature('oct3').create('gmrk1', 'GraphMarker');
model.result('pg9').feature('oct3').feature('gmrk1').set('linewidth', 'preference');
model.result('pg9').run;
model.result('pg9').feature('oct3').feature('gmrk1').set('scope', 'local');
model.result('pg9').feature('oct3').feature('gmrk1').set('precision', 4);
model.result('pg9').feature('oct3').feature('gmrk1').set('includeunit', true);
model.result('pg9').run;
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('THD Evaluation');
model.result.numerical('gev1').set('data', 'dset4');
model.result.numerical('gev1').setIndex('looplevelinput', 'first', 0);
model.result.numerical('gev1').setIndex('expr', 'sqrt(sum(with(11 + 10*k, abs(comp2.P)^2), k, 1, 9))/with(11, abs(comp2.P))', 0);
model.result.numerical('gev1').setIndex('unit', 1, 0);
model.result.numerical('gev1').setIndex('descr', 'THD', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('THD Evaluation');
model.result.numerical('gev1').set('table', 'tbl2');
model.result.numerical('gev1').setResult;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').run;
model.result('pg10').label('Coil Power');
model.result('pg10').set('data', 'dset3');
model.result('pg10').setIndex('looplevelinput', 'interp', 0);
model.result('pg10').setIndex('interp', 'range(3*T0, T0/50, T_end)', 0);
model.result('pg10').set('titletype', 'label');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').set('expr', {'mf.PCoil_1'});
model.result('pg10').feature('glob1').set('descr', {'Coil power'});
model.result('pg10').feature('glob1').set('unit', {'W'});
model.result('pg10').run;
model.result.create('pg11', 'PlotGroup1D');
model.result('pg11').run;
model.result('pg11').label('Dynamic BL Force Factor');
model.result('pg11').set('data', 'dset3');
model.result('pg11').setIndex('looplevelinput', 'interp', 0);
model.result('pg11').setIndex('interp', 'range(3*T0, T0/50, T_end)', 0);
model.result('pg11').set('titletype', 'manual');
model.result('pg11').set('title', 'Dynamic BL Force Factor vs. Relative Position of the Voice Coil');
model.result('pg11').create('glob1', 'Global');
model.result('pg11').feature('glob1').set('markerpos', 'datapoints');
model.result('pg11').feature('glob1').set('linewidth', 'preference');
model.result('pg11').feature('glob1').setIndex('expr', 'aveop1(-mf.Br*N0*2*pi*r)', 0);
model.result('pg11').feature('glob1').setIndex('unit', 'T*m', 0);
model.result('pg11').feature('glob1').setIndex('descr', 'Dynamic Bl force factor', 0);
model.result('pg11').feature('glob1').set('xdata', 'expr');
model.result('pg11').feature('glob1').set('xdataexpr', 'aveop1(z - Z)');
model.result('pg11').feature('glob1').set('xdatadescractive', true);
model.result('pg11').feature('glob1').set('xdatadescr', 'Relative position of the coil');
model.result('pg11').run;
model.result('pg1').run;
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('expr', '1');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'black');
model.result('pg1').feature('surf2').set('wireframe', true);
model.result('pg1').feature('surf2').create('sel1', 'Selection');
model.result('pg1').feature('surf2').feature('sel1').selection.set([3]);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('surf3', 'Surface');
model.result('pg1').feature('surf3').set('expr', '1');
model.result('pg1').feature('surf3').set('coloring', 'uniform');
model.result('pg1').feature('surf3').set('color', 'custom');
model.result('pg1').feature('surf3').set('customcolor', [1 0 0.501960813999176]);
model.result('pg1').feature('surf3').create('sel1', 'Selection');
model.result('pg1').feature('surf3').feature('sel1').selection.named('sel2');
model.result('pg1').run;
model.result('pg1').create('surf4', 'Surface');
model.result('pg1').feature('surf4').set('expr', '1');
model.result('pg1').feature('surf4').set('coloring', 'uniform');
model.result('pg1').feature('surf4').set('color', 'custom');
model.result('pg1').feature('surf4').set('customcolor', [1 0.501960813999176 0.250980406999588]);
model.result('pg1').feature('surf4').create('sel1', 'Selection');
model.result('pg1').feature('surf4').feature('sel1').selection.named('sel1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').set('looplevel', {'interp'});
model.result('pg1').set('interp', [0.044]);
model.result('pg1').run;
model.result('pg1').set('interp', [0.048]);
model.result('pg1').run;
model.result('pg1').set('interp', [0.052]);
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').set('looplevel', {'interp'});
model.result('pg3').set('interp', [0.044]);
model.result('pg3').run;
model.result('pg3').set('interp', [0.048]);
model.result('pg3').run;
model.result('pg3').set('interp', [0.052]);
model.result('pg3').run;

model.view.create('view3', 2);
model.view('view3').axis.set('xmin', '0.0');
model.view('view3').axis.set('xmax', 0.054);
model.view('view3').axis.set('ymin', -0.088);
model.view('view3').axis.set('ymax', -0.05);

model.result('pg1').run;
model.result.duplicate('pg12', 'pg1');
model.result('pg12').run;
model.result('pg12').label('Relative Permeability');
model.result('pg12').set('title', 'Relative Permeability');
model.result('pg12').set('view', 'view3');
model.result('pg12').run;
model.result('pg12').feature('surf1').set('expr', 'mf.normB/(mu0*mf.normH)');
model.result('pg12').feature('surf1').set('colortable', 'Thermal');
model.result('pg12').feature('surf1').set('colortabletrans', 'none');
model.result('pg12').run;
model.result('pg12').feature('str2').active(false);
model.result('pg12').run;
model.result('pg12').feature('surf2').active(false);
model.result('pg12').run;
model.result('pg12').set('interp', [0.044]);
model.result('pg12').run;
model.result('pg12').set('interp', [0.048]);
model.result('pg12').run;
model.result('pg12').set('interp', [0.052]);
model.result('pg12').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').set('data', 'dset3');
model.result('pg13').label('Relative Position of Voice Coil');
model.result('pg13').setIndex('looplevelinput', 'interp', 0);
model.result('pg13').setIndex('interp', 'range(3*T0, T0/25, T_end)', 0);
model.result('pg13').set('titletype', 'label');
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Relative position of the coil (m)');
model.result('pg13').set('showlegends', false);
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').setIndex('expr', 'aveop1(z - Z)', 0);
model.result('pg13').feature('glob1').setIndex('unit', 'm', 0);
model.result('pg13').feature('glob1').setIndex('descr', 'Average 1', 0);
model.result('pg13').run;
model.result('pg13').create('glob2', 'Global');
model.result('pg13').feature('glob2').set('markerpos', 'datapoints');
model.result('pg13').feature('glob2').set('linewidth', 'preference');
model.result('pg13').feature('glob2').set('data', 'dset3');
model.result('pg13').feature('glob2').setIndex('looplevelinput', 'interp', 0);
model.result('pg13').feature('glob2').setIndex('interp', 0.044, 0);
model.result('pg13').feature('glob2').setIndex('expr', 'aveop1(z - Z)', 0);
model.result('pg13').feature('glob2').setIndex('unit', 'm', 0);
model.result('pg13').feature('glob2').setIndex('descr', 'Average 1', 0);
model.result('pg13').feature('glob2').set('linemarker', 'circle');
model.result('pg13').feature('glob2').set('markerpos', 'interp');
model.result('pg13').feature('glob2').set('linestyle', 'none');
model.result('pg13').feature.duplicate('glob3', 'glob2');
model.result('pg13').run;
model.result('pg13').feature('glob3').setIndex('interp', 0.048, 0);
model.result('pg13').feature.duplicate('glob4', 'glob3');
model.result('pg13').run;
model.result('pg13').feature('glob4').setIndex('interp', 0.052, 0);
model.result('pg13').run;
model.result('pg13').run;

model.title(['Loudspeaker Driver ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Transient Analysis']);

model.description(['This model presents a full transient analysis of a loudspeaker driver, which allows the modeling of nonlinear effects. It extends the linear frequency-domain analysis done in the Loudspeaker Driver tutorial model.' newline  newline 'The analysis accounts for nonlinear behavior of the soft iron in the magnetic system, geometric nonlinearities in the structures, and nonlinear effects due to the topology change when the voice coil is moving in and out of the magnetic gap. The model uses the moving mesh feature and automatic remeshing to capture the topology changes and the movement of the voice coil.' newline  newline 'The output includes the total harmonic distortion (THD) and the dynamic BL curve. The model also describes how to calculate the intermodulation distortion (IMD).' newline  newline 'The model requires the Acoustics Module and the AC/DC Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;

model.label('loudspeaker_driver_transient.mph');

model.modelNode.label('Components');

out = model;
