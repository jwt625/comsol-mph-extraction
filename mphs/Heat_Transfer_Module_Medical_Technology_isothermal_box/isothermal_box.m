function out = model
%
% isothermal_box.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Medical_Technology');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ht', 'HeatTransfer', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ht', true);

model.param.set('box_w', '40[cm]');
model.param.descr('box_w', 'Box width');
model.param.set('box_d', '40[cm]');
model.param.descr('box_d', 'Box depth');
model.param.set('box_h', '24[cm]');
model.param.descr('box_h', 'Box height');
model.param.set('content_w', '24[cm]');
model.param.descr('content_w', 'Content width');
model.param.set('content_d', '24[cm]');
model.param.descr('content_d', 'Content depth');
model.param.set('content_h', '20[cm]');
model.param.descr('content_h', 'Content height');
model.param.set('ice_t', '2[cm]');
model.param.descr('ice_t', 'Eutectic plates thickness');
model.param.set('foam_t', '4[cm]');
model.param.descr('foam_t', 'Foam layers thickness');
model.param.set('lid_t', '4[cm]');
model.param.descr('lid_t', 'Box lid thickness');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'box_w' 'box_d' 'box_h'});
model.geom('geom1').run('fin');
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'content_w' 'content_d' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'content_h', 2);
model.geom('geom1').feature('blk2').set('pos', {'(box_w-content_w)/2' '0' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '(box_d-content_d)/2', 1);
model.geom('geom1').feature('blk2').setIndex('pos', 'box_h-content_h', 2);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Content');
model.geom('geom1').feature('blk2').set('contributeto', 'csel1');
model.geom('geom1').run('fin');

model.view('view1').set('transparency', true);

model.geom('geom1').run('blk2');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').set('size', {'ice_t' 'content_d' '1'});
model.geom('geom1').feature('blk3').setIndex('size', 'content_h', 2);
model.geom('geom1').feature('blk3').set('pos', {'box_w-foam_t-ice_t' '0' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', '(box_d-content_d)/2', 1);
model.geom('geom1').feature('blk3').setIndex('pos', 'box_h-content_h', 2);
model.geom('geom1').selection.create('csel2', 'CumulativeSelection');
model.geom('geom1').selection('csel2').label('Ice');
model.geom('geom1').feature('blk3').set('contributeto', 'csel2');
model.geom('geom1').run('fin');
model.geom('geom1').feature.duplicate('blk4', 'blk3');
model.geom('geom1').feature('blk4').setIndex('pos', 'foam_t', 0);
model.geom('geom1').run('fin');
model.geom('geom1').run('blk4');
model.geom('geom1').create('blk5', 'Block');
model.geom('geom1').feature('blk5').set('size', {'content_w' 'ice_t' '1'});
model.geom('geom1').feature('blk5').setIndex('size', 'content_h', 2);
model.geom('geom1').feature('blk5').set('pos', {'(box_w-content_w)/2' '0' '0'});
model.geom('geom1').feature('blk5').setIndex('pos', 'foam_t', 1);
model.geom('geom1').feature('blk5').setIndex('pos', 'box_h-content_h', 2);
model.geom('geom1').feature('blk5').set('contributeto', 'csel2');
model.geom('geom1').run('fin');
model.geom('geom1').feature.duplicate('blk6', 'blk5');
model.geom('geom1').feature('blk6').setIndex('pos', 'box_d-foam_t-ice_t', 1);
model.geom('geom1').run('fin');
model.geom('geom1').run('blk6');
model.geom('geom1').create('blk7', 'Block');
model.geom('geom1').feature('blk7').set('size', {'(box_w-content_w)/2-foam_t' '1' '1'});
model.geom('geom1').feature('blk7').setIndex('size', '(box_d-content_d)/2-foam_t', 1);
model.geom('geom1').feature('blk7').setIndex('size', 'content_h', 2);
model.geom('geom1').feature('blk7').set('pos', {'foam_t' 'foam_t' '0'});
model.geom('geom1').feature('blk7').setIndex('pos', 'box_h-content_h', 2);
model.geom('geom1').selection.create('csel3', 'CumulativeSelection');
model.geom('geom1').selection('csel3').label('Empty Space');
model.geom('geom1').feature('blk7').set('contributeto', 'csel3');
model.geom('geom1').run('fin');
model.geom('geom1').feature.duplicate('blk8', 'blk7');
model.geom('geom1').feature('blk8').setIndex('pos', '(box_w+content_w)/2', 0);
model.geom('geom1').run('fin');
model.geom('geom1').feature.duplicate('blk9', 'blk8');
model.geom('geom1').feature('blk9').setIndex('pos', '(box_d+content_d)/2', 1);
model.geom('geom1').run('fin');
model.geom('geom1').feature.duplicate('blk10', 'blk9');
model.geom('geom1').feature('blk10').setIndex('pos', 'foam_t', 0);
model.geom('geom1').run('fin');
model.geom('geom1').run('blk10');
model.geom('geom1').create('blk11', 'Block');
model.geom('geom1').feature('blk11').set('size', {'box_w' 'box_d' 'lid_t'});
model.geom('geom1').feature('blk11').set('pos', {'0' '0' 'box_h'});
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Foam');
model.selection('sel1').set([1 2]);
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Thin Air Resistive Layers');
model.selection('adj1').set('input', {'sel1' 'geom1_csel1_dom'});
model.selection('adj1').set('exterior', false);
model.selection('adj1').set('interior', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Exterior Surfaces');
model.selection('sel2').all;
model.selection('sel2').geom('geom1', 3, 2, {'exterior'});
model.selection('sel2').all;

model.probe.create('dom1', 'Domain');
model.probe('dom1').model('comp1');
model.probe('dom1').set('intsurface', true);
model.probe('dom1').set('intvolume', true);
model.probe('dom1').label('Content Minimum');
model.probe('dom1').set('type', 'minimum');
model.probe('dom1').selection.named('geom1_csel1_dom');
model.probe('dom1').set('unit', 'degC');
model.probe.create('dom2', 'Domain');
model.probe('dom2').model('comp1');
model.probe('dom2').set('intsurface', true);
model.probe('dom2').set('intvolume', true);
model.probe('dom2').label('Content Average');
model.probe('dom2').selection.named('geom1_csel1_dom');
model.probe('dom2').set('unit', 'degC');
model.probe.create('dom3', 'Domain');
model.probe('dom3').model('comp1');
model.probe('dom3').set('intsurface', true);
model.probe('dom3').set('intvolume', true);
model.probe('dom3').label('Content Maximum');
model.probe('dom3').set('type', 'maximum');
model.probe('dom3').selection.named('geom1_csel1_dom');
model.probe('dom3').set('unit', 'degC');
model.probe.create('dom4', 'Domain');
model.probe('dom4').model('comp1');
model.probe('dom4').set('intsurface', true);
model.probe('dom4').set('intvolume', true);
model.probe('dom4').label('Ice Average');
model.probe('dom4').selection.named('geom1_csel2_dom');
model.probe('dom4').set('unit', 'degC');

model.physics('ht').create('fluid1', 'FluidHeatTransferModel', 3);
model.physics('ht').feature('fluid1').selection.named('geom1_csel2_dom');
model.physics('ht').feature('fluid1').create('phc1', 'PhaseChangeMaterial', 3);
model.physics('ht').create('fls1', 'FluidLayeredShell', 2);
model.physics('ht').feature('fls1').selection.named('adj1');
model.physics('ht').create('sls1', 'SolidLayeredShell', 2);
model.physics('ht').feature('sls1').selection.named('geom1_csel2_bnd');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Foam');
model.material('mat1').selection.named('sel1');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'0.03'});
model.material('mat1').propertyGroup('def').set('density', {'25'});
model.material('mat1').propertyGroup('def').set('heatcapacity', {'2'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Content Material');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'1'});
model.material('mat2').propertyGroup('def').set('density', {'2000'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'800'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat3').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat3').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat3').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat3').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat3').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat3').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat3').label('Air');
model.material('mat3').set('family', 'air');
model.material('mat3').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat3').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat3').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat3').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat3').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat3').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat3').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat3').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat3').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat3').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat3').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat3').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat3').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat3').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat3').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat3').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat3').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat3').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat3').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat3').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat3').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat3').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat3').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat3').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat3').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat3').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat3').propertyGroup('def').set('molarmass', '');
model.material('mat3').propertyGroup('def').set('bulkviscosity', '');
model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat3').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat3').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat3').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat3').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat3').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat3').propertyGroup('def').addInput('temperature');
model.material('mat3').propertyGroup('def').addInput('pressure');
model.material('mat3').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat3').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat3').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat3').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat3').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat3').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat3').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat3').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat3').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat3').propertyGroup('idealGas').addInput('temperature');
model.material('mat3').propertyGroup('idealGas').addInput('pressure');
model.material('mat3').materialType('nonSolid');
model.material('mat3').selection.named('geom1_csel3_dom');
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Water');
model.material('mat4').selection.named('geom1_csel2_dom');
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'0.6'});
model.material('mat4').propertyGroup('def').set('density', {'1000'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'4200'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Ice');
model.material('mat5').selection.named('geom1_csel2_dom');
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'2.3'});
model.material('mat5').propertyGroup('def').set('density', {'1000'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'2050'});
model.material.create('mat6', 'Common', 'comp1');
model.material('mat6').label('Eutectic Plates Package');
model.material('mat6').selection.geom('geom1', 2);
model.material('mat6').selection.named('geom1_csel2_bnd');
model.material('mat6').propertyGroup('def').set('thermalconductivity', {'0.3'});
model.material('mat6').propertyGroup('def').set('density', {'1050'});
model.material('mat6').propertyGroup('def').set('heatcapacity', {'20'});
model.material('mat6').propertyGroup.create('shell', 'Shell');
model.material('mat6').propertyGroup('shell').set('lth', {'300[um]'});
model.material.create('mat7', 'Common', 'comp1');
model.material('mat7').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat7').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat7').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat7').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat7').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat7').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat7').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat7').label('Air 1');
model.material('mat7').set('family', 'air');
model.material('mat7').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat7').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat7').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat7').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat7').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat7').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat7').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat7').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat7').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat7').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat7').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat7').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat7').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat7').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat7').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat7').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat7').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat7').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat7').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat7').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat7').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat7').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat7').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat7').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat7').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat7').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat7').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat7').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat7').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat7').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat7').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat7').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat7').propertyGroup('def').set('molarmass', '');
model.material('mat7').propertyGroup('def').set('bulkviscosity', '');
model.material('mat7').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat7').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat7').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat7').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat7').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat7').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat7').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat7').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat7').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat7').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat7').propertyGroup('def').addInput('temperature');
model.material('mat7').propertyGroup('def').addInput('pressure');
model.material('mat7').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat7').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat7').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat7').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat7').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat7').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat7').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat7').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat7').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat7').propertyGroup('idealGas').addInput('temperature');
model.material('mat7').propertyGroup('idealGas').addInput('pressure');
model.material('mat7').materialType('nonSolid');
model.material('mat7').label('Air Boundaries');
model.material('mat7').selection.geom('geom1', 2);
model.material('mat7').selection.named('adj1');
model.material('mat7').propertyGroup.create('shell', 'Shell');
model.material('mat7').propertyGroup('shell').set('lth', {'50[um]'});

model.common.create('ampr1', 'AmbientProperties', 'comp1');
model.common('ampr1').set('AmbientData', 'MeteorologicalData2021');
model.common('ampr1').set('ashrae2021Station', '083910');
model.common('ampr1').setIndex('ashrae2021LocalTime', 10, 0);

model.physics('ht').feature('fluid1').feature('phc1').set('dT_pc12', 3.5);
model.physics('ht').feature('fluid1').feature('phc1').set('MaterialPhase1', 'mat5');
model.physics('ht').feature('fluid1').feature('phc1').set('MaterialPhase2', 'mat4');
model.physics('ht').create('id1', 'IsothermalDomain', 3);
model.physics('ht').feature('id1').selection.named('geom1_csel3_dom');
model.physics('ht').feature('idi1').set('InterfaceType', 'ConvectiveHeatFlux');
model.physics('ht').feature('idi1').set('h', 5);
model.physics('ht').feature('init1').set('Tinit', '20[degC]');
model.physics('ht').create('init2', 'init', 3);
model.physics('ht').feature('init2').selection.named('geom1_csel1_dom');
model.physics('ht').feature('init2').set('Tinit', '5[degC]');
model.physics('ht').create('init3', 'init', 3);
model.physics('ht').feature('init3').selection.named('geom1_csel2_dom');
model.physics('ht').feature('init3').set('Tinit', '-5[degC]');
model.physics('ht').create('hf1', 'HeatFluxBoundary', 2);
model.physics('ht').feature('hf1').selection.named('sel2');
model.physics('ht').feature('hf1').set('HeatFluxType', 'ConvectiveHeatFlux');
model.physics('ht').feature('hf1').set('h', 5);
model.physics('ht').feature('hf1').set('Text_src', 'root.comp1.ampr1.T_amb');

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('geom1_csel2_dom');
model.mesh('mesh1').feature('ftet1').feature.create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('hauto', 2);
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('ftet2', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'h');
model.study('std1').feature('time').set('tlist', 'range(0,3,72)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', '1e-3');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,3,72)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'dom1' 'dom2' 'dom3' 'dom4'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ht_TextFace' 'global' 'comp1_ht_TextFaceIso' 'global' 'comp1_T' 'global' 'comp1_ht_id1_T' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_ht_TextFace' '1e-3' 'comp1_ht_TextFaceIso' '1e-3' 'comp1_T' '1e-3' 'comp1_ht_id1_T' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ht_TextFace' 'factor' 'comp1_ht_TextFaceIso' 'factor' 'comp1_T' 'factor' 'comp1_ht_id1_T' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, heat transfer variables (ht)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 10000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, heat transfer variables (ht)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 2);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.9);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'once');
model.sol('sol1').feature('t1').feature('fc1').set('damp', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('stabacc', 'aacc');
model.sol('sol1').feature('t1').feature('fc1').set('aaccdim', 5);
model.sol('sol1').feature('t1').feature('fc1').set('aaccmix', 0.9);
model.sol('sol1').feature('t1').feature('fc1').set('aaccdelay', 1);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.probe('dom1').genResult('none');
model.probe('dom2').genResult('none');
model.probe('dom3').genResult('none');
model.probe('dom4').genResult('none');

model.sol('sol1').runAll;

model.result.dataset.create('lshl1', 'LayeredMaterial');
model.result.dataset('lshl1').set('data', 'dset1');
model.result.dataset('lshl1').selection.geom('geom1', 2);
model.result.dataset('lshl1').selection.set([6 14 15 16 17 19 23 25 27 28 29 30 32 33 34 35 36 37 39 40 41 42 43 44 45 46 51 53 58 60 61 62 63 64 66]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Temperature (ht)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 25, 0);
model.result('pg2').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond2/pcond1/pg1');
model.result('pg2').selection.geom('geom1', 3);
model.result('pg2').selection.set([1 2 3 4 5 6 7 8 9 10 11]);
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Domain');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('solutionparams', 'parent');
model.result('pg2').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg2').feature('vol1').set('smooth', 'internal');
model.result('pg2').feature('vol1').set('showsolutionparams', 'on');
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature.create('vol2', 'Volume');
model.result('pg2').feature('vol2').label('Layered Shell');
model.result('pg2').feature('vol2').set('data', 'lshl1');
model.result('pg2').feature('vol2').setIndex('looplevel', 25, 0);
model.result('pg2').feature('vol2').set('solutionparams', 'parent');
model.result('pg2').feature('vol2').set('titletype', 'none');
model.result('pg2').feature('vol2').set('smooth', 'internal');
model.result('pg2').feature('vol2').set('data', 'lshl1');
model.result('pg2').feature('vol2').set('inheritplot', 'vol1');
model.result('pg2').feature.create('line1', 'Line');
model.result('pg2').feature('line1').label('Layered Shell Edges');
model.result('pg2').feature('line1').set('data', 'lshl1');
model.result('pg2').feature('line1').setIndex('looplevel', 25, 0);
model.result('pg2').feature('line1').set('solutionparams', 'parent');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('titletype', 'none');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'fromtheme');
model.result('pg2').feature('line1').set('smooth', 'internal');
model.result('pg2').feature('line1').set('data', 'lshl1');
model.result('pg2').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').label('Content Temperature');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Temperature of the probes over time');
model.result('pg1').set('xlabelactive', true);
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Temperature (degC)');
model.result('pg1').set('data', 'dset2');
model.result('pg1').set('legendpos', 'uppermiddle');
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').feature('tblp1').set('linewidth', 2);
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'Content minimum', 0);
model.result('pg1').feature('tblp1').setIndex('legends', 'Content average', 1);
model.result('pg1').feature('tblp1').setIndex('legends', 'Content maximum', 2);
model.result('pg1').feature('tblp1').setIndex('legends', 'Ice average', 3);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').create('glob1', 'Global');
model.result('pg1').feature('glob1').set('markerpos', 'datapoints');
model.result('pg1').feature('glob1').set('linewidth', 'preference');
model.result('pg1').feature('glob1').setIndex('expr', '2[degC]', 0);
model.result('pg1').feature('glob1').setIndex('unit', 'degC', 0);
model.result('pg1').feature('glob1').setIndex('descr', 'Temperature restriction, lower bound', 0);
model.result('pg1').feature('glob1').set('titletype', 'none');
model.result('pg1').feature('glob1').set('linestyle', 'dotted');
model.result('pg1').feature('glob1').set('linecolor', 'blue');
model.result('pg1').feature('glob1').set('legend', false);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').create('glob2', 'Global');
model.result('pg1').feature('glob2').set('markerpos', 'datapoints');
model.result('pg1').feature('glob2').set('linewidth', 'preference');
model.result('pg1').feature('glob2').setIndex('expr', '8[degC]', 0);
model.result('pg1').feature('glob2').setIndex('unit', 'degC', 0);
model.result('pg1').feature('glob2').setIndex('descr', 'Temperature restriction, upper bound', 0);
model.result('pg1').feature('glob2').set('titletype', 'none');
model.result('pg1').feature('glob2').set('linestyle', 'dotted');
model.result('pg1').feature('glob2').set('linecolor', 'red');
model.result('pg1').feature('glob2').set('legend', false);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 9, 0);
model.result('pg2').run;
model.result('pg2').feature('vol1').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').feature('vol2').set('unit', 'degC');
model.result('pg2').run;
model.result('pg2').create('iso1', 'Isosurface');
model.result('pg2').feature('iso1').set('expr', 'ht.alpha12');
model.result('pg2').feature('iso1').set('descr', 'Phase transition between phase 1 and phase 2');
model.result('pg2').feature('iso1').set('levelmethod', 'levels');
model.result('pg2').feature('iso1').set('levels', 0.5);
model.result('pg2').feature('iso1').set('coloring', 'uniform');
model.result('pg2').feature('iso1').set('color', 'white');
model.result('pg2').feature('iso1').set('colorlegend', false);
model.result('pg2').run;
model.result.numerical.create('av1', 'AvVolume');
model.result.numerical('av1').selection.set([4]);
model.result.numerical('av1').setIndex('expr', 'ht.theta1', 0);
model.result.numerical('av1').setIndex('unit', 1, 0);
model.result.numerical('av1').setIndex('descr', '', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Volume Average 1');
model.result.numerical('av1').set('table', 'tbl2');
model.result.numerical('av1').setResult;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Ice Fraction');
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Volume fraction (1)');
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'Ice fraction in eutectic plates');
model.result('pg3').create('tblp1', 'Table');
model.result('pg3').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg3').feature('tblp1').set('linewidth', 'preference');
model.result('pg3').feature('tblp1').set('table', 'tbl2');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Ambient Temperature');
model.result('pg4').set('showlegends', false);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'ampr1.T_amb'});
model.result('pg4').feature('glob1').set('descr', {'Ambient temperature'});
model.result('pg4').feature('glob1').set('unit', {'K'});
model.result('pg4').feature('glob1').setIndex('unit', 'degC', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Ambient temperature', 0);
model.result('pg4').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;

model.title('Isothermal Box');

model.description(['This example solves the heat transfer in an isothermal box aimed at transporting refrigerated articles such as medical materials for 24' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'hours. In this case, the box not only has to keep the content cold in a long period of time, but also has to respect a storage temperature restriction. In this model, the restriction interval is between 2' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C and 8' native2unicode(hex2dec({'00' 'b0'}), 'unicode') 'C.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('isothermal_box.mph');

model.modelNode.label('Components');

out = model;
