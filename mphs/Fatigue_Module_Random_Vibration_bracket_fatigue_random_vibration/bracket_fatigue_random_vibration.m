function out = model
%
% bracket_fatigue_random_vibration.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fatigue_Module/Random_Vibration');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'native');
model.geom('geom1').feature('imp1').set('filename', 'bracket.mphbin');
model.geom('geom1').feature('imp1').importData;

model.param.set('elSize', '6[mm]');
model.param.descr('elSize', 'Element Size');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Partition block');
model.geom('geom1').feature('blk1').set('contributeto', 'csel1');
model.geom('geom1').feature('blk1').set('size', [0.025 0.13 0.04]);
model.geom('geom1').feature('blk1').set('pos', [-0.11 -0.12 0.025]);
model.geom('geom1').run('blk1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').named('csel1');
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').feature('mir1').set('contributeto', 'csel1');
model.geom('geom1').run('mir1');
model.geom('geom1').create('mir2', 'Mirror');
model.geom('geom1').feature('mir2').selection('input').named('csel1');
model.geom('geom1').feature('mir2').set('keep', true);
model.geom('geom1').feature('mir2').set('axis', [1 0 0]);
model.geom('geom1').feature('mir2').set('contributeto', 'csel1');
model.geom('geom1').run('mir2');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'imp1'});
model.geom('geom1').feature('par1').selection('tool').named('csel1');
model.geom('geom1').run('par1');
model.geom('geom1').run('fin');
model.geom('geom1').run('par1');
model.geom('geom1').create('cm1', 'CentroidMeasurement');
model.geom('geom1').feature('cm1').selection('ent').set('par1', [2 5]);
model.geom('geom1').run('cm1');
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleX', 0);
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleY', 1);
model.geom('geom1').feature('cm1').setIndex('parname', 'PinHoleZ', 2);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Bolt 1');
model.selection('sel1').geom(2);
model.selection('sel1').set([41]);
model.selection('sel1').set('groupcontang', true);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Bolt 2');
model.selection('sel2').geom(2);
model.selection('sel2').set([43]);
model.selection('sel2').set('groupcontang', true);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Bolt 3');
model.selection('sel3').geom(2);
model.selection('sel3').set([55]);
model.selection('sel3').set('groupcontang', true);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Bolt 4');
model.selection('sel4').geom(2);
model.selection('sel4').set([57]);
model.selection('sel4').set('groupcontang', true);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Bolt Holes');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel1' 'sel2' 'sel3' 'sel4'});
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Left Pin Hole');
model.selection('sel5').geom(2);
model.selection('sel5').set([4]);
model.selection('sel5').set('groupcontang', true);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Right Pin Hole');
model.selection('sel6').geom(2);
model.selection('sel6').set([75]);
model.selection('sel6').set('groupcontang', true);
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Pin Holes');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'sel5' 'sel6'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Bolt Hole Edges');
model.selection('adj1').set('entitydim', 2);
model.selection('adj1').set('outputdim', 1);
model.selection('adj1').set('input', {'uni1'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup('Enu').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup('Enu').func.create('int2', 'Interpolation');
model.material('mat1').propertyGroup.create('Murnaghan', 'Murnaghan');
model.material('mat1').propertyGroup.create('ElastoplasticModel', 'Elastoplastic material model');
model.material('mat1').propertyGroup('ElastoplasticModel').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Ludwik', 'Ludwik');
model.material('mat1').propertyGroup('Ludwik').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('JohnsonCook', 'Johnson-Cook');
model.material('mat1').propertyGroup.create('Swift', 'Swift');
model.material('mat1').propertyGroup.create('Voce', 'Voce');
model.material('mat1').propertyGroup('Voce').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('HockettSherby', 'Hockett-Sherby');
model.material('mat1').propertyGroup('HockettSherby').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('ArmstrongFrederick', 'Armstrong-Frederick');
model.material('mat1').propertyGroup('ArmstrongFrederick').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('Norton', 'Norton');
model.material('mat1').propertyGroup.create('Garofalo', 'Garofalo (hyperbolic sine)');
model.material('mat1').propertyGroup.create('ChabocheViscoplasticity', 'Chaboche viscoplasticity');
model.material('mat1').label('Structural steel');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customspecular', [0.7843137254901961 0.7843137254901961 0.7843137254901961]);
model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.6666666666666666]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.9);
model.material('mat1').set('roughness', 0.3);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('lossfactor', '0.02');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '475[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]' '0' '0' '0' '44.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]' '0' '0' '0' '4.032e6[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]' '0' '0' '0' '12.3e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('density', '7850[kg/m^3]');
model.material('mat1').propertyGroup('Enu').func('int1').set('funcname', 'E');
model.material('mat1').propertyGroup('Enu').func('int1').set('table', {'293.15' '200e9'; '793.15' '166.6e9'});
model.material('mat1').propertyGroup('Enu').func('int1').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int1').set('fununit', {'Pa'});
model.material('mat1').propertyGroup('Enu').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').func('int2').set('funcname', 'nu');
model.material('mat1').propertyGroup('Enu').func('int2').set('table', {'293.15' '0.30'; '793.15' '0.315'});
model.material('mat1').propertyGroup('Enu').func('int2').set('extrap', 'linear');
model.material('mat1').propertyGroup('Enu').func('int2').set('fununit', {'1'});
model.material('mat1').propertyGroup('Enu').func('int2').set('argunit', {'K'});
model.material('mat1').propertyGroup('Enu').set('E', 'E(T)');
model.material('mat1').propertyGroup('Enu').set('nu', 'nu(T)');
model.material('mat1').propertyGroup('Enu').addInput('temperature');
model.material('mat1').propertyGroup('Murnaghan').set('l', '-3.0e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('m', '-6.2e11[Pa]');
model.material('mat1').propertyGroup('Murnaghan').set('n', '-7.2e11[Pa]');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ElastoplasticModel').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmags', '350[MPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Et', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('Ek', '1.045[GPa]*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').set('sigmagh', '1.050[GPa]*epe*a(T)');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('temperature');
model.material('mat1').propertyGroup('ElastoplasticModel').addInput('effectiveplasticstrain');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Ludwik').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Ludwik').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Ludwik').set('k_lud', '560[MPa]*a(T)');
model.material('mat1').propertyGroup('Ludwik').set('n_lud', '0.61');
model.material('mat1').propertyGroup('Ludwik').addInput('temperature');
model.material('mat1').propertyGroup('JohnsonCook').set('k_jcook', '560[MPa]');
model.material('mat1').propertyGroup('JohnsonCook').set('n_jcook', '0.61');
model.material('mat1').propertyGroup('JohnsonCook').set('C_jcook', '0.12');
model.material('mat1').propertyGroup('JohnsonCook').set('epet0_jcook', '1[1/s]');
model.material('mat1').propertyGroup('JohnsonCook').set('m_jcook', '0.6');
model.material('mat1').propertyGroup('Swift').set('e0_swi', '0.021');
model.material('mat1').propertyGroup('Swift').set('n_swi', '0.2');
model.material('mat1').propertyGroup('Voce').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('Voce').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('Voce').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('Voce').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('Voce').set('sigma_voc', '249[MPa]*a(T)');
model.material('mat1').propertyGroup('Voce').set('beta_voc', '9.3');
model.material('mat1').propertyGroup('Voce').addInput('temperature');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('HockettSherby').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('HockettSherby').set('sigma_hoc', '684[MPa]*a(T)');
model.material('mat1').propertyGroup('HockettSherby').set('m_hoc', '3.9');
model.material('mat1').propertyGroup('HockettSherby').set('n_hoc', '0.85');
model.material('mat1').propertyGroup('HockettSherby').addInput('temperature');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('funcname', 'a');
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('table', {'600' '1'; '1100' '0.1'; '1643' '0'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('ArmstrongFrederick').func('int1').set('argunit', {'K'});
model.material('mat1').propertyGroup('ArmstrongFrederick').set('Ck', '2.070[GPa]*a(T)');
model.material('mat1').propertyGroup('ArmstrongFrederick').set('gammak', '8.0');
model.material('mat1').propertyGroup('ArmstrongFrederick').addInput('temperature');
model.material('mat1').propertyGroup('Norton').set('A_nor', '1.2e-15[1/s]');
model.material('mat1').propertyGroup('Norton').set('sigRef_nor', '1[MPa]');
model.material('mat1').propertyGroup('Norton').set('n_nor', '4.5');
model.material('mat1').propertyGroup('Garofalo').set('A_gar', '1e-6[1/s]');
model.material('mat1').propertyGroup('Garofalo').set('sigRef_gar', '100[MPa]');
model.material('mat1').propertyGroup('Garofalo').set('n_gar', '4.6');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('A_cha', '1');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('sigRef_cha', '490[MPa]');
model.material('mat1').propertyGroup('ChabocheViscoplasticity').set('n_cha', '9');

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.named('uni1');

model.mesh('mesh1').create('edg1', 'Edge');
model.mesh('mesh1').feature('edg1').selection.named('adj1');
model.mesh('mesh1').feature('edg1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('edg1').feature('dis1').set('numelem', 8);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([1 4 5 6 9]);
model.mesh('mesh1').feature('swe1').selection('sourceface').set([1 33 37 50 72]);
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'elSize');
model.mesh('mesh1').feature('size').set('hauto', 4);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'elSize');
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([24 28 63 70]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hauto', 1);
model.mesh('mesh1').run;

model.title('Bracket Geometry');

model.description('This is a base for all bracket tutorials, which contains the bracket geometry.');

model.label('bracket_basic.mph');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').setSolveFor('/physics/solid', true);
model.study.create('std2');
model.study('std2').create('mr', 'ModelReduction');
model.study('std2').feature('mr').setSolveFor('/physics/solid', true);

model.common.create('grmi1', 'GlobalReducedModelInputs', '');

model.reduced.create('rom1', 'ModalFrequency');
model.reduced.create('rvib1', 'RandomVibration');
model.reduced('rvib1').set('frequencyResponseModel', 'rom1');

model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 12);
model.study('std1').feature('eig').set('shiftactive', true);
model.study('std1').feature('eig').set('shift', '1');
model.study('std2').setGenPlots(false);
model.study('std2').setGenConv(false);
model.study('std2').feature('mr').set('trainingStudy', 'std1');
model.study('std2').feature('mr').set('trainingStep', 'eig');
model.study('std2').feature('mr').feature.create('freq1', 'Frequency');
model.study('std2').feature('mr').feature('freq1').set('plist', '100');
model.study('std2').feature('mr').set('unreducedModelStudy', 'std2');
model.study('std2').feature('mr').set('unreducedModelStep', 'freq1');
model.study('std2').feature('mr').set('romdata', 'rom1');

model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('InputParameters', 'DampingRatios');
model.physics('solid').feature('lemm1').feature('dmp1').set('f1', 400);
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta1', 0.05);
model.physics('solid').feature('lemm1').feature('dmp1').set('f2', 700);
model.physics('solid').feature('lemm1').feature('dmp1').set('zeta2', 0.03);

model.study('std1').feature('eig').set('useadvanceddisable', true);
model.study('std1').feature('eig').set('disabledphysics', {'solid/lemm1/dmp1'});

model.common('grmi1').setIndex('name', 'Fx', 0);
model.common('grmi1').setIndex('expression', '100[N]', 0);
model.common('grmi1').setIndex('name', 'Fz', 1);
model.common('grmi1').setIndex('expression', '100[N]', 1);

model.physics('solid').create('rig1', 'RigidConnector', 2);
model.physics('solid').feature('rig1').selection.named('uni2');
model.physics('solid').prop('PhysicsSymbols').set('PhysicsSymbols', true);
model.physics('solid').feature('rig1').setIndex('Direction', true, 1);
model.physics('solid').feature('rig1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('solid').feature('rig1').setIndex('ConstrainedRotation', true, 0);
model.physics('solid').feature('rig1').setIndex('ConstrainedRotation', true, 1);
model.physics('solid').feature('rig1').setIndex('ConstrainedRotation', true, 2);
model.physics('solid').feature('rig1').create('rf1', 'RigidBodyForce', -1);
model.physics('solid').feature('rig1').feature('rf1').set('Ft', {'Fx' '0' 'Fz'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('U', 'at3(0, 0, -0.045, u)');
model.variable('var1').descr('U', 'Displacement, X component');
model.variable('var1').set('W', 'at3(0, 0, -0.045, w)');
model.variable('var1').descr('W', 'Displacement, Z component');

model.study('std2').feature('mr').feature('freq1').set('plist', 500);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_disp').set('scaleval', '0.0042275879647855966');
model.sol('sol1').feature('v1').feature('comp1_solid_rig_rot').set('scaleval', '0.01');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.42275879647855963');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '4.2299999999999996E-7');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').label('Mode Shape (solid)');
model.result('pg1').set('showlegends', false);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'solid.disp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std1EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std1EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid');
model.result.evaluationGroup('std1EvgFrq').set('data', 'dset1');
model.result.evaluationGroup('std1EvgFrq').label('Eigenfrequencies (Study 1)');
model.result.evaluationGroup('std1EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std1EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std1EvgFrq').run;
model.result('pg1').run;

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'mr');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_disp').set('scaleval', '0.0042275879647855966');
model.sol('sol2').feature('v1').feature('comp1_solid_rig_rot').set('scaleval', '0.01');
model.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.42275879647855963');
model.sol('sol2').feature('v1').set('control', 'mr');
model.sol('sol2').create('mor1', 'ModalReduction');
model.sol('sol2').feature('mor1').set('analysistype', 'frequency');
model.sol('sol2').feature('mor1').set('control', 'mr');
model.sol('sol2').create('st2', 'StudyStep');
model.sol('sol2').feature('st2').set('study', 'std2');
model.sol('sol2').feature('st2').set('studystep', 'mr');
model.sol('sol2').feature('st2').set('useForModelReduction', false);
model.sol('sol2').feature('mor1').set('control', 'mr');
model.sol('sol2').feature('mor1').feature('aDef').set('cachepattern', true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result('pg1').run;

model.func.create('int1', 'Interpolation');
model.func('int1').label('PSD of load');
model.func('int1').set('funcname', 'PSD');
model.func('int1').setIndex('table', 400, 0, 0);
model.func('int1').setIndex('table', 0.01, 0, 1);
model.func('int1').setIndex('table', 500, 1, 0);
model.func('int1').setIndex('table', '5^2', 1, 1);
model.func('int1').setIndex('table', 600, 2, 0);
model.func('int1').setIndex('table', '10^2', 2, 1);
model.func('int1').setIndex('table', 700, 3, 0);
model.func('int1').setIndex('table', '3^2', 3, 1);
model.func('int1').setIndex('table', 800, 4, 0);
model.func('int1').setIndex('table', 0.01, 4, 1);
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').setIndex('fununit', 'N^2/Hz', 0);
model.func('int1').set('argtrans', 'logarithmic');
model.func('int1').set('valtrans', 'logarithmic');

model.reduced('rvib1').setIndex('powerSpectralDensity', 'PSD(freq+250[Hz])', 0);
model.reduced('rvib1').setIndex('powerSpectralDensity', 'PSD(freq)', 1);
model.reduced('rvib1').set('fLow', 150);
model.reduced('rvib1').set('fHigh', 800);

model.sol('sol2').updateSolution;

model.result.numerical.create('gevs1', 'EvalGlobalSweep');
model.result.numerical('gevs1').set('data', 'dset2');
model.result.numerical('gevs1').setIndex('pname', 'freq', 0);
model.result.numerical('gevs1').setIndex('plistarr', 'range(150,5,800)[Hz]', 0);
model.result.numerical('gevs1').setIndex('expr', 'PSD(freq+250[Hz])', 0);
model.result.numerical('gevs1').setIndex('unit', 'N^2/Hz', 0);
model.result.numerical('gevs1').setIndex('descr', 'PSD of load, X component', 0);
model.result.numerical('gevs1').setIndex('expr', 'PSD(freq)', 1);
model.result.numerical('gevs1').setIndex('unit', 'N^2/Hz', 1);
model.result.numerical('gevs1').setIndex('descr', 'PSD of load, Z component', 1);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Global Evaluation Sweep 1');
model.result.numerical('gevs1').set('table', 'tbl1');
model.result.numerical('gevs1').setResult;
model.result.create('pg2', 'PlotGroup1D');
model.result('pg2').set('data', 'none');
model.result('pg2').create('tblp1', 'Table');
model.result('pg2').feature('tblp1').set('source', 'table');
model.result('pg2').feature('tblp1').set('table', 'tbl1');
model.result('pg2').feature('tblp1').set('linewidth', 'preference');
model.result('pg2').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg2').run;
model.result('pg2').feature('tblp1').set('linemarker', 'cycle');
model.result('pg2').feature('tblp1').set('markerpos', 'interp');
model.result('pg2').feature('tblp1').set('legend', true);
model.result('pg2').set('xlog', true);
model.result('pg2').set('ylog', true);
model.result('pg2').run;
model.result('pg2').label('PSD of Loads');
model.result('pg2').set('legendpos', 'middleleft');
model.result.numerical.create('gevs2', 'EvalGlobalSweep');
model.result.numerical('gevs2').setIndex('pname', 'freq', 0);
model.result.numerical('gevs2').setIndex('plistarr', 'range(150,5,800)[Hz]', 0);
model.result.numerical('gevs2').setIndex('expr', 'rvib1.psd(U)', 0);
model.result.numerical('gevs2').setIndex('unit', 'm^2/Hz', 0);
model.result.numerical('gevs2').setIndex('descr', 'PSD of U displacement', 0);
model.result.numerical('gevs2').setIndex('expr', 'rvib1.psd(W)', 1);
model.result.numerical('gevs2').setIndex('unit', 'm^2/Hz', 1);
model.result.numerical('gevs2').setIndex('descr', 'PSD of W displacement', 1);
model.result.numerical('gevs2').set('data', 'dset2');
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Global Evaluation Sweep 2');
model.result.numerical('gevs2').set('table', 'tbl2');
model.result.numerical('gevs2').setResult;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').set('data', 'none');
model.result('pg3').create('tblp1', 'Table');
model.result('pg3').feature('tblp1').set('source', 'table');
model.result('pg3').feature('tblp1').set('table', 'tbl2');
model.result('pg3').feature('tblp1').set('linewidth', 'preference');
model.result('pg3').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg3').run;
model.result('pg3').feature('tblp1').set('linemarker', 'cycle');
model.result('pg3').feature('tblp1').set('markerpos', 'interp');
model.result('pg3').set('xlog', true);
model.result('pg3').feature('tblp1').set('legend', true);
model.result('pg3').run;
model.result('pg3').label('PSD of Displacements');
model.result('pg3').set('legendpos', 'uppermiddle');
model.result.numerical.create('gevs3', 'EvalGlobalSweep');
model.result.numerical('gevs3').setIndex('pname', 'freq', 0);
model.result.numerical('gevs3').setIndex('plistarr', 'range(150,5,800)[Hz]', 0);
model.result.numerical('gevs3').setIndex('expr', 'real(rvib1.cross(U,W))', 0);
model.result.numerical('gevs3').setIndex('unit', 'm^2/Hz', 0);
model.result.numerical('gevs3').setIndex('descr', 'Cross-correlation of U and W, real part', 0);
model.result.numerical('gevs3').setIndex('expr', 'imag(rvib1.cross(U,W))', 1);
model.result.numerical('gevs3').setIndex('unit', 'm^2/Hz', 1);
model.result.numerical('gevs3').setIndex('descr', 'Cross-correlation of U and W, imaginary part', 1);
model.result.numerical('gevs3').setIndex('expr', 'abs(rvib1.cross(U,W))', 2);
model.result.numerical('gevs3').setIndex('unit', 'm^2/Hz', 2);
model.result.numerical('gevs3').setIndex('descr', 'Cross-correlation of U and W, absolute value', 2);
model.result.numerical('gevs3').set('data', 'dset2');
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Global Evaluation Sweep 3');
model.result.numerical('gevs3').set('table', 'tbl3');
model.result.numerical('gevs3').setResult;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').set('data', 'none');
model.result('pg4').create('tblp1', 'Table');
model.result('pg4').feature('tblp1').set('source', 'table');
model.result('pg4').feature('tblp1').set('table', 'tbl3');
model.result('pg4').feature('tblp1').set('linewidth', 'preference');
model.result('pg4').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg4').run;
model.result('pg4').set('xlog', true);
model.result('pg4').feature('tblp1').set('legend', true);
model.result('pg4').run;
model.result('pg4').label('Cross Correlation (U,V)');
model.result('pg4').set('xlabelactive', true);
model.result('pg4').set('xlabel', 'Frequency [Hz]');
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Cross correlation (U,V) [m^2/Hz]');
model.result('pg4').set('legendpos', 'upperleft');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('PSD, u-displacement');
model.result('pg5').set('data', 'dset2');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'rvib1.psd(u)');
model.result('pg5').feature('surf1').set('descractive', true);
model.result('pg5').feature('surf1').set('descr', 'Displacement, X component, PSD');
model.result('pg5').feature('surf1').set('unit', 'm^2/Hz');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('PSD, w-displacement');
model.result('pg6').run;
model.result('pg6').feature('surf1').set('expr', 'rvib1.psd(w)');
model.result('pg6').feature('surf1').set('descr', 'Displacement, Z component, PSD');
model.result('pg6').run;
model.result.setOnlyPlotWhenRequested(true);
model.result.duplicate('pg7', 'pg5');
model.result('pg7').label('RMS, u-displacement');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('solutionintitle', false);
model.result('pg7').feature('surf1').set('expr', 'rvib1.rms(u)');
model.result('pg7').feature('surf1').set('descr', 'Displacement, X component, RMS');
model.result('pg7').feature('surf1').set('colortable', 'Prism');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').label('RMS, w-displacement');
model.result('pg8').feature('surf1').set('expr', 'rvib1.rms(w)');
model.result('pg8').feature('surf1').set('descr', 'Displacement, Z component, RMS');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('RMS, von Mises stress');
model.result('pg9').set('data', 'dset2');
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', 'rvib1.q2sq(solid.mises_rv)');
model.result('pg9').feature('surf1').set('descractive', true);
model.result('pg9').feature('surf1').set('descr', 'Stress, von Mises, RMS');
model.result('pg9').feature('surf1').set('colortable', 'Prism');
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').label('RMS, displacement');
model.result('pg10').feature('surf1').set('expr', 'rvib1.q2sq(solid.disp_rv)');
model.result('pg10').feature('surf1').set('descr', 'Displacement, magnitude, RMS');
model.result('pg10').run;
model.result.duplicate('pg11', 'pg10');
model.result('pg11').label('RMS, acceleration');
model.result('pg11').feature('surf1').set('expr', 'rvib1.q2sq(solid.utt_rv)');
model.result('pg11').feature('surf1').set('descr', 'Acceleration, magnitude, RMS');
model.result('pg11').run;

model.title(['Bracket ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Random Vibration Analysis']);

model.description('This tutorial example shows how to perform a random vibration analysis of a structure using power spectral density (PSD). The computations are based on the modal reduced-order model (ROM).');

model.label('bracket_random_vibration.mph');

model.param.set('b', '-0.25');
model.param.descr('b', 'Basquin exponent');
model.param.set('sigf', '2.2[GPa]');
model.param.descr('sigf', 'Basquin strength coefficient');

model.physics.create('ftg', 'Fatigue', 'geom1');
model.physics('ftg').model('comp1');

model.study('std1').feature('eig').setSolveFor('/physics/ftg', true);

model.physics('ftg').create('rand1', 'RandomFatigueModel', 2);
model.physics('ftg').feature('rand1').selection.all;
model.physics('ftg').feature('rand1').set('rv', 'rvib1');
model.physics('ftg').feature('rand1').set('fatigueInputPhysics', 'solid');
model.physics('ftg').feature('rand1').set('fl', 150);
model.physics('ftg').feature('rand1').set('fu', 800);
model.physics('ftg').feature('rand1').set('ftgCriterion', 'Basquin');
model.physics('ftg').feature('rand1').set('sigmaf_Basquin_mat', 'userdef');
model.physics('ftg').feature('rand1').set('sigmaf_Basquin', 'sigf');
model.physics('ftg').feature('rand1').set('b_Basquin_mat', 'userdef');
model.physics('ftg').feature('rand1').set('b_Basquin', 'b');
model.physics('ftg').feature('rand1').set('Lcut', '1e3[h]');
model.physics('ftg').feature.duplicate('rand2', 'rand1');
model.physics('ftg').feature('rand2').set('cyclecountingmodel', 'bendat');

model.study.create('std3');
model.study('std3').create('ftge', 'Fatigue');
model.study('std3').feature('ftge').set('solnum', 'auto');
model.study('std3').feature('ftge').set('usesol', 'off');
model.study('std3').feature('ftge').setSolveFor('/physics/solid', true);
model.study('std3').feature('ftge').setSolveFor('/physics/ftg', true);

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'ftge');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'ftge');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').attach('std3');
model.sol('sol3').runAll;

model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset4');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', {'ftg.life'});
model.result('pg12').feature('surf1').set('colortable', 'Rainbow');
model.result('pg12').feature('surf1').set('colortabletrans', 'none');
model.result('pg12').feature('surf1').set('colorscalemode', 'logarithmic');
model.result('pg12').feature('surf1').set('colortablerev', true);
model.result('pg12').feature('surf1').set('colortable', 'Traffic');
model.result('pg12').label('Fatigue Life (ftg)');
model.result('pg12').feature('surf1').create('mrkr1', 'Marker');
model.result('pg12').feature('surf1').feature('mrkr1').set('precision', 3);
model.result('pg12').feature('surf1').feature('mrkr1').set('display', 'min');
model.result('pg12').label('Fatigue Life (Dirlik)');
model.result('pg12').feature('surf1').set('expr', 'ftg.rand1.life');
model.result('pg12').feature('surf1').set('descr', 'Fatigue life');
model.result('pg12').feature('surf1').set('unit', 'h');
model.result('pg12').feature('surf1').feature('mrkr1').set('backgroundcolor', 'fromtheme');
model.result('pg12').feature('surf1').feature('mrkr1').set('anchorpoint', 'lowerleft');
model.result('pg12').run;
model.result.duplicate('pg13', 'pg12');
model.result('pg13').label('Fatigue Life (Bendat)');
model.result('pg13').feature('surf1').set('expr', 'ftg.rand2.life');
model.result('pg13').run;

model.title(['Bracket ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Random Vibration Fatigue']);

model.description('This example shows how to perform a fatigue analysis of a structure subjected to random vibrations.');

model.label('bracket_fatigue_random_vibration.mph');

model.modelNode.label('Components');

out = model;
