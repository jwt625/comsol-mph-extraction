function out = model
%
% failure_prediction_in_a_layered_shell.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');
model.physics.create('shell2', 'Shell', 'geom1');
model.physics('shell2').model('comp1');
model.physics.create('shell3', 'Shell', 'geom1');
model.physics('shell3').model('comp1');
model.physics.create('shell4', 'Shell', 'geom1');
model.physics('shell4').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/shell', true);
model.study('std1').feature('stat').setSolveFor('/physics/shell2', true);
model.study('std1').feature('stat').setSolveFor('/physics/shell3', true);
model.study('std1').feature('stat').setSolveFor('/physics/shell4', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('th', '0.05e-3[m]', 'Ply thickness');
model.param.set('Ftotal', '15[N]', 'Total edge load');
model.param.set('E1', '207[GPa]', 'Young''s modulus 11');
model.param.set('E2', '7.6[GPa]', 'Young''s modulus 22');
model.param.set('E3', 'E2', 'Young''s modulus 33');
model.param.set('nu12', '0.3', 'Poisson''s ratio 12');
model.param.set('nu23', '0', 'Poisson''s ratio 23');
model.param.set('G', '5[GPa]', 'Shear modulus');
model.param.set('Sigmats1', '500[MPa]', 'Tensile strength 11');
model.param.set('Sigmats2', '5[MPa]', 'Tensile strength 22');
model.param.set('Sigmats3', 'Sigmats2', 'Tensile strength 33');
model.param.set('Sigmacs1', '350[MPa]', 'Compressive strength 11');
model.param.set('Sigmacs2', '75[MPa]', 'Compressive strength 22');
model.param.set('Sigmacs3', 'Sigmacs2', 'Compressive strength 33');
model.param.set('Sigmass23', '35[MPa]', 'Shear strength 23');
model.param.set('Sigmass13', 'Sigmass23', 'Shear strength 13');
model.param.set('Sigmass12', 'Sigmass23', 'Shear strength 12');

model.coordSystem.create('sys2', 'geom1', 'Rotated');

model.geom('geom1').run;

model.coordSystem('sys2').set('angle', {'pi/2' '0' '0'});
model.coordSystem.duplicate('sys3', 'sys2');
model.coordSystem('sys3').set('angle', {'-pi/4' '0' '0'});
model.coordSystem.duplicate('sys4', 'sys3');
model.coordSystem('sys4').set('angle', {'pi/4' '0' '0'});

model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').geom.create('sq1', 'Square');
model.geom('geom1').feature('wp1').geom.feature('sq1').set('size', '1e-2');
model.geom('geom1').feature('wp1').geom.run('sq1');
model.geom('geom1').run;

model.material.create('mat1', 'Common', 'comp1');

model.physics('shell').label('Ply 1');
model.physics('shell').tag('shell1');
model.physics('shell1').prop('z').set('z', 0);
model.physics('shell1').prop('ShapeProperty').set('order_displacement', 1);
model.physics('shell1').feature('to1').set('d', 'th');
model.physics('shell1').feature('to1').set('OffsetDefinition', 'RelativeDistance');
model.physics('shell1').feature('to1').set('z_offset_rel', -3);
model.physics('shell1').feature('emm1').set('SolidModel', 'Orthotropic');
model.physics('shell1').feature('emm1').set('TransverseIsotropic', true);
model.physics('shell1').feature('emm1').feature('shls1').set('coordinateSystem', 'sys2');
model.physics('shell2').label('Ply 2');
model.physics('shell2').prop('ShapeProperty').set('order_displacement', 1);
model.physics('shell2').prop('z').set('z', 0);
model.physics('shell2').field('displacement').field('u');
model.physics('shell2').field('dimensionless_displacement').field('ar');
model.physics('shell2').feature('to1').set('d', 'th');
model.physics('shell2').feature('to1').set('OffsetDefinition', 'RelativeDistance');
model.physics('shell2').feature('to1').set('z_offset_rel', -1);
model.physics('shell2').feature('emm1').set('SolidModel', 'Orthotropic');
model.physics('shell2').feature('emm1').set('TransverseIsotropic', true);
model.physics('shell2').feature('emm1').feature('shls1').set('coordinateSystem', 'sys3');
model.physics('shell3').label('Ply 3');
model.physics('shell3').prop('ShapeProperty').set('order_displacement', 1);
model.physics('shell3').prop('z').set('z', 0);
model.physics('shell3').field('displacement').field('u');
model.physics('shell3').field('dimensionless_displacement').field('ar');
model.physics('shell3').feature('to1').set('d', 'th');
model.physics('shell3').feature('to1').set('OffsetDefinition', 'RelativeDistance');
model.physics('shell3').feature('to1').set('z_offset_rel', 1);
model.physics('shell3').feature('emm1').set('SolidModel', 'Orthotropic');
model.physics('shell3').feature('emm1').set('TransverseIsotropic', true);
model.physics('shell3').feature('emm1').feature('shls1').set('coordinateSystem', 'sys4');
model.physics('shell4').label('Ply 4');
model.physics('shell4').prop('ShapeProperty').set('order_displacement', 1);
model.physics('shell4').prop('z').set('z', 0);
model.physics('shell4').field('displacement').field('u');
model.physics('shell4').field('dimensionless_displacement').field('ar');
model.physics('shell4').feature('to1').set('d', 'th');
model.physics('shell4').feature('to1').set('OffsetDefinition', 'RelativeDistance');
model.physics('shell4').feature('to1').set('z_offset_rel', 3);
model.physics('shell4').feature('emm1').set('SolidModel', 'Orthotropic');
model.physics('shell4').feature('emm1').set('TransverseIsotropic', true);

model.material('mat1').propertyGroup.create('TransverseIsotropic', 'Transversely_isotropic');
model.material('mat1').propertyGroup('TransverseIsotropic').set('Evect', {'E1' 'E2'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('nuvect', {'nu12' 'nu23'});
model.material('mat1').propertyGroup('TransverseIsotropic').set('Gvect1', {'G'});
model.material('mat1').propertyGroup('def').set('density', {'1500'});

model.physics('shell1').feature('emm1').create('sf1', 'Safety', 2);
model.physics('shell1').feature('emm1').feature('sf1').label(['Safety: Tsai' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Wu Orthotropic, Plane Stress Criterion']);
model.physics('shell1').feature('emm1').feature('sf1').set('FailureCriterion', 'Tsai-Wu Orthotropic');
model.physics('shell1').feature('emm1').feature('sf1').set('usePlaneStressVersion', true);
model.physics('shell1').feature('emm1').feature.duplicate('sf2', 'sf1');
model.physics('shell1').feature('emm1').feature('sf2').label('Safety: Hoffman Criterion');
model.physics('shell1').feature('emm1').feature('sf2').set('FailureCriterion', 'Hoffman');
model.physics('shell1').feature('emm1').feature.duplicate('sf3', 'sf2');
model.physics('shell1').feature('emm1').feature('sf3').label(['Safety: Tsai' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Hill, Plane Stress Criterion']);
model.physics('shell1').feature('emm1').feature('sf3').set('FailureCriterion', 'Tsai-Hill');
model.physics('shell1').feature('emm1').feature.duplicate('sf4', 'sf3');
model.physics('shell1').feature('emm1').feature('sf4').label(['Safety: Azzi' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Tsai' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Hill Criterion']);
model.physics('shell1').feature('emm1').feature('sf4').set('FailureCriterion', 'Azzi-Tsai-Hill');
model.physics('shell1').feature('emm1').feature.duplicate('sf5', 'sf4');
model.physics('shell1').feature('emm1').feature('sf5').label('Safety: Norris Criterion');
model.physics('shell1').feature('emm1').feature('sf5').set('FailureCriterion', 'Norris');
model.physics('shell1').feature('emm1').feature.duplicate('sf6', 'sf5');
model.physics('shell1').feature('emm1').feature('sf6').label(['Safety: Tsai' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Wu Anisotropic Criterion']);
model.physics('shell1').feature('emm1').feature('sf6').set('FailureCriterion', 'Tsai-Wu Anisotropic');

model.material('mat1').propertyGroup.create('OrthotropicStrengthParameters', 'Orthotropic_strength_parameters_in_Voigt_notation');
model.material('mat1').propertyGroup('OrthotropicStrengthParameters').set('sigmats', {'Sigmats1' 'Sigmats2' 'Sigmats3'});
model.material('mat1').propertyGroup('OrthotropicStrengthParameters').set('sigmacs', {'Sigmacs1' 'Sigmacs2' 'Sigmacs3'});
model.material('mat1').propertyGroup('OrthotropicStrengthParameters').set('sigmass', {'Sigmass23' 'Sigmass13' 'Sigmass12'});
model.material('mat1').propertyGroup.create('AnisotropicStrengthParameters', 'Anisotropic_strength_parameters_in_Voigt_notation');
model.material('mat1').propertyGroup('AnisotropicStrengthParameters').set('F_s', {'1/Sigmats1-1/Sigmacs1' '1/Sigmats2-1/Sigmacs2' '1/Sigmats3-1/Sigmacs3' '0' '0' '0'});
model.material('mat1').propertyGroup('AnisotropicStrengthParameters').set('F_f', {'1/(Sigmats1*Sigmacs1)' '-0.5*sqrt(1/((Sigmats1*Sigmacs1)*(Sigmats2*Sigmacs2)))' '1/(Sigmats2*Sigmacs2)' '-0.5*sqrt(1/((Sigmats1*Sigmacs1)*(Sigmats3*Sigmacs3)))' '-0.5*sqrt(1/((Sigmats2*Sigmacs2)*(Sigmats3*Sigmacs3)))' '1/(Sigmats3*Sigmacs3)' '0' '0' '0' '1/Sigmass23^2'  ...
'0' '0' '0' '0' '1/Sigmass13^2' '0' '0' '0' '0' '0'  ...
'1/Sigmass12^2'});

model.physics('shell2').feature('emm1').feature.copy('sf1', 'shell1/emm1/sf1');
model.physics('shell2').feature('emm1').feature.copy('sf2', 'shell1/emm1/sf2');
model.physics('shell2').feature('emm1').feature.copy('sf3', 'shell1/emm1/sf3');
model.physics('shell2').feature('emm1').feature.copy('sf4', 'shell1/emm1/sf4');
model.physics('shell2').feature('emm1').feature.copy('sf5', 'shell1/emm1/sf5');
model.physics('shell2').feature('emm1').feature.copy('sf6', 'shell1/emm1/sf6');
model.physics('shell3').feature('emm1').feature.copy('sf1', 'shell1/emm1/sf1');
model.physics('shell3').feature('emm1').feature.copy('sf2', 'shell1/emm1/sf2');
model.physics('shell3').feature('emm1').feature.copy('sf3', 'shell1/emm1/sf3');
model.physics('shell3').feature('emm1').feature.copy('sf4', 'shell1/emm1/sf4');
model.physics('shell3').feature('emm1').feature.copy('sf5', 'shell1/emm1/sf5');
model.physics('shell3').feature('emm1').feature.copy('sf6', 'shell1/emm1/sf6');
model.physics('shell4').feature('emm1').feature.copy('sf1', 'shell1/emm1/sf1');
model.physics('shell4').feature('emm1').feature.copy('sf2', 'shell1/emm1/sf2');
model.physics('shell4').feature('emm1').feature.copy('sf3', 'shell1/emm1/sf3');
model.physics('shell4').feature('emm1').feature.copy('sf4', 'shell1/emm1/sf4');
model.physics('shell4').feature('emm1').feature.copy('sf5', 'shell1/emm1/sf5');
model.physics('shell4').feature('emm1').feature.copy('sf6', 'shell1/emm1/sf6');
model.physics('shell1').create('fix1', 'Fixed', 0);
model.physics('shell1').feature('fix1').selection.set([1]);
model.physics('shell1').create('el1', 'EdgeLoad', 1);
model.physics('shell1').feature('el1').selection.set([4]);
model.physics('shell1').feature('el1').set('LoadTypeForce', 'TotalForce');
model.physics('shell1').feature('el1').set('FeTot', {'Ftotal/4' '0' '0'});
model.physics('shell2').feature.copy('fix1', 'shell1/fix1');
model.physics('shell2').feature.copy('el1', 'shell1/el1');
model.physics('shell3').feature.copy('fix1', 'shell1/fix1');
model.physics('shell3').feature.copy('el1', 'shell1/el1');
model.physics('shell4').feature.copy('fix1', 'shell1/fix1');
model.physics('shell4').feature.copy('el1', 'shell1/el1');
model.physics('shell2').create('disp1', 'Displacement0', 0);
model.physics('shell2').feature('disp1').selection.set([2]);
model.physics('shell2').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('shell2').feature('disp1').setIndex('U0', '-u0', 0);
model.physics('shell2').create('ge1', 'GlobalEquations', -1);
model.physics('shell2').feature('ge1').setIndex('name', 'u0', 0, 0);
model.physics('shell2').feature('ge1').set('DependentVariableQuantity', 'displacement');
model.physics('shell3').create('disp1', 'Displacement0', 0);
model.physics('shell3').feature('disp1').selection.set([2]);
model.physics('shell3').feature('disp1').setIndex('Direction', 'prescribed', 0);
model.physics('shell3').feature('disp1').setIndex('U0', 'u0', 0);

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.set([1]);
model.mesh('mesh1').feature('fq1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('fq1').feature('dis1').selection.all;
model.mesh('mesh1').feature('fq1').feature('dis1').set('numelem', 1);
model.mesh('mesh1').run;

model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature('fc1').set('termonres', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('reserrfact', 1000);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', '0.5e-2');
model.result.dataset('cpt1').set('pointy', '0.5e-2');
model.result.dataset('cpt1').set('pointz', 0);
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Failure Indices in Ply 1');
model.result.evaluationGroup('eg1').set('data', 'cpt1');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').create('pev1', 'EvalPoint');
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf1.f_im', 0);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic failure index, middle, plane stress', 0);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf2.f_im', 1);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Hoffman failure index, middle', 1);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf3.f_im', 2);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Tsai-Hill failure index, middle, plane stress', 2);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf4.f_im', 3);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill failure index, middle', 3);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf5.f_im', 4);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Norris failure index, middle', 4);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('expr', 'shell1.emm1.sf6.f_im', 5);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg1').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').label('Failure Indices in Ply 2');
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf1.f_im', 0);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic failure index, middle, plane stress', 0);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf2.f_im', 1);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Hoffman failure index, middle', 1);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf3.f_im', 2);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Tsai-Hill failure index, middle, plane stress', 2);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf4.f_im', 3);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill failure index, middle', 3);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf5.f_im', 4);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Norris failure index, middle', 4);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('expr', 'shell2.emm1.sf6.f_im', 5);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg2').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg2').run;
model.result.evaluationGroup.duplicate('eg3', 'eg2');
model.result.evaluationGroup('eg3').label('Failure Indices in Ply 3');
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf1.f_im', 0);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic failure index, middle, plane stress', 0);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf2.f_im', 1);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Hoffman failure index, middle', 1);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf3.f_im', 2);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Tsai-Hill failure index, middle, plane stress', 2);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf4.f_im', 3);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill failure index, middle', 3);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf5.f_im', 4);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Norris failure index, middle', 4);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('expr', 'shell3.emm1.sf6.f_im', 5);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg3').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg3').run;
model.result.evaluationGroup.duplicate('eg4', 'eg3');
model.result.evaluationGroup('eg4').label('Failure Indices in Ply 4');
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf1.f_im', 0);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic failure index, middle, plane stress', 0);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf2.f_im', 1);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Hoffman failure index, middle', 1);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf3.f_im', 2);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Tsai-Hill failure index, middle, plane stress', 2);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf4.f_im', 3);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill failure index, middle', 3);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf5.f_im', 4);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Norris failure index, middle', 4);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('expr', 'shell4.emm1.sf6.f_im', 5);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg4').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg4').run;
model.result.evaluationGroup.create('eg5', 'EvaluationGroup');
model.result.evaluationGroup('eg5').label('Safety Factors in Ply 1');
model.result.evaluationGroup('eg5').set('data', 'cpt1');
model.result.evaluationGroup('eg5').set('transpose', true);
model.result.evaluationGroup('eg5').create('pev1', 'EvalPoint');
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf1.s_fm', 0);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic safety factor, middle, plane stress', 0);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf2.s_fm', 1);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Hoffman safety factor, middle', 1);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf3.s_fm', 2);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Tsai-Hill safety factor, middle, plane stress', 2);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf4.s_fm', 3);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill safety factor, middle', 3);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf5.s_fm', 4);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Norris safety factor, middle', 4);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('expr', 'shell1.emm1.sf6.s_fm', 5);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg5').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg5').run;
model.result.evaluationGroup.duplicate('eg6', 'eg5');
model.result.evaluationGroup('eg6').label('Safety Factors in Ply 2');
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf1.s_fm', 0);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic safety factor, middle, plane stress', 0);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf2.s_fm', 1);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Hoffman safety factor, middle', 1);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf3.s_fm', 2);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Tsai-Hill safety factor, middle, plane stress', 2);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf4.s_fm', 3);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill safety factor, middle', 3);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf5.s_fm', 4);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Norris safety factor, middle', 4);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('expr', 'shell2.emm1.sf6.s_fm', 5);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg6').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg6').run;
model.result.evaluationGroup.duplicate('eg7', 'eg6');
model.result.evaluationGroup('eg7').label('Safety Factors in Ply 3');
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf1.s_fm', 0);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic safety factor, middle, plane stress', 0);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf2.s_fm', 1);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Hoffman safety factor, middle', 1);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf3.s_fm', 2);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Tsai-Hill safety factor, middle, plane stress', 2);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf4.s_fm', 3);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill safety factor, middle', 3);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf5.s_fm', 4);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Norris safety factor, middle', 4);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('expr', 'shell3.emm1.sf6.s_fm', 5);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg7').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg7').run;
model.result.evaluationGroup.duplicate('eg8', 'eg7');
model.result.evaluationGroup('eg8').label('Safety Factors in Ply 4');
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf1.s_fm', 0);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Tsai-Wu orthotropic safety factor, middle, plane stress', 0);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf2.s_fm', 1);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 1);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Hoffman safety factor, middle', 1);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf3.s_fm', 2);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 2);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Tsai-Hill safety factor, middle, plane stress', 2);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf4.s_fm', 3);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Azzi-Tsai-Hill safety factor, middle', 3);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf5.s_fm', 4);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 4);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Norris safety factor, middle', 4);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('expr', 'shell4.emm1.sf6.s_fm', 5);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('unit', 1, 5);
model.result.evaluationGroup('eg8').feature('pev1').setIndex('descr', 'Tsai-Wu anisotropic failure index, middle', 5);
model.result.evaluationGroup('eg8').run;
model.result.evaluationGroup.create('eg9', 'EvaluationGroup');
model.result.evaluationGroup('eg9').label('Stresses in Ply 1');
model.result.evaluationGroup('eg9').set('data', 'cpt1');
model.result.evaluationGroup('eg9').set('transpose', true);
model.result.evaluationGroup('eg9').create('pev1', 'EvalPoint');
model.result.evaluationGroup('eg9').feature('pev1').setIndex('expr', 'shell1.Sl11', 0);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('unit', 'N/m^2', 0);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 11 component', 0);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('expr', 'shell1.Sl22', 1);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('unit', 'N/m^2', 1);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 22 component', 1);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('expr', 'shell1.Sl12', 2);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('unit', 'N/m^2', 2);
model.result.evaluationGroup('eg9').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 12 component', 2);
model.result.evaluationGroup('eg9').run;
model.result.evaluationGroup.duplicate('eg10', 'eg9');
model.result.evaluationGroup('eg10').label('Stresses in Ply 2');
model.result.evaluationGroup('eg10').feature('pev1').setIndex('expr', 'shell2.Sl11', 0);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('unit', 'N/m^2', 0);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 11 component', 0);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('expr', 'shell2.Sl22', 1);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('unit', 'N/m^2', 1);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 22 component', 1);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('expr', 'shell2.Sl12', 2);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('unit', 'N/m^2', 2);
model.result.evaluationGroup('eg10').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 12 component', 2);
model.result.evaluationGroup('eg10').run;
model.result.evaluationGroup.duplicate('eg11', 'eg10');
model.result.evaluationGroup('eg11').label('Stresses in Ply 3');
model.result.evaluationGroup('eg11').feature('pev1').setIndex('expr', 'shell3.Sl11', 0);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('unit', 'N/m^2', 0);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 11 component', 0);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('expr', 'shell3.Sl22', 1);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('unit', 'N/m^2', 1);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 22 component', 1);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('expr', 'shell3.Sl12', 2);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('unit', 'N/m^2', 2);
model.result.evaluationGroup('eg11').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 12 component', 2);
model.result.evaluationGroup('eg11').run;
model.result.evaluationGroup.duplicate('eg12', 'eg11');
model.result.evaluationGroup('eg12').label('Stresses in Ply 4');
model.result.evaluationGroup('eg12').feature('pev1').setIndex('expr', 'shell4.Sl11', 0);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('unit', 'N/m^2', 0);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 11 component', 0);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('expr', 'shell4.Sl22', 1);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('unit', 'N/m^2', 1);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 22 component', 1);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('expr', 'shell4.Sl12', 2);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('unit', 'N/m^2', 2);
model.result.evaluationGroup('eg12').feature('pev1').setIndex('descr', 'Second Piola-Kirchhoff stress, local coordinate system, 12 component', 2);
model.result.evaluationGroup('eg12').run;
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('von Mises Stress');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'von Mises Stress (MPa)');
model.result('pg1').set('plotarrayenable', true);
model.result('pg1').set('arrayaxis', 'z');
model.result('pg1').set('displacementlinear', 'absolute');
model.result('pg1').set('celldisp', '30*th');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('arraydim', '1');
model.result('pg1').feature('surf1').set('expr', 'round(shell1.mises)');
model.result('pg1').feature('surf1').set('unit', 'MPa');
model.result('pg1').feature.duplicate('surf2', 'surf1');
model.result('pg1').feature('surf2').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf2').set('expr', 'round(shell2.mises)');
model.result('pg1').feature('surf2').set('colortable', 'Cyclic');
model.result('pg1').feature.duplicate('surf3', 'surf2');
model.result('pg1').feature('surf3').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf3').set('expr', 'round(shell3.mises)');
model.result('pg1').feature('surf3').set('colortable', 'Disco');
model.result('pg1').feature.duplicate('surf4', 'surf3');
model.result('pg1').feature('surf4').set('arraydim', '1');
model.result('pg1').run;
model.result('pg1').feature('surf4').set('expr', 'round(shell4.mises)');
model.result('pg1').feature('surf4').set('colortable', 'ThermalDark');
model.result('pg1').run;
model.result('pg1').set('legendpos', 'rightdouble');

model.view('view1').set('showgrid', false);

model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Hoffman Safety Factors');
model.result('pg2').set('title', 'Hoffman Safety Factor (1)');
model.result('pg2').feature('surf1').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'shell1.emm1.sf2.s_fm');
model.result('pg2').feature('surf2').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf2').set('expr', 'shell2.emm1.sf2.s_fm');
model.result('pg2').feature('surf3').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf3').set('expr', 'shell3.emm1.sf2.s_fm');
model.result('pg2').feature('surf4').set('arraydim', '1');
model.result('pg2').run;
model.result('pg2').feature('surf4').set('expr', 'shell4.emm1.sf2.s_fm');
model.result('pg2').run;
model.result('pg2').run;

model.title('Failure Prediction in a Layered Shell');

model.description('This example shows how to model a stack of shells using the Shell interface. The failure indices and safety factors for different criteria under uniaxial tension are compared to the results of a NAFEMS benchmark.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('failure_prediction_in_a_layered_shell.mph');

model.modelNode.label('Components');

out = model;
