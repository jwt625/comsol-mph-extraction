function out = model
%
% headphone_artificial_ear.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.param.label('Model parameters');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('fmax', '20.0[kHz]', 'Maximal frequency');
model.param.set('cair', '343[m/s]', 'Speed of sound in air');
model.param.set('cporo', '240[m/s]', 'Speed of sound of shear wave in porous domain');
model.param.set('lambda_air', 'cair/fmax', 'Resolved wavelength at fmax - air');
model.param.set('lambda_poro', 'cporo/fmax', 'Resolved wavelength at fmax - porous');
model.param.create('par2');
model.param('par2').label('Perforated plates parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('Radp1', '10 [mm]', 'Radius of the perforated plate 1');
model.param('par2').set('n1', '1', 'Number of circles defining the plate 1');
model.param('par2').set('dh1', '0.5 [mm]', 'Diameter of the holes in plate 1');
model.param('par2').set('tp1', '0.5 [mm]', 'Thickness of perforated plate 1');
model.param('par2').set('Nh1', '150', 'Number of holes in the perforated plate 1');
model.param('par2').set('sigma1', '(Nh1*pi*dh1^2)/(n1*pi*Radp1^2)', 'Porosity of the perforated plate 1');
model.param('par2').set('Radp2', '6 [mm]', 'Radius of the perforated plate 2');
model.param('par2').set('n2', '4', 'Number of circles defining the plate 2');
model.param('par2').set('dh2', '0.5 [mm]', 'Diameter of the holes in plate 2');
model.param('par2').set('tp2', '0.5 [mm]', 'Thickness of perforated plate 2');
model.param('par2').set('Nh2', '200', 'Number of holes in the perforated plate 2');
model.param('par2').set('sigma2', '(Nh2*pi*dh2^2)/(n2*pi*Radp2^2)', 'Porosity of the perforated plate 2');
model.param('par2').set('Radp3', '6 [mm]', 'Radius of the perforated plate 3');
model.param('par2').set('n3', '4', 'Number of circles defining the plate 3');
model.param('par2').set('dh3', '0.5 [mm]', 'Diameter of the holes in plate 3');
model.param('par2').set('tp3', '0.5 [mm]', 'Thickness of perforated plate 3');
model.param('par2').set('Nh3', '300', 'Number of holes in the perforated plate 3');
model.param('par2').set('sigma3', '(Nh3*pi*dh3^2)/(n3*pi*Radp3^2)', 'Porosity of the perforated plate 3');
model.param.create('par3');
model.param('par3').label('Thiele-Small Parameters');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('R_g', '0.8[ohm]', 'Cable resistance');
model.param('par3').set('n_e', '.7', 'Voice coil loss factor');
model.param('par3').set('R_E', '124.3[ohm]', 'Voice coil resistance');
model.param('par3').set('L_e', '5.53[mH]', 'Voice coil inductance (constant)');
model.param('par3').set('C_MS', '2.51e-3[m/N]', 'Suspension compliance');
model.param('par3').set('R_MS', '12.9e-3[N*s/m]', 'Suspension mechanical losses');
model.param('par3').set('M_MD', '314.9[ug]', 'Moving mass (voice coil and diaphragm)');
model.param('par3').set('BL', '4.56[T*m]', 'Force factor, flux density (B) times coil length (L)');
model.param('par3').set('V0', '200*sqrt(2)[mV]', 'Driving voltage (peak)');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'headphone_artificial_ear_geometry.mphbin');
model.geom('geom1').feature('imp1').importData;

model.view('view1').set('renderwireframe', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').label('Foam');
model.selection('sel1').set([15 16 17 18 19 20]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Moving membrane positive');
model.selection('sel2').geom(2);
model.selection('sel2').set([150 152 156 158]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Moving membrane negative');
model.selection('sel3').geom(2);
model.selection('sel3').set([151 153 157 159]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Interior sound hard boundary');
model.selection('sel4').geom(2);
model.selection('sel4').set([126 127 128 129 146 147 148 149 154 155 160 161]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Eardrum');
model.selection('sel5').geom(2);
model.selection('sel5').set([333]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').geom(2);
model.selection('sel6').label('Skin with PML');
model.selection('sel6').set([289 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 334 335]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Skin without PML');
model.selection('sel7').geom(2);
model.selection('sel7').set([289 317 318 319 320 321 322 324 325 326 327 328]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('PML sides');
model.selection('sel8').set([3 4 22 25]);
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('PML corners');
model.selection('sel9').set([1 2 5 6 21 23 24 26]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('PML caps');
model.selection('sel10').set([7 9]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Perforated plate 1');
model.selection('sel11').geom(2);
model.selection('sel11').set([32]);
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Perforated plate 2');
model.selection('sel12').geom(2);
model.selection('sel12').set([88 95 98 113]);
model.selection.create('sel13', 'Explicit');
model.selection('sel13').model('comp1');
model.selection('sel13').label('Perforated plate 3');
model.selection('sel13').geom(2);
model.selection('sel13').set([272 273 282 283]);
model.selection.create('sel14', 'Explicit');
model.selection('sel14').model('comp1');
model.selection('sel14').label('All Domains');
model.selection('sel14').all;
model.selection.create('sel15', 'Explicit');
model.selection('sel15').model('comp1');
model.selection('sel15').label('Plastic casing');
model.selection('sel15').set([10 12]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Air with PML');
model.selection('dif1').set('add', {'sel14'});
model.selection('dif1').set('subtract', {'sel1' 'sel15'});
model.selection.create('dif2', 'Difference');
model.selection('dif2').model('comp1');
model.selection('dif2').label('Air without PML');
model.selection('dif2').set('add', {'dif1'});
model.selection('dif2').set('subtract', {'sel8' 'sel9' 'sel10'});
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Air boundaries');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel5' 'sel6' 'sel11' 'sel12' 'sel13'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Moving membrane');
model.selection('uni2').set('entitydim', 2);
model.selection('uni2').set('input', {'sel2' 'sel3'});
model.selection.create('dif3', 'Difference');
model.selection('dif3').model('comp1');
model.selection('dif3').label('Meshed domains without PML and foam');
model.selection('dif3').set('add', {'sel14'});
model.selection('dif3').set('subtract', {'sel1' 'sel8' 'sel9' 'sel10' 'sel15'});
model.selection.create('uni3', 'Union');
model.selection('uni3').model('comp1');
model.selection('uni3').label('PML');
model.selection('uni3').set('input', {'sel8' 'sel9' 'sel10'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Model variables');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('L_E', '(L_e/(sin(n_e*pi/2)))*(cir.omega[s/rad])^(n_e-1)', 'Voice coil inductance (frequency dependent)');
model.variable('var1').set('Rp_E', '(L_e/(cos(n_e*pi/2)))*(cir.omega[s/rad])^(n_e)[ohm/H]', 'Resistance (losses in magnetic system)');

model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V0');
model.physics('cir').create('R1', 'Resistor', -1);
model.physics('cir').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir').feature('R1').set('R', 'R_g');
model.physics('cir').create('R2', 'Resistor', -1);
model.physics('cir').feature('R2').setIndex('Connections', 2, 0, 0);
model.physics('cir').feature('R2').setIndex('Connections', 3, 1, 0);
model.physics('cir').feature('R2').set('R', 'R_E');
model.physics('cir').create('L1', 'Inductor', -1);
model.physics('cir').feature('L1').setIndex('Connections', 3, 0, 0);
model.physics('cir').feature('L1').setIndex('Connections', 4, 1, 0);
model.physics('cir').feature('L1').set('L', 'L_E');
model.physics('cir').create('R3', 'Resistor', -1);
model.physics('cir').feature('R3').setIndex('Connections', 3, 0, 0);
model.physics('cir').feature('R3').setIndex('Connections', 4, 1, 0);
model.physics('cir').feature('R3').set('R', 'Rp_E');
model.physics('cir').create('L2', 'Inductor', -1);
model.physics('cir').feature('L2').setIndex('Connections', 6, 0, 0);
model.physics('cir').feature('L2').setIndex('Connections', 7, 1, 0);
model.physics('cir').feature('L2').set('L', 'M_MD[H/kg]');
model.physics('cir').create('H1', 'CurrentVoltageSource', -1);
model.physics('cir').feature('H1').setIndex('Connections', 4, 0, 0);
model.physics('cir').feature('H1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('H1').set('device', 'L2');
model.physics('cir').feature('H1').set('gain', 'BL[m/Wb*ohm]');
model.physics('cir').create('H2', 'CurrentVoltageSource', -1);
model.physics('cir').feature('H2').setIndex('Connections', 6, 0, 0);
model.physics('cir').feature('H2').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('H2').set('gain', 'BL[m/Wb*ohm]');
model.physics('cir').feature('H2').set('device', 'R2');
model.physics('cir').create('R4', 'Resistor', -1);
model.physics('cir').feature('R4').setIndex('Connections', 7, 0, 0);
model.physics('cir').feature('R4').set('R', 'R_MS[ohm/kg*s]');
model.physics('cir').create('C1', 'Capacitor', -1);
model.physics('cir').feature('C1').setIndex('Connections', 8, 0, 0);
model.physics('cir').feature('C1').set('C', 'C_MS[F*N/m]');
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').feature('IvsU1').setIndex('Connections', 9, 0, 0);
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics('acpr').selection.set([]);
model.physics('acpr').selection.named('dif1');
model.physics('acpr').create('imp1', 'Impedance', 2);
model.physics('acpr').feature('imp1').label('Eardrum Impedance');
model.physics('acpr').feature('imp1').selection.named('sel5');
model.physics('acpr').feature('imp1').set('ImpedanceModel', 'Physiological');
model.physics('acpr').feature('imp1').set('PhysiologicalModel', 'HumanEarDrum');
model.physics('acpr').create('imp2', 'Impedance', 2);
model.physics('acpr').feature('imp2').label('Skin impedance');
model.physics('acpr').feature('imp2').selection.named('sel6');
model.physics('acpr').feature('imp2').set('ImpedanceModel', 'Physiological');
model.physics('acpr').create('ishb1', 'InteriorSoundHard', 2);
model.physics('acpr').feature('ishb1').selection.named('sel4');
model.physics('acpr').create('ipp1', 'InteriorPerforatedPlate', 2);
model.physics('acpr').feature('ipp1').selection.named('sel11');
model.physics('acpr').feature('ipp1').set('dh', 'dh1');
model.physics('acpr').feature('ipp1').set('tp', 'tp1');
model.physics('acpr').feature('ipp1').set('porArea', 'sigma1');
model.physics('acpr').create('ipp2', 'InteriorPerforatedPlate', 2);
model.physics('acpr').feature('ipp2').selection.named('sel12');
model.physics('acpr').feature('ipp2').set('dh', 'dh2');
model.physics('acpr').feature('ipp2').set('tp', 'tp2');
model.physics('acpr').feature('ipp2').set('porArea', 'sigma2');
model.physics('acpr').create('ipp3', 'InteriorPerforatedPlate', 2);
model.physics('acpr').feature('ipp3').selection.named('sel13');
model.physics('acpr').feature('ipp3').set('dh', 'dh3');
model.physics('acpr').feature('ipp3').set('tp', 'tp3');
model.physics('acpr').feature('ipp3').set('porArea', 'sigma3');
model.physics('acpr').create('ilsb1', 'InteriorLumpedSpeakerBoundary', 2);
model.physics('acpr').feature('ilsb1').selection.named('uni2');
model.physics('acpr').feature('ilsb1').set('SpeakerAxisDirection', 'UserDefined');
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.acpr.ilsb1.V_cir');
model.physics.create('pelw', 'PoroelasticWavesSinglePhysics', 'geom1');
model.physics('pelw').model('comp1');
model.physics('pelw').selection.set([]);
model.physics('pelw').selection.named('sel1');
model.physics('pelw').create('pfix1', 'Fixed', 2);
model.physics('pelw').feature('pfix1').selection.set([260 262 265 274 278 284 318 319 320 321 322 326]);

model.multiphysics.create('apb1', 'AcousticPorousBoundary', 'geom1', 2);
model.multiphysics('apb1').selection.all;

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.named('sel8');
model.coordSystem('pml1').set('ScalingType', 'userDefined');
model.coordSystem('pml1').setIndex('d', 'sqrt((x-40[mm])^2+(y-50[mm])^2)-60[mm]', 0);
model.coordSystem('pml1').setIndex('dmax', '5[mm]', 0);
model.coordSystem('pml1').set('PMLgamma', '3');
model.coordSystem.create('pml2', 'geom1', 'PML');
model.coordSystem('pml2').selection.named('sel10');
model.coordSystem('pml2').set('ScalingType', 'userDefined');
model.coordSystem('pml2').setIndex('d', 'abs(z)-65 [mm]', 0);
model.coordSystem('pml2').setIndex('dmax', '5[mm]', 0);
model.coordSystem('pml2').set('PMLgamma', '3');
model.coordSystem.create('pml3', 'geom1', 'PML');
model.coordSystem('pml3').selection.named('sel9');
model.coordSystem('pml3').set('ScalingType', 'userDefined');
model.coordSystem('pml3').set('directions', '2');
model.coordSystem('pml3').setIndex('d', 'sqrt((x-40[mm])^2+(y-50[mm])^2)-60[mm]', 0);
model.coordSystem('pml3').setIndex('dmax', '5[mm]', 0);
model.coordSystem('pml3').setIndex('d', 'abs(z)-65 [mm]', 1);
model.coordSystem('pml3').setIndex('dmax', '5[mm]', 1);
model.coordSystem('pml3').set('PMLgamma', '3');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').label('Air - Domains');
model.material('mat1').selection.named('dif1');

model.physics('pelw').feature('pm1').set('FluidMaterial', 'mat1');

model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat2').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat2').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat2').label('Air');
model.material('mat2').set('family', 'air');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat2').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat2').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('molarmass', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat2').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat2').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat2').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat2').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat2').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat2').propertyGroup('idealGas').addInput('temperature');
model.material('mat2').propertyGroup('idealGas').addInput('pressure');
model.material('mat2').materialType('nonSolid');
model.material('mat2').label('Air - Boundaries');
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('uni1');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Foam');
model.material('mat3').selection.named('sel1');
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('nu', {'0.3'});
model.material('mat3').propertyGroup.create('KG', 'Bulk_modulus_and_shear_modulus');
model.material('mat3').propertyGroup('KG').set('G', {'500[kPa]'});
model.material('mat3').propertyGroup('def').set('density', {'30[kg/m^3]'});
model.material('mat3').propertyGroup('def').set('porosity', {'0.85'});
model.material('mat3').propertyGroup.create('PoroacousticsModel', 'Poroacoustics_model');
model.material('mat3').propertyGroup('PoroacousticsModel').set('tau', {'1.18'});
model.material('mat3').propertyGroup('PoroacousticsModel').set('Rf', {'34000[N*s/m^4]'});
model.material('mat3').propertyGroup('PoroacousticsModel').set('Lv', {'60[um]'});
model.material('mat3').propertyGroup('PoroacousticsModel').set('Lth', {'87[um]'});
model.material('mat3').propertyGroup('def').set('lossfactor', {'0.015'});

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lambda_air/5');
model.mesh('mesh1').feature('size').set('hmin', '1 [mm]');
model.mesh('mesh1').feature('size').set('hgrad', 1.4);
model.mesh('mesh1').feature('size').set('hcurve', 0.5);
model.mesh('mesh1').feature('size').set('hnarrow', 1);
model.mesh('mesh1').run('size');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([261 264 267 276 281 288]);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 'lambda_poro/7.5');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('sel1');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'lambda_poro/7.5');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('dif3');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.named('sel4');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', '2.0[mm]');
model.mesh('mesh1').run;
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe2').selection.named('uni3');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 10);
model.mesh('mesh1').run;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/cir', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/pelw', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/apb1', true);
model.study('std1').feature('freq').set('plist', '{20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4, 1.25e4, 1.6e4, 2e4}');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{20, 25, 31.5, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1e3, 1.25e3, 1.6e3, 2e3, 2.5e3, 3.15e3, 4e3, 5e3, 6.3e3, 8e3, 1e4, 1.25e4, 1.6e4, 2e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (apb1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (apb1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_p2' 'comp1_p' 'comp1_voltages' 'comp1_currents' 'comp1_current_time'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with Direct Precon.) (apb1)');
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p2' 'comp1_p' 'comp1_voltages' 'comp1_currents' 'comp1_current_time'});
model.sol('sol1').feature('s1').feature('i2').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('dp2').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').create('i3', 'Iterative');
model.sol('sol1').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i3').label('Suggested Iterative Solver (GMRES with GMG) (apb1)');
model.sol('sol1').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').set('hybridvar', {'comp1_p2' 'comp1_p' 'comp1_voltages' 'comp1_currents' 'comp1_current_time'});
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('i3').create('mg2', 'Multigrid');
model.sol('sol1').feature('s1').feature('i3').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i3').feature('mg2').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('i3').feature('mg2').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i3').feature('mg2').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i3').feature('mg2').feature('cs').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('i1').active(true);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 31, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 31, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 31, 0);
model.result('pg3').create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('iso1').set('number', '10');
model.result('pg3').feature('iso1').set('colortable', 'Wave');
model.result('pg3').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Displacement (pelw)');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 31, 0);
model.result('pg4').set('defaultPlotID', 'poroelasticwaves/PoroelasticWavesSinglePhysics/icom5/pdef1/pcond3/pg1');
model.result('pg4').feature.create('surf1', 'Surface');
model.result('pg4').feature('surf1').label('Surface');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('expr', 'pelw.disp');
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('smooth', 'internal');
model.result('pg4').feature('surf1').set('showsolutionparams', 'on');
model.result('pg4').feature('surf1').set('data', 'parent');
model.result('pg4').feature('surf1').feature.create('def1', 'Deform');
model.result('pg4').feature('surf1').feature('def1').label('Deformation');
model.result('pg4').feature('surf1').feature('def1').set('expr', {'u' 'v' 'w'});
model.result('pg1').run;
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('pointx', '-10[mm]');
model.result.dataset('cpt1').set('pointy', '50[mm]');
model.result.dataset('cpt1').set('pointz', 0);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature.remove('surf1');
model.result('pg1').run;
model.result('pg1').selection.geom('geom1', 3);
model.result('pg1').selection.geom('geom1', 3);
model.result('pg1').selection.set([8 11 13 14 15 16 17 18 19 20]);
model.result('pg1').set('applyselectiontodatasetedges', true);
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', 'if(isnan(acpr.p_t),pelw.p_t,acpr.p_t)');
model.result('pg1').feature('mslc1').set('descractive', true);
model.result('pg1').feature('mslc1').set('descr', 'Total acoustic pressure');
model.result('pg1').run;
model.result('pg2').set('applyselectiontodatasetedges', false);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature.remove('surf1');
model.result('pg2').run;
model.result('pg2').selection.geom('geom1', 3);
model.result('pg2').selection.geom('geom1', 3);
model.result('pg2').selection.set([8 11 13 14 15 16 17 18 19 20]);
model.result('pg2').set('applyselectiontodatasetedges', true);
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', 'if(isnan(acpr.Lp),pelw.Lp_t,acpr.Lp)');
model.result('pg2').feature('mslc1').set('descractive', true);
model.result('pg2').feature('mslc1').set('descr', 'Total sound pressure level');
model.result('pg2').feature('mslc1').set('colortable', 'Rainbow');
model.result('pg2').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg2').feature('mslc1').set('resolution', 'finer');
model.result('pg2').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 31, 0);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').label('Sound Pressure Level (acpr) 1');
model.result('pg5').set('applyselectiontodatasetedges', false);
model.result('pg5').run;
model.result('pg5').label('Sound Pressure Level on Manikin Surface');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('title', 'Sound pressure level (dB)');
model.result('pg5').set('paramindicator', 'freq=eval(freq) Hz');
model.result('pg5').set('edges', false);
model.result('pg5').run;
model.result('pg5').feature('surf1').create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.named('sel7');
model.result('pg5').run;
model.result('pg5').feature.duplicate('surf2', 'surf1');
model.result('pg5').run;
model.result('pg5').feature('surf2').set('expr', 'pelw.Lp');
model.result('pg5').feature('surf2').set('inheritplot', 'surf1');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').setIndex('looplevel', 21, 0);
model.result('pg5').setIndex('looplevel', 31, 0);
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Sound Pressure Levels');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('xlabelactive', true);
model.result('pg6').set('xlabel', 'f(Hz)');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'SPL (dB)');
model.result('pg6').set('legendpos', 'lowerright');
model.result('pg6').create('oct1', 'OctaveBand');
model.result('pg6').feature('oct1').set('quantity', 'bandpower');
model.result('pg6').feature('oct1').set('markerpos', 'datapoints');
model.result('pg6').feature('oct1').set('linewidth', 'preference');
model.result('pg6').feature('oct1').label('Average SPL at the eardrum');
model.result('pg6').feature('oct1').selection.geom('geom1', 2);
model.result('pg6').feature('oct1').selection.named('sel5');
model.result('pg6').feature('oct1').set('quantity', 'continuous');
model.result('pg6').run;
model.result('pg6').feature('oct1').set('legend', true);
model.result('pg6').feature('oct1').set('autoplotlabel', true);
model.result('pg6').feature('oct1').set('autosolution', false);
model.result('pg6').feature('oct1').set('autodescr', false);
model.result('pg6').run;
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').label('Exterior point');
model.result('pg6').feature('ptgr1').set('data', 'cpt1');
model.result('pg6').feature('ptgr1').set('expr', 'acpr.Lp');
model.result('pg6').run;
model.result('pg6').feature('ptgr1').set('legend', true);
model.result('pg6').feature('ptgr1').set('autoplotlabel', true);
model.result('pg6').feature('ptgr1').set('autopoint', false);
model.result('pg6').feature('ptgr1').set('autosolution', false);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').run;
model.result('pg7').label('Perfectly Matched Layer Distance Function');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('expr', 'pml1.dDist');
model.result('pg7').feature('mslc1').set('colortable', 'Rainbow');
model.result('pg7').feature('mslc1').set('colorscalemode', 'linear');
model.result('pg7').run;
model.result('pg7').feature.duplicate('mslc2', 'mslc1');
model.result('pg7').run;
model.result('pg7').feature('mslc2').set('expr', 'pml2.dDist');
model.result('pg7').feature('mslc2').set('titletype', 'none');
model.result('pg7').feature('mslc2').set('inheritplot', 'mslc1');
model.result('pg7').feature.duplicate('mslc3', 'mslc2');
model.result('pg7').run;
model.result('pg7').feature('mslc3').set('expr', 'sqrt(pml3.dDist1^2+pml3.dDist2^2)');
model.result('pg7').run;
model.result('pg5').run;

model.title('Headphone on an Artificial Ear');

model.description('In this tutorial a headphone is simulated in a typical measurement setup. As headphones are closely coupled to the ear, it is not representative to measure their sensitivity in an acoustic free-field in the classical setup used for loudspeakers. The measurement requires the use of artificial heads and ears to accurately represent the usage conditions. This model shows the coupling of a circumaural headphone to a generic artificial ear.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('headphone_artificial_ear.mph');

model.modelNode.label('Components');

out = model;
