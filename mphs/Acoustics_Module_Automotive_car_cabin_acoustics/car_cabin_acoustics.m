function out = model
%
% car_cabin_acoustics.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Automotive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');
model.physics.create('cir2', 'Circuit', 'geom1');
model.physics('cir2').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/cir', true);
model.study('std1').feature('freq').setSolveFor('/physics/cir2', true);

model.geom('geom1').geomRep('cadps');
model.geom('geom1').repairTolType('relative');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('filename', 'car_cabin_acoustics_geometry.mphbin');
model.geom('geom1').run('imp1');
model.geom('geom1').create('cap1', 'CapFaces');

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('cap1').selection('input').set('imp1', [53 54 56 57 389 390 392 393]);
model.geom('geom1').run('cap1');
model.geom('geom1').create('pt1', 'Point');
model.geom('geom1').feature('pt1').setIndex('p', 2, 0);
model.geom('geom1').feature('pt1').setIndex('p', -0.55, 1);
model.geom('geom1').feature('pt1').setIndex('p', 1.2, 2);
model.geom('geom1').run('pt1');
model.geom('geom1').create('arr1', 'Array');
model.geom('geom1').feature('arr1').selection('input').set({'pt1'});
model.geom('geom1').feature('arr1').set('fullsize', [6 12 1]);
model.geom('geom1').feature('arr1').set('displ', [0.1 0.1 0]);
model.geom('geom1').feature('arr1').set('selresult', true);
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Microphone Array');
model.geom('geom1').feature('arr1').set('contributeto', 'csel1');
model.geom('geom1').selection('csel1.dom').show(false);
model.geom('geom1').selection('csel1.bnd').show(false);
model.geom('geom1').selection('csel1.edg').show(false);
model.geom('geom1').run('fin');
model.geom('geom1').create('ige1', 'IgnoreEdges');
model.geom('geom1').feature('ige1').selection('input').set('fin', 1981);
model.geom('geom1').run('ige1');
model.geom('geom1').create('rmd1', 'RemoveDetails');
model.geom('geom1').run('rmd1');
model.geom('geom1').create('ige2', 'IgnoreEdges');
model.geom('geom1').feature('ige2').selection('input').set('aigv8', [1178 1183 1191 1678 1686]);
model.geom('geom1').run('ige2');

model.view('view1').set('ssao', true);

model.param.label('Parameters 1 - Model');

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('fmax', '1000[Hz]', 'Maximal frequency for the sweep');
model.param.set('f0', '2000[Hz]', 'Study frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('rho0', '1.2[kg/m^3]', 'Air density');
model.param.set('relH', '0.5', 'Relative humidity');
model.param.set('V0', '2.83[V]', 'Driver Source');
model.param.create('par2');
model.param('par2').label('Parameters 2 - Boundaries');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('alpha_win', '0.005', 'Windows absorption coefficient');
model.param('par2').set('alpha_dash', '0.01', 'Dashboard absorption coefficient');
model.param('par2').set('alpha_door', '0.01', 'Doors absorption coefficient');
model.param('par2').set('d_carp', '0.5[cm]', 'Thickness of the carpet floor');
model.param('par2').set('Rf_carp', '10000[Pa*s/m^2]', 'Flow resistivity of the carpet floor');
model.param('par2').set('d_roof', '0.7[cm]', 'Thickness of the roof trim');
model.param('par2').set('Rf_roof', '20000[Pa*s/m^2]', 'Flow resistivity of the roof trim');
model.param.create('par3');
model.param('par3').label('Parameters 3 - Midwoofer');

% To import content from file, use:
% model.param('par3').loadFile('FILENAME');
model.param('par3').set('Sd_m', '0.0143[m^2]', 'Diaphragm piston area');
model.param('par3').set('R_m', 'sqrt(Sd_m/pi)', 'Piston radius');
model.param('par3').set('Vback_m', '4[l]', 'Back volume');
model.param('par3').set('R1_m', '6[ohm]', 'Resistance');
model.param('par3').set('L1_m', '0.35[mH]', 'Inductance');
model.param('par3').set('L2_m', '18[g]*1[H/kg]', 'Inductance');
model.param('par3').set('R2_m', '1.4[kg/s]*1[ohm/kg*s]', 'Resistance');
model.param('par3').set('C1_m', '2.5[mm/N]*1[F*N/m]', 'Capacitance');
model.param('par3').set('A_m', '6[T*m]/1[T*m/ohm]', 'Gain');
model.param.create('par4');
model.param('par4').label('Parameters 4 - Tweeter');

% To import content from file, use:
% model.param('par4').loadFile('FILENAME');
model.param('par4').set('Sd_t', '5.9[cm^2]', 'Diaphragm piston area');
model.param('par4').set('R_t', 'sqrt(Sd_t/pi)', 'Piston radius');
model.param('par4').set('Vback_t', '0.3[l]', 'Back volume');
model.param('par4').set('R1_t', '3.5[ohm]', 'Resistance');
model.param('par4').set('L1_t', '0.012[mH]', 'Inductance');
model.param('par4').set('L2_t', '0.7[g]*1[H/kg]', 'Inductance');
model.param('par4').set('R2_t', '0.6[kg/s]*1[ohm/kg*s]', 'Resistance');
model.param('par4').set('C1_t', '0.2[mm/N]*1[F*N/m]', 'Capacitance');
model.param('par4').set('A_t', '3[T*m]/1[T*m/ohm]', 'Gain');

model.func.create('int1', 'Interpolation');
model.func('int1').label('Interpolation 1 - Leather Seats');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'car_cabin_acoustics_impedance_seats.txt');
model.func('int1').set('nargs', 1);
model.func('int1').setIndex('funcs', 'realZ_seat', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').setIndex('funcs', 'imagZ_seat', 1, 0);
model.func('int1').setIndex('funcs', 2, 1, 1);
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').setIndex('fununit', 1, 0);
model.func('int1').setIndex('fununit', 1, 1);
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').importData;
model.func.create('an1', 'Analytic');
model.func('an1').label('Analytic 1 - Struve Function (Order One)');
model.func('an1').set('funcname', 'h1');
model.func('an1').set('expr', '2/pi-besselj(0,x)+(16/pi-5)*sin(x)/x+(12-36/pi)*(1-cos(x))/x^2');
model.func('an1').set('fununit', '1');
model.func('an1').setIndex('argunit', 1, 0);
model.func('an1').set('complex', true);
model.func('an1').setIndex('plotargs', 10, 0, 2);
model.func.create('an2', 'Analytic');
model.func('an2').label('Analytic 2 - Piston Impedance');
model.func('an2').set('funcname', 'Zp');
model.func('an2').set('expr', 'rho0*c0*(1-besselj(1,2*x)/x+i*h1(2*x)/x)');
model.func('an2').set('fununit', 'kg/(s*m^2)');
model.func('an2').setIndex('argunit', 1, 0);
model.func('an2').set('complex', true);
model.func('an2').setIndex('plotargs', 10, 0, 2);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables 1 - Acoustics');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('k0', '2*pi*freq/c0', 'Wave number');
model.variable('var1').set('alpha_all', 'if(isnan(acpr.imp1.alpha_n),0,acpr.imp1.alpha_n)+if(isnan(acpr.imp2.alpha_n),0,acpr.imp2.alpha_n)+if(isnan(acpr.imp3.alpha_n),0,acpr.imp3.alpha_n)+if(isnan(acpr.imp4.alpha_n),0,acpr.imp4.alpha_n)+if(isnan(acpr.imp5.alpha_n),0,acpr.imp5.alpha_n)+if(isnan(acpr.imp6.alpha_n),0,acpr.imp6.alpha_n)', 'Absorption coefficent of surfaces');
model.variable('var1').set('Zn_seat', 'acpr.rho*acpr.c*(realZ_seat(freq)+i*imagZ_seat(freq))', 'Specific impedance of leather seats');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables 2 - Electrical Circuits');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('Zrad_m', 'Zp(k0*R_m)/Sd_m', 'Radiation impedance of the midwoofer');
model.variable('var2').set('Zbv_m', 'rho0*c0^2/(i*2*pi*freq*Vback_m)', 'Back volume impedance of the midwoofer');
model.variable('var2').set('Zrad_t', 'Zp(k0*R_t)/Sd_t', 'Radiation impedance of the tweeter');
model.variable('var2').set('Zbv_t', 'rho0*c0^2/(i*2*pi*freq*Vback_t)', 'Back volume impedance of the tweeter');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('All Boundaries');
model.selection('sel1').geom(2);
model.selection('sel1').all;
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Windows');
model.selection('sel2').geom(2);
model.selection('sel2').set([3 4 62 63 489 495 771 775 798 801 804 805]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Dashboard');
model.selection('sel3').geom(2);
model.selection('sel3').set([1 2 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 43 44 47 48 49 50 51 52 53 54 55 56 57 64 65 66 67 68 69 70 71 85 86 87 88 89 90 91 92 95 96 97 98 99 100 101 102 103 104 105 106 107 111 112 113 114 115 116 117 118 119 120 121 122 123 126 127 128 129 130 131 132 133 134 135 136 137 138 139 141 142 143 144 146 147 156 157 158 159 160 311 312 313 318 319 320 321 322 324 756 799]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Carpet Floor');
model.selection('sel4').geom(2);
model.selection('sel4').set([10]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Doors');
model.selection('sel5').geom(2);
model.selection('sel5').set([148 149 150 151 152 153 154 155 161 162 169 170 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 206 207 208 209 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 250 251 252 253 254 260 271 272 279 280 281 282 283 284 285 286 287 288 289 290 291 292 305 306 307 308 309 310 350 351 352 353 356 357 358 359 360 361 362 363 364 365 366 369 370 371 372 373 374 375 376 377 378 379 380 393 394 415 416 425 426 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 566 567 580 581 582 583 584 585 586 587 588 589 590 591 592 593 608 609 610 611 612 613 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 633 634 635 636 637 638 639 640 648 649 650 651 652 653 654 655 656 657 658 659 665 666 667 668 669 670]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Leather Seats');
model.selection('sel6').geom(2);
model.selection('sel6').set([198 199 200 201 202 203 204 205 210 211 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 267 268 269 270 275 276 277 278 293 294 295 296 297 298 299 300 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 354 355 367 368 381 382 383 384 385 386 387 388 389 390 391 392 401 402 403 404 405 406 407 408 409 410 411 412 413 414 418 420 421 422 423 424 427 428 429 430 431 432 433 434 449 450 451 452 453 454 455 456 465 466 467 468 469 470 471 472 473 474 475 476 561 562 564 565 568 569 570 571 572 573 574 575 576 577 578 579 594 595 601 602 603 604 605 606 607 641 642 643 644 645 646 647 671 672 687 698 699 700 701 702 703 704 705 706 707 708 709 710 711 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 736 738 747 748 749 750 751 752 753 754 757 758 759 760 761 762 763 764 765 766 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796]);
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Roof Trim');
model.selection('sel7').geom(2);
model.selection('sel7').set([257 258 477 478 712 713]);
model.selection.create('sel8', 'Explicit');
model.selection('sel8').model('comp1');
model.selection('sel8').label('Speaker Covers');
model.selection('sel8').geom(2);
model.selection('sel8').set([33 36 165 168]);
model.selection.create('sel9', 'Explicit');
model.selection('sel9').model('comp1');
model.selection('sel9').label('Midwoofer L');
model.selection('sel9').geom(2);
model.selection('sel9').set([163 164 171 172]);
model.selection.create('sel10', 'Explicit');
model.selection('sel10').model('comp1');
model.selection('sel10').label('Midwoofer R');
model.selection('sel10').geom(2);
model.selection('sel10').set([166 167 173 174]);
model.selection.create('sel11', 'Explicit');
model.selection('sel11').model('comp1');
model.selection('sel11').label('Tweeter R');
model.selection('sel11').geom(2);
model.selection('sel11').set([39 40]);
model.selection.create('sel12', 'Explicit');
model.selection('sel12').model('comp1');
model.selection('sel12').label('Tweeter L');
model.selection('sel12').geom(2);
model.selection('sel12').set([37 38]);
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Sound Hard Surfaces');
model.selection('dif1').set('entitydim', 2);
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'sel2' 'sel3' 'sel4' 'sel5' 'sel6' 'sel7' 'sel8' 'sel9' 'sel10' 'sel11'  ...
'sel12'});
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('All Speakers');
model.selection('uni1').set('entitydim', 2);
model.selection('uni1').set('input', {'sel9' 'sel10' 'sel11' 'sel12'});

model.physics('acpr').feature('fpam1').set('FluidModel', 'AtmosphereAttenuation');
model.physics('acpr').feature('fpam1').set('minput_relativehumidity', 'relH');
model.physics('acpr').create('imp1', 'Impedance', 2);
model.physics('acpr').feature('imp1').label('Impedance 1 - Windows');
model.physics('acpr').feature('imp1').selection.named('sel2');
model.physics('acpr').feature('imp1').set('ImpedanceModel', 'AbsorptionCoefficient');
model.physics('acpr').feature('imp1').set('alpha_n', 'alpha_win');
model.physics('acpr').create('imp2', 'Impedance', 2);
model.physics('acpr').feature('imp2').label('Impedance 2 - Dashboard');
model.physics('acpr').feature('imp2').selection.named('sel3');
model.physics('acpr').feature('imp2').set('ImpedanceModel', 'AbsorptionCoefficient');
model.physics('acpr').feature('imp2').set('alpha_n', 'alpha_dash');
model.physics('acpr').create('imp3', 'Impedance', 2);
model.physics('acpr').feature('imp3').label('Impedance 3 - Carpet Floor');
model.physics('acpr').feature('imp3').selection.named('sel4');
model.physics('acpr').feature('imp3').set('ImpedanceModel', 'PorousModel');
model.physics('acpr').feature('imp3').set('thickness', 'd_carp');
model.physics('acpr').feature('imp3').set('WaveDirection', 'Automatic');
model.physics('acpr').feature('imp3').set('FluidMaterial', 'mat1');
model.physics('acpr').feature('imp3').set('SolidMaterial', 'mat1');
model.physics('acpr').feature('imp3').set('Rf_mat', 'userdef');
model.physics('acpr').feature('imp3').set('Rf', 'Rf_carp');
model.physics('acpr').feature('imp3').set('Constants', 'Miki');
model.physics('acpr').create('imp4', 'Impedance', 2);
model.physics('acpr').feature('imp4').label('Impedance 4 - Doors');
model.physics('acpr').feature('imp4').selection.named('sel5');
model.physics('acpr').feature('imp4').set('ImpedanceModel', 'AbsorptionCoefficient');
model.physics('acpr').feature('imp4').set('alpha_n', 'alpha_door');
model.physics('acpr').create('imp5', 'Impedance', 2);
model.physics('acpr').feature('imp5').label('Impedance 5 - Leather Seats');
model.physics('acpr').feature('imp5').selection.named('sel6');
model.physics('acpr').feature('imp5').set('Zn', 'Zn_seat');
model.physics('acpr').create('imp6', 'Impedance', 2);
model.physics('acpr').feature('imp6').label('Impedance 6 - Roof Trim');
model.physics('acpr').feature('imp6').selection.named('sel7');
model.physics('acpr').feature('imp6').set('ImpedanceModel', 'PorousModel');
model.physics('acpr').feature('imp6').set('thickness', 'd_roof');
model.physics('acpr').feature('imp6').set('WaveDirection', 'Automatic');
model.physics('acpr').feature('imp6').set('FluidMaterial', 'mat1');
model.physics('acpr').feature('imp6').set('SolidMaterial', 'mat1');
model.physics('acpr').feature('imp6').set('Rf_mat', 'userdef');
model.physics('acpr').feature('imp6').set('Rf', 'Rf_roof');
model.physics('acpr').feature('imp6').set('Constants', 'Qunli');
model.physics('acpr').create('ipp1', 'InteriorPerforatedPlate', 2);
model.physics('acpr').feature('ipp1').selection.named('sel8');
model.physics('acpr').feature('ipp1').set('porArea', 0.5);
model.physics('acpr').feature('ipp1').set('FluidMaterial', 'mat1');
model.physics('acpr').create('lsb1', 'LumpedSpeakerBoundary', 2);
model.physics('acpr').feature('lsb1').label('Lumped Speaker Boundary 1 - Midwoofer L');
model.physics('acpr').feature('lsb1').selection.named('sel9');
model.physics('acpr').feature('lsb1').set('V_back', 'Vback_m');
model.physics('acpr').create('lsb2', 'LumpedSpeakerBoundary', 2);
model.physics('acpr').feature('lsb2').label('Lumped Speaker Boundary 2 - Tweeter R');
model.physics('acpr').feature('lsb2').selection.named('sel11');
model.physics('acpr').feature('lsb2').set('V_back', 'Vback_t');
model.physics('cir').label('Electrical Circuit - Midwoofer');
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').create('R1', 'Resistor', -1);
model.physics('cir').create('L1', 'Inductor', -1);
model.physics('cir').create('H1', 'CurrentVoltageSource', -1);
model.physics('cir').create('H2', 'CurrentVoltageSource', -1);
model.physics('cir').create('L2', 'Inductor', -1);
model.physics('cir').create('R2', 'Resistor', -1);
model.physics('cir').create('C1', 'Capacitor', -1);
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').create('E1', 'VoltageVoltageSource', -1);
model.physics('cir').create('F1', 'CurrentCurrentSource', -1);
model.physics('cir').create('R3', 'Resistor', -1);
model.physics('cir').create('R4', 'Resistor', -1);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V0');
model.physics('cir').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir').feature('R1').set('R', 'R1_m');
model.physics('cir').feature('L1').setIndex('Connections', 2, 0, 0);
model.physics('cir').feature('L1').setIndex('Connections', 3, 1, 0);
model.physics('cir').feature('L1').set('L', 'L1_m');
model.physics('cir').feature('H1').setIndex('Connections', 3, 0, 0);
model.physics('cir').feature('H1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('H1').set('device', 'L2');
model.physics('cir').feature('H1').set('gain', 'A_m');
model.physics('cir').feature('H2').setIndex('Connections', 6, 0, 0);
model.physics('cir').feature('H2').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('H2').set('device', 'R1');
model.physics('cir').feature('H2').set('gain', 'A_m');
model.physics('cir').feature('L2').setIndex('Connections', 6, 0, 0);
model.physics('cir').feature('L2').setIndex('Connections', 7, 1, 0);
model.physics('cir').feature('L2').set('L', 'L2_m');
model.physics('cir').feature('R2').setIndex('Connections', 7, 0, 0);
model.physics('cir').feature('R2').setIndex('Connections', 8, 1, 0);
model.physics('cir').feature('R2').set('R', 'R2_m');
model.physics('cir').feature('C1').setIndex('Connections', 8, 0, 0);
model.physics('cir').feature('C1').setIndex('Connections', 9, 1, 0);
model.physics('cir').feature('C1').set('C', 'C1_m');
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.acpr.lsb1.V_cir');
model.physics('cir').feature('IvsU1').setIndex('Connections', 9, 0, 0);
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('E1').setIndex('Connections', 9, 0, 0);
model.physics('cir').feature('E1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('E1').setIndex('Connections', 11, 2, 0);
model.physics('cir').feature('E1').setIndex('Connections', 10, 3, 0);
model.physics('cir').feature('E1').set('gain', 'Sd_m[1/m^2]');
model.physics('cir').feature('F1').setIndex('Connections', 10, 0, 0);
model.physics('cir').feature('F1').setIndex('Connections', 11, 1, 0);
model.physics('cir').feature('F1').set('device', 'E1');
model.physics('cir').feature('F1').set('gain', 'Sd_m[1/m^2]');
model.physics('cir').feature('R3').label('Resistor 3 - Lumped Radiation Impedance');
model.physics('cir').feature('R3').setIndex('Connections', 10, 0, 0);
model.physics('cir').feature('R3').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('R3').set('R', 'Zrad_m*1[ohm*m^4*s/kg]');
model.physics('cir').feature('R3').setIndex('Connections', 10, 0, 0);
model.physics('cir').feature('R3').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('R4').label('Resistor 4 - Lumped Back Volume Compliance');
model.physics('cir').feature('R4').setIndex('Connections', 11, 0, 0);
model.physics('cir').feature('R4').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('R4').set('R', 'Zbv_m*1[ohm*m^4*s/kg]');
model.physics('cir2').label('Electrical Circuit 2 - Tweeter');
model.physics('cir2').feature.copy('V1', 'cir/V1');
model.physics('cir2').feature.copy('R1', 'cir/R1');
model.physics('cir2').feature.copy('L1', 'cir/L1');
model.physics('cir2').feature.copy('H1', 'cir/H1');
model.physics('cir2').feature.copy('H2', 'cir/H2');
model.physics('cir2').feature.copy('L2', 'cir/L2');
model.physics('cir2').feature.copy('R2', 'cir/R2');
model.physics('cir2').feature.copy('C1', 'cir/C1');
model.physics('cir2').feature.copy('IvsU1', 'cir/IvsU1');
model.physics('cir2').feature.copy('E1', 'cir/E1');
model.physics('cir2').feature.copy('F1', 'cir/F1');
model.physics('cir2').feature.copy('R3', 'cir/R3');
model.physics('cir2').feature.copy('R4', 'cir/R4');
model.physics('cir2').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('R1').setIndex('Connections', 1, 0, 0);
model.physics('cir2').feature('R1').setIndex('Connections', 2, 1, 0);
model.physics('cir2').feature('R1').set('R', 'R1_t');
model.physics('cir2').feature('L1').setIndex('Connections', 2, 0, 0);
model.physics('cir2').feature('L1').setIndex('Connections', 3, 1, 0);
model.physics('cir2').feature('L1').set('L', 'L1_t');
model.physics('cir2').feature('H1').setIndex('Connections', 3, 0, 0);
model.physics('cir2').feature('H1').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('H1').set('device', 'L2');
model.physics('cir2').feature('H1').set('gain', 'A_t');
model.physics('cir2').feature('H2').setIndex('Connections', 6, 0, 0);
model.physics('cir2').feature('H2').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('H2').set('gain', 'A_t');
model.physics('cir2').feature('L2').setIndex('Connections', 6, 0, 0);
model.physics('cir2').feature('L2').setIndex('Connections', 7, 1, 0);
model.physics('cir2').feature('L2').set('L', 'L2_t');
model.physics('cir2').feature('R2').setIndex('Connections', 7, 0, 0);
model.physics('cir2').feature('R2').setIndex('Connections', 8, 1, 0);
model.physics('cir2').feature('R2').set('R', 'R2_t');
model.physics('cir2').feature('C1').setIndex('Connections', 8, 0, 0);
model.physics('cir2').feature('C1').setIndex('Connections', 9, 1, 0);
model.physics('cir2').feature('C1').set('C', 'C1_t');
model.physics('cir2').feature('IvsU1').set('V_src', 'root.comp1.acpr.lsb2.V_cir');
model.physics('cir2').feature('IvsU1').setIndex('Connections', 9, 0, 0);
model.physics('cir2').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('E1').setIndex('Connections', 9, 0, 0);
model.physics('cir2').feature('E1').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('E1').setIndex('Connections', 11, 2, 0);
model.physics('cir2').feature('E1').setIndex('Connections', 10, 3, 0);
model.physics('cir2').feature('E1').set('gain', 'Sd_t[1/m^2]');
model.physics('cir2').feature('F1').setIndex('Connections', 10, 0, 0);
model.physics('cir2').feature('F1').setIndex('Connections', 11, 1, 0);
model.physics('cir2').feature('F1').set('gain', 'Sd_t[1/m^2]');
model.physics('cir2').feature('R3').setIndex('Connections', 10, 0, 0);
model.physics('cir2').feature('R3').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('R3').set('R', 'Zrad_t*1[ohm*m^4*s/kg]');
model.physics('cir2').feature('R4').setIndex('Connections', 11, 0, 0);
model.physics('cir2').feature('R4').setIndex('Connections', 0, 1, 0);
model.physics('cir2').feature('R4').set('R', 'Zbv_t*1[ohm*m^4*s/kg]');

model.mesh('mesh1').label('Mesh 1 - Electrical Circuits');
model.mesh('mesh1').contribute('physics/acpr', false);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Speaker Responses');
model.study('std1').setGenPlots(false);
model.study('std1').feature('freq').set('plist', '{50, 56, 63, 71, 80, 90, 100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4}');
model.study('std1').feature('freq').set('useadvanceddisable', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr', false);
model.study('std1').feature('freq').set('disabledphysics', {'cir/IvsU1' 'cir2/IvsU1'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{50, 56, 63, 71, 80, 90, 100, 112, 125, 140, 160, 180, 200, 224, 250, 280, 315, 355, 400, 450, 500, 560, 630, 710, 800, 900, 1e3, 1.12e3, 1.25e3, 1.4e3, 1.6e3, 1.8e3, 2e3, 2.24e3, 2.5e3, 2.8e3, 3.15e3, 3.55e3, 4e3, 4.5e3, 5e3, 5.6e3, 6.3e3, 7.1e3, 8e3, 9e3, 1e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup1D');
model.result('pg1').run;
model.result('pg1').label('Speaker Responses');
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('legendpos', 'upperleft');
model.result('pg1').create('oct1', 'OctaveBand');
model.result('pg1').feature('oct1').set('quantity', 'bandpower');
model.result('pg1').feature('oct1').set('markerpos', 'datapoints');
model.result('pg1').feature('oct1').set('linewidth', 'preference');
model.result('pg1').feature('oct1').selection.geom('geom1');
model.result('pg1').feature('oct1').set('expr', 'acpr.iomega*rho0*cir.R3_i*exp(-i*k0*1[m])/(2*pi*1[m])');
model.result('pg1').feature('oct1').set('quantity', 'continuous');
model.result('pg1').feature('oct1').set('legend', true);
model.result('pg1').feature('oct1').set('legendmethod', 'manual');
model.result('pg1').feature('oct1').setIndex('legends', 'Midwoofer', 0);
model.result('pg1').feature.duplicate('oct2', 'oct1');
model.result('pg1').run;
model.result('pg1').feature('oct2').set('expr', 'acpr.iomega*rho0*cir2.R3_i*exp(-i*k0*1[m])/(2*pi*1[m])');
model.result('pg1').feature('oct2').setIndex('legends', 'Tweeter', 0);
model.result('pg1').run;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').setSolveFor('/physics/acpr', true);
model.study('std2').feature('eig').setSolveFor('/physics/cir', true);
model.study('std2').feature('eig').setSolveFor('/physics/cir2', true);
model.study.create('std3');
model.study('std3').create('freq', 'Frequency');
model.study('std3').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std3').feature('freq').setSolveFor('/physics/cir', true);
model.study('std3').feature('freq').setSolveFor('/physics/cir2', true);
model.study.create('std4');
model.study('std4').create('freq', 'Frequency');
model.study('std4').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std4').feature('freq').setSolveFor('/physics/cir', true);
model.study('std4').feature('freq').setSolveFor('/physics/cir2', true);
model.study.create('std5');
model.study('std5').create('freq', 'Frequency');
model.study('std5').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std5').feature('freq').setSolveFor('/physics/cir', true);
model.study('std5').feature('freq').setSolveFor('/physics/cir2', true);

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').label('Mesh 2 - Fixed Mesh for Frequency Sweeps');

model.physics('acpr').prop('MeshControl').set('SizeControlParameter', 'Frequency');

model.mesh('mesh2').automatic(false);
model.mesh('mesh2').feature('size').set('custom', true);
model.mesh('mesh2').feature('size').set('hmax', 'c0/fmax/5');
model.mesh('mesh2').feature.remove('size1');
model.mesh('mesh2').feature.remove('se1');
model.mesh('mesh2').feature('ftet1').set('optsmall', true);
model.mesh('mesh2').run;
model.mesh.duplicate('mesh3', 'mesh2');
model.mesh('mesh3').label('Mesh 3 - Adaptive Mesh for High Frequencies');
model.mesh('mesh3').feature('size').set('hmax', 'c0/f0/5');

model.study('std2').label('Study 2 - Modal Analysis');
model.study('std2').feature('eig').set('eigwhich', 'lr');
model.study('std2').feature('eig').setEntry('activate', 'acpr', true);
model.study('std2').feature('eig').setEntry('activate', 'cir', false);
model.study('std2').feature('eig').setEntry('activate', 'cir2', false);
model.study('std2').feature('eig').setEntry('mesh', 'geom1', 'mesh2');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('neigs', 6);
model.sol('sol2').feature('e1').set('shift', '0');
model.sol('sol2').feature('e1').set('rtol', 1.0E-6);
model.sol('sol2').feature('e1').set('transform', 'none');
model.sol('sol2').feature('e1').set('eigref', '100');
model.sol('sol2').feature('e1').set('eigvfunscale', 'average');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('e1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('e1').create('d1', 'Direct');
model.sol('sol2').feature('e1').feature('d1').set('linsolver', 'mumps');
model.sol('sol2').feature('e1').feature('d1').label('Suggested Direct Solver (acpr)');
model.sol('sol2').feature('e1').create('i1', 'Iterative');
model.sol('sol2').feature('e1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('e1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (acpr)');
model.sol('sol2').feature('e1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('e1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('e1').create('i2', 'Iterative');
model.sol('sol2').feature('e1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol2').feature('e1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) (acpr)');
model.sol('sol2').feature('e1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('e1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol2').feature('e1').feature('d1').active(true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset2');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg2').feature('surf1').set('colortable', 'Wave');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Acoustic Pressure (acpr)');
model.result('pg2').feature('surf1').set('colortable', 'WaveLight');
model.result('pg2').create('con1', 'Contour');
model.result('pg2').feature('con1').set('expr', {'acpr.p_t'});
model.result('pg2').feature('con1').set('colortable', 'Wave');
model.result('pg2').feature('con1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('con1').set('colorlegend', false);
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Sound Pressure Level (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset2');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').create('iso1', 'Isosurface');
model.result('pg4').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg4').feature('iso1').set('number', '10');
model.result('pg4').feature('iso1').set('colortable', 'Wave');
model.result('pg4').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_acpr');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Study 2 - Modal Analysis)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std2EvgFrq').run;
model.result('pg2').run;
model.result('pg2').set('looplevel', [5]);
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Pressure Eigenmodes');
model.result('pg2').set('paramindicator', 'Eigenfrequency=eval(freq) Hz');
model.result('pg2').run;
model.result('pg2').set('looplevel', [6]);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').set('looplevel', [5]);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('title', 'SPL Eigenmodes');
model.result('pg3').set('paramindicator', 'Eigenfrequency=eval(freq) Hz');
model.result('pg3').run;
model.result('pg3').set('looplevel', [6]);
model.result('pg3').run;

model.study('std3').label('Study 3 - Frequency Sweep up to fmax');
model.study('std3').setGenPlots(false);
model.study('std3').feature('freq').set('plist', '{50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3}');
model.study('std3').feature('freq').set('useadvanceddisable', true);
model.study('std3').feature('freq').set('disabledphysics', {'cir/E1' 'cir/F1' 'cir/R3' 'cir/R4' 'cir2/E1' 'cir2/F1' 'cir2/R3' 'cir2/R4'});
model.study('std3').feature('freq').setEntry('outputmap', 'acpr', 'selection');
model.study('std3').feature('freq').setEntry('outputselectionmap', 'acpr', 'geom1_csel1_pnt');
model.study('std3').feature('freq').setEntry('mesh', 'geom1', 'mesh2');

model.sol.create('sol3');
model.sol('sol3').study('std3');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std3');
model.sol('sol3').feature('st1').set('studystep', 'freq');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'freq');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').set('stol', 1.0E-6);
model.sol('sol3').feature('s1').create('p1', 'Parametric');
model.sol('sol3').feature('s1').feature.remove('pDef');
model.sol('sol3').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol3').feature('s1').feature('p1').set('plistarr', {'{50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3}'});
model.sol('sol3').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol3').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol3').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol3').feature('s1').feature('p1').set('probes', {});
model.sol('sol3').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol3').feature('s1').set('linpmethod', 'sol');
model.sol('sol3').feature('s1').set('linpsol', 'zero');
model.sol('sol3').feature('s1').set('control', 'freq');
model.sol('sol3').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol3').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol3').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol3').feature('s1').create('seDef', 'Segregated');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').create('d1', 'Direct');
model.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol3').feature('s1').feature('d1').label('Suggested Direct Solver () (Merged)');
model.sol('sol3').feature('s1').create('i1', 'Iterative');
model.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) ()');
model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i2', 'Iterative');
model.sol('sol3').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol3').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) ()');
model.sol('sol3').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').create('i3', 'Iterative');
model.sol('sol3').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i3').set('prefuntype', 'right');
model.sol('sol3').feature('s1').feature('i3').set('itrestart', 300);
model.sol('sol3').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) ()');
model.sol('sol3').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'cir' 'off' 'cir2' 'off'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'cir' 'off' 'cir2' 'off'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').create('i4', 'Iterative');
model.sol('sol3').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol3').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) ()');
model.sol('sol3').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol3').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').feature('s1').feature.remove('seDef');
model.sol('sol3').attach('std3');
model.sol('sol3').feature('s1').feature('d1').set('mumpsblr', true);

model.study('std4').label('Study 4 - Frequency Sweep up to fmax (Midwoofer Only)');
model.study('std4').setGenPlots(false);
model.study('std4').feature('freq').set('plist', '{50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3}');
model.study('std4').feature('freq').set('useadvanceddisable', true);
model.study('std4').feature('freq').set('disabledphysics', {'acpr/lsb2' 'cir/E1' 'cir/F1' 'cir/R3' 'cir/R4'});
model.study('std4').feature('freq').setSolveFor('/physics/cir2', false);
model.study('std4').feature('freq').set('disabledphysics', {'acpr/lsb2' 'cir/E1' 'cir/F1' 'cir/R3' 'cir/R4' 'cir2'});
model.study('std4').feature('freq').setEntry('outputmap', 'acpr', 'selection');
model.study('std4').feature('freq').setEntry('outputselectionmap', 'acpr', 'geom1_csel1_pnt');
model.study('std4').feature('freq').setEntry('mesh', 'geom1', 'mesh2');

model.sol.create('sol4');
model.sol('sol4').study('std4');
model.sol('sol4').create('st1', 'StudyStep');
model.sol('sol4').feature('st1').set('study', 'std4');
model.sol('sol4').feature('st1').set('studystep', 'freq');
model.sol('sol4').create('v1', 'Variables');
model.sol('sol4').feature('v1').set('control', 'freq');
model.sol('sol4').create('s1', 'Stationary');
model.sol('sol4').feature('s1').set('stol', 1.0E-6);
model.sol('sol4').feature('s1').create('p1', 'Parametric');
model.sol('sol4').feature('s1').feature.remove('pDef');
model.sol('sol4').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol4').feature('s1').feature('p1').set('plistarr', {'{50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3}'});
model.sol('sol4').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol4').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol4').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol4').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol4').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol4').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol4').feature('s1').feature('p1').set('probes', {});
model.sol('sol4').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol4').feature('s1').set('linpmethod', 'sol');
model.sol('sol4').feature('s1').set('linpsol', 'zero');
model.sol('sol4').feature('s1').set('control', 'freq');
model.sol('sol4').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol4').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol4').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol4').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol4').feature('s1').create('seDef', 'Segregated');
model.sol('sol4').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol4').feature('s1').create('d1', 'Direct');
model.sol('sol4').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol4').feature('s1').feature('d1').label('Suggested Direct Solver () (Merged)');
model.sol('sol4').feature('s1').create('i1', 'Iterative');
model.sol('sol4').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) ()');
model.sol('sol4').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol4').feature('s1').create('i2', 'Iterative');
model.sol('sol4').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol4').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) ()');
model.sol('sol4').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol4').feature('s1').create('i3', 'Iterative');
model.sol('sol4').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i3').set('prefuntype', 'right');
model.sol('sol4').feature('s1').feature('i3').set('itrestart', 300);
model.sol('sol4').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) ()');
model.sol('sol4').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'cir' 'off' 'cir2' 'off'});
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'cir' 'off' 'cir2' 'off'});
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol4').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol4').feature('s1').create('i4', 'Iterative');
model.sol('sol4').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol4').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) ()');
model.sol('sol4').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol4').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol4').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol4').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol4').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol4').feature('s1').feature.remove('fcDef');
model.sol('sol4').feature('s1').feature.remove('seDef');
model.sol('sol4').attach('std4');
model.sol('sol4').feature('s1').feature('d1').set('mumpsblr', true);

model.study('std5').label('Study 5 - Single Frequencies Above fmax');
model.study('std5').setGenPlots(false);
model.study('std5').create('param', 'Parametric');
model.study('std5').feature('param').setIndex('pname', 'A_m', 0);
model.study('std5').feature('param').setIndex('plistarr', '', 0);
model.study('std5').feature('param').setIndex('punit', ['ohm' ], 0);
model.study('std5').feature('param').setIndex('pname', 'A_m', 0);
model.study('std5').feature('param').setIndex('plistarr', '', 0);
model.study('std5').feature('param').setIndex('punit', ['ohm' ], 0);
model.study('std5').feature('param').setIndex('pname', 'f0', 0);
model.study('std5').feature('param').setIndex('plistarr', '2000, 3000, 4000', 0);
model.study('std5').feature('param').setIndex('punit', 'Hz', 0);
model.study('std5').feature('freq').set('plist', 'f0');
model.study('std5').feature('freq').set('useadvanceddisable', true);
model.study('std5').feature('freq').set('disabledphysics', {'cir/E1' 'cir/F1' 'cir/R3' 'cir/R4' 'cir2/E1' 'cir2/F1' 'cir2/R3' 'cir2/R4'});
model.study('std5').feature('freq').setEntry('outputmap', 'acpr', 'selection');
model.study('std5').feature('freq').setEntry('outputselectionmap', 'acpr', 'sel1;geom1_csel1_pnt');
model.study('std5').feature('freq').setEntry('mesh', 'geom1', 'mesh3');

model.sol.create('sol5');
model.sol('sol5').study('std5');
model.sol('sol5').create('st1', 'StudyStep');
model.sol('sol5').feature('st1').set('study', 'std5');
model.sol('sol5').feature('st1').set('studystep', 'freq');
model.sol('sol5').create('v1', 'Variables');
model.sol('sol5').feature('v1').set('control', 'freq');
model.sol('sol5').create('s1', 'Stationary');
model.sol('sol5').feature('s1').set('stol', 1.0E-6);
model.sol('sol5').feature('s1').create('p1', 'Parametric');
model.sol('sol5').feature('s1').feature.remove('pDef');
model.sol('sol5').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol5').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol5').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol5').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol5').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol5').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol5').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol5').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol5').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol5').feature('s1').feature('p1').set('probes', {});
model.sol('sol5').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol5').feature('s1').set('linpmethod', 'sol');
model.sol('sol5').feature('s1').set('linpsol', 'zero');
model.sol('sol5').feature('s1').set('control', 'freq');
model.sol('sol5').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol5').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol5').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol5').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol5').feature('s1').create('seDef', 'Segregated');
model.sol('sol5').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol5').feature('s1').create('d1', 'Direct');
model.sol('sol5').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol5').feature('s1').feature('d1').label('Suggested Direct Solver () (Merged)');
model.sol('sol5').feature('s1').create('i1', 'Iterative');
model.sol('sol5').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol5').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) ()');
model.sol('sol5').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol5').feature('s1').create('i2', 'Iterative');
model.sol('sol5').feature('s1').feature('i2').set('linsolver', 'fgmres');
model.sol('sol5').feature('s1').feature('i2').label('Suggested Iterative Solver (FGMRES with GMG) ()');
model.sol('sol5').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i2').feature('mg1').set('prefun', 'gmg');
model.sol('sol5').feature('s1').create('i3', 'Iterative');
model.sol('sol5').feature('s1').feature('i3').set('linsolver', 'gmres');
model.sol('sol5').feature('s1').feature('i3').set('prefuntype', 'right');
model.sol('sol5').feature('s1').feature('i3').set('itrestart', 300);
model.sol('sol5').feature('s1').feature('i3').label('Suggested Iterative Solver (Shifted Laplace) ()');
model.sol('sol5').feature('s1').feature('i3').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('prefun', 'gmg');
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('iter', 1);
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('mcasegen', 'coarse');
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('scale', '3');
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('slaplacemain', false);
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('slaplacemg', true);
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemain', {'cir' 'off' 'cir2' 'off'});
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('addweakcontribslaplacemg', {'cir' 'off' 'cir2' 'off'});
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol5').feature('s1').feature('i3').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol5').feature('s1').create('i4', 'Iterative');
model.sol('sol5').feature('s1').feature('i4').set('linsolver', 'gmres');
model.sol('sol5').feature('s1').feature('i4').label('Suggested Iterative Solver (Domain Decomposition) ()');
model.sol('sol5').feature('s1').feature('i4').create('dd1', 'DomainDecomposition');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('dompernodemax', 1);
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('dompernodemaxactive', 'on');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('userac', 'off');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('usecoarse', false);
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('ddboundary', 'absorbing');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('slaplacemain', true);
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('slaplacemg', 'on');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('alphaabsorbing', {'acpr' '1'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('betaabsorbing', {'acpr' '0.1'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('sndorderabsorbing', {'acpr' 'on'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('epsslaplacemain', {'acpr' '0.4'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').set('iter', 1);
model.sol('sol5').feature('s1').feature('i4').feature('dd1').feature('ds').create('mg1', 'Multigrid');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('slaplacemg', 'on');
model.sol('sol5').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('epsslaplacemg', {'acpr' '0.4'});
model.sol('sol5').feature('s1').feature('i4').feature('dd1').feature('ds').feature('mg1').set('iter', 1);
model.sol('sol5').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol5').feature('s1').feature.remove('fcDef');
model.sol('sol5').feature('s1').feature.remove('seDef');
model.sol('sol5').attach('std5');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std5');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol5');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'f0'});
model.batch('p1').set('plistarr', {'2000, 3000, 4000'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std5');
model.batch('p1').set('control', 'param');

model.sol('sol5').feature('s1').feature('i3').active(true);
model.sol('sol5').feature('s1').feature('i3').feature('mg1').feature('cs').feature('dDef').set('mumpsblr', true);

model.study.create('std6');
model.study('std6').label('Study 6 - All Frequency Analyses');
model.study('std6').setGenPlots(false);
model.study('std6').create('ref', 'StudyReference');
model.study('std6').feature('ref').label('Study 3');
model.study('std6').feature('ref').set('studyref', 'std3');
model.study('std6').create('ref2', 'StudyReference');
model.study('std6').feature('ref2').label('Study 4');
model.study('std6').feature('ref2').set('studyref', 'std4');
model.study('std6').create('ref3', 'StudyReference');
model.study('std6').feature('ref3').label('Study 5');
model.study('std6').feature('ref3').set('studyref', 'std5');

model.sol.create('sol6');
model.sol('sol6').study('std6');
model.sol('sol6').create('copy1', 'CopySolution');
model.sol('sol6').feature('copy1').set('sol', 'sol5');
model.sol('sol6').attach('std6');

model.batch.create('s1', 'Sequence');
model.batch('s1').study('std6');
model.batch('s1').attach('std6');
model.batch('s1').set('control', 'ref');
model.batch('s1').create('so1', 'Solutionseq');
model.batch('s1').feature('so1').set('seq', 'sol3');
model.batch('s1').feature('so1').set('store', 'off');
model.batch('s1').feature('so1').set('clear', 'on');
model.batch('s1').feature('so1').set('psol', 'none');
model.batch('s1').create('so2', 'Solutionseq');
model.batch('s1').feature('so2').set('seq', 'sol4');
model.batch('s1').feature('so2').set('store', 'off');
model.batch('s1').feature('so2').set('clear', 'on');
model.batch('s1').feature('so2').set('psol', 'none');
model.batch('s1').create('jo1', 'Jobseq');
model.batch('s1').feature('jo1').set('seq', 'p1');
model.batch('s1').create('so3', 'Solutionseq');
model.batch('s1').feature('so3').set('seq', 'sol6');
model.batch('s1').feature('so3').set('store', 'off');
model.batch('s1').feature('so3').set('clear', 'on');
model.batch('s1').feature('so3').set('psol', 'none');

model.sol.create('sol7');
model.sol('sol7').study('std5');
model.sol('sol7').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol7');
model.batch('s1').run('compute');

model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Cabin response');
model.result('pg5').set('data', 'none');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('legendpos', 'lowerright');
model.result('pg5').create('oct1', 'OctaveBand');
model.result('pg5').feature('oct1').set('quantity', 'bandpower');
model.result('pg5').feature('oct1').set('markerpos', 'datapoints');
model.result('pg5').feature('oct1').set('linewidth', 'preference');
model.result('pg5').feature('oct1').set('data', 'dset3');
model.result('pg5').feature('oct1').selection.geom('geom1', 0);
model.result('pg5').feature('oct1').selection.set([543 544 545]);
model.result('pg5').feature('oct1').set('quantity', 'continuous');
model.result('pg5').feature('oct1').set('linemarker', 'point');
model.result('pg5').feature('oct1').set('legend', true);
model.result('pg5').feature('oct1').set('legendmethod', 'manual');
model.result('pg5').feature('oct1').setIndex('legends', 'Study 3', 0);
model.result('pg5').feature.duplicate('oct2', 'oct1');
model.result('pg5').run;
model.result('pg5').feature('oct2').set('data', 'dset7');
model.result('pg5').feature('oct2').set('linestyle', 'dashed');
model.result('pg5').feature('oct2').set('linecolor', 'cyclereset');
model.result('pg5').feature('oct2').set('linemarker', 'asterisk');
model.result('pg5').feature('oct2').setIndex('legends', 'Study 5', 0);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Cabin Response - Speaker Comparison');
model.result('pg6').run;
model.result('pg6').feature('oct1').setIndex('legends', 'Midwoofer and tweeter', 0);
model.result('pg6').run;
model.result('pg6').feature('oct2').set('data', 'dset4');
model.result('pg6').feature('oct2').set('linecolor', 'cycle');
model.result('pg6').feature('oct2').setIndex('legends', 'Midwoofer only', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset7');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').setIndex('looplevel', 3, 1);
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg7').feature('surf1').set('colortable', 'Rainbow');
model.result('pg7').feature('surf1').set('colorscalemode', 'linear');
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').label('Sound Pressure Level (acpr) 1');
model.result('pg7').label('Sound Pressure Level (acpr) 1');
model.result('pg7').run;
model.result('pg7').label('Surface SPL');
model.result('pg7').selection.geom('geom1', 2);
model.result('pg7').selection.named('sel1');
model.result('pg7').selection.geom('geom1', 2);
model.result('pg7').selection.set
model.result('pg7').set('titletype', 'label');
model.result('pg7').run;
model.result.duplicate('pg8', 'pg7');
model.result('pg8').run;
model.result('pg8').label('Absorption Coefficients');
model.result('pg8').set('looplevel', [1 1]);
model.result('pg8').selection.named('sel6');
model.result('pg8').selection.geom('geom1', 2);
model.result('pg8').selection.set([4 7 10 64 198 199 200 201 202 203 204 205 210 211 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 258 267 268 269 270 275 276 277 278 293 294 295 296 297 298 299 300 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 354 355 367 368 381 382 383 384 385 386 387 388 389 390 391 392 401 402 403 404 405 406 407 408 409 410 411 412 413 414 418 420 421 422 423 424 427 428 429 430 431 432 433 434 449 450 451 452 453 454 455 456 465 466 467 468 469 470 471 472 473 474 475 476 478 561 562 564 565 568 569 570 571 572 573 574 575 576 577 578 579 594 595 601 602 603 604 605 606 607 641 642 643 644 645 646 647 671 672 687 698 699 700 701 702 703 704 705 706 707 708 709 710 711 713 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 736 738 747 748 749 750 751 752 753 754 756 757 758 759 760 761 762 763 764 765 766 771 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 798 799 804 805]);
model.result('pg8').run;
model.result('pg8').feature('surf1').set('expr', 'alpha_all');
model.result('pg8').feature('surf1').set('unit', '1');
model.result('pg8').feature('surf1').set('rangecoloractive', true);
model.result('pg8').feature('surf1').set('rangecolormin', 0);
model.result('pg8').feature('surf1').set('rangecolormax', 1);
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').run;
model.result('pg9').label('Geometry');
model.result('pg9').set('titletype', 'none');
model.result('pg9').set('showlegends', false);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', '1');
model.result('pg9').feature('surf1').set('coloring', 'uniform');
model.result('pg9').feature('surf1').set('color', 'custom');
model.result('pg9').feature('surf1').set('customcolor', [0.5176470875740051 0.7607843279838562 0.9176470637321472]);
model.result('pg9').feature('surf1').create('sel1', 'Selection');
model.result('pg9').feature('surf1').feature('sel1').selection.named('sel2');
model.result('pg9').feature('surf1').feature('sel1').selection.set([4 63 489 495 771 775 798 801 804 805]);
model.result('pg9').run;
model.result('pg9').feature('surf1').create('tran1', 'Transparency');
model.result('pg9').run;
model.result('pg9').feature('surf1').feature('tran1').set('transparency', 0.3);
model.result('pg9').feature('surf1').feature('tran1').set('uniformblending', 0.5);
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf2', 'surf1');
model.result('pg9').run;
model.result('pg9').feature('surf2').set('customcolor', [0.7686274647712708 0.4156862795352936 0.2823529541492462]);
model.result('pg9').run;
model.result('pg9').feature('surf2').feature('sel1').selection.named('sel3');
model.result('pg9').run;
model.result('pg9').feature('surf2').feature.remove('tran1');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf3', 'surf2');
model.result('pg9').run;
model.result('pg9').feature('surf3').set('customcolor', [0.32549020648002625 0.3294117748737335 0.41960784792900085]);
model.result('pg9').run;
model.result('pg9').feature('surf3').feature('sel1').selection.named('sel4');
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf4', 'surf3');
model.result('pg9').run;
model.result('pg9').run;
model.result('pg9').feature('surf4').feature('sel1').selection.named('sel5');
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf5', 'surf4');
model.result('pg9').run;
model.result('pg9').feature('surf5').set('customcolor', [0.4745098054409027 0.08627451211214066 0.23137255012989044]);
model.result('pg9').run;
model.result('pg9').feature('surf5').feature('sel1').selection.named('sel6');
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf6', 'surf5');
model.result('pg9').run;
model.result('pg9').feature('surf6').set('customcolor', [0.7529411911964417 0.7529411911964417 0.7529411911964417]);
model.result('pg9').run;
model.result('pg9').feature('surf6').feature('sel1').selection.named('sel7');
model.result('pg9').feature('surf6').feature('sel1').selection.set([478 712 713]);
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf7', 'surf6');
model.result('pg9').run;
model.result('pg9').feature('surf7').set('customcolor', [0.6980392336845398 0.13333334028720856 0.13333334028720856]);
model.result('pg9').run;
model.result('pg9').feature('surf7').feature('sel1').selection.named('uni1');
model.result('pg9').run;
model.result('pg9').feature.duplicate('surf8', 'surf7');
model.result('pg9').run;
model.result('pg9').feature('surf8').set('customcolor', [0.4117647111415863 0.4117647111415863 0.4117647111415863]);
model.result('pg9').run;
model.result('pg9').feature('surf8').feature('sel1').selection.named('dif1');
model.result('pg9').run;
model.result('pg9').run;
model.result.duplicate('pg10', 'pg9');
model.result('pg10').run;
model.result('pg10').label('Thumbnail');
model.result('pg10').set('data', 'dset7');
model.result('pg10').run;
model.result('pg10').feature('surf5').set('expr', 'acpr.Lp');
model.result('pg10').feature('surf5').set('unit', 'dB');
model.result('pg10').feature('surf5').set('coloring', 'colortable');
model.result('pg10').feature('surf5').set('colortable', 'Rainbow');
model.result('pg10').feature('surf5').set('colorscalemode', 'linear');
model.result('pg10').run;
model.result('pg10').run;

model.title(['Car Cabin Acoustics ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' Frequency-Domain Analysis']);

model.description(['This model analyzes the low- to mid-frequency range performance of the sound system in a car cabin. The cabin is a typical sedan interior, that is, the inside of a hard-top family car. The model studies the frequency response at the location of a microphone array and the modal behavior at low frequencies.' newline  newline 'The model is driven by loudspeakers placed in the typical locations of a car interior. A lumped Thiele' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Small representation (of the electrical and mechanical domains) is implemented with the Electrical Circuit interface for a generic midwoofer and a generic tweeter. They are coupled to the acoustic domain using the Lumped Speaker Boundary condition. Protective grid covers are also modeled in front of the speakers using the Interior Perforated Plate condition.' newline  newline 'Boundary conditions are defined with generic data. The windows, dashboard, and doors are modeled using constant absorption coefficients, while the leather seats are represented with complex-valued surface impedance. The roof trim and the carpet floor are defined using the Porous layer option in the Impedance boundary condition. The porous materials are modeled with the semi empirical Delany' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Bazley' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Miki model, using Qunli' native2unicode(hex2dec({'20' '19'}), 'unicode') 's and Miki' native2unicode(hex2dec({'20' '19'}), 'unicode') 's constants to describe respectively foam and fiber materials.' newline  newline 'The model relatively easily solves in the frequency domain on a standard desktop computer. The model is solved up to 1' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'kHz using a direct solver. At higher frequencies the model is solved with an iterative approach that uses the complex shifted Laplacian method (CSL).' newline  newline 'In addition to the Acoustics Module, this model requires the AC/DC Module and the CAD Import Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;
model.sol('sol7').clearSolutionData;
model.sol('sol8').clearSolutionData;
model.sol('sol9').clearSolutionData;
model.sol('sol10').clearSolutionData;

model.label('car_cabin_acoustics.mph');

model.modelNode.label('Components');

out = model;
