function out = model
%
% lumped_receiver_vibroacoustic.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Electroacoustic_Transducers');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('cir', 'Circuit', 'geom1');
model.physics('cir').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/cir', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('Vrms', '0.109[V]', 'Nominal drive voltage');
model.param.set('fmax', '10[kHz]', 'Maximum harmonic frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('Mass', '3.223627e-04[kg]', 'Receiver total mass');
model.param.set('CMx1', '-2.763900e-05[m]', 'Receiver center-of-mass coordinate ref. to box center (local x)');
model.param.set('CMx2', '0.000000e+00[m]', 'Receiver center-of-mass coordinate ref. to box center (local y)');
model.param.set('CMx3', '-2.193400e-05[m]', 'Receiver center-of-mass coordinate ref. to box center (local z)');
model.param.set('Ixx', '7.551981e-10[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local xx)');
model.param.set('Iyy', '1.967544e-09[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local yy)');
model.param.set('Izz', '2.225126e-09[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local zz)');
model.param.set('Ixy', '0.000000e+00[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local xy)');
model.param.set('Ixz', '-3.945634e-11[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local xz)');
model.param.set('Iyz', '0.000000e+00[m^2*kg]', 'Receiver inertia tensor at center-of-mass (local yz)');
model.param.set('Fx1', '1.790000e-06[N/V]', 'Local x Leff_v force constant multiplier');
model.param.set('Fx2', '-1.490000e-06[N/V]', 'Local x Lmech2_v force constant multiplier');
model.param.set('Fz1', '-1.920000e-05[N/V]', 'Local z Leff_v force constant multiplier');
model.param.set('Fz2', '-9.600000e-06[N/V]', 'Local z Lmech2_v force constant multiplier');
model.param.set('My1', '-1.490000e-08[N*m/V]', 'Local y-axis Leff_v torque constant multiplier');
model.param.set('My2', '-5.740000e-09[N*m/V]', 'Local y-axis Lmech2_v torque constant multiplier');
model.param.set('G_arm', '9.850000e-11[1]', 'GKarm gain - substitute RKarm value with variable GKarm');

model.geom('geom1').insertFile('lumped_receiver_vibroacoustic_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');
model.geom('geom1').run('rot1');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').set('planetype', 'faceparallel');
model.geom('geom1').feature('wp3').selection('face').set('rot1(1)', 4);
model.geom('geom1').feature('wp3').set('rot', 180);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

model.variable('var1').label('Main Variables');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('V0', 'sqrt(2)*Vrms', 'Peak to peak nominal drive voltage');
model.variable('var1').set('pmic', 'intop_mic(p)/intop_mic(1)', 'Average pressure at microphone port');
model.variable('var1').set('vx_local', 'sys2.T11*solid.u_tX + sys2.T12*solid.u_tY + sys2.T13*solid.u_tZ', 'x-velocity component in local system');
model.variable('var1').set('vy_local', 'sys2.T21*solid.u_tX + sys2.T22*solid.u_tY + sys2.T23*solid.u_tZ', 'y-velocity component in local system');
model.variable('var1').set('vz_local', 'sys2.T31*solid.u_tX + sys2.T32*solid.u_tY + sys2.T33*solid.u_tZ', 'z-velocity component in local system');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Receiver Variables');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('CMx', 'mass1.CMX+(sys2.invT11*CMx1+sys2.invT12*CMx2+sys2.invT13*CMx3)', 'Receiver center-of-mass x-coordinate');
model.variable('var2').set('CMy', 'mass1.CMY+(sys2.invT21*CMx1+sys2.invT22*CMx2+sys2.invT23*CMx3)', 'Receiver center-of-mass y-coordinate');
model.variable('var2').set('CMz', 'mass1.CMZ+(sys2.invT31*CMx1+sys2.invT32*CMx2+sys2.invT33*CMx3)', 'Receiver center-of-mass z-coordinate');
model.variable('var2').set('GKarm', '1[ohm]/(G_arm*sqrt(i*2*pi*freq[1/Hz]))', 'Impedance of GKarm semicapacitor');
model.variable('var2').set('Fx', 'Fx1*cir.X1_LEFF_v+Fx2*cir.X1_LMECH2_v', 'x (tube) component of force');
model.variable('var2').set('Fz', 'Fz1*cir.X1_LEFF_v+Fz2*cir.X1_LMECH2_v', 'z (cover) component of force');
model.variable('var2').set('My', 'My1*cir.X1_LEFF_v+My2*cir.X1_LMECH2_v', 'Torque about y-axis');

model.massProp.create('mass1', 'MassProperties');
model.massProp('mass1').model('comp1');
model.massProp('mass1').selection.set([1]);

model.view('view1').set('renderwireframe', true);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Transducer');
model.selection('sel1').set([1 2 5]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Inner Tube');
model.selection('sel2').set([10 16 19]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Acoustic-Structure Interaction');
model.selection('sel3').geom(2);
model.selection('sel3').set([35 36 40 43]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Inlet');
model.selection('sel4').geom(2);
model.selection('sel4').set([34]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Microphone');
model.selection('sel5').geom(2);
model.selection('sel5').set([78]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Silicone Tubing');
model.selection('sel6').set([3 4 6 7 8 9 11 12 14 15 17 18]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Solid Domains');
model.selection('uni1').set('input', {'sel1' 'sel6'});
model.selection.create('sel7', 'Explicit');
model.selection('sel7').model('comp1');
model.selection('sel7').label('Air Domains');
model.selection('sel7').set([10 13 16 19]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_mic');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.named('sel5');

model.coordSystem.create('sys2', 'geom1', 'VectorBase');
model.coordSystem('sys2').set('workplane', 'wp3');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material('mat1').selection.named('sel7');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Tubing (Silicone)');
model.material('mat2').selection.named('sel6');
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'7e6[Pa]'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.47'});
model.material('mat2').propertyGroup('def').set('density', {'1100[kg/m^3]'});

model.physics('solid').selection.named('uni1');
model.physics('acpr').selection.named('sel7');
model.physics('cir').feature.create('TEC30033', 'SubCircuitBlock');
model.physics('cir').feature('TEC30033').set('Connections', {'P1' 'N1' 'P2' 'N2'});
model.physics('cir').feature('TEC30033').label('Subcircuit Definition TEC30033');
model.physics('cir').feature('TEC30033').feature.create('RDC', 'Resistor');
model.physics('cir').feature('TEC30033').feature('RDC').set('Connections', {'P1' 'KN010'});
model.physics('cir').feature('TEC30033').feature('RDC').label('Resistor RDC');
model.physics('cir').feature('TEC30033').feature('RDC').set('R', '22.0');
model.physics('cir').feature('TEC30033').feature.create('G1_1', 'VoltageCurrentSource');
model.physics('cir').feature('TEC30033').feature('G1_1').set('Connections', {'KN020' 'N2' 'KN010' 'N1'});
model.physics('cir').feature('TEC30033').feature('G1_1').label('Voltage-Controlled Current Source G1_1');
model.physics('cir').feature('TEC30033').feature('G1_1').set('gain', '7.78E-6');
model.physics('cir').feature('TEC30033').feature.create('G1_2', 'VoltageCurrentSource');
model.physics('cir').feature('TEC30033').feature('G1_2').set('Connections', {'KN010' 'N1' 'KN020' 'N2'});
model.physics('cir').feature('TEC30033').feature('G1_2').label('Voltage-Controlled Current Source G1_2');
model.physics('cir').feature('TEC30033').feature('G1_2').set('gain', '-7.78E-6');
model.physics('cir').feature('TEC30033').feature.create('RKARM', 'Resistor');
model.physics('cir').feature('TEC30033').feature('RKARM').set('Connections', {'KN020' 'KN040'});
model.physics('cir').feature('TEC30033').feature('RKARM').label('Resistor RKARM');
model.physics('cir').feature('TEC30033').feature('RKARM').set('R', '1.0');
model.physics('cir').feature('TEC30033').feature.create('CGAP', 'Capacitor');
model.physics('cir').feature('TEC30033').feature('CGAP').set('Connections', {'KN040' 'N2'});
model.physics('cir').feature('TEC30033').feature('CGAP').label('Capacitor CGAP');
model.physics('cir').feature('TEC30033').feature('CGAP').set('C', '2.06E-13');
model.physics('cir').feature('TEC30033').feature.create('CEFF', 'Capacitor');
model.physics('cir').feature('TEC30033').feature('CEFF').set('Connections', {'KN040' 'KN050'});
model.physics('cir').feature('TEC30033').feature('CEFF').label('Capacitor CEFF');
model.physics('cir').feature('TEC30033').feature('CEFF').set('C', '2.78E-13');
model.physics('cir').feature('TEC30033').feature.create('LEFF', 'Inductor');
model.physics('cir').feature('TEC30033').feature('LEFF').set('Connections', {'KN050' 'KN060'});
model.physics('cir').feature('TEC30033').feature('LEFF').label('Inductor LEFF');
model.physics('cir').feature('TEC30033').feature('LEFF').set('L', '33100.0');
model.physics('cir').feature('TEC30033').feature.create('CMECH2', 'Capacitor');
model.physics('cir').feature('TEC30033').feature('CMECH2').set('Connections', {'KN060' 'N2'});
model.physics('cir').feature('TEC30033').feature('CMECH2').label('Capacitor CMECH2');
model.physics('cir').feature('TEC30033').feature('CMECH2').set('C', '6.21E-14');
model.physics('cir').feature('TEC30033').feature.create('LMECH2', 'Inductor');
model.physics('cir').feature('TEC30033').feature('LMECH2').set('Connections', {'KN060' 'KN070'});
model.physics('cir').feature('TEC30033').feature('LMECH2').label('Inductor LMECH2');
model.physics('cir').feature('TEC30033').feature('LMECH2').set('L', '25300.0');
model.physics('cir').feature('TEC30033').feature.create('RPIERCE', 'Resistor');
model.physics('cir').feature('TEC30033').feature('RPIERCE').set('Connections', {'KN070' 'N2'});
model.physics('cir').feature('TEC30033').feature('RPIERCE').label('Resistor RPIERCE');
model.physics('cir').feature('TEC30033').feature('RPIERCE').set('R', '1.05E10');
model.physics('cir').feature('TEC30033').feature.create('CBACK', 'Capacitor');
model.physics('cir').feature('TEC30033').feature('CBACK').set('Connections', {'KN070' 'KN090'});
model.physics('cir').feature('TEC30033').feature('CBACK').label('Capacitor CBACK');
model.physics('cir').feature('TEC30033').feature('CBACK').set('C', '2.64E-13');
model.physics('cir').feature('TEC30033').feature.create('CFRONT', 'Capacitor');
model.physics('cir').feature('TEC30033').feature('CFRONT').set('Connections', {'KN090' 'N2'});
model.physics('cir').feature('TEC30033').feature('CFRONT').label('Capacitor CFRONT');
model.physics('cir').feature('TEC30033').feature('CFRONT').set('C', '4.44E-14');
model.physics('cir').feature('TEC30033').feature.create('RPORT', 'Resistor');
model.physics('cir').feature('TEC30033').feature('RPORT').set('Connections', {'KN090' 'KN100'});
model.physics('cir').feature('TEC30033').feature('RPORT').label('Resistor RPORT');
model.physics('cir').feature('TEC30033').feature('RPORT').set('R', '8.17E7');
model.physics('cir').feature('TEC30033').feature.create('LPORT', 'Inductor');
model.physics('cir').feature('TEC30033').feature('LPORT').set('Connections', {'KN100' 'P2'});
model.physics('cir').feature('TEC30033').feature('LPORT').label('Inductor LPORT');
model.physics('cir').feature('TEC30033').feature('LPORT').set('L', '3170.0');
model.physics('cir').feature('TEC30033').feature('RKARM').set('R', 'GKarm');
model.physics('cir').create('X1', 'SubCircuit', -1);
model.physics('cir').feature('X1').set('subCircuitName', 'TEC30033');
model.physics('cir').feature('X1').setIndex('Connections', 'p1', 0, 0);
model.physics('cir').feature('X1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('X1').setIndex('Connections', 'p2', 2, 0);
model.physics('cir').feature('X1').setIndex('Connections', 0, 3, 0);
model.physics('cir').create('V1', 'VoltageSource', -1);
model.physics('cir').feature('V1').setIndex('Connections', 'p1', 0, 0);
model.physics('cir').feature('V1').setIndex('Connections', 0, 1, 0);
model.physics('cir').feature('V1').set('value', 'V0');
model.physics('cir').create('IvsU1', 'ModelDeviceIV', -1);
model.physics('cir').feature('IvsU1').setIndex('Connections', 'p2', 0, 0);
model.physics('cir').feature('IvsU1').setIndex('Connections', 0, 1, 0);
model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');

model.material('mat2').propertyGroup('def').set('lossfactor', {'0.1'});

model.physics('solid').create('rd1', 'RigidDomain', 3);
model.physics('solid').feature('rd1').selection.named('sel1');
model.physics('solid').feature('rd1').set('rho_mat', 'userdef');
model.physics('solid').feature('rd1').set('CenterOfRotationType', 'UserDefined');
model.physics('solid').feature('rd1').set('xc', {'CMx' 'CMy' 'CMz'});
model.physics('solid').feature('rd1').create('mmi1', 'MassInertia', -1);
model.physics('solid').feature('rd1').feature('mmi1').set('coordinateSystem', 'sys2');
model.physics('solid').feature('rd1').feature('mmi1').set('CenterOfMassType', 'userDefined');
model.physics('solid').feature('rd1').feature('mmi1').set('xm', {'CMx' 'CMy' 'CMz'});
model.physics('solid').feature('rd1').feature('mmi1').set('mt', 'Mass');
model.physics('solid').feature('rd1').feature('mmi1').set('mi', {'Ixx' 'Ixy' 'Ixz' 'Ixy' 'Iyy' 'Iyz' 'Ixz' 'Iyz' 'Izz'});
model.physics('solid').feature('rd1').create('af1', 'AppliedForce', -1);
model.physics('solid').feature('rd1').feature('af1').set('coordinateSystem', 'sys2');
model.physics('solid').feature('rd1').feature('af1').set('PointOfApplicationType', 'userDefined[RD]');
model.physics('solid').feature('rd1').feature('af1').set('Xpa', {'CMx' 'CMy' 'CMz'});
model.physics('solid').feature('rd1').feature('af1').set('Ft', {'Fx' '0' 'Fz'});
model.physics('solid').feature('rd1').create('am1', 'AppliedMoment', -1);
model.physics('solid').feature('rd1').feature('am1').set('coordinateSystem', 'sys2');
model.physics('solid').feature('rd1').feature('am1').set('Mt', {'0' 'My' '0'});
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([55 56 60 63]);
model.physics('acpr').create('lport1', 'LumpedPort', 2);
model.physics('acpr').feature('lport1').selection.set([34]);
model.physics('acpr').feature('lport1').set('ConnectionType', 'Circuit');
model.physics('cir').feature('IvsU1').set('V_src', 'root.comp1.acpr.lport1.V_cir');
model.physics('acpr').create('nra1', 'NarrowRegionAcousticsModel', 3);
model.physics('acpr').feature('nra1').selection.named('sel2');
model.physics('acpr').feature('nra1').set('DuctType', 'CircularDuct');
model.physics('acpr').feature('nra1').set('a', 'Td/2');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').selection.named('sel3');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([10 11 17 20 24]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([24 32 33]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 3);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '2*Td');
model.mesh('mesh1').feature('size').set('hmin', 'Td/2');
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.set([2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19]);
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'Td/2');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').run;

model.study('std1').feature('freq').set('plist', '{10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4}');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '3.954517593718395E-4');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-6);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'{10, 10.6, 11.2, 11.8, 12.5, 13.2, 14, 15, 16, 17, 18, 19, 20, 21.2, 22.4, 23.6, 25, 26.5, 28, 30, 31.5, 33.5, 35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3, 1.25e3, 1.32e3, 1.4e3, 1.5e3, 1.6e3, 1.7e3, 1.8e3, 1.9e3, 2e3, 2.12e3, 2.24e3, 2.36e3, 2.5e3, 2.65e3, 2.8e3, 3e3, 3.15e3, 3.35e3, 3.55e3, 3.75e3, 4e3, 4.25e3, 4.5e3, 4.75e3, 5e3, 5.3e3, 5.6e3, 6e3, 6.3e3, 6.7e3, 7.1e3, 7.5e3, 8e3, 8.5e3, 9e3, 9.5e3, 1e4}'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (asb1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (asb1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_currents' 'comp1_voltages' 'comp1_current_time'});
model.sol('sol1').feature('s1').feature('i1').create('mg2', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridvar', {'comp1_u' 'comp1_solid_rd_disp' 'comp1_solid_rd_rot'});
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp1_p' 'comp1_currents' 'comp1_voltages' 'comp1_current_time'});
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_u' 'comp1_solid_rd_disp' 'comp1_solid_rd_rot'});
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('mumpsblr', true);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 121, 0);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 121, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg2').feature('surf1').set('colortable', 'Wave');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Acoustic Pressure (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 121, 0);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg3').feature('surf1').set('colortable', 'Rainbow');
model.result('pg3').feature('surf1').set('colorscalemode', 'linear');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Sound Pressure Level (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 121, 0);
model.result('pg4').create('iso1', 'Isosurface');
model.result('pg4').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg4').feature('iso1').set('number', '10');
model.result('pg4').feature('iso1').set('colortable', 'Wave');
model.result('pg4').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result('pg1').run;
model.result('pg1').label('Displacement (solid)');
model.result('pg1').run;
model.result('pg1').feature('vol1').set('expr', 'solid.disp');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').create('ann1', 'Annotation');
model.result('pg3').feature('ann1').set('text', 'Center of mass');
model.result('pg3').feature('ann1').set('posxexpr', 'CMx');
model.result('pg3').feature('ann1').set('posyexpr', 'CMy');
model.result('pg3').feature('ann1').set('poszexpr', 'CMz');
model.result('pg3').run;
model.result('pg3').create('ann2', 'Annotation');
model.result('pg3').feature('ann2').set('text', 'Geometric center of box');
model.result('pg3').feature('ann2').set('posxexpr', 'mass1.CMX');
model.result('pg3').feature('ann2').set('posyexpr', 'mass1.CMY');
model.result('pg3').feature('ann2').set('poszexpr', 'mass1.CMZ');
model.result('pg3').feature('ann2').set('color', 'red');
model.result('pg3').feature('ann2').set('anchorpoint', 'lowerleft');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('iso1').set('number', 20);
model.result('pg4').run;
model.result('pg4').set('titletype', 'label');
model.result('pg4').create('sysv1', 'CoordSysVolume');
model.result('pg4').feature('sysv1').set('sys', 'sys2');
model.result('pg4').feature('sysv1').set('arrowxmethod', 'coord');
model.result('pg4').feature('sysv1').set('xcoord', 'CMx');
model.result('pg4').feature('sysv1').set('arrowymethod', 'coord');
model.result('pg4').feature('sysv1').set('ycoord', 'CMy');
model.result('pg4').feature('sysv1').set('arrowzmethod', 'coord');
model.result('pg4').feature('sysv1').set('zcoord', 'CMz');
model.result('pg4').run;

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'lumped_receiver_vibroacoustic_SPL_data.txt');
model.func('int1').importData;
model.func('int1').setIndex('funcs', 'SPL_data', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func.create('int2', 'Interpolation');
model.func('int2').set('source', 'file');
model.func('int2').set('filename', 'lumped_receiver_vibroacoustic_xvel_data_01.txt');
model.func('int2').set('nargs', 1);
model.func('int2').importData;
model.func('int2').setIndex('funcs', 'xvel_real_01', 0, 0);
model.func('int2').setIndex('funcs', 1, 0, 1);
model.func('int2').setIndex('funcs', 'xvel_imag_01', 1, 0);
model.func('int2').setIndex('funcs', 2, 1, 1);
model.func.create('int3', 'Interpolation');
model.func('int3').set('source', 'file');
model.func('int3').set('filename', 'lumped_receiver_vibroacoustic_xvel_data_02.txt');
model.func('int3').importData;
model.func('int3').set('funcname', 'xvel_dB_02');
model.func.create('int4', 'Interpolation');
model.func('int4').set('source', 'file');
model.func('int4').set('filename', 'lumped_receiver_vibroacoustic_zvel_data_01.txt');
model.func('int4').set('nargs', 1);
model.func('int4').importData;
model.func('int4').setIndex('funcs', 'zvel_real_01', 0, 0);
model.func('int4').setIndex('funcs', 1, 0, 1);
model.func('int4').setIndex('funcs', 'zvel_imag_01', 1, 0);
model.func('int4').setIndex('funcs', 2, 1, 1);
model.func.create('int5', 'Interpolation');
model.func('int5').set('source', 'file');
model.func('int5').set('filename', 'lumped_receiver_vibroacoustic_zvel_data_02.txt');
model.func('int5').importData;
model.func('int5').set('funcname', 'zvel_dB_02');

model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'function');
model.result.dataset('grid1').set('function', 'all');
model.result.dataset('grid1').set('par1', 'f');
model.result.dataset('grid1').set('parmin1', 100);
model.result.dataset('grid1').set('parmax1', 10000);
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('SPL at Microphone');
model.result('pg5').set('titletype', 'label');
model.result('pg5').set('ylabelactive', true);
model.result('pg5').set('ylabel', 'Level (dB SPL)');
model.result('pg5').set('xlog', true);
model.result('pg5').set('legendpos', 'lowerleft');
model.result('pg5').create('glob1', 'Global');
model.result('pg5').feature('glob1').set('markerpos', 'datapoints');
model.result('pg5').feature('glob1').set('linewidth', 'preference');
model.result('pg5').feature('glob1').setIndex('expr', '20*log10(abs(pmic/V0/acpr.pref_SPL))', 0);
model.result('pg5').feature('glob1').setIndex('unit', '', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Simulation', 0);
model.result('pg5').run;
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').set('data', 'grid1');
model.result('pg5').feature('lngr1').set('expr', 'SPL_data(f)');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'f[Hz/m]');
model.result('pg5').feature('lngr1').set('xdatadescractive', true);
model.result('pg5').feature('lngr1').set('xdatadescr', 'freq');
model.result('pg5').feature('lngr1').set('legend', true);
model.result('pg5').feature('lngr1').set('legendmethod', 'manual');
model.result('pg5').feature('lngr1').setIndex('legends', 'Measurements', 0);
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('x-Velocity');
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'x-velocity (dB rel. 1 m/s/V)');
model.result('pg6').set('xlog', true);
model.result('pg6').set('legendpos', 'lowerright');
model.result('pg6').create('ptgr1', 'PointGraph');
model.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg6').feature('ptgr1').set('linewidth', 'preference');
model.result('pg6').feature('ptgr1').selection.set([1 2]);
model.result('pg6').feature('ptgr1').set('expr', '20*log10(abs(vx_local)/V0)');
model.result('pg6').feature('ptgr1').set('legend', true);
model.result('pg6').feature('ptgr1').set('legendprefix', 'Point ');
model.result('pg6').feature('ptgr1').set('legendsuffix', ', Simulation');
model.result('pg6').run;
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('data', 'grid1');
model.result('pg6').feature('lngr1').set('expr', '20*log10(sqrt(xvel_real_01(f)^2+xvel_imag_01(f)^2))');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'f[Hz/m]');
model.result('pg6').feature('lngr1').set('xdatadescractive', true);
model.result('pg6').feature('lngr1').set('xdatadescr', 'freq');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'Measurements (series 1)', 0);
model.result('pg6').feature.duplicate('lngr2', 'lngr1');
model.result('pg6').run;
model.result('pg6').feature('lngr2').set('expr', 'xvel_dB_02(f)');
model.result('pg6').feature('lngr2').setIndex('legends', 'Measurements (series 2)', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('y-Velocity');
model.result('pg7').set('titletype', 'label');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'y-velocity (dB rel. 1 m/s/V)');
model.result('pg7').set('xlog', true);
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([2]);
model.result('pg7').feature('ptgr1').set('expr', '20*log10(abs(vy_local)/V0)');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('z-Velocity');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'z-velocity (dB rel. 1 m/s/V)');
model.result('pg8').set('xlog', true);
model.result('pg8').set('legendpos', 'lowerright');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([17 18]);
model.result('pg8').feature('ptgr1').set('expr', '20*log10(abs(vz_local)/V0)');
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').feature('ptgr1').set('legendprefix', 'Point ');
model.result('pg8').feature('ptgr1').set('legendsuffix', ', Simulation');
model.result('pg8').run;
model.result('pg8').create('lngr1', 'LineGraph');
model.result('pg8').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg8').feature('lngr1').set('linewidth', 'preference');
model.result('pg8').feature('lngr1').set('data', 'grid1');
model.result('pg8').feature('lngr1').set('expr', '20*log10(sqrt(zvel_real_01(f)^2+zvel_imag_01(f)^2))');
model.result('pg8').feature('lngr1').set('xdata', 'expr');
model.result('pg8').feature('lngr1').set('xdataexpr', 'f[Hz/m]');
model.result('pg8').feature('lngr1').set('xdatadescractive', true);
model.result('pg8').feature('lngr1').set('xdatadescr', 'freq');
model.result('pg8').feature('lngr1').set('legend', true);
model.result('pg8').feature('lngr1').set('legendmethod', 'manual');
model.result('pg8').feature('lngr1').setIndex('legends', 'Measurements (series 1)', 0);
model.result('pg8').feature.duplicate('lngr2', 'lngr1');
model.result('pg8').run;
model.result('pg8').feature('lngr2').set('expr', 'zvel_dB_02(f)');
model.result('pg8').feature('lngr2').setIndex('legends', 'Measurements (series 2)', 0);
model.result('pg8').run;
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 41, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 81, 0);
model.result('pg1').run;
model.result('pg1').setIndex('looplevel', 121, 0);
model.result('pg1').run;
model.result.duplicate('pg9', 'pg1');
model.result('pg9').run;
model.result('pg9').setIndex('looplevel', 114, 0);
model.result('pg9').label('Thumbnail');
model.result('pg9').set('showlegends', false);
model.result('pg9').set('titletype', 'none');
model.result('pg9').create('vol2', 'Volume');
model.result('pg9').feature('vol2').set('expr', 'acpr.Lp_t');
model.result('pg9').run;
model.result('pg9').feature('vol1').set('colortable', 'AuroraAustralis');
model.result('pg9').run;
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 41, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 81, 0);
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 121, 0);
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 41, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 81, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 121, 0);
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 81, 0);
model.result('pg4').run;
model.result('pg1').run;

model.title('Lumped Receiver with Full Vibroacoustic Coupling');

model.description(['When simulations are involved in the development of mobile devices, consumer electronics, hearing aids, or headsets, it is necessary to consider how the transducers interact with the rest of the system. Here, we will show the analysis of the interaction between a vibration isolation mounting and a miniature hearing aid transducer (a Knowles TEC-30033 balanced armature receiver) using a lumped representation of the transducer. The lumped model is simplified as an equivalent electroacoustic circuit. The vibration and acoustic characteristics of the lumped model are then coupled to a multiphysics model of the vibration isolation system to achieve a full system analysis.' newline  newline 'The system modeled represents a typical test setup that consists of a silicone tube that is attached to a 2' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'cc coupler, a common cavity utilized as an acoustic load.' newline  newline 'The mechanical forces within the lumped network are probed and applied as rigid body loads to the receiver. The output acoustic pressure and probed rigid body motion of the receiver are coupled to a finite element (FEM) model of the silicone tubing attachment and acoustic coupler.' newline  newline 'The simulated acoustic response measured in the coupler and the vibration characteristics obtained in the model are compared to measurements. The acoustic response is obtained from the coupler microphone and the vibration characteristics from laser vibrometer measurements.' newline  newline 'This model requires the Acoustics Module, the Structural Mechanics Module, and the AC/DC Module.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('lumped_receiver_vibroacoustic.mph');

model.modelNode.label('Components');

out = model;
