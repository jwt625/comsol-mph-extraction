function out = model
%
% tesla_microvalve_optimization.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Optimization_Module/Topology_Optimization');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('spf2', 'LaminarFlow', 'geom1');
model.physics('spf2').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/spf', true);
model.study('std1').feature('stat').setSolveFor('/physics/spf2', true);

model.geom('geom1').lengthUnit('mm');

model.param.set('Re', '100');
model.param.descr('Re', 'Reynolds number');
model.param.set('D', '0.2[mm]');
model.param.descr('D', 'Characteristic dimension');
model.param.set('L', '5*D');
model.param.descr('L', 'Length of channel');
model.param.set('H', '1.75*D');
model.param.descr('H', 'Width of channel');
model.param.set('mu0', '1E-3[Pa*s]');
model.param.descr('mu0', 'Dynamic viscosity');
model.param.set('rho0', '1E3[kg/m^3]');
model.param.descr('rho0', 'Density');
model.param.set('Uin', 'Re*mu0/(rho0*D)');
model.param.descr('Uin', 'Average inlet velocity');
model.param.set('meshsz', '0.005*L');
model.param.descr('meshsz', 'Mesh size');

model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'L' 'H'});
model.geom('geom1').run('r1');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'D/2' 'D/2'});
model.geom('geom1').feature('r2').set('pos', {'-D/2' '0'});
model.geom('geom1').run('r2');
model.geom('geom1').create('r3', 'Rectangle');
model.geom('geom1').feature('r3').set('size', {'D/2' 'D/2'});
model.geom('geom1').feature('r3').set('pos', {'L' '0'});
model.geom('geom1').run('r3');
model.geom('geom1').create('boxsel1', 'BoxSelection');
model.geom('geom1').feature('boxsel1').label('Symmetry');
model.geom('geom1').feature('boxsel1').set('entitydim', 1);
model.geom('geom1').feature('boxsel1').set('ymax', '1e3*eps');
model.geom('geom1').feature('boxsel1').set('condition', 'inside');
model.geom('geom1').run('boxsel1');
model.geom('geom1').create('boxsel2', 'BoxSelection');
model.geom('geom1').feature('boxsel2').label('Left');
model.geom('geom1').feature('boxsel2').set('entitydim', 1);
model.geom('geom1').feature('boxsel2').set('xmax', '-D/2+1e3*eps');
model.geom('geom1').feature('boxsel2').set('condition', 'inside');
model.geom('geom1').run('boxsel2');
model.geom('geom1').create('boxsel3', 'BoxSelection');
model.geom('geom1').feature('boxsel3').label('Right');
model.geom('geom1').feature('boxsel3').set('entitydim', 1);
model.geom('geom1').feature('boxsel3').set('xmin', 'L+D/2-1e3*eps');
model.geom('geom1').feature('boxsel3').set('condition', 'inside');
model.geom('geom1').runPre('fin');

model.material.create('mat1', 'Common', '');
model.material('mat1').propertyGroup.create('pg1', 'User-defined property group');
model.material('mat1').propertyGroup('def').set('density', {'rho0'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', {'mu0'});

model.geom('geom1').run;

model.material.create('matlnk1', 'Link', 'comp1');

model.physics('spf').create('inl1', 'InletBoundary', 1);
model.physics('spf').feature('inl1').selection.named('geom1_boxsel2');
model.physics('spf').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf').feature('inl1').set('Uavfdf', 'Uin');
model.physics('spf').create('out1', 'OutletBoundary', 1);
model.physics('spf').feature('out1').selection.named('geom1_boxsel3');
model.physics('spf').create('wallbc2', 'WallBC', 1);
model.physics('spf').feature('wallbc2').selection.named('geom1_boxsel1');
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'Slip');
model.physics('spf2').create('inl1', 'InletBoundary', 1);
model.physics('spf2').feature('inl1').selection.named('geom1_boxsel3');
model.physics('spf2').feature('inl1').set('BoundaryCondition', 'FullyDevelopedFlow');
model.physics('spf2').feature('inl1').set('Uavfdf', 'Uin');
model.physics('spf2').create('out1', 'OutletBoundary', 1);
model.physics('spf2').feature('out1').selection.named('geom1_boxsel2');
model.physics('spf2').create('wallbc2', 'WallBC', 1);
model.physics('spf2').feature('wallbc2').selection.named('geom1_boxsel1');
model.physics('spf2').feature('wallbc2').set('BoundaryCondition', 'Slip');

model.mesh('mesh1').autoMeshSize(1);
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'meshsz');
model.mesh('mesh1').run;

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, fluid flow variables (spf) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf2)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('showsolutionparams', 'on');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg2').feature.create('con1', 'Contour');
model.result('pg2').feature('con1').label('Contour');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('expr', 'p');
model.result('pg2').feature('con1').set('number', 40);
model.result('pg2').feature('con1').set('levelrounding', false);
model.result('pg2').feature('con1').set('smooth', 'internal');
model.result('pg2').feature('con1').set('showsolutionparams', 'on');
model.result('pg2').feature('con1').set('data', 'parent');
model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').label('Velocity (spf2)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg3').feature.create('surf1', 'Surface');
model.result('pg3').feature('surf1').label('Surface');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('expr', 'spf2.U');
model.result('pg3').feature('surf1').set('smooth', 'internal');
model.result('pg3').feature('surf1').set('showsolutionparams', 'on');
model.result('pg3').feature('surf1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup2D');
model.result('pg4').label('Pressure (spf2)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('data', 'dset1');
model.result('pg4').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg4').feature.create('con1', 'Contour');
model.result('pg4').feature('con1').label('Contour');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('expr', 'p2');
model.result('pg4').feature('con1').set('number', 40);
model.result('pg4').feature('con1').set('levelrounding', false);
model.result('pg4').feature('con1').set('smooth', 'internal');
model.result('pg4').feature('con1').set('showsolutionparams', 'on');
model.result('pg4').feature('con1').set('data', 'parent');
model.result('pg1').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').setIndex('genpoints', 1, 1, 0);
model.result.dataset('mir1').setIndex('genpoints', 0, 1, 1);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').run;

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.named('geom1_boxsel2');
model.cpl.create('aveop2', 'Average', 'geom1');
model.cpl('aveop2').set('axisym', true);
model.cpl('aveop2').selection.geom('geom1', 1);
model.cpl('aveop2').selection.named('geom1_boxsel3');
model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.set([2]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('dP_forward', 'aveop1(p)-aveop2(p)');
model.variable('var1').descr('dP_forward', 'Pressure difference, forward direction');
model.variable('var1').set('dP_backward', 'aveop2(p2)-aveop1(p2)');
model.variable('var1').descr('dP_backward', 'Pressure difference, backward direction');
model.variable('var1').set('Di', 'dP_backward/dP_forward');
model.variable('var1').descr('Di', 'Ratio of pressure differences');

model.sol('sol1').updateSolution;

model.result('pg1').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Diodicity');
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').set('expr', {'Di'});
model.result.evaluationGroup('eg1').feature('gev1').set('descr', {'Ratio of pressure differences'});
model.result.evaluationGroup('eg1').run;

model.common.create('dtopo1', 'DensityTopology', 'comp1');
model.common('dtopo1').selection.all;
model.common('dtopo1').selection.set([2]);
model.common('dtopo1').set('filterLengthType', 'Custom');
model.common('dtopo1').set('L_min', '1.5*meshsz');
model.common('dtopo1').set('interpolationType', 'Darcy');
model.common('dtopo1').set('projectionType', 'TanhProjection');
model.common('dtopo1').set('q_Darcy', '1');
model.common('dtopo1').set('theta_0', '1');
model.common('dtopo1').set('discretization', 'constant');

model.variable('var1').set('phi_forward', 'spf.Qvd+alpha*(u^2+v^2)');
model.variable('var1').descr('phi_forward', 'Dissipation density, forward flow');
model.variable('var1').set('phi_backward', 'spf2.Qvd+alpha*(u2^2+v2^2)');
model.variable('var1').descr('phi_backward', 'Dissipation density, backward flow');
model.variable('var1').set('phi_total', 'phi_backward+phi_forward');
model.variable('var1').descr('phi_total', 'Total dissipation');
model.variable('var1').set('E_forward', 'intop1(phi_forward)');
model.variable('var1').descr('E_forward', 'Energy dissipation, forward flow');
model.variable('var1').set('E_backward', 'intop1(phi_backward)');
model.variable('var1').descr('E_backward', 'Energy dissipation, backward flow');
model.variable('var1').set('obj', 'E_backward/E_forward');
model.variable('var1').descr('obj', 'Objective function');
model.variable('var1').set('alpha', '16.*mu0*dtopo1.theta_p/meshsz^2');
model.variable('var1').descr('alpha', 'Friction force');

model.physics('spf').create('vf1', 'VolumeForce', 2);
model.physics('spf').feature('vf1').selection.set([2]);
model.physics('spf').feature('vf1').set('F', {'-alpha*u' '-alpha*v' '0'});
model.physics('spf2').create('vf1', 'VolumeForce', 2);
model.physics('spf2').feature('vf1').selection.set([2]);
model.physics('spf2').feature('vf1').set('F', {'-alpha*u2' '-alpha*v2' '0'});

model.study('std1').label('Optimization');
model.study('std1').create('topo', 'TopologyOptimization');
model.study('std1').feature('topo').set('mmamaxiter', 200);
model.study('std1').feature('topo').set('movelimitactive', true);
model.study('std1').feature('topo').set('movelimit', 0.2);
model.study('std1').feature('topo').set('optobj', {'comp1.obj'});
model.study('std1').feature('topo').set('descr', {'Objective function'});
model.study('std1').feature('topo').set('objectivetype', 'maximization');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);

model.sol('sol1').study('std1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_dtopo1_theta_f').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('o1', 'Optimization');
model.sol('sol1').feature('o1').set('control', 'topo');
model.sol('sol1').feature('o1').create('s1', 'StationaryAttrib');
model.sol('sol1').feature('o1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('o1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('o1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('o1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('o1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('o1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('o1').feature('s1').feature('d1').label('Direct (Merged)');
model.sol('sol1').feature('o1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i1').label('AMG, fluid flow variables (spf2)');
model.sol('sol1').feature('o1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pinlfdf'});
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf2_inl1_Pinlfdf'});
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('o1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i2').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('o1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_spf_inl1_Pinlfdf'});
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('o1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('o1').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol1').feature('o1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('o1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result('pg1').run;

model.sol('sol1').feature('o1').set('gcmma', false);

model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').run;
model.result('pg5').label('Topology');
model.result('pg5').set('data', 'mir1');
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'dtopo1.theta');
model.result('pg5').feature('surf1').set('colortable', 'GrayScale');
model.result('pg5').feature('surf1').set('colorlegend', false);
model.result('pg5').feature('surf1').set('rangecoloractive', true);
model.result('pg5').feature('surf1').set('rangecolormax', 1);
model.result('pg5').run;

model.study('std1').feature('topo').set('plot', true);
model.study('std1').feature('topo').set('plotgroup', 'pg5');

model.sol('sol1').runAll;

model.result('pg1').run;

model.study('std1').feature('topo').set('probewindow', '');

model.result('pg1').set('data', 'mir1');
model.result('pg1').run;
model.result('pg1').label('Forward Flow');
model.result('pg1').create('arws1', 'ArrowSurface');
model.result('pg1').feature('arws1').set('xnumber', 30);
model.result('pg1').feature('arws1').set('ynumber', 30);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').set('expr', 'dtopo1.theta');
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'white');
model.result('pg1').feature('surf2').set('rangedataactive', true);
model.result('pg1').feature('surf2').set('rangedatamax', 0.5);
model.result('pg1').run;
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').label('Backward Flow');
model.result('pg3').feature.copy('arws1', 'pg1/arws1');
model.result('pg3').feature.copy('surf2', 'pg1/surf2');
model.result('pg3').run;
model.result('pg3').feature('arws1').set('expr', {'u2' 'v2'});
model.result('pg3').feature('arws1').set('descr', 'Velocity field');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('data', 'mir1');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg5').run;
model.result('pg5').run;
model.result('pg1').run;

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').set('type', 'plotgroup');
model.nodeGroup('grp1').add('plotgroup', 'pg1');
model.nodeGroup('grp1').add('plotgroup', 'pg2');
model.nodeGroup('grp1').add('plotgroup', 'pg3');
model.nodeGroup('grp1').add('plotgroup', 'pg4');
model.nodeGroup('grp1').add('plotgroup', 'pg5');
model.nodeGroup('grp1').label('Optimized Design');

model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').label('Dissipation in Solid Regions');
model.result.evaluationGroup('eg2').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg2').feature('gev1').setIndex('expr', 'intop1(phi_total*(1-dtopo1.theta))/intop1(phi_total)', 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('unit', 1, 0);
model.result.evaluationGroup('eg2').feature('gev1').setIndex('descr', 'Relative dissipation in solid', 0);
model.result.evaluationGroup('eg2').run;
model.result.dataset.create('filt1', 'Filter');
model.result.dataset('filt1').set('expr', 'dtopo1.theta');
model.result.dataset('filt1').set('lowerexpr', '0.5');
model.result.dataset('filt1').set('useder', false);
model.result.dataset('filt1').createMesh('comp2', 'geom2', 'mesh2', 'imp1');

model.mesh('mesh2').feature('imp1').importData;
model.mesh('mesh2').create('ada1', 'Adapt');
model.mesh('mesh2').feature('ada1').set('method', 'modify');
model.mesh('mesh2').feature('ada1').set('solution', 'none');
model.mesh('mesh2').feature('ada1').set('exprtype', 'size');
model.mesh('mesh2').feature('ada1').set('sizeexpr', 'meshsz');
model.mesh('mesh2').feature('ada1').set('maxrefinement', 0);
model.mesh('mesh2').feature('ada1').set('maxcoarsening', Inf);
model.mesh('mesh2').run('ada1');
model.mesh('mesh2').run;

model.material.create('matlnk2', 'Link', 'comp2');

model.physics.copy('spf3', 'spf', 'comp2');
model.physics.copy('spf4', 'spf2', 'comp2');
model.physics('spf3').feature('inl1').selection.named('mesh2_imp1_geom1_boxsel2');
model.physics('spf3').feature('out1').selection.named('mesh2_imp1_geom1_boxsel3');
model.physics('spf3').feature('wallbc2').selection.named('mesh2_imp1_geom1_boxsel1');
model.physics('spf3').feature.remove('vf1');
model.physics('spf4').feature('inl1').selection.named('mesh2_imp1_geom1_boxsel3');
model.physics('spf4').feature('out1').selection.named('mesh2_imp1_geom1_boxsel2');
model.physics('spf4').feature('wallbc2').selection.named('mesh2_imp1_geom1_boxsel1');
model.physics('spf4').feature.remove('vf1');

model.cpl.create('aveop3', 'Average', 'geom2');
model.cpl('aveop3').set('axisym', true);
model.cpl('aveop3').selection.geom('geom2', 1);
model.cpl('aveop3').selection.named('mesh2_imp1_geom1_boxsel2');
model.cpl.duplicate('aveop4', 'aveop3');
model.cpl('aveop4').selection.named('mesh2_imp1_geom1_boxsel3');

model.variable.create('var2');
model.variable('var2').model('comp2');
model.variable('var2').set('Di', '(aveop4(p2)-aveop3(p2))/(aveop3(p)-aveop4(p))', 'Ratio of pressure differences');
model.variable('var2').descr('Di', 'Ratio of pressure differences');

model.study.create('std2');
model.study('std2').create('stat', 'Stationary');
model.study('std2').feature('stat').setSolveFor('/physics/spf', false);
model.study('std2').feature('stat').setSolveFor('/physics/spf2', false);
model.study('std2').feature('stat').setSolveFor('/physics/spf3', true);
model.study('std2').feature('stat').setSolveFor('/physics/spf4', true);
model.study('std1').feature('stat').setEntry('activate', 'spf3', false);
model.study('std1').feature('stat').setEntry('activate', 'spf4', false);
model.study('std2').feature('stat').setEntry('activate', 'comp1:topopt', false);
model.study('std2').label('Verification');

model.sol.create('sol2');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([1 2 3]);
model.mesh('mesh2').stat.selection.geom(2);
model.mesh('mesh2').stat.selection.set([1 2 3]);

model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'stat');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'stat');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Direct, fluid flow variables (spf3) (Merged)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i1').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i1').label('AMG, fluid flow variables (spf4)');
model.sol('sol2').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp2_spf4_inl1_Pinlfdf'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp2_spf4_inl1_Pinlfdf'});
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol2').feature('s1').feature('i2').set('prefuntype', 'left');
model.sol('sol2').feature('s1').feature('i2').set('itrestart', 50);
model.sol('sol2').feature('s1').feature('i2').set('rhob', 20);
model.sol('sol2').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol2').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol2').feature('s1').feature('i2').label('AMG, fluid flow variables (spf3)');
model.sol('sol2').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('strconn', 0.02);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('saamgcompwise', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp2_spf3_inl1_Pinlfdf'});
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp2_spf3_inl1_Pinlfdf'});
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol2').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol2').feature('s1').feature('fc1').set('minstep', 1.0E-4);
model.sol('sol2').feature('s1').feature('fc1').set('maxiter', 100);
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.dataset('dset3').set('geom', 'geom2');
model.result.create('pg6', 'PlotGroup2D');
model.result('pg6').label('Velocity (spf3)');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('data', 'dset3');
model.result('pg6').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg6').feature.create('surf1', 'Surface');
model.result('pg6').feature('surf1').label('Surface');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('smooth', 'internal');
model.result('pg6').feature('surf1').set('showsolutionparams', 'on');
model.result('pg6').feature('surf1').set('data', 'parent');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Pressure (spf3)');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset3');
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg7').feature.create('con1', 'Contour');
model.result('pg7').feature('con1').label('Contour');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('expr', 'p');
model.result('pg7').feature('con1').set('number', 40);
model.result('pg7').feature('con1').set('levelrounding', false);
model.result('pg7').feature('con1').set('smooth', 'internal');
model.result('pg7').feature('con1').set('showsolutionparams', 'on');
model.result('pg7').feature('con1').set('data', 'parent');
model.result.dataset('dset3').set('geom', 'geom2');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Velocity (spf4)');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'dset3');
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Surface');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('expr', 'spf4.U');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('showsolutionparams', 'on');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').label('Pressure (spf4)');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'dset3');
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg9').feature.create('con1', 'Contour');
model.result('pg9').feature('con1').label('Contour');
model.result('pg9').feature('con1').set('showsolutionparams', 'on');
model.result('pg9').feature('con1').set('expr', 'p2');
model.result('pg9').feature('con1').set('number', 40);
model.result('pg9').feature('con1').set('levelrounding', false);
model.result('pg9').feature('con1').set('smooth', 'internal');
model.result('pg9').feature('con1').set('showsolutionparams', 'on');
model.result('pg9').feature('con1').set('data', 'parent');

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').label('Topology Optimization');
model.nodeGroup('grp2').set('type', 'plotgroup');
model.nodeGroup('grp2').placeAfter('plotgroup', 'pg9');
model.nodeGroup.move('grp2', 2);

model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Output material volume factor');
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').label('Threshold');

model.nodeGroup('grp2').add('plotgroup', 'pg10');
model.nodeGroup('grp2').add('plotgroup', 'pg11');

model.result.dataset.create('filt2', 'Filter');
model.result.dataset('filt2').label('Filter');
model.result.dataset('filt2').set('data', 'dset2');
model.result.dataset('filt2').set('expr', 'dtopo1.theta');
model.result.dataset('filt2').set('lowerexpr', '0.5');
model.result.dataset('filt2').set('smooth', 'none');
model.result.dataset('filt2').set('useder', false);
model.result('pg10').set('data', 'dset2');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', 'dtopo1.theta');
model.result('pg10').feature('surf1').set('rangecoloractive', true);
model.result('pg10').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg10').feature('surf1').set('rangecolormin', 0);
model.result('pg10').feature('surf1').set('rangecolormax', 1);
model.result('pg11').set('data', 'filt2');
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', '1');
model.result('pg11').feature('surf1').set('coloring', 'uniform');
model.result('pg11').feature('surf1').set('color', 'gray');
model.result('pg11').feature('surf1').set('titletype', 'none');
model.result('pg6').run;

model.nodeGroup.create('grp3', 'Results');
model.nodeGroup('grp3').set('type', 'plotgroup');
model.nodeGroup.move('grp3', 1);
model.nodeGroup('grp3').add('plotgroup', 'pg6');
model.nodeGroup('grp3').add('plotgroup', 'pg7');
model.nodeGroup('grp3').add('plotgroup', 'pg8');
model.nodeGroup('grp3').add('plotgroup', 'pg9');
model.nodeGroup('grp3').label('Verification');
model.nodeGroup.remove('grp2');

model.result.evaluationGroup('eg1').create('gev2', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev2').set('data', 'dset3');
model.result.evaluationGroup('eg1').feature('gev2').set('expr', {'Di'});
model.result.evaluationGroup('eg1').feature('gev2').set('descr', {'Ratio of pressure differences'});
model.result.evaluationGroup('eg1').run;

model.title('Optimization of a Tesla Microvalve');

model.description('This example performs a topological optimization for a Tesla microvalve. A Tesla microvalve inhibits backward flow using friction forces rather than moving parts. The design can be optimized by distributing a specific amount of material within the modeling domain. The goal is to maximize the ratio of the pressure drop for the forward and backward flow across the device.');

model.mesh('mesh1').clearMesh;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('tesla_microvalve_optimization.mph');

model.modelNode.label('Components');

out = model;
