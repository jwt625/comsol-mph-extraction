function out = model
%
% evans_droplet.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Corrosion_Module/Atmospheric_Corrosion');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcd', 'TertiaryCurrentDistributionNernstPlanck', 'geom1', {'cFe' 'cFeOH' 'cFeCO3' 'cO2' 'cCO2' 'cH2CO3' 'cHCO3' 'cCO3' 'cNa' 'cCl'});
model.physics('tcd').prop('SpeciesProperties').set('ChargeTransportModel', 'WaterBased');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/tcd', true);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('solnum', 'auto');
model.study('std1').feature('time').set('notsolnum', 'auto');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/tcd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('a', '0.0071550[m]', 'Droplet width');
model.param.set('b', '0.0037306[m]', 'Droplet height');
model.param.set('c_unit', '1000[mol/m^3]', 'Unit activity concentration');
model.param.set('cCO20', 'KCO2*PCO2*1e3*0.7[mol/m^3]', 'Initial concentration of CO2');
model.param.set('cH2CO30', 'KCO2H*cCO20', 'Initial concentration of H2CO3');
model.param.set('cHCO30', 'sqrt(KH2CO3*c_unit*cH2CO30)', 'Initial concentration of HCO3');
model.param.set('cNaCl0', '0.5[M]', 'Initial concentration of NaCl');
model.param.set('cO2_sol', '1.22[mM]', 'Oxygen solubility');
model.param.set('cO20', 'cO2s', 'Initial oxygen concentration');
model.param.set('cO2s', 'cO2_sol*0.21*0.7', 'Oxygen concentration at the drop''s surface');
model.param.set('ctot_mdis', '1e-5[mol/m^2]', 'Total molar availability per surface area for metal dissolution');
model.param.set('DCl', '2.03e-9[m^2/s]', 'Diffusion coefficient of Cl');
model.param.set('DCO2', '1.96e-9[m^2/s]', 'Diffusion coefficient of CO2');
model.param.set('DCO3', '0.92e-9[m^2/s]', 'Diffusion coefficient of CO3');
model.param.set('DFe', '0.72e-9[m^2/s]', 'Diffusion coefficient of Fe2');
model.param.set('DH', '9.312e-9[m^2/s]', 'Diffusion coefficient of H');
model.param.set('DH2CO3', '2e-9[m^2/s]', 'Diffusion coefficient of H2CO3');
model.param.set('DHCO3', '1.105e-9[m^2/s]', 'Diffusion coefficient of HCO3');
model.param.set('DNa', '1.33e-9[m^2/s]', 'Diffusion coefficient of Na');
model.param.set('DO2', '1.96e-9[m^2/s]', 'Diffusion coefficient of O2');
model.param.set('DOH', '5.26e-9[m^2/s]', 'Diffusion coefficient of OH');
model.param.set('Eeq_ref_Fe', '-0.47[V]', 'Reference equilibrium potential for iron dissolution reaction');
model.param.set('Eeq_ref_O2', '0.401[V]', 'Reference equilibrium potential for oxygen reduction reaction');
model.param.set('i0_ref_Fe', '1[A/m^2]', 'Reference exchange current density for iron dissolution reaction');
model.param.set('i0_ref_O2', '1e-7[A/m^2]', 'Reference exchange current density for oxygen reduction reaction');
model.param.set('alphaa_Fe', '1.5', 'Anodic transfer coefficient for iron dissolution reaction');
model.param.set('alphaa_O2', '3.5', 'Anodic transfer coefficient for oxygen reduction reaction');
model.param.set('KCO2', '0.0454*(1.6616-5.736e-2*(T[1/K]-273)+1.031e-3*(T[1/K]-273)^2-9.68e-6*(T[1/K]-273)^3+4.471e-8*(T[1/K]-273)^4-7.912e-11*(T[1/K]-273)^5)', 'Henry''s constant');
model.param.set('KCO2H', '2.58e-3', 'Equilibrium constant for CO2 hydration');
model.param.set('KFeCO3', '10^-6.57', 'Equilibrium constant for aqueous FeCO3 dissociation');
model.param.set('KFeOH', '10^-9.5', 'Equilibrium constant for FeOH formation');
model.param.set('kfFeCO3', '1[mol/m^3/s]', 'Reaction rate constant for FeCO3 precipitation');
model.param.set('kfFeOH2', '1e6[mol/m^3/s]', 'Reaction rate constant for FeOH2 precipitation');
model.param.set('KH2CO3', '387.6*10^(-(6.41-1.594e-3*TF+8.52e-6*(TF)^2))', 'Equilibrium constant for H2CO3 dissociation');
model.param.set('KHCO3', '10^(-(10.61-4.97e-3*TF+1.331e-5*(TF)^2))', 'Equilibrium constant for HCO3 dissociation');
model.param.set('KspFeCO3', '10^-10.7/KFeCO3', 'Equilibrium constant, FeCO3 dissolution');
model.param.set('KspFeOH2', '8e-16', 'Equilibrium constant, FeOH2 dissolution');
model.param.set('M_FeCO3', '115.854[g/mol]', 'Molecular weight of FeCO3');
model.param.set('M_FeOH2', '89.86[g/mol]', 'Molecular weight of FeOH2');
model.param.set('PCO2', '400[ppm]', 'Partial pressure of CO2 in bar');
model.param.set('phil0', '0.5[V]', 'Initial electrolyte potential');
model.param.set('rho_FeCO3', '4.03[g/cm^3]', 'Density of FeCO3');
model.param.set('rho_FeOH2', '3.4[g/cm^3]', 'Density of FeOH2');
model.param.set('T', '298 [K]', 'Temperature');
model.param.set('TF', '(T-0[degC])/1[K]*1.8+32', 'Operating temperature in Fahrenheit');
model.param.set('zCl', '-1', 'Charge number of CO3');
model.param.set('zCO3', '-2', 'Charge number of CO3');
model.param.set('zFe', '2', 'Charge number of Fe');
model.param.set('zFeOH', '1', 'Charge number of FeOH');
model.param.set('zHCO3', '-1', 'Charge number of HCO3');
model.param.set('zNa', '1', 'Charge number of Na');

model.geom('geom1').create('e1', 'Ellipse');
model.geom('geom1').feature('e1').set('semiaxes', {'a' 'b'});
model.geom('geom1').feature('e1').set('angle', 90);
model.geom('geom1').runPre('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');

model.geom('geom1').run;

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('rFeCO3', 'kfFeCO3*b*max(cFeCO3[M^-1]-KspFeCO3,0)', 'Reaction rate for FeCO3 precipitation');
model.variable('var1').set('rFeOH2', 'kfFeOH2*b*max(cFe*tcd.cOH^2[M^-3]-KspFeOH2,0)', 'Reaction rate for FeOH2 precipitation');
model.variable('var1').set('theta', '1-exp(-tcd.cbtot/ctot_mdis)', 'Corrosion-product coverage degree');

model.physics('tcd').prop('SpeciesActivity').set('SpeciesActivity', 'DebyeHuckel');
model.physics('tcd').feature('sp1').setIndex('z', 'zFe', 0);
model.physics('tcd').feature('sp1').setIndex('z', 'zFeOH', 1);
model.physics('tcd').feature('sp1').setIndex('z', 'zHCO3', 6);
model.physics('tcd').feature('sp1').setIndex('z', 'zCO3', 7);
model.physics('tcd').feature('sp1').setIndex('z', 'zNa', 8);
model.physics('tcd').feature('sp1').setIndex('z', 'zCl', 9);
model.physics('tcd').feature('ice1').set('D_cFe', {'DFe' '0' '0' '0' 'DFe' '0' '0' '0' 'DFe'});
model.physics('tcd').feature('ice1').set('D_cFeOH', {'DFe' '0' '0' '0' 'DFe' '0' '0' '0' 'DFe'});
model.physics('tcd').feature('ice1').set('D_cFeCO3', {'DFe' '0' '0' '0' 'DFe' '0' '0' '0' 'DFe'});
model.physics('tcd').feature('ice1').set('D_cO2', {'DO2' '0' '0' '0' 'DO2' '0' '0' '0' 'DO2'});
model.physics('tcd').feature('ice1').set('D_cCO2', {'DCO2' '0' '0' '0' 'DCO2' '0' '0' '0' 'DCO2'});
model.physics('tcd').feature('ice1').set('D_cH2CO3', {'DH2CO3' '0' '0' '0' 'DH2CO3' '0' '0' '0' 'DH2CO3'});
model.physics('tcd').feature('ice1').set('D_cHCO3', {'DHCO3' '0' '0' '0' 'DHCO3' '0' '0' '0' 'DHCO3'});
model.physics('tcd').feature('ice1').set('D_cCO3', {'DCO3' '0' '0' '0' 'DCO3' '0' '0' '0' 'DCO3'});
model.physics('tcd').feature('ice1').set('D_cNa', {'DNa' '0' '0' '0' 'DNa' '0' '0' '0' 'DNa'});
model.physics('tcd').feature('ice1').set('D_cCl', {'DCl' '0' '0' '0' 'DCl' '0' '0' '0' 'DCl'});
model.physics('tcd').feature('ice1').set('DH', {'DH' '0' '0' '0' 'DH' '0' '0' '0' 'DH'});
model.physics('tcd').feature('ice1').set('DOH', {'DOH' '0' '0' '0' 'DOH' '0' '0' '0' 'DOH'});
model.physics('tcd').feature('init1').setIndex('initc', 'cO20', 3);
model.physics('tcd').feature('init1').setIndex('initc', 'cCO20', 4);
model.physics('tcd').feature('init1').setIndex('initc', 'cH2CO30', 5);
model.physics('tcd').feature('init1').setIndex('initc', 'cHCO30', 6);
model.physics('tcd').feature('init1').setIndex('initc', 'cNaCl0', 8);
model.physics('tcd').feature('init1').setIndex('initc', 'cNaCl0', 9);
model.physics('tcd').feature('init1').set('initphil', 'phil0');
model.physics('tcd').create('es1', 'ElectrodeSurface', 1);
model.physics('tcd').feature('es1').selection.set([2]);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 'FeOH2', 0, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 'rho_FeOH2', 0, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 'M_FeOH2', 0, 0);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 1, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es1').setIndex('Species', 's1', 1, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 8960, 1, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 0.06355, 1, 0);
model.physics('tcd').feature('es1').setIndex('Species', 'FeCO3', 1, 0);
model.physics('tcd').feature('es1').setIndex('rhos', 'rho_FeCO3', 1, 0);
model.physics('tcd').feature('es1').setIndex('Ms', 'M_FeCO3', 1, 0);
model.physics('tcd').feature('es1').feature('er1').label('Electrode Reaction: Iron Dissolution');
model.physics('tcd').feature('es1').feature('er1').set('nm', 2);
model.physics('tcd').feature('es1').feature('er1').setIndex('Vi0', -1, 0);
model.physics('tcd').feature('es1').feature('er1').set('Eeq_ref', 'Eeq_ref_Fe');
model.physics('tcd').feature('es1').feature('er1').set('i0_ref', 'i0_ref_Fe*(1-theta)');
model.physics('tcd').feature('es1').feature('er1').set('alphaa', 'alphaa_Fe');
model.physics('tcd').feature('es1').create('er2', 'ElectrodeReaction', 1);
model.physics('tcd').feature('es1').feature('er2').label('Electrode Reaction: Oxygen Reduction');
model.physics('tcd').feature('es1').feature('er2').set('nm', 4);
model.physics('tcd').feature('es1').feature('er2').setIndex('Vi0', -1, 3);
model.physics('tcd').feature('es1').feature('er2').set('Eeq_ref', 'Eeq_ref_O2');
model.physics('tcd').feature('es1').feature('er2').set('WaterBasedReferenceState', 'OH');
model.physics('tcd').feature('es1').feature('er2').setIndex('cref', 'cO2_sol', 3, 0);
model.physics('tcd').feature('es1').feature('er2').set('i0_ref', 'i0_ref_O2*(tcd.eta_er2<0)');
model.physics('tcd').feature('es1').feature('er2').set('alphaa', 'alphaa_O2');
model.physics('tcd').feature('es1').create('nfr1', 'NonFaradaicReactions', 1);
model.physics('tcd').feature('es1').feature('nfr1').label('Nonfaradaic Reactions: Ferrous Hydroxide Precipitation');
model.physics('tcd').feature('es1').feature('nfr1').setIndex('species', true, 0);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('species', true, 2);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('J0', '-rFeOH2', 0);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('J0', '-rFeCO3', 2);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('R', 'rFeOH2', 0, 0);
model.physics('tcd').feature('es1').feature('nfr1').setIndex('R', 'rFeCO3', 1, 0);
model.physics('tcd').create('conc1', 'Concentration', 1);
model.physics('tcd').feature('conc1').selection.set([3]);
model.physics('tcd').feature('conc1').setIndex('species', true, 3);
model.physics('tcd').feature('conc1').setIndex('species', true, 4);
model.physics('tcd').feature('conc1').setIndex('c0', 'cO2s', 3);
model.physics('tcd').feature('conc1').setIndex('c0', 'cCO20', 4);
model.physics('tcd').create('eqreac1', 'EquilibriumReaction', 2);
model.physics('tcd').feature('eqreac1').selection.all;
model.physics('tcd').feature('eqreac1').set('Keq0', 'KCO2H');
model.physics('tcd').feature('eqreac1').setIndex('nu', -1, 4);
model.physics('tcd').feature('eqreac1').setIndex('nu', 1, 5);
model.physics('tcd').create('eqreac2', 'EquilibriumReaction', 2);
model.physics('tcd').feature('eqreac2').selection.all;
model.physics('tcd').feature('eqreac2').set('Keq0', 'KH2CO3');
model.physics('tcd').feature('eqreac2').setIndex('nu', -1, 5);
model.physics('tcd').feature('eqreac2').setIndex('nu', 1, 6);
model.physics('tcd').feature('eqreac2').set('nuH', 1);
model.physics('tcd').create('eqreac3', 'EquilibriumReaction', 2);
model.physics('tcd').feature('eqreac3').selection.all;
model.physics('tcd').feature('eqreac3').set('Keq0', 'KHCO3');
model.physics('tcd').feature('eqreac3').setIndex('nu', -1, 6);
model.physics('tcd').feature('eqreac3').setIndex('nu', 1, 7);
model.physics('tcd').feature('eqreac3').set('nuH', 1);
model.physics('tcd').create('eqreac4', 'EquilibriumReaction', 2);
model.physics('tcd').feature('eqreac4').selection.all;
model.physics('tcd').feature('eqreac4').set('Keq0', 'KFeOH');
model.physics('tcd').feature('eqreac4').setIndex('nu', -1, 0);
model.physics('tcd').feature('eqreac4').setIndex('nu', 1, 1);
model.physics('tcd').feature('eqreac4').set('nuH', 1);
model.physics('tcd').create('eqreac5', 'EquilibriumReaction', 2);
model.physics('tcd').feature('eqreac5').selection.all;
model.physics('tcd').feature('eqreac5').set('Keq0', 'KFeCO3');
model.physics('tcd').feature('eqreac5').setIndex('nu', 1, 0);
model.physics('tcd').feature('eqreac5').setIndex('nu', -1, 2);
model.physics('tcd').feature('eqreac5').setIndex('nu', 1, 7);

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').feature('ftri1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('ftri1').feature('dis1').selection.set([2]);
model.mesh('mesh1').feature('ftri1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('ftri1').feature('dis1').set('elemcount', 200);
model.mesh('mesh1').feature('ftri1').feature('dis1').set('elemratio', 10);
model.mesh('mesh1').run;

model.study('std1').feature('cdi').set('initType', 'secondary');
model.study('std1').feature('time').set('tlist', 'range(0,10,300)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac3_Req').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac4_Req').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac5_Req').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac2_Req').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac1_Req').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac3_Req').set('scaleval', '1000');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac4_Req').set('scaleval', '1000');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac5_Req').set('scaleval', '1000');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac2_Req').set('scaleval', '1000');
model.sol('sol1').feature('v2').feature('comp1_tcd_eqreac1_Req').set('scaleval', '1000');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,10,300)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventout', true);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').label('Direct (tcd)');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('Algebraic Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_eqreac1_Req' 'comp1_tcd_eqreac2_Req' 'comp1_tcd_eqreac3_Req' 'comp1_tcd_eqreac4_Req' 'comp1_tcd_eqreac5_Req'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_eqreac1_Req' 'comp1_tcd_eqreac2_Req' 'comp1_tcd_eqreac3_Req' 'comp1_tcd_eqreac4_Req' 'comp1_tcd_eqreac5_Req'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('Geometric Multigrid (tcd)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('va1').set('vankavars', {'comp1_tcd_eqreac1_Req' 'comp1_tcd_eqreac2_Req' 'comp1_tcd_eqreac3_Req' 'comp1_tcd_eqreac4_Req' 'comp1_tcd_eqreac5_Req'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('va1', 'Vanka');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('va1').set('vankavars', {'comp1_tcd_eqreac1_Req' 'comp1_tcd_eqreac2_Req' 'comp1_tcd_eqreac3_Req' 'comp1_tcd_eqreac4_Req' 'comp1_tcd_eqreac5_Req'});
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset1');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', true);
model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 31, 0);
model.result('pg1').label('Electrolyte Potential (tcd)');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'phil'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 31, 0);
model.result('pg2').label('Electrolyte Potential, 3D (tcd)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'phil'});
model.result('pg2').create('str1', 'Streamline');
model.result('pg2').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg2').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg2').feature('str1').set('pointtype', 'arrow');
model.result('pg2').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg2').feature('str1').set('color', 'gray');
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 31, 0);
model.result('pg3').label('Electrolyte Current Density (tcd)');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col1', 'Color');
model.result('pg3').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 31, 0);
model.result('pg4').label('Electrolyte Current Density, 3D (tcd)');
model.result('pg4').create('str1', 'Streamline');
model.result('pg4').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg4').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg4').feature('str1').set('pointtype', 'arrow');
model.result('pg4').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg4').feature('str1').set('color', 'gray');
model.result('pg4').feature('str1').create('col1', 'Color');
model.result('pg4').feature('str1').feature('col1').set('expr', 'root.comp1.tcd.IlMag');
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('expr', {'abs(tcd.itot)'});
model.result('pg3').feature('line1').set('linetype', 'tube');
model.result('pg3').feature('line1').set('inherittubescale', false);
model.result('pg3').feature('line1').set('inheritplot', 'str1');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'abs(tcd.itot)'});
model.result('pg4').feature('surf1').set('inheritplot', 'str1');
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 31, 0);
model.result('pg5').label('Electrode Potential vs. Adjacent Reference (tcd)');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'rev1');
model.result('pg6').setIndex('looplevel', 31, 0);
model.result('pg6').label('Electrode Potential vs. Adjacent Reference, 3D (tcd)');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilz'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg6').create('str1', 'Streamline');
model.result('pg6').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg6').feature('str1').set('expr', {'tcd.Ilr' 'tcd.Ilphi' 'tcd.Ilz'});
model.result('pg6').feature('str1').set('pointtype', 'arrow');
model.result('pg6').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg6').feature('str1').set('color', 'gray');
model.result('pg5').create('line1', 'Line');
model.result('pg5').feature('line1').set('expr', {'tcd.Evsref'});
model.result('pg5').feature('line1').set('linetype', 'tube');
model.result('pg5').feature('line1').set('inherittubescale', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'tcd.Evsref'});
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 31, 0);
model.result('pg7').label('Total Electrode Thickness Change (tcd)');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'rev1');
model.result('pg8').setIndex('looplevel', 31, 0);
model.result('pg8').label('Total Electrode Thickness Change, 3D (tcd)');
model.result('pg7').create('line1', 'Line');
model.result('pg7').feature('line1').set('expr', {'tcd.sbtot'});
model.result('pg7').feature('line1').set('linetype', 'tube');
model.result('pg7').feature('line1').set('inherittubescale', false);
model.result('pg7').feature('line1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'tcd.sbtot'});
model.result('pg8').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result.create('pg9', 'PlotGroup2D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 31, 0);
model.result('pg9').label('Concentration, Fe (tcd)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('prefixintitle', 'Species Fe:');
model.result('pg9').set('expressionintitle', false);
model.result('pg9').set('typeintitle', true);
model.result('pg9').create('surf1', 'Surface');
model.result('pg9').feature('surf1').set('expr', {'cFe'});
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'tcd.tflux_cFer' 'tcd.tflux_cFez'});
model.result('pg9').feature('str1').set('posmethod', 'uniform');
model.result('pg9').feature('str1').set('recover', 'pprint');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').set('data', 'dset1');
model.result.dataset('rev2').set('revangle', 225);
model.result.dataset('rev2').set('startangle', -90);
model.result.dataset('rev2').set('hasspacevars', false);
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'rev2');
model.result('pg10').setIndex('looplevel', 31, 0);
model.result('pg10').label('Concentration, Fe, 3D (tcd)');
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'cFe'});
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('typeintitle', false);
model.result('pg10').set('prefixintitle', 'Species Fe:');
model.result('pg10').set('expressionintitle', false);
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 31, 0);
model.result('pg11').label('Concentration, FeOH (tcd)');
model.result('pg11').set('titletype', 'custom');
model.result('pg11').set('prefixintitle', 'Species FeOH:');
model.result('pg11').set('expressionintitle', false);
model.result('pg11').set('typeintitle', true);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'cFeOH'});
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'tcd.tflux_cFeOHr' 'tcd.tflux_cFeOHz'});
model.result('pg11').feature('str1').set('posmethod', 'uniform');
model.result('pg11').feature('str1').set('recover', 'pprint');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'gray');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'rev2');
model.result('pg12').setIndex('looplevel', 31, 0);
model.result('pg12').label('Concentration, FeOH, 3D (tcd)');
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', {'cFeOH'});
model.result('pg12').set('titletype', 'custom');
model.result('pg12').set('typeintitle', false);
model.result('pg12').set('prefixintitle', 'Species FeOH:');
model.result('pg12').set('expressionintitle', false);
model.result.create('pg13', 'PlotGroup2D');
model.result('pg13').set('data', 'dset1');
model.result('pg13').setIndex('looplevel', 31, 0);
model.result('pg13').label('Concentration, FeCO3 (tcd)');
model.result('pg13').set('titletype', 'custom');
model.result('pg13').set('prefixintitle', 'Species FeCO3:');
model.result('pg13').set('expressionintitle', false);
model.result('pg13').set('typeintitle', true);
model.result('pg13').create('surf1', 'Surface');
model.result('pg13').feature('surf1').set('expr', {'cFeCO3'});
model.result('pg13').create('str1', 'Streamline');
model.result('pg13').feature('str1').set('expr', {'tcd.tflux_cFeCO3r' 'tcd.tflux_cFeCO3z'});
model.result('pg13').feature('str1').set('posmethod', 'uniform');
model.result('pg13').feature('str1').set('recover', 'pprint');
model.result('pg13').feature('str1').set('pointtype', 'arrow');
model.result('pg13').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg13').feature('str1').set('color', 'gray');
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').set('data', 'rev2');
model.result('pg14').setIndex('looplevel', 31, 0);
model.result('pg14').label('Concentration, FeCO3, 3D (tcd)');
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', {'cFeCO3'});
model.result('pg14').set('titletype', 'custom');
model.result('pg14').set('typeintitle', false);
model.result('pg14').set('prefixintitle', 'Species FeCO3:');
model.result('pg14').set('expressionintitle', false);
model.result.create('pg15', 'PlotGroup2D');
model.result('pg15').set('data', 'dset1');
model.result('pg15').setIndex('looplevel', 31, 0);
model.result('pg15').label('Concentration, O2 (tcd)');
model.result('pg15').set('titletype', 'custom');
model.result('pg15').set('prefixintitle', 'Species O2:');
model.result('pg15').set('expressionintitle', false);
model.result('pg15').set('typeintitle', true);
model.result('pg15').create('surf1', 'Surface');
model.result('pg15').feature('surf1').set('expr', {'cO2'});
model.result('pg15').create('str1', 'Streamline');
model.result('pg15').feature('str1').set('expr', {'tcd.tflux_cO2r' 'tcd.tflux_cO2z'});
model.result('pg15').feature('str1').set('posmethod', 'uniform');
model.result('pg15').feature('str1').set('recover', 'pprint');
model.result('pg15').feature('str1').set('pointtype', 'arrow');
model.result('pg15').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg15').feature('str1').set('color', 'gray');
model.result.create('pg16', 'PlotGroup3D');
model.result('pg16').set('data', 'rev2');
model.result('pg16').setIndex('looplevel', 31, 0);
model.result('pg16').label('Concentration, O2, 3D (tcd)');
model.result('pg16').create('surf1', 'Surface');
model.result('pg16').feature('surf1').set('expr', {'cO2'});
model.result('pg16').set('titletype', 'custom');
model.result('pg16').set('typeintitle', false);
model.result('pg16').set('prefixintitle', 'Species O2:');
model.result('pg16').set('expressionintitle', false);
model.result.create('pg17', 'PlotGroup2D');
model.result('pg17').set('data', 'dset1');
model.result('pg17').setIndex('looplevel', 31, 0);
model.result('pg17').label('Concentration, CO2 (tcd)');
model.result('pg17').set('titletype', 'custom');
model.result('pg17').set('prefixintitle', 'Species CO2:');
model.result('pg17').set('expressionintitle', false);
model.result('pg17').set('typeintitle', true);
model.result('pg17').create('surf1', 'Surface');
model.result('pg17').feature('surf1').set('expr', {'cCO2'});
model.result('pg17').create('str1', 'Streamline');
model.result('pg17').feature('str1').set('expr', {'tcd.tflux_cCO2r' 'tcd.tflux_cCO2z'});
model.result('pg17').feature('str1').set('posmethod', 'uniform');
model.result('pg17').feature('str1').set('recover', 'pprint');
model.result('pg17').feature('str1').set('pointtype', 'arrow');
model.result('pg17').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg17').feature('str1').set('color', 'gray');
model.result.create('pg18', 'PlotGroup3D');
model.result('pg18').set('data', 'rev2');
model.result('pg18').setIndex('looplevel', 31, 0);
model.result('pg18').label('Concentration, CO2, 3D (tcd)');
model.result('pg18').create('surf1', 'Surface');
model.result('pg18').feature('surf1').set('expr', {'cCO2'});
model.result('pg18').set('titletype', 'custom');
model.result('pg18').set('typeintitle', false);
model.result('pg18').set('prefixintitle', 'Species CO2:');
model.result('pg18').set('expressionintitle', false);
model.result.create('pg19', 'PlotGroup2D');
model.result('pg19').set('data', 'dset1');
model.result('pg19').setIndex('looplevel', 31, 0);
model.result('pg19').label('Concentration, H2CO3 (tcd)');
model.result('pg19').set('titletype', 'custom');
model.result('pg19').set('prefixintitle', 'Species H2CO3:');
model.result('pg19').set('expressionintitle', false);
model.result('pg19').set('typeintitle', true);
model.result('pg19').create('surf1', 'Surface');
model.result('pg19').feature('surf1').set('expr', {'cH2CO3'});
model.result('pg19').create('str1', 'Streamline');
model.result('pg19').feature('str1').set('expr', {'tcd.tflux_cH2CO3r' 'tcd.tflux_cH2CO3z'});
model.result('pg19').feature('str1').set('posmethod', 'uniform');
model.result('pg19').feature('str1').set('recover', 'pprint');
model.result('pg19').feature('str1').set('pointtype', 'arrow');
model.result('pg19').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg19').feature('str1').set('color', 'gray');
model.result.create('pg20', 'PlotGroup3D');
model.result('pg20').set('data', 'rev2');
model.result('pg20').setIndex('looplevel', 31, 0);
model.result('pg20').label('Concentration, H2CO3, 3D (tcd)');
model.result('pg20').create('surf1', 'Surface');
model.result('pg20').feature('surf1').set('expr', {'cH2CO3'});
model.result('pg20').set('titletype', 'custom');
model.result('pg20').set('typeintitle', false);
model.result('pg20').set('prefixintitle', 'Species H2CO3:');
model.result('pg20').set('expressionintitle', false);
model.result.create('pg21', 'PlotGroup2D');
model.result('pg21').set('data', 'dset1');
model.result('pg21').setIndex('looplevel', 31, 0);
model.result('pg21').label('Concentration, HCO3 (tcd)');
model.result('pg21').set('titletype', 'custom');
model.result('pg21').set('prefixintitle', 'Species HCO3:');
model.result('pg21').set('expressionintitle', false);
model.result('pg21').set('typeintitle', true);
model.result('pg21').create('surf1', 'Surface');
model.result('pg21').feature('surf1').set('expr', {'cHCO3'});
model.result('pg21').create('str1', 'Streamline');
model.result('pg21').feature('str1').set('expr', {'tcd.tflux_cHCO3r' 'tcd.tflux_cHCO3z'});
model.result('pg21').feature('str1').set('posmethod', 'uniform');
model.result('pg21').feature('str1').set('recover', 'pprint');
model.result('pg21').feature('str1').set('pointtype', 'arrow');
model.result('pg21').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg21').feature('str1').set('color', 'gray');
model.result.create('pg22', 'PlotGroup3D');
model.result('pg22').set('data', 'rev2');
model.result('pg22').setIndex('looplevel', 31, 0);
model.result('pg22').label('Concentration, HCO3, 3D (tcd)');
model.result('pg22').create('surf1', 'Surface');
model.result('pg22').feature('surf1').set('expr', {'cHCO3'});
model.result('pg22').set('titletype', 'custom');
model.result('pg22').set('typeintitle', false);
model.result('pg22').set('prefixintitle', 'Species HCO3:');
model.result('pg22').set('expressionintitle', false);
model.result.create('pg23', 'PlotGroup2D');
model.result('pg23').set('data', 'dset1');
model.result('pg23').setIndex('looplevel', 31, 0);
model.result('pg23').label('Concentration, CO3 (tcd)');
model.result('pg23').set('titletype', 'custom');
model.result('pg23').set('prefixintitle', 'Species CO3:');
model.result('pg23').set('expressionintitle', false);
model.result('pg23').set('typeintitle', true);
model.result('pg23').create('surf1', 'Surface');
model.result('pg23').feature('surf1').set('expr', {'cCO3'});
model.result('pg23').create('str1', 'Streamline');
model.result('pg23').feature('str1').set('expr', {'tcd.tflux_cCO3r' 'tcd.tflux_cCO3z'});
model.result('pg23').feature('str1').set('posmethod', 'uniform');
model.result('pg23').feature('str1').set('recover', 'pprint');
model.result('pg23').feature('str1').set('pointtype', 'arrow');
model.result('pg23').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg23').feature('str1').set('color', 'gray');
model.result.create('pg24', 'PlotGroup3D');
model.result('pg24').set('data', 'rev2');
model.result('pg24').setIndex('looplevel', 31, 0);
model.result('pg24').label('Concentration, CO3, 3D (tcd)');
model.result('pg24').create('surf1', 'Surface');
model.result('pg24').feature('surf1').set('expr', {'cCO3'});
model.result('pg24').set('titletype', 'custom');
model.result('pg24').set('typeintitle', false);
model.result('pg24').set('prefixintitle', 'Species CO3:');
model.result('pg24').set('expressionintitle', false);
model.result.create('pg25', 'PlotGroup2D');
model.result('pg25').set('data', 'dset1');
model.result('pg25').setIndex('looplevel', 31, 0);
model.result('pg25').label('Concentration, Na (tcd)');
model.result('pg25').set('titletype', 'custom');
model.result('pg25').set('prefixintitle', 'Species Na:');
model.result('pg25').set('expressionintitle', false);
model.result('pg25').set('typeintitle', true);
model.result('pg25').create('surf1', 'Surface');
model.result('pg25').feature('surf1').set('expr', {'cNa'});
model.result('pg25').create('str1', 'Streamline');
model.result('pg25').feature('str1').set('expr', {'tcd.tflux_cNar' 'tcd.tflux_cNaz'});
model.result('pg25').feature('str1').set('posmethod', 'uniform');
model.result('pg25').feature('str1').set('recover', 'pprint');
model.result('pg25').feature('str1').set('pointtype', 'arrow');
model.result('pg25').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg25').feature('str1').set('color', 'gray');
model.result.create('pg26', 'PlotGroup3D');
model.result('pg26').set('data', 'rev2');
model.result('pg26').setIndex('looplevel', 31, 0);
model.result('pg26').label('Concentration, Na, 3D (tcd)');
model.result('pg26').create('surf1', 'Surface');
model.result('pg26').feature('surf1').set('expr', {'cNa'});
model.result('pg26').set('titletype', 'custom');
model.result('pg26').set('typeintitle', false);
model.result('pg26').set('prefixintitle', 'Species Na:');
model.result('pg26').set('expressionintitle', false);
model.result.create('pg27', 'PlotGroup2D');
model.result('pg27').set('data', 'dset1');
model.result('pg27').setIndex('looplevel', 31, 0);
model.result('pg27').label('Concentration, Cl (tcd)');
model.result('pg27').set('titletype', 'custom');
model.result('pg27').set('prefixintitle', 'Species Cl:');
model.result('pg27').set('expressionintitle', false);
model.result('pg27').set('typeintitle', true);
model.result('pg27').create('surf1', 'Surface');
model.result('pg27').feature('surf1').set('expr', {'cCl'});
model.result('pg27').create('str1', 'Streamline');
model.result('pg27').feature('str1').set('expr', {'tcd.tflux_cClr' 'tcd.tflux_cClz'});
model.result('pg27').feature('str1').set('posmethod', 'uniform');
model.result('pg27').feature('str1').set('recover', 'pprint');
model.result('pg27').feature('str1').set('pointtype', 'arrow');
model.result('pg27').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg27').feature('str1').set('color', 'gray');
model.result.create('pg28', 'PlotGroup3D');
model.result('pg28').set('data', 'rev2');
model.result('pg28').setIndex('looplevel', 31, 0);
model.result('pg28').label('Concentration, Cl, 3D (tcd)');
model.result('pg28').create('surf1', 'Surface');
model.result('pg28').feature('surf1').set('expr', {'cCl'});
model.result('pg28').set('titletype', 'custom');
model.result('pg28').set('typeintitle', false);
model.result('pg28').set('prefixintitle', 'Species Cl:');
model.result('pg28').set('expressionintitle', false);
model.result('pg1').run;
model.result('pg10').run;
model.result('pg10').setIndex('looplevel', 2, 0);
model.result('pg10').run;
model.result('pg10').setIndex('looplevel', 31, 0);
model.result('pg10').run;
model.result.create('pg29', 'PlotGroup1D');
model.result('pg29').run;
model.result('pg29').label('Local Current Density and Coverage');
model.result('pg29').setIndex('looplevelinput', 'last', 0);
model.result('pg29').set('titletype', 'none');
model.result('pg29').set('legendpos', 'middleleft');
model.result('pg29').create('lngr1', 'LineGraph');
model.result('pg29').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg29').feature('lngr1').set('linewidth', 'preference');
model.result('pg29').feature('lngr1').selection.set([2]);
model.result('pg29').feature('lngr1').set('expr', 'tcd.iloc_er1');
model.result('pg29').feature('lngr1').set('descr', 'Local current density');
model.result('pg29').feature('lngr1').set('xdata', 'expr');
model.result('pg29').feature('lngr1').set('xdataexpr', 'r');
model.result('pg29').feature('lngr1').set('linestyle', 'dashed');
model.result('pg29').feature('lngr1').set('legend', true);
model.result('pg29').feature('lngr1').set('legendmethod', 'manual');
model.result('pg29').feature('lngr1').setIndex('legends', 'Anodic', 0);
model.result('pg29').feature.duplicate('lngr2', 'lngr1');
model.result('pg29').run;
model.result('pg29').feature('lngr2').set('expr', 'tcd.iloc_er2');
model.result('pg29').feature('lngr2').set('linestyle', 'dotted');
model.result('pg29').feature('lngr2').set('linecolor', 'cyclereset');
model.result('pg29').feature('lngr2').setIndex('legends', 'Cathodic', 0);
model.result('pg29').feature.duplicate('lngr3', 'lngr2');
model.result('pg29').run;
model.result('pg29').feature('lngr3').set('expr', 'tcd.itot');
model.result('pg29').feature('lngr3').set('linestyle', 'solid');
model.result('pg29').feature('lngr3').setIndex('legends', 'Total', 0);
model.result('pg29').feature.duplicate('lngr4', 'lngr3');
model.result('pg29').run;
model.result('pg29').feature('lngr4').set('expr', 'theta');
model.result('pg29').feature('lngr4').set('linemarker', 'circle');
model.result('pg29').feature('lngr4').set('markerpos', 'interp');
model.result('pg29').feature('lngr4').setIndex('legends', 'Coverage', 0);
model.result('pg29').run;
model.result('pg29').set('ylabelactive', true);
model.result('pg29').set('ylabel', 'Local current density (A/m<sup>2</sup>)');
model.result('pg29').set('twoyaxes', true);
model.result('pg29').setIndex('plotonsecyaxis', true, 3, 1);
model.result('pg29').run;
model.result('pg18').run;
model.result('pg18').setIndex('looplevel', 2, 0);
model.result('pg18').run;
model.result('pg18').setIndex('looplevel', 31, 0);
model.result('pg18').run;
model.result.create('pg30', 'PlotGroup3D');
model.result('pg30').run;
model.result('pg30').label('pH, 3D (tcd)');
model.result('pg30').create('surf1', 'Surface');
model.result('pg30').feature('surf1').set('expr', 'tcd.pH');
model.result('pg30').run;
model.result('pg30').setIndex('looplevel', 2, 0);
model.result('pg30').run;
model.result('pg30').setIndex('looplevel', 31, 0);
model.result('pg30').run;
model.result.dataset.create('rev3', 'Revolve2D');
model.result('pg8').run;
model.result('pg8').label('Total Corrosion Product Precipitation, 3D (tcd)');
model.result('pg8').set('data', 'rev3');
model.result('pg8').set('edges', false);
model.result('pg8').run;
model.result('pg8').feature('surf1').set('expr', 'tcd.mbtot');
model.result('pg8').feature('surf1').set('descr', 'Total electrode mass change');
model.result('pg8').feature('surf1').set('unit', 'mg/m^2');
model.result('pg8').feature('surf1').set('colortable', 'Prism');
model.result('pg8').run;
model.result('pg8').create('str1', 'Streamline');
model.result('pg8').feature('str1').set('revcoordsys', 'cylindrical');
model.result('pg8').feature('str1').set('posmethod', 'uniform');
model.result('pg8').feature('str1').set('udist', 0.1);
model.result('pg8').feature('str1').set('linetype', 'tube');
model.result('pg8').feature('str1').set('tuberadiusscaleactive', true);
model.result('pg8').feature('str1').set('tuberadiusscale', '2.5e-5');
model.result('pg8').feature('str1').set('pointtype', 'arrow');
model.result('pg8').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg8').feature('str1').create('col1', 'Color');
model.result('pg8').run;
model.result('pg8').feature('str1').feature('col1').set('expr', 'tcd.IlMag');
model.result('pg8').feature('str1').feature('col1').set('descr', 'Electrolyte current density magnitude');
model.result('pg8').feature('str1').feature('col1').set('colorlegend', false);
model.result('pg8').feature('str1').feature('col1').set('colortable', 'RainbowClassic');
model.result('pg8').run;
model.result('pg8').create('surf2', 'Surface');
model.result('pg8').feature('surf2').set('expr', '1');
model.result('pg8').feature('surf2').set('colorlegend', false);
model.result('pg8').feature('surf2').create('sel1', 'Selection');
model.result('pg8').feature('surf2').feature('sel1').selection.set([1]);
model.result('pg8').run;
model.result('pg8').feature('surf2').create('tran1', 'Transparency');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('tran1').set('transparency', 0.85);
model.result('pg8').run;
model.result('pg8').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg8').run;
model.result('pg8').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg8').feature('surf2').feature('mtrl1').set('family', 'water');
model.result('pg8').run;
model.result('pg8').feature.duplicate('surf3', 'surf1');
model.result('pg8').run;
model.result('pg8').feature('surf3').set('expr', 'tcd.mbfrac_FeCO3');
model.result('pg8').feature('surf3').set('descr', 'Fractional electrode mass change, 2-component');
model.result('pg8').feature('surf3').set('descractive', true);
model.result('pg8').feature('surf3').set('descr', 'Fraction ferrous carbonate');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg7').run;
model.result('pg7').label('Total Corrosion Product Precipitation');
model.result('pg7').run;
model.result('pg7').feature('line1').set('expr', 'tcd.mbtot');
model.result('pg7').feature('line1').set('descr', 'Total electrode mass change');
model.result('pg7').feature('line1').set('unit', 'mg/m^2');
model.result('pg7').run;

model.title('Corrosion Under an Evans Droplet');

model.description('This example simulates atmospheric general corrosion of steel under a droplet of aqueous sodium chloride solution. The model accounts for mass transport together with homogeneous reactions and atmospheric oxygen and carbon dioxide interactions. The model computes the transient and spatial distribution of species within the droplet, including passivating corrosion products formed in precipitation reactions at the electrode surface.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('evans_droplet.mph');

model.modelNode.label('Components');

out = model;
