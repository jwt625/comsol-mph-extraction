function out = model
%
% rubber_boot_seal.m
%
% Model exported on May 26 2025, 21:31 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Nonlinear_Structural_Materials_Module/Hyperelasticity');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.study.create('std1');
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').setSolveFor('/physics/solid', true);

model.param.set('overlap', '1[mm]');
model.param.descr('overlap', 'Shrink fit overlap');
model.param.set('para1', '0');
model.param.descr('para1', 'Continuation parameter, step 1');
model.param.set('para2', '0');
model.param.descr('para2', 'Continuation parameter, step 2');

model.geom('geom1').insertFile('rubber_boot_seal_geom_sequence.mph', 'geom1');
model.geom('geom1').feature('cyl1').set('r', '(60)/2-3+overlap');
model.geom('geom1').run('mcf1');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Contact Surface, Outside');
model.selection('sel1').geom(2);
model.selection('sel1').set([63 66 69 75 79 83 87 91 95]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Contact Surface, Inside');
model.selection('sel2').geom(2);
model.selection('sel2').set([70 71 73 80 81 88 89 96 97]);

model.pair.create('p1', 'Contact', 'geom1');
model.pair('p1').source.set([116 124]);
model.pair('p1').destination.set([41 51 53 56 70 80 88 96]);
model.pair.create('p2', 'Contact', 'geom1');
model.pair('p2').source.named('sel1');
model.pair('p2').destination.named('sel1');
model.pair('p2').manualDist(true);
model.pair('p2').searchDist('1');
model.pair.create('p3', 'Contact', 'geom1');
model.pair('p3').source.named('sel2');
model.pair('p3').destination.named('sel2');
model.pair('p3').manualDist(true);
model.pair('p3').searchDist('1');

model.physics('solid').create('hmm1', 'HyperelasticModel', 3);
model.physics('solid').feature('hmm1').selection.all;
model.physics('solid').feature('hmm1').set('MaterialModel', 'Yeoh');
model.physics('solid').feature('hmm1').set('VolumetricEnergyUncoupled', 'hartmannNeff');
model.physics('solid').create('rd1', 'RigidDomain', 3);
model.physics('solid').feature('rd1').selection.set([25 26]);
model.physics('solid').feature('rd1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('solid').feature('rd1').feature('pdr1').set('CenterOfRotationType', 'CentroidOfSelectedEntities');
model.physics('solid').feature('rd1').feature('pdr1').setIndex('Direction', true, 0);
model.physics('solid').feature('rd1').feature('pdr1').setIndex('Direction', true, 1);
model.physics('solid').feature('rd1').feature('pdr1').setIndex('Direction', true, 2);
model.physics('solid').feature('rd1').feature('pdr1').set('RotationType', 'PrescribedRotationGroup');
model.physics('solid').feature('rd1').feature('pdr1').set('Omega', [0 1 0]);
model.physics('solid').feature('rd1').feature('pdr1').set('phi0', '40[deg]*para2');
model.physics('solid').feature('rd1').feature('pdr1').feature('crb1').selection.set([117 122]);
model.physics('solid').feature('dcnt1').set('ContactMethodCtrl', 'Nitsche');
model.physics('solid').feature('dcnt1').set('source_offset', '-overlap*(1-min(para1,1))');
model.physics('solid').feature('dcnt1').create('fric1', 'Friction', 2);
model.physics('solid').feature('dcnt1').feature('fric1').set('mu_fric', 0.7);
model.physics('solid').create('cnt1', 'SolidContact', 2);
model.physics('solid').feature('cnt1').set('pairs', {'p2' 'p3'});
model.physics('solid').feature('cnt1').set('ContactMethodCtrl', 'Nitsche');
model.physics('solid').feature('cnt1').create('fric1', 'Friction', 2);
model.physics('solid').feature('cnt1').feature('fric1').set('mu_fric', 0.8);
model.physics('solid').create('sym1', 'SymmetrySolid', 2);
model.physics('solid').feature('sym1').selection.set([1 3 7 12 15 20 23 28 33 36 39 45 103 104 105 106 107 108 109 110 111 112 113 114]);
model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([9 100]);
model.physics('solid').create('roll1', 'Roller', 2);
model.physics('solid').feature('roll1').selection.set([11 99]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Lame', ['Lam' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' parameters']);
model.material('mat1').propertyGroup.create('MooneyRivlin', 'Mooney-Rivlin');
model.material('mat1').propertyGroup.create('Yeoh', 'Yeoh');
model.material('mat1').propertyGroup.create('Varga', 'Varga');
model.material('mat1').propertyGroup.create('ArrudaBoyce', 'Arruda-Boyce');
model.material('mat1').label('Rubber');
model.material('mat1').set('family', 'rubber');
model.material('mat1').propertyGroup('def').set('density', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('lossfactor', '');
model.material('mat1').propertyGroup('def').set('thermalconductivity', '');
model.material('mat1').propertyGroup('def').set('heatcapacity', '');
model.material('mat1').propertyGroup('def').set('density', '1100[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'200e-6[1/K]' '0' '0' '0' '200e-6[1/K]' '0' '0' '0' '200e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('lossfactor', '0.06');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]' '0' '0' '0' '0.5[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '1900[J/(kg*K)]');
model.material('mat1').propertyGroup('Lame').set('lambLame', '24.5[MPa]');
model.material('mat1').propertyGroup('Lame').set('muLame', '0.5[MPa]');
model.material('mat1').propertyGroup('MooneyRivlin').label('Mooney-Rivlin');
model.material('mat1').propertyGroup('MooneyRivlin').set('C10', '0.219[MPa]');
model.material('mat1').propertyGroup('MooneyRivlin').set('C01', '0.031[MPa]');
model.material('mat1').propertyGroup('MooneyRivlin').set('C11', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C20', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C02', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C21', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C12', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C30', '0');
model.material('mat1').propertyGroup('MooneyRivlin').set('C03', '0');
model.material('mat1').propertyGroup('Yeoh').set('c1YE', '100[kPa]');
model.material('mat1').propertyGroup('Yeoh').set('c2YE', '6[kPa]');
model.material('mat1').propertyGroup('Yeoh').set('c3YE', '-30[Pa]');
model.material('mat1').propertyGroup('Varga').set('c1VA', '1.05[MPa]');
model.material('mat1').propertyGroup('Varga').set('c2VA', '0.45[MPa]');
model.material('mat1').propertyGroup('ArrudaBoyce').label('Arruda-Boyce');
model.material('mat1').propertyGroup('ArrudaBoyce').set('Nseg', '32');
model.material('mat1').propertyGroup('ArrudaBoyce').set('mu0', '0.5[MPa]');

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([1 3 7 12 15 20 23 28 33 36 39 45 126 128 132 135 138 141 142]);
model.mesh('mesh1').feature('map1').create('size1', 'Size');
model.mesh('mesh1').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('map1').feature('size1').set('hmax', 5);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([6 8 16 18 26 28 34 36 44 46 51 59 62 246]);
model.mesh('mesh1').feature('map1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis2').set('numelem', 6);
model.mesh('mesh1').feature('map1').feature('dis2').selection.set([20 30 38 53]);
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.set([115]);
model.mesh('mesh1').feature('map2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map2').feature('dis1').selection.all;
model.mesh('mesh1').feature('map2').feature('dis1').set('numelem', 1);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').set('smoothcontrol', false);
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemcount', 16);
model.mesh('mesh1').feature('swe1').feature('dis1').set('elemratio', 3);
model.mesh('mesh1').feature('swe1').feature.duplicate('dis2', 'dis1');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([13 14 15 16 17 18 19 20 21 22 23 24 36 37 38 39 40]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('reverse', true);
model.mesh('mesh1').feature('swe1').create('dis3', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis3').selection.set([25 26]);
model.mesh('mesh1').feature('swe1').feature('dis3').set('numelem', 25);
model.mesh('mesh1').run;

model.study('std1').feature('stat').set('plot', true);
model.study('std1').feature('stat').set('probefreq', 'psteps');
model.study('std1').feature('stat').set('useparam', true);
model.study('std1').feature('stat').setIndex('pname', 'overlap', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'overlap', 0);
model.study('std1').feature('stat').setIndex('plistarr', '', 0);
model.study('std1').feature('stat').setIndex('punit', 'm', 0);
model.study('std1').feature('stat').setIndex('pname', 'para1', 0);
model.study('std1').feature('stat').setIndex('plistarr', '0 1', 0);
model.study('std1').feature('stat').setIndex('punit', '', 0);
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').set('plot', true);
model.study('std1').feature('stat2').set('probefreq', 'psteps');
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'overlap', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'overlap', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', 'm', 0);
model.study('std1').feature('stat2').setIndex('pname', 'para1', 0);
model.study('std1').feature('stat2').setIndex('plistarr', 1, 0);
model.study('std1').feature('stat2').setIndex('punit', '', 0);
model.study('std1').feature('stat2').setIndex('pname', 'overlap', 1);
model.study('std1').feature('stat2').setIndex('plistarr', '', 1);
model.study('std1').feature('stat2').setIndex('punit', 'm', 1);
model.study('std1').feature('stat2').setIndex('pname', 'overlap', 1);
model.study('std1').feature('stat2').setIndex('plistarr', '', 1);
model.study('std1').feature('stat2').setIndex('punit', 'm', 1);
model.study('std1').feature('stat2').setIndex('pname', 'para2', 1);
model.study('std1').feature('stat2').setIndex('plistarr', 'range(0,0.1,1)', 1);
model.study('std1').feature('stat2').setIndex('punit', '', 1);
model.study('std1').feature('stat2').set('sweeptype', 'filled');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'stat');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pw').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pw').set('scaleval', '100000000');
model.sol('sol1').feature('v1').feature('comp1_solid_rd_disp').set('scaleval', '0.003689512162874654');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*0.3689512162874654');
model.sol('sol1').feature('v1').set('control', 'stat');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s1').feature('p1').set('control', 'stat');
model.sol('sol1').feature('s1').set('control', 'stat');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s1').feature('d1').set('nliniterrefine', true);
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('mglevels', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('mg1').set('maxcoarsedof', 10000);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat2');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_hmm1_pw').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v2').feature('comp1_solid_hmm1_pw').set('scaleval', '100000000');
model.sol('sol1').feature('v2').feature('comp1_solid_rd_disp').set('scaleval', '0.003689512162874654');
model.sol('sol1').feature('v2').feature('comp1_u').set('scaleval', '1e-2*0.3689512162874654');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat2');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature.remove('pDef');
model.sol('sol1').feature('s2').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s2').set('control', 'stat2');
model.sol('sol1').feature('s2').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').set('pivotperturb', 1.0E-9);
model.sol('sol1').feature('s2').feature('d1').set('nliniterrefine', true);
model.sol('sol1').feature('s2').feature('d1').label('Suggested Direct Solver (solid)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s2').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s2').feature('i1').set('rhob', 40);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s2').feature('i1').label('Suggested Iterative Solver (solid)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'gmg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('so1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('so1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('mg1').set('iter', 2);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('mg1').set('mglevels', 2);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('mg1').set('maxcoarsedof', 10000);
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'ddog');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v1').feature('comp1_solid_hmm1_pw').set('scaleval', '1e5');
model.sol('sol1').feature('s1').feature('p1').set('paramtuning', true);
model.sol('sol1').feature('s1').feature('p1').set('pmaxstep', 0.5);
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 8);
model.sol('sol1').feature('v2').feature('comp1_solid_hmm1_pw').set('scaleval', '1e5');
model.sol('sol1').feature('s2').feature('p1').set('paramtuning', true);
model.sol('sol1').feature('s2').feature('p1').set('pinitstep', 0.005);
model.sol('sol1').feature('s2').feature('p1').set('pmaxstep', 0.025);
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'const');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 8);

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('scaleactive', true);
model.result('pg1').feature('vol1').feature('def').set('scale', '1');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');

model.sol('sol1').runAll;

model.result.remove('pg1');

model.study('std1').feature('stat').set('plotgroup', 'Default');

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').setIndex('looplevel', 1, 1);
model.result('pg1').set('defaultPlotID', 'stress');
model.result('pg1').label('Stress (solid)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').create('vol1', 'Volume');
model.result('pg1').feature('vol1').set('expr', {'solid.misesGp'});
model.result('pg1').feature('vol1').set('threshold', 'manual');
model.result('pg1').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg1').feature('vol1').set('colortable', 'Rainbow');
model.result('pg1').feature('vol1').set('colortabletrans', 'none');
model.result('pg1').feature('vol1').set('colorscalemode', 'linear');
model.result('pg1').feature('vol1').set('resolution', 'custom');
model.result('pg1').feature('vol1').set('refine', 2);
model.result('pg1').feature('vol1').set('colortable', 'Prism');
model.result('pg1').feature('vol1').create('def', 'Deform');
model.result('pg1').feature('vol1').feature('def').set('scaleactive', true);
model.result('pg1').feature('vol1').feature('def').set('scale', '1');
model.result('pg1').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg1').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('vol1').set('unit', 'MPa');
model.result('pg1').run;
model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').set('quickplane', 'zx');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Displacement');
model.result('pg2').set('titletype', 'none');
model.result('pg2').set('edges', false);
model.result('pg2').set('plotarrayenable', true);
model.result('pg2').set('arrayshape', 'square');
model.result('pg2').set('arrayplane', 'xz');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('arraydim', '2');
model.result('pg2').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg2').feature('surf1').set('data', 'mir1');
model.result('pg2').feature('surf1').setIndex('looplevel', 1, 0);
model.result('pg2').feature('surf1').create('def1', 'Deform');
model.result('pg2').run;
model.result('pg2').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg2').feature('surf1').feature('def1').set('scale', 1);
model.result('pg2').feature('surf1').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature.duplicate('surf2', 'surf1');
model.result('pg2').feature('surf2').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature('surf2').setIndex('looplevel', 3, 0);
model.result('pg2').feature('surf2').set('inheritplot', 'surf1');
model.result('pg2').feature.duplicate('surf3', 'surf2');
model.result('pg2').feature('surf3').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature('surf3').setIndex('looplevel', 5, 0);
model.result('pg2').feature.duplicate('surf4', 'surf3');
model.result('pg2').feature('surf4').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature('surf4').setIndex('looplevel', 7, 0);
model.result('pg2').feature.duplicate('surf5', 'surf4');
model.result('pg2').feature('surf5').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature('surf5').setIndex('looplevel', 9, 0);
model.result('pg2').feature.duplicate('surf6', 'surf5');
model.result('pg2').feature('surf6').set('arraydim', '2');
model.result('pg2').run;
model.result('pg2').feature('surf6').setIndex('looplevel', 11, 0);
model.result('pg2').run;

model.view('view1').set('showgrid', false);
model.view('view1').set('showaxisorientation', false);
model.view('view1').set('showgrid', true);
model.view('view1').set('showaxisorientation', true);

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Contact Area');
model.result('pg3').set('titletype', 'none');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'if(elemgpmax(8,solid.incontact),1,NaN)');
model.result('pg3').feature('surf1').set('coloring', 'uniform');
model.result('pg3').feature('surf1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg3').feature('surf1').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature('surf1').create('sel1', 'Selection');
model.result('pg3').feature('surf1').feature('sel1').selection.geom('geom1', 3);
model.result('pg3').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]);
model.result('pg3').run;
model.result('pg3').create('surf2', 'Surface');
model.result('pg3').feature('surf2').set('expr', '1');
model.result('pg3').feature('surf2').set('coloring', 'uniform');
model.result('pg3').feature('surf2').set('color', 'gray');
model.result('pg3').feature('surf2').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg3').feature('surf2').feature('def1').set('scale', 1);
model.result('pg3').run;
model.result('pg3').feature('surf2').create('tran1', 'Transparency');
model.result('pg3').run;
model.result('pg3').feature('surf2').feature('tran1').set('transparency', 0.8);
model.result('pg3').feature('surf2').feature('tran1').set('uniformblending', 0.2);
model.result('pg3').run;

model.view('view1').set('showgrid', true);

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Thumbnail');
model.result('pg4').set('titletype', 'none');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg4').feature('surf1').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf1').feature('def1').set('scale', 1);
model.result('pg4').run;
model.result('pg4').feature('surf1').create('sel1', 'Selection');
model.result('pg4').feature('surf1').feature('sel1').selection.geom('geom1', 3);
model.result('pg4').feature('surf1').feature('sel1').selection.set([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]);
model.result('pg4').run;
model.result('pg4').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg4').run;
model.result('pg4').feature('surf1').feature('mtrl1').set('useplotcolors', true);
model.result('pg4').run;
model.result('pg4').create('surf2', 'Surface');
model.result('pg4').feature('surf2').create('def1', 'Deform');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('def1').set('scaleactive', true);
model.result('pg4').feature('surf2').feature('def1').set('scale', 1);
model.result('pg4').run;
model.result('pg4').feature('surf2').create('sel1', 'Selection');
model.result('pg4').feature('surf2').feature('sel1').selection.geom('geom1', 3);
model.result('pg4').feature('surf2').feature('sel1').selection.set([25 26]);
model.result('pg4').run;
model.result('pg4').feature('surf2').create('mtrl1', 'MaterialAppearance');
model.result('pg4').run;
model.result('pg4').feature('surf2').feature('mtrl1').set('appearance', 'custom');
model.result('pg4').feature('surf2').feature('mtrl1').set('family', 'steel');
model.result('pg4').run;

model.view('view1').set('showaxisorientation', false);
model.view('view1').set('showgrid', false);

model.result('pg4').set('showlegends', false);

model.view('view1').set('showaxisorientation', true);
model.view('view1').set('showgrid', true);

model.result('pg4').set('showlegends', true);
model.result('pg4').run;
model.result.remove('pg4');
model.result('pg1').run;

model.title('Contact Analysis of a Rubber Boot Seal');

model.description('In this example, the deformation of a rubber boot seal connected to a rigid pipe is studied. As the pipe rotates and the seal deforms, the flanges of the seal self-intersect and it also come into contact with the pipe.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('rubber_boot_seal.mph');

model.modelNode.label('Components');

out = model;
