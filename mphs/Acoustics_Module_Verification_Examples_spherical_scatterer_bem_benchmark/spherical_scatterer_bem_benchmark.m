function out = model
%
% spherical_scatterer_bem_benchmark.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('pabe', 'PressureAcousticsBoundaryElements', 'geom1');
model.physics('pabe').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/pabe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '1500[Hz]', 'Maximum frequency');
model.param.set('c0', '343[m/s]', 'Speed of sound');
model.param.set('rho0', '1.225[kg/m^3]', 'Density');
model.param.set('lam0', 'c0/f0', 'Wavelength at f0');
model.param.set('R0', '1[m]', 'Sphere radius');

model.variable.create('var1');
model.variable('var1').label('Variables - Analytical');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('k0', '2*pi*freq/c0', 'Wavenumber');
model.variable('var1').set('kR', 'k0*R0', 'k*R');
model.variable('var1').set('r', 'sqrt(x^2+y^2+z^2)', 'Distance to (x,y,z)');
model.variable('var1').set('ryz', 'sqrt(y^2+z^2)', 'Distance in yz-plane');
model.variable('var1').set('phi', 'atan2(ryz,x)', 'Polar angle');
model.variable('var1').set('n', '1', 'Initialization of summation');
model.variable('var1').set('dJ', 'd(J(n,kR),kR)', 'Derivative of spherical Bessel function (of the first kind)');
model.variable('var1').set('dN', 'd(N(n,kR),kR)', 'Derivative of spherical Bessel function (of the second kind)');
model.variable('var1').set('dH', 'd(J(n,kR),kR)+i*d(N(n,kR),kR)', 'Derivative of spherical Hankel function');
model.variable('var1').set('H', 'J(n,k0*r)+i*N(n,k0*r)', 'Spherical Hankel function');
model.variable('var1').set('pana', 'conj(sum(-i^n*(2*n+1)*dJ/dH*legendre(n,cos(phi))*H,n,0,100))', 'Scattered pressure analytical expression');

model.func.create('an1', 'Analytic');
model.func('an1').set('funcname', 'J');
model.func('an1').set('expr', 'sqrt(pi/(2*x))*besselj(n+0.5,x)');
model.func('an1').set('args', 'n, x');
model.func('an1').setIndex('argunit', 1, 0);
model.func('an1').set('fununit', '1');
model.func.create('an2', 'Analytic');
model.func('an2').set('funcname', 'N');
model.func('an2').set('expr', 'sqrt(pi/(2*x))*bessely(n+0.5,x)');
model.func('an2').set('args', 'n, x');
model.func('an2').setIndex('argunit', 1, 0);
model.func('an2').set('fununit', '1');

model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'R0');
model.geom('geom1').feature('sph1').set('type', 'surface');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.all;
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'min(0.3,lam0/4)');
model.mesh('mesh1').feature('size').set('hmin', 'min(0.3,lam0/4)');
model.mesh('mesh1').feature('size').set('hcurve', 0.5);
model.mesh('mesh1').feature('size').set('hnarrow', 2);
model.mesh('mesh1').run;

model.physics('pabe').selection.set([0]);
model.physics('pabe').feature('bpam1').set('c_mat', 'userdef');
model.physics('pabe').feature('bpam1').set('c', 'c0');
model.physics('pabe').feature('bpam1').set('rho_mat', 'userdef');
model.physics('pabe').feature('bpam1').set('rho', 'rho0');
model.physics('pabe').create('bpf1', 'BackgroundPressureField', 3);
model.physics('pabe').feature('bpf1').set('pamp', 1);

model.study('std1').feature('freq').set('plist', 'range(50,50,f0)');
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'range(50,50,f0)'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (SAI) (pabe)');
model.sol('sol1').feature('s1').feature('i1').create('sai1', 'SAI');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (HLU) (pabe)');
model.sol('sol1').feature('s1').feature('i2').create('hlu1', 'HierarchicalLU');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.dataset.create('grid1', 'Grid3D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('parmin1', -3);
model.result.dataset('grid1').set('parmax1', 5);
model.result.dataset('grid1').set('parmin2', -3);
model.result.dataset('grid1').set('parmax2', 3);
model.result.dataset('grid1').set('parmin3', -3);
model.result.dataset('grid1').set('parmax3', 3);
model.result.dataset('grid1').set('res1', 100);
model.result.dataset('grid1').set('res2', 40);
model.result.dataset('grid1').set('res3', 100);
model.result.dataset.create('pc1', 'ParCurve3D');
model.result.dataset('pc1').set('exprx', 'R0+5*R0*s');
model.result.dataset('pc1').set('global', true);
model.result.dataset.create('cpt1', 'CutPoint3D');
model.result.dataset('cpt1').set('data', 'grid1');
model.result.dataset('cpt1').set('pointx', '2*R0');
model.result.dataset('cpt1').set('pointy', 0);
model.result.dataset('cpt1').set('pointz', 0);
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').run;
model.result('pg1').label('Acoustic Pressure, Boundaries (pabe)');
model.result('pg1').setIndex('looplevel', 20, 0);
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Total acoustic pressure (Pa)');
model.result('pg1').set('paramindicator', 'f = eval(freq) Hz');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', 'pabe.p_t_bnd');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').run;
model.result('pg2').label('Acoustic Pressure (pabe)');
model.result('pg2').setIndex('looplevel', 10, 0);
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('paramindicator', 'f = eval(freq) Hz');
model.result('pg2').set('title', 'Total acoustic pressure field (Pa)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('xnumber', '0');
model.result('pg2').feature('mslc1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('mslc1').set('colortable', 'Wave');
model.result('pg2').run;
model.result('pg2').create('line1', 'Line');
model.result('pg2').feature('line1').set('expr', '1');
model.result('pg2').feature('line1').set('coloring', 'uniform');
model.result('pg2').feature('line1').set('color', 'black');
model.result('pg2').run;
model.result('pg2').set('data', 'grid1');
model.result('pg2').run;
model.result('pg2').feature('line1').set('data', 'dset1');
model.result('pg2').feature('line1').set('solutionparams', 'parent');
model.result('pg2').feature('line1').set('titletype', 'none');
model.result('pg2').run;
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', 'pabe.p_t_bnd');
model.result('pg2').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg2').feature('surf1').set('data', 'dset1');
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Sound Pressure Level (pabe)');
model.result('pg3').set('data', 'grid1');
model.result('pg3').setIndex('looplevel', 20, 0);
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('paramindicator', 'f = eval(freq) Hz');
model.result('pg3').set('title', 'Sound pressure level (dB)');
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('expr', 'pabe.Lp_t');
model.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg3').feature('mslc1').set('xcoord', 2);
model.result('pg3').feature('mslc1').set('znumber', '0');
model.result('pg3').run;
model.result('pg3').create('line1', 'Line');
model.result('pg3').feature('line1').set('data', 'dset1');
model.result('pg3').feature('line1').set('solutionparams', 'parent');
model.result('pg3').feature('line1').set('expr', '1');
model.result('pg3').feature('line1').set('coloring', 'uniform');
model.result('pg3').feature('line1').set('color', 'black');
model.result('pg3').feature('line1').set('titletype', 'none');
model.result('pg3').run;
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', 'pabe.Lp_t_bnd');
model.result('pg3').feature('surf1').set('inheritplot', 'mslc1');
model.result('pg3').feature('surf1').set('data', 'dset1');
model.result('pg3').feature('surf1').set('solutionparams', 'parent');
model.result('pg3').run;
model.result.create('pg4', 'PolarGroup');
model.result('pg4').run;
model.result('pg4').label('Scattered Pressure in the xy-plane');
model.result('pg4').setIndex('looplevelinput', 'manual', 0);
model.result('pg4').setIndex('looplevel', [4], 0);
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('titlenumberformat', 'auto');
model.result('pg4').set('titleprecision', 4);
model.result('pg4').set('title', 'Scattered Pressure, f = eval(freq) Hz');
model.result('pg4').create('rp1', 'RadiationPattern');
model.result('pg4').feature('rp1').set('markerpos', 'datapoints');
model.result('pg4').feature('rp1').set('linewidth', 'preference');
model.result('pg4').feature('rp1').set('expr', 'real(pabe.p_s)');
model.result('pg4').feature('rp1').set('phidisc', 360);
model.result('pg4').feature('rp1').set('radius', 10);
model.result('pg4').feature('rp1').set('legend', true);
model.result('pg4').feature('rp1').set('legendmethod', 'manual');
model.result('pg4').feature('rp1').setIndex('legends', 'BEM: real(p_s)', 0);
model.result('pg4').feature('rp1').set('linecolor', 'blue');
model.result('pg4').run;
model.result('pg4').create('rp2', 'RadiationPattern');
model.result('pg4').feature('rp2').set('markerpos', 'datapoints');
model.result('pg4').feature('rp2').set('linewidth', 'preference');
model.result('pg4').feature('rp2').set('expr', 'imag(pabe.p_s)');
model.result('pg4').feature('rp2').set('phidisc', 360);
model.result('pg4').feature('rp2').set('radius', 10);
model.result('pg4').feature('rp2').set('legend', true);
model.result('pg4').feature('rp2').set('legendmethod', 'manual');
model.result('pg4').feature('rp2').setIndex('legends', 'BEM: imag(p_s)', 0);
model.result('pg4').feature('rp2').set('linecolor', 'red');
model.result('pg4').run;
model.result('pg4').create('rp3', 'RadiationPattern');
model.result('pg4').feature('rp3').set('markerpos', 'datapoints');
model.result('pg4').feature('rp3').set('linewidth', 'preference');
model.result('pg4').feature('rp3').set('expr', 'real(pana)');
model.result('pg4').feature('rp3').set('phidisc', 90);
model.result('pg4').feature('rp3').set('radius', 10);
model.result('pg4').feature('rp3').set('legend', true);
model.result('pg4').feature('rp3').set('legendmethod', 'manual');
model.result('pg4').feature('rp3').setIndex('legends', 'Analytical: real(p_s)', 0);
model.result('pg4').feature('rp3').set('linestyle', 'none');
model.result('pg4').feature('rp3').set('linecolor', 'blue');
model.result('pg4').feature('rp3').set('linemarker', 'point');
model.result('pg4').run;
model.result('pg4').create('rp4', 'RadiationPattern');
model.result('pg4').feature('rp4').set('markerpos', 'datapoints');
model.result('pg4').feature('rp4').set('linewidth', 'preference');
model.result('pg4').feature('rp4').set('expr', 'imag(pana)');
model.result('pg4').feature('rp4').set('phidisc', 90);
model.result('pg4').feature('rp4').set('radius', 10);
model.result('pg4').feature('rp4').set('legend', true);
model.result('pg4').feature('rp4').set('legendmethod', 'manual');
model.result('pg4').feature('rp4').setIndex('legends', 'Analytical: imag(p_s)', 0);
model.result('pg4').feature('rp4').set('linestyle', 'none');
model.result('pg4').feature('rp4').set('linecolor', 'red');
model.result('pg4').feature('rp4').set('linemarker', 'point');
model.result('pg4').run;
model.result.create('pg5', 'PolarGroup');
model.result('pg5').run;
model.result('pg5').label('Scattered SPL in the xy-plane');
model.result('pg5').setIndex('looplevelinput', 'manual', 0);
model.result('pg5').setIndex('looplevel', [10], 0);
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('titlenumberformat', 'auto');
model.result('pg5').set('titleprecision', 4);
model.result('pg5').set('title', 'Scattered SPL, f = eval(freq) Hz');
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('markerpos', 'datapoints');
model.result('pg5').feature('rp1').set('linewidth', 'preference');
model.result('pg5').feature('rp1').set('expr', 'pabe.Lp_s');
model.result('pg5').feature('rp1').set('phidisc', 360);
model.result('pg5').feature('rp1').set('radius', 2);
model.result('pg5').feature('rp1').set('legend', true);
model.result('pg5').feature('rp1').set('legendmethod', 'manual');
model.result('pg5').feature('rp1').setIndex('legends', 'BEM', 0);
model.result('pg5').feature('rp1').set('linecolor', 'blue');
model.result('pg5').run;
model.result('pg5').create('rp2', 'RadiationPattern');
model.result('pg5').feature('rp2').set('markerpos', 'datapoints');
model.result('pg5').feature('rp2').set('linewidth', 'preference');
model.result('pg5').feature('rp2').set('expr', '20*log10(sqrt(0.5)*abs(pana)/pabe.pref_SPL)');
model.result('pg5').feature('rp2').set('phidisc', 90);
model.result('pg5').feature('rp2').set('radius', 2);
model.result('pg5').feature('rp2').set('legend', true);
model.result('pg5').feature('rp2').set('legendmethod', 'manual');
model.result('pg5').feature('rp2').setIndex('legends', 'Analytical', 0);
model.result('pg5').feature('rp2').set('linestyle', 'none');
model.result('pg5').feature('rp2').set('linecolor', 'blue');
model.result('pg5').feature('rp2').set('linemarker', 'point');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Scattered Pressure along the x-axis');
model.result('pg6').set('data', 'pc1');
model.result('pg6').setIndex('looplevelinput', 'manual', 0);
model.result('pg6').setIndex('looplevel', [20], 0);
model.result('pg6').set('titletype', 'manual');
model.result('pg6').set('titlenumberformat', 'auto');
model.result('pg6').set('titleprecision', 4);
model.result('pg6').set('title', 'On-axis Scattered Pressure, f = eval(freq) Hz');
model.result('pg6').create('lngr1', 'LineGraph');
model.result('pg6').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr1').set('linewidth', 'preference');
model.result('pg6').feature('lngr1').set('expr', 'pabe.p_s');
model.result('pg6').feature('lngr1').set('xdata', 'expr');
model.result('pg6').feature('lngr1').set('xdataexpr', 'x');
model.result('pg6').feature('lngr1').set('linecolor', 'blue');
model.result('pg6').feature('lngr1').set('legend', true);
model.result('pg6').feature('lngr1').set('legendmethod', 'manual');
model.result('pg6').feature('lngr1').setIndex('legends', 'BEM', 0);
model.result('pg6').run;
model.result('pg6').create('lngr2', 'LineGraph');
model.result('pg6').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg6').feature('lngr2').set('linewidth', 'preference');
model.result('pg6').feature('lngr2').set('expr', 'pana');
model.result('pg6').feature('lngr2').set('xdata', 'expr');
model.result('pg6').feature('lngr2').set('xdataexpr', 'x');
model.result('pg6').feature('lngr2').set('linecolor', 'blue');
model.result('pg6').feature('lngr2').set('linestyle', 'none');
model.result('pg6').feature('lngr2').set('linemarker', 'point');
model.result('pg6').feature('lngr2').set('markerpos', 'interp');
model.result('pg6').feature('lngr2').set('markers', 300);
model.result('pg6').feature('lngr2').set('legend', true);
model.result('pg6').feature('lngr2').set('legendmethod', 'manual');
model.result('pg6').feature('lngr2').setIndex('legends', 'Analytical', 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Absolute Total Pressure in Point');
model.result('pg7').set('data', 'cpt1');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Absolute total pressure evaluated at (x,y,z) = (2*R0,0,0)');
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', 'f (Hz)');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', '|p<sub>t</sub>| (Pa)');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', 40);
model.result('pg7').set('xmax', 1500);
model.result('pg7').set('ymin', 0.6);
model.result('pg7').set('ymax', 1.6);
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').set('expr', 'abs(pabe.p_t)');
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'BEM', 0);
model.result('pg7').feature('ptgr1').set('linecolor', 'blue');
model.result('pg7').run;
model.result('pg7').create('ptgr2', 'PointGraph');
model.result('pg7').feature('ptgr2').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr2').set('linewidth', 'preference');
model.result('pg7').feature('ptgr2').set('expr', 'abs(pana+pabe.p_b)');
model.result('pg7').feature('ptgr2').set('legend', true);
model.result('pg7').feature('ptgr2').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Analytical', 0);
model.result('pg7').feature('ptgr2').set('linestyle', 'none');
model.result('pg7').feature('ptgr2').set('linecolor', 'blue');
model.result('pg7').feature('ptgr2').set('linemarker', 'point');
model.result('pg7').run;

model.title('Spherical Scatterer: BEM Benchmark');

model.description('In this classical benchmark model, a spherical scatterer is placed in a plane wave background field. When the sphere is modeled as sound hard, the problem has an analytical solution. The model compares the results using the Pressure Acoustics, Boundary Elements interface with the analytical solution for several frequencies. The results show very good agreement. The model results do not show any irregular modes.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('spherical_scatterer_bem_benchmark.mph');

model.modelNode.label('Components');

out = model;
