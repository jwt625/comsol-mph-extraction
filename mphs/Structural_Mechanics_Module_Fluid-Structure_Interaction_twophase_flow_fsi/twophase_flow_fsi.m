function out = model
%
% twophase_flow_fsi.m
%
% Model exported on May 26 2025, 21:33 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Structural_Mechanics_Module/Fluid-Structure_Interaction');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics.create('pf', 'PhaseField', 'geom1');
model.physics('pf').model('comp1');
model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');
model.physics('shell').field('displacement').field('u_shell');
model.physics('shell').field('displacement').component({'u_shell' 'v_shell' 'w_shell'});
model.physics('shell').prop('ShapeProperty').set('order_displacement', '2');

model.multiphysics.create('tpf1', 'TwoPhaseFlowPhaseField', 'geom1', 3);
model.multiphysics('tpf1').set('Fluid_physics', 'spf');
model.multiphysics('tpf1').set('Mathematics_physics', 'pf');
model.multiphysics('tpf1').selection.all;
model.multiphysics.create('fsi1', 'FluidStructureInteractionBC', 'geom1', 2);
model.multiphysics('fsi1').set('Structure_physics', 'shell');
model.multiphysics('fsi1').selection.all;

model.common.create('free1', 'DeformingDomain', 'comp1');
model.common('free1').set('smoothingType', 'yeoh');
model.common('free1').selection.set([]);

model.study.create('std1');
model.study('std1').create('phasei', 'PhaseInitialization');
model.study('std1').feature('phasei').set('solnum', 'auto');
model.study('std1').feature('phasei').set('notsolnum', 'auto');
model.study('std1').feature('phasei').set('outputmap', {});
model.study('std1').feature('phasei').set('ngenAUX', '1');
model.study('std1').feature('phasei').set('goalngenAUX', '1');
model.study('std1').feature('phasei').set('ngenAUX', '1');
model.study('std1').feature('phasei').set('goalngenAUX', '1');
model.study('std1').feature('phasei').setSolveFor('/physics/spf', true);
model.study('std1').feature('phasei').setSolveFor('/physics/pf', true);
model.study('std1').feature('phasei').setSolveFor('/physics/shell', true);
model.study('std1').feature('phasei').setSolveFor('/multiphysics/tpf1', true);
model.study('std1').feature('phasei').setSolveFor('/physics/spf', false);
model.study('std1').feature('phasei').setSolveFor('/multiphysics/fsi1', true);
model.study('std1').feature('phasei').setSolveFor('/physics/spf', false);
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').set('initstudy', 'std1');
model.study('std1').feature('time').set('notstudy', 'std1');
model.study('std1').feature('time').set('initialtime', '0');
model.study('std1').feature('time').set('useinitsol', 'on');
model.study('std1').feature('time').set('notsolmethod', 'sol');
model.study('std1').feature('time').set('outputmap', {});
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/physics/pf', true);
model.study('std1').feature('time').setSolveFor('/physics/shell', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/tpf1', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/fsi1', true);

model.param.set('Hb', '10[mm]');
model.param.descr('Hb', 'Box height');
model.param.set('Wb', '5[mm]');
model.param.descr('Wb', 'Box width');
model.param.set('Lb', '30[mm]');
model.param.descr('Lb', 'Box length');
model.param.set('Xo', '15[mm]');
model.param.descr('Xo', 'Position of obstacle');
model.param.set('do', '0.3[mm]');
model.param.descr('do', 'Obstacle thickness');
model.param.set('Ho', '9[mm]');
model.param.descr('Ho', 'Obstacle height');
model.param.set('Wo', '4[mm]');
model.param.descr('Wo', 'Obstacle width');
model.param.set('Xi', '10[mm]');
model.param.descr('Xi', 'Initial position of the interface');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'Lb' 'Wb' 'Hb'});
model.geom('geom1').feature('blk1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('blk1').setIndex('layer', 'Xi', 0);
model.geom('geom1').feature('blk1').setIndex('layername', 'Layer 2', 1);
model.geom('geom1').feature('blk1').setIndex('layer', 'Xi', 1);
model.geom('geom1').feature('blk1').set('layerleft', true);
model.geom('geom1').feature('blk1').set('layerbottom', false);
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').label('Obstacle');
model.geom('geom1').feature('wp1').set('quickplane', 'yz');
model.geom('geom1').feature('wp1').set('quickx', 'Xo');
model.geom('geom1').feature('wp1').set('selresult', true);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'Wo' 'Ho'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('pos', {'0' 'Hb-Ho'});
model.geom('geom1').feature('wp1').geom.run('r1');
model.geom('geom1').feature('wp1').geom.create('fil1', 'Fillet');
model.geom('geom1').feature('wp1').geom.feature('fil1').selection('pointinsketch').set('r1', 2);
model.geom('geom1').feature('wp1').geom.feature('fil1').set('radius', 'Wo/2');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');

model.geom('geom1').run;

model.selection('sel1').geom(2);
model.selection('sel1').set([2 7 13]);
model.selection('sel1').label('Symmetry');
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').geom(2);
model.selection('sel2').set([1 3 4 5 8 9 10 14 15 16 17]);
model.selection('sel2').label('Wall');

model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);
model.physics('spf').prop('PhysicalModelProperty').set('rref', {'0' '0' 'Hb'});
model.physics('spf').feature('init1').set('p_init', 'spf.rho*g_const*(Hb-z)');
model.physics('spf').feature('init1').set('CompensateForHydrostaticPressure', false);
model.physics('spf').create('sym1', 'Symmetry', 2);
model.physics('spf').feature('sym1').selection.named('sel1');
model.physics('spf').create('iwbc1', 'InteriorWallBC', 2);
model.physics('spf').feature('iwbc1').selection.named('geom1_wp1_bnd');
model.physics('spf').create('wallbc2', 'WallBC', 2);
model.physics('spf').feature('wallbc2').selection.set([8 10]);
model.physics('spf').feature('wallbc2').set('TranslationalVelocityOption', 'ZeroFixedWall');
model.physics('spf').create('prpc1', 'PressurePointConstraint', 0);
model.physics('spf').feature('prpc1').selection.set([20]);
model.physics('spf').feature('prpc1').set('CompensateForHydrostaticPressure', false);
model.physics('pf').feature('pfm1').set('chi', 5);
model.physics('pf').feature('initfluid2').selection.set([2 3]);
model.physics('pf').create('sym1', 'SymmetryFluid', 2);
model.physics('pf').feature('sym1').selection.named('sel1');
model.physics('pf').create('iww1', 'InteriorWettedWall', 2);
model.physics('pf').feature('iww1').selection.named('geom1_wp1_bnd');
model.physics('shell').selection.named('geom1_wp1_bnd');
model.physics('shell').feature('to1').set('d', 'do');
model.physics('shell').create('fix1', 'Fixed', 1);
model.physics('shell').feature('fix1').selection.set([19]);
model.physics('shell').create('sym1', 'SymmetrySolid1', 1);
model.physics('shell').feature('sym1').selection.set([17]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('rho', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat2').propertyGroup('def').func.create('cs', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('an3', 'Analytic');
model.material('mat2').label('Water, liquid');
model.material('mat2').set('family', 'water');
model.material('mat2').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('eta').set('pieces', {'273.15' '413.15' '1.3799566804-0.021224019151*T^1+1.3604562827E-4*T^2-4.6454090319E-7*T^3+8.9042735735E-10*T^4-9.0790692686E-13*T^5+3.8457331488E-16*T^6'; '413.15' '553.75' '0.00401235783-2.10746715E-5*T^1+3.85772275E-8*T^2-2.39730284E-11*T^3'});
model.material('mat2').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('Cp').set('pieces', {'273.15' '553.75' '12010.1471-80.4072879*T^1+0.309866854*T^2-5.38186884E-4*T^3+3.62536437E-7*T^4'});
model.material('mat2').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat2').propertyGroup('def').func('rho').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('rho').set('smooth', 'contd1');
model.material('mat2').propertyGroup('def').func('rho').set('pieces', {'273.15' '293.15' '0.000063092789034*T^3-0.060367639882855*T^2+18.9229382407066*T-950.704055329848'; '293.15' '373.15' '0.000010335053319*T^3-0.013395065634452*T^2+4.969288832655160*T+432.257114008512'});
model.material('mat2').propertyGroup('def').func('rho').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat2').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat2').propertyGroup('def').func('k').set('pieces', {'273.15' '553.75' '-0.869083936+0.00894880345*T^1-1.58366345E-5*T^2+7.97543259E-9*T^3'});
model.material('mat2').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat2').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat2').propertyGroup('def').func('cs').set('table', {'273' '1403';  ...
'278' '1427';  ...
'283' '1447';  ...
'293' '1481';  ...
'303' '1507';  ...
'313' '1526';  ...
'323' '1541';  ...
'333' '1552';  ...
'343' '1555';  ...
'353' '1555';  ...
'363' '1550';  ...
'373' '1543'});
model.material('mat2').propertyGroup('def').func('cs').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('cs').set('fununit', {'m/s'});
model.material('mat2').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', '-1/rho(T)*d(rho(T),T)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an1').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'gamma_w');
model.material('mat2').propertyGroup('def').func('an2').set('expr', '1+(T/Cp(T))*(alpha_p(T)*cs(T))^2');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat2').propertyGroup('def').func('an3').set('funcname', 'muB');
model.material('mat2').propertyGroup('def').func('an3').set('expr', '2.79*eta(T)');
model.material('mat2').propertyGroup('def').func('an3').set('args', {'T'});
model.material('mat2').propertyGroup('def').func('an3').set('fununit', 'Pa*s');
model.material('mat2').propertyGroup('def').func('an3').set('argunit', {'K'});
model.material('mat2').propertyGroup('def').func('an3').set('plotfixedvalue', {'273.15'});
model.material('mat2').propertyGroup('def').func('an3').set('plotargs', {'T' '273.15' '553.75'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat2').propertyGroup('def').set('bulkviscosity', '');
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(T)' '0' '0' '0' 'alpha_p(T)' '0' '0' '0' 'alpha_p(T)'});
model.material('mat2').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat2').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat2').propertyGroup('def').set('ratioofspecificheat', 'gamma_w(T)');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]' '0' '0' '0' '5.5e-6[S/m]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat2').propertyGroup('def').set('density', 'rho(T)');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat2').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Nylon');
model.material('mat3').selection.geom('geom1', 2);
model.material('mat3').selection.named('geom1_wp1_bnd');
model.material('mat3').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat3').propertyGroup('Enu').set('E', {'2[MPa]'});
model.material('mat3').propertyGroup('Enu').set('nu', {'0.4'});
model.material('mat3').propertyGroup('def').set('density', {'1000'});

model.multiphysics('tpf1').set('Fluid1', 'mat2');
model.multiphysics('tpf1').set('Fluid2', 'mat1');

model.mesh('mesh1').autoMeshSize(6);
model.mesh('mesh1').run;

model.study('std1').feature('phasei').setEntry('activate', 'frame:spatial1', false);
model.study('std1').feature('phasei').setEntry('activateCoupling', 'tpf1', false);

model.common('free1').selection.set([2]);
model.common.create('sym1', 'Symmetry', 'comp1');
model.common('sym1').selection.set([7 8 10]);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 2 3]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'phasei');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '8.088831092119247E-5');
model.sol('sol1').feature('v1').set('control', 'phasei');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('s1').feature('i1').set('rhob', 400);
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('AMG, interface distance (pf)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sl1', 'SORLine');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linerelax', 0.7);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linealgorithm', 'mesh');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('linemethod', 'uncoupled');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('seconditer', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sl1').set('relax', 0.5);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('s1').feature('d1').label('Direct, interface distance (pf)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('initstep', 0.01);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'time');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_phipf').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u_shell').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v2').feature('comp1_phipf').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v2').feature('comp1_u_shell').set('scaleval', '1e-2*0.032015621187164243');
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1e-2*0.032015621187164243');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('notsoluse', 'sol2');
model.sol('sol1').feature('v2').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ar' 'global' 'comp1_fsi1_vWall' 'global' 'comp1_GI' 'global' 'comp1_p' 'scaled' 'comp1_phipf' 'global'  ...
'comp1_psi' 'global' 'comp1_spatial_disp' 'global' 'comp1_u' 'global' 'comp1_u_shell' 'global'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ar' 'factor' 'comp1_fsi1_vWall' 'factor' 'comp1_GI' 'factor' 'comp1_p' 'factor' 'comp1_phipf' 'factor'  ...
'comp1_psi' 'factor' 'comp1_spatial_disp' 'factor' 'comp1_u' 'factor' 'comp1_u_shell' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_ar' '0.1' 'comp1_fsi1_vWall' '0.1' 'comp1_GI' '0.1' 'comp1_p' '1' 'comp1_phipf' '0.1'  ...
'comp1_psi' '0.1' 'comp1_spatial_disp' '0.1' 'comp1_u' '0.1' 'comp1_u_shell' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_p'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, fluid flow variables (spf)');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Velocity u, Pressure p');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_phipf' 'comp1_psi'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i2').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i2').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i2').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i2').set('maxlinit', 50);
model.sol('sol1').feature('t1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i2').label('AMG, phase field variables (pf)');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('strconn', 0.01);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('saamgcompwise', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'i2');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Phase Field Variables');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subiter', 1);
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subtermconst', 'iter');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subntolfact', 0.1);
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, spatial mesh displacement (spf)');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');
model.sol('sol1').feature('t1').feature('se1').create('ss4', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('segvar', {'comp1_u_shell' 'comp1_ar'});
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subdtech', 'const');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').label('Displacement Field');
model.sol('sol1').feature('t1').feature('se1').create('ss5', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss5').set('segvar', {'comp1_fsi1_vWall'});
model.sol('sol1').feature('t1').feature('se1').feature('ss5').set('subdamp', 0.7);
model.sol('sol1').feature('t1').feature('se1').feature('ss5').set('subjtech', 'onevery');
model.sol('sol1').feature('t1').create('d2', 'Direct');
model.sol('sol1').feature('t1').feature('d2').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d2').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d2').label('Direct 3');
model.sol('sol1').feature('t1').feature('se1').feature('ss5').set('linsolver', 'd2');
model.sol('sol1').feature('t1').feature('se1').feature('ss5').label(['Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction 1']);
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 20);
model.sol('sol1').feature('t1').create('d3', 'Direct');
model.sol('sol1').feature('t1').feature('d3').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d3').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d3').label('Direct, fluid flow variables (spf)');
model.sol('sol1').feature('t1').create('d4', 'Direct');
model.sol('sol1').feature('t1').feature('d4').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d4').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d4').label('Direct, phase field variables (pf)');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runFromTo('st1', 'v1');

model.result.dataset('dset1').set('geom', 'geom1');
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Velocity (spf)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('slc1', 'Slice');
model.result('pg1').feature('slc1').label('Slice');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('smooth', 'internal');
model.result('pg1').feature('slc1').set('showsolutionparams', 'on');
model.result('pg1').feature('slc1').set('data', 'parent');
model.result.dataset.create('surf1', 'Surface');
model.result.dataset('surf1').label('All Walls');
model.result.dataset('surf1').set('data', 'none');
model.result.dataset.create('surf2', 'Surface');
model.result.dataset('surf2').label('Exterior Walls');
model.result.dataset('surf2').set('data', 'none');
model.result.dataset.create('surf3', 'Surface');
model.result.dataset('surf3').label('Interior Walls');
model.result.dataset('surf3').set('data', 'none');
model.result.dataset('surf2').set('data', 'dset1');
model.result.dataset('surf2').selection.geom('geom1', 2);
model.result.dataset('surf2').selection.set([1 3 4 5 8 9 10 14 15 16 17]);
model.result.dataset('surf1').set('data', 'dset1');
model.result.dataset('surf1').selection.geom('geom1', 2);
model.result.dataset('surf1').selection.set([1 3 4 5 8 9 10 11 14 15 16 17]);
model.result.dataset('surf3').set('data', 'dset1');
model.result.dataset('surf3').selection.geom('geom1', 2);
model.result.dataset('surf3').selection.set([11]);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Pressure (spf)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond2/pcond2/pcond2/pg4');
model.result('pg2').feature.create('surf1', 'Surface');
model.result('pg2').feature('surf1').label('Surface');
model.result('pg2').feature('surf1').set('data', 'surf2');
model.result('pg2').feature('surf1').setIndex('looplevel', 1, 0);
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('expr', 'p');
model.result('pg2').feature('surf1').set('colortable', 'Dipole');
model.result('pg2').feature('surf1').set('smooth', 'internal');
model.result('pg2').feature('surf1').set('showsolutionparams', 'on');
model.result('pg2').feature('surf1').set('data', 'surf2');
model.result('pg2').feature('surf1').feature.create('tran1', 'Transparency');
model.result('pg2').feature.create('slit1', 'SurfaceSlit');
model.result('pg2').feature('slit1').set('data', 'surf3');
model.result('pg2').feature('slit1').setIndex('looplevel', 1, 0);
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('upexpr', 'up(p)');
model.result('pg2').feature('slit1').set('downexpr', 'down(p)');
model.result('pg2').feature('slit1').set('titletype', 'none');
model.result('pg2').feature('slit1').set('smooth', 'internal');
model.result('pg2').feature('slit1').set('showsolutionparams', 'on');
model.result('pg2').feature('slit1').set('data', 'surf3');
model.result('pg2').feature('slit1').set('inheritplot', 'surf1');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Volume Fraction of Fluid 1 (pf)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('defaultPlotID', 'StandaloneTwoPhaseFlowPhysicsInterfaces/icom1/pdef1/pcond2/pg1');
model.result('pg3').feature.create('slc1', 'Slice');
model.result('pg3').feature('slc1').set('expr', 'pf.Vf1');
model.result('pg3').feature('slc1').set('smooth', 'internal');
model.result('pg3').feature('slc1').set('data', 'parent');
model.result('pg3').feature.create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', 'pf.Vf1');
model.result('pg3').feature('iso1').set('levelmethod', 'levels');
model.result('pg3').feature('iso1').set('levels', '0.5');
model.result('pg3').feature('iso1').set('coloring', 'uniform');
model.result('pg3').feature('iso1').set('colorlegend', false);
model.result('pg3').feature('iso1').set('color', 'gray');
model.result('pg3').feature('iso1').set('smooth', 'none');
model.result('pg3').feature('iso1').set('data', 'parent');
model.result.dataset.create('dset1shellshl', 'Shell');
model.result.dataset('dset1shellshl').set('data', 'dset1');
model.result.dataset('dset1shellshl').setIndex('topconst', '1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('bottomconst', '-1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlX', 0);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arx', 0);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlY', 1);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'ary', 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlZ', 2);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arz', 2);
model.result.dataset('dset1shellshl').set('distanceexpr', 'shell.z_pos');
model.result.dataset('dset1shellshl').set('seplevels', false);
model.result.dataset('dset1shellshl').set('resolution', 2);
model.result.dataset('dset1shellshl').set('areascalefactor', 'shell.ASF');
model.result.dataset('dset1shellshl').set('linescalefactor', 'shell.LSF');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1shellshl');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (shell)');
model.result('pg4').set('showlegends', true);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'shell.misesGp'});
model.result('pg4').feature('surf1').set('threshold', 'manual');
model.result('pg4').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg4').feature('surf1').set('colortable', 'Rainbow');
model.result('pg4').feature('surf1').set('colortabletrans', 'none');
model.result('pg4').feature('surf1').set('colorscalemode', 'linear');
model.result('pg4').feature('surf1').set('descr', 'von Mises stress');
model.result('pg4').feature('surf1').set('colortable', 'Prism');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').label('Moving Mesh');
model.result('pg5').create('mesh1', 'Mesh');
model.result('pg5').feature('mesh1').set('meshdomain', 'volume');
model.result('pg5').feature('mesh1').set('colortable', 'TrafficFlow');
model.result('pg5').feature('mesh1').set('colortabletrans', 'nonlinear');
model.result('pg5').feature('mesh1').set('nonlinearcolortablerev', true);
model.result('pg5').feature('mesh1').create('sel1', 'MeshSelection');
model.result('pg5').feature('mesh1').feature('sel1').selection.set([2]);
model.result('pg5').feature('mesh1').set('qualmeasure', 'custom');
model.result('pg5').feature('mesh1').set('qualexpr', 'comp1.spatial.relVol');
model.result('pg5').feature('mesh1').set('colorrangeunitinterval', false);
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').set('edges', false);
model.result('pg3').run;
model.result('pg3').feature.remove('slc1');
model.result('pg3').run;
model.result('pg3').feature('iso1').set('color', 'custom');
model.result('pg3').feature('iso1').set('customcolor', [0.21176470816135406 0.5490196347236633 0.7960784435272217]);
model.result('pg3').run;
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', '1');
model.result('pg3').feature('surf1').set('titletype', 'none');
model.result('pg3').feature('surf1').set('coloring', 'uniform');
model.result('pg3').feature('surf1').set('color', 'gray');
model.result('pg3').feature('surf1').create('sel1', 'Selection');
model.result('pg3').feature('surf1').feature('sel1').selection.named('sel2');
model.result('pg3').run;
model.result('pg3').create('surf2', 'Surface');
model.result('pg3').feature('surf2').set('expr', 'pf.Vf1');
model.result('pg3').feature('surf2').set('titletype', 'none');
model.result('pg3').feature('surf2').set('rangecoloractive', true);
model.result('pg3').feature('surf2').set('rangecolormin', 0.5);
model.result('pg3').feature('surf2').set('rangecolormax', 0.5);
model.result('pg3').feature('surf2').set('rangedataactive', true);
model.result('pg3').feature('surf2').set('rangedatamin', 0.5);
model.result('pg3').feature('surf2').set('rangedatamax', 1);
model.result('pg3').feature('surf2').set('smooth', 'none');
model.result('pg3').feature('surf2').set('inheritplot', 'iso1');
model.result('pg3').feature('surf2').create('sel1', 'Selection');
model.result('pg3').feature('surf2').feature('sel1').selection.set([2 7 13]);
model.result('pg3').run;
model.result('pg3').create('surf3', 'Surface');
model.result('pg3').feature('surf3').set('expr', 'shell.disp');
model.result('pg3').feature('surf3').set('descr', 'Displacement magnitude');
model.result('pg3').feature('surf3').set('coloring', 'gradient');
model.result('pg3').feature('surf3').set('topcolor', 'red');
model.result('pg3').feature('surf3').set('bottomcolor', 'gray');
model.result('pg3').feature('surf3').set('rangecoloractive', true);
model.result('pg3').feature('surf3').set('rangecolormax', 3);

model.study('std1').feature('time').set('tlist', 'range(0,5e-3,0.5)');
model.study('std1').feature('time').set('usertol', true);
model.study('std1').feature('time').set('rtol', 0.01);
model.study('std1').feature('time').set('plot', true);
model.study('std1').feature('time').set('plotgroup', 'pg3');

model.sol('sol1').feature('v2').feature('comp1_p').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_p').set('scaleval', 100);
model.sol('sol1').feature('v2').feature('comp1_spatial_disp').set('scaleval', '3e-3');
model.sol('sol1').feature('v2').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_u').set('scaleval', 1);
model.sol('sol1').feature('v2').feature('comp1_u_shell').set('scaleval', '3e-3');
model.sol('sol1').feature('t1').feature('se1').feature('ss4').set('subjtech', 'onevery');
model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('surf1').set('solutionparams', 'parent');
model.result('pg2').run;
model.result('pg2').feature('slit1').set('solutionparams', 'parent');
model.result('pg2').run;
model.result('pg2').setIndex('looplevel', 17, 0);
model.result('pg2').run;
model.result('pg4').run;
model.result('pg4').setIndex('looplevel', 17, 0);
model.result('pg4').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 101, 0);
model.result('pg6').set('defaultPlotID', 'boundaryLoads');
model.result('pg6').label('Face Loads (shell)');
model.result('pg6').set('showlegends', true);
model.result('pg6').set('titletype', 'label');
model.result('pg6').set('frametype', 'spatial');
model.result('pg6').set('showlegendsunit', true);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'1'});
model.result('pg6').feature('surf1').label('Gray Surfaces');
model.result('pg6').feature('surf1').set('coloring', 'uniform');
model.result('pg6').feature('surf1').set('color', 'gray');
model.result('pg6').feature('surf1').active(false);
model.result('pg6').feature('surf1').set('inheritcolor', false);
model.result('pg6').feature('surf1').set('inheritrange', false);
model.result('pg6').feature('surf1').set('inherittransparency', false);
model.result('pg6').feature('surf1').create('sel1', 'Selection');
model.result('pg6').feature('surf1').feature('sel1').selection.geom('geom1', 2);
model.result('pg6').feature('surf1').feature('sel1').selection.set([11]);
model.result('pg6').create('arws1', 'ArrowSurface');
model.result('pg6').feature('arws1').set('expr', {'fsi1.F_Atx' 'fsi1.F_Aty' 'fsi1.F_Atz'});
model.result('pg6').feature('arws1').set('placement', 'gausspoints');
model.result('pg6').feature('arws1').set('arrowbase', 'tail');
model.result('pg6').feature('arws1').label(['Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction 1 (Tangential Load)']);
model.result('pg6').feature('arws1').set('inheritplot', 'none');
model.result('pg6').feature('arws1').create('col', 'Color');
model.result('pg6').feature('arws1').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arws1').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arws1').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arws1').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arws1').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arws1').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arws1').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arws1').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arws1').set('color', 'red');
model.result('pg6').feature.move('surf1', 1);
model.result('pg6').create('arws2', 'ArrowSurface');
model.result('pg6').feature('arws2').set('expr', {'fsi1.F_Anx' 'fsi1.F_Any' 'fsi1.F_Anz'});
model.result('pg6').feature('arws2').set('placement', 'gausspoints');
model.result('pg6').feature('arws2').set('arrowbase', 'tail');
model.result('pg6').feature('arws2').label(['Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction 1 (Normal Load)']);
model.result('pg6').feature('arws2').set('inheritplot', 'arws1');
model.result('pg6').feature('arws2').create('col', 'Color');
model.result('pg6').feature('arws2').feature('col').set('colortable', 'Rainbow');
model.result('pg6').feature('arws2').feature('col').set('colortabletrans', 'none');
model.result('pg6').feature('arws2').feature('col').set('colorscalemode', 'linear');
model.result('pg6').feature('arws2').feature('col').set('colordata', 'arrowlength');
model.result('pg6').feature('arws2').feature('col').set('coloring', 'gradient');
model.result('pg6').feature('arws2').feature('col').set('topcolor', 'red');
model.result('pg6').feature('arws2').feature('col').set('bottomcolor', 'custom');
model.result('pg6').feature('arws2').feature('col').set('custombottomcolor', [0.5882353186607361 0.5137255191802979 0.5176470875740051]);
model.result('pg6').feature('arws2').set('color', 'red');
model.result('pg6').feature.move('surf1', 2);
model.result('pg6').label('Face Loads (shell)');
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 17, 0);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Obstacle Displacement');
model.result('pg7').set('titletype', 'none');
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Displacement (mm)');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([9]);
model.result('pg7').feature('ptgr1').set('expr', 'u_shell');
model.result('pg7').feature('ptgr1').set('linewidth', 2);
model.result('pg7').feature('ptgr1').set('legend', true);
model.result('pg7').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg7').feature('ptgr1').setIndex('legends', 'X-component', 0);
model.result('pg7').feature.duplicate('ptgr2', 'ptgr1');
model.result('pg7').run;
model.result('pg7').feature('ptgr2').set('expr', 'w_shell');
model.result('pg7').feature('ptgr2').set('linestyle', 'dashed');
model.result('pg7').feature('ptgr2').setIndex('legends', 'Z-component', 0);
model.result('pg7').run;
model.result.numerical.create('int1', 'IntVolume');
model.result.numerical('int1').selection.set([1 2 3]);
model.result.numerical('int1').setIndex('expr', 'phipf', 0);
model.result.numerical('int1').setIndex('unit', 'l', 0);
model.result.numerical('int1').setIndex('descr', 'Phase field variable', 0);
model.result.table.create('tbl1', 'Table');
model.result.table('tbl1').comments('Volume Integration 1');
model.result.numerical('int1').set('table', 'tbl1');
model.result.numerical('int1').setResult;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').set('data', 'none');
model.result('pg8').create('tblp1', 'Table');
model.result('pg8').feature('tblp1').set('source', 'table');
model.result('pg8').feature('tblp1').set('table', 'tbl1');
model.result('pg8').feature('tblp1').set('linewidth', 'preference');
model.result('pg8').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg8').run;
model.result('pg8').run;
model.result('pg8').label('Water Volume');
model.result('pg8').run;
model.result('pg8').feature('tblp1').set('linewidth', 2);
model.result('pg8').run;
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Water volume (l)');
model.result('pg8').run;
model.result('pg3').run;

model.view('view1').set('showaxisorientation', false);
model.view('view1').set('showgrid', false);

model.result('pg3').set('titletype', 'none');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').set('showlegends', false);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 8, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 17, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 21, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 28, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 34, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 41, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 48, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 54, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 101, 0);
model.result('pg3').run;

model.view('view1').set('showaxisorientation', true);
model.view('view1').set('showgrid', true);

model.result('pg3').set('titletype', 'auto');
model.result('pg3').set('showlegends', true);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').run;
model.result('pg3').setIndex('looplevel', 17, 0);
model.result('pg3').run;
model.result('pg3').run;

model.title(['Two-Phase Flow with Fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Structure Interaction']);

model.description(['The following example demonstrates techniques for modeling a fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'structure interaction containing two fluid phases in COMSOL Multiphysics. It illustrates how a heavier fluid can induce movement in an obstacle using the arbitrary Lagrangian' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Eulerian (ALE) technique along with the Two-Phase Flow, Phase Field predefined multiphysics interface.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('twophase_flow_fsi.mph');

model.modelNode.label('Components');

out = model;
