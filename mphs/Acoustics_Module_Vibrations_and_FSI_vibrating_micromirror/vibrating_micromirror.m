function out = model
%
% vibrating_micromirror.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Vibrations_and_FSI');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('shell', 'Shell', 'geom1');
model.physics('shell').model('comp1');
model.physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.physics('ta').model('comp1');
model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');

model.study.create('std1');
model.study('std1').create('eig', 'Eigenfrequency');
model.study('std1').feature('eig').set('chkeigregion', true);
model.study('std1').feature('eig').set('conrad', '1');
model.study('std1').feature('eig').set('conradynhm', '1');
model.study('std1').feature('eig').set('storefact', false);
model.study('std1').feature('eig').set('linpsolnum', 'auto');
model.study('std1').feature('eig').set('solnum', 'auto');
model.study('std1').feature('eig').set('notsolnum', 'auto');
model.study('std1').feature('eig').set('outputmap', {});
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').set('ngenAUX', '1');
model.study('std1').feature('eig').set('goalngenAUX', '1');
model.study('std1').feature('eig').setSolveFor('/physics/shell', true);
model.study('std1').feature('eig').setSolveFor('/physics/ta', true);
model.study('std1').feature('eig').setSolveFor('/physics/acpr', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('f0', '10.5[kHz]', 'Center frequency for analysis');
model.param.set('deltaf', '500[Hz]', 'Frequency range');
model.param.set('dvisc', '0.22[mm]*sqrt(100[Hz]/f0)', 'Viscous boundary layer thickness in air at f0');
model.param.set('h_mirror', '1[um]', 'Mirror thickness');

model.geom('geom1').insertFile('vibrating_micromirror_geom_sequence.mph', 'geom1');
model.geom('geom1').run('fin');

model.view('view1').set('renderwireframe', true);

model.variable.create('var1');
model.variable('var1').model('comp1');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('f_num', 'withsol(''sol1'',freq,setind(lambda,1))', 'First eigenfrequency');
model.variable('var1').set('f_r', 'real(f_num)', 'Resonance frequency (of 1st mode)');
model.variable('var1').set('omega_r', '2*pi*f_r', 'Resonance angular frequency');
model.variable('var1').set('alpha_r', 'imag(f_num)*2*pi', 'Attenuation coefficient');
model.variable('var1').set('Q_r', 'omega_r/(2*alpha_r)', 'Q factor');
model.variable('var1').set('df_r', 'f_r/Q_r', 'Resonance half power width');
model.variable('var1').set('P_simple', '20*log10(abs(omega_r^2/((ta.iomega)^2+2*alpha_r*ta.iomega+omega_r^2)))-20*log10(abs(omega_r/(2*i*alpha_r)))', 'Simple harmonic oscillator model fit');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Shell');
model.selection('sel1').geom(2);
model.selection('sel1').set([9]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Symmetry');
model.selection('sel2').geom(2);
model.selection('sel2').set([1 2 6 11 15]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Symmetry Edge');
model.selection('sel3').geom(1);
model.selection('sel3').set([9]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat2').label('Silicon');
model.material('mat2').set('family', 'custom');
model.material('mat2').set('customspecular', [0.7843137254901961 1 1]);
model.material('mat2').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);
model.material('mat2').set('noise', true);
model.material('mat2').set('fresnel', 0.7);
model.material('mat2').set('metallic', 0);
model.material('mat2').set('pearl', 0);
model.material('mat2').set('diffusewrap', 0);
model.material('mat2').set('clearcoat', 0);
model.material('mat2').set('reflectance', 0);
model.material('mat2').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'1e-12[S/m]' '0' '0' '0' '1e-12[S/m]' '0' '0' '0' '1e-12[S/m]'});
model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});
model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');
model.material('mat2').propertyGroup('def').set('relpermittivity', {'11.7' '0' '0' '0' '11.7' '0' '0' '0' '11.7'});
model.material('mat2').propertyGroup('def').set('density', '2329[kg/m^3]');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]' '0' '0' '0' '130[W/(m*K)]'});
model.material('mat2').propertyGroup('Enu').set('E', '170[GPa]');
model.material('mat2').propertyGroup('Enu').set('nu', '0.28');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'3.48' '0' '0' '0' '3.48' '0' '0' '0' '3.48'});
model.material('mat2').selection.geom('geom1', 2);
model.material('mat2').selection.named('sel1');

model.physics('shell').selection.named('sel1');
model.physics('shell').feature('to1').set('d', 'h_mirror');
model.physics('shell').create('fix1', 'Fixed', 1);
model.physics('shell').feature('fix1').selection.set([13]);
model.physics('shell').create('sym1', 'SymmetrySolid1', 1);
model.physics('shell').feature('sym1').selection.named('sel3');
model.physics('shell').create('bl1', 'BodyLoad', 2);
model.physics('shell').feature('bl1').selection.named('sel1');
model.physics('shell').feature('bl1').set('FbperVol', {'0' '0' 'x/(0.25[mm])*1e5[N/m^3]'});
model.physics('ta').selection.set([3]);
model.physics('ta').create('sym1', 'Symmetry', 2);
model.physics('ta').feature('sym1').selection.named('sel2');
model.physics('acpr').selection.set([1 2 4 5]);
model.physics('acpr').create('sym1', 'Symmetry', 2);
model.physics('acpr').feature('sym1').selection.named('sel2');
model.physics('acpr').create('swr1', 'SphericalWaveRadiation', 2);
model.physics('acpr').feature('swr1').selection.set([4 5 12 17]);

model.multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 'geom1', 2);
model.multiphysics('atb1').selection.all;
model.multiphysics.create('tsb1', 'ThermoacousticStructureBoundary', 'geom1', 2);
model.multiphysics('tsb1').selection.named('sel1');

model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('sel1');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'dvisc');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmin', '0.1*dvisc');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.4);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurveactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hcurve', 0.4);
model.mesh('mesh1').feature('ftri1').create('size2', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size2').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri1').feature('size2').selection.set([7 15]);
model.mesh('mesh1').feature('ftri1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size2').set('hmax', '0.2*dvisc');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', '343[m/s]/f0/6');
model.mesh('mesh1').feature('size').set('hnarrow', 2);
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom(3);
model.mesh('mesh1').feature('bl1').selection.set([]);
model.mesh('mesh1').feature('bl1').selection.allGeom;
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('sel1');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 3);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', '0.3*dvisc');
model.mesh('mesh1').run;

model.study('std1').feature('eig').set('shift', '10000');
model.study('std1').feature('eig').set('eigwhich', 'lr');
model.study('std1').feature('eig').set('neigsactive', true);
model.study('std1').feature('eig').set('neigs', 3);
model.study('std1').setGenPlots(false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'eig');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol1').feature('v1').set('control', 'eig');
model.sol('sol1').create('e1', 'Eigenvalue');
model.sol('sol1').feature('e1').set('neigs', 6);
model.sol('sol1').feature('e1').set('shift', '0');
model.sol('sol1').feature('e1').set('rtol', 1.0E-6);
model.sol('sol1').feature('e1').set('transform', 'none');
model.sol('sol1').feature('e1').set('eigref', '100');
model.sol('sol1').feature('e1').set('eigvfunscaleparam', '2.3999999999999996E-9');
model.sol('sol1').feature('e1').set('control', 'eig');
model.sol('sol1').feature('e1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('e1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('e1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('e1').create('d1', 'Direct');
model.sol('sol1').feature('e1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('e1').feature('d1').label('Suggested Direct Solver (tsb1_atb1) (Merged)');
model.sol('sol1').feature('e1').create('i1', 'Iterative');
model.sol('sol1').feature('e1').feature('i1').set('rhob', 10);
model.sol('sol1').feature('e1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (tsb1_atb1)');
model.sol('sol1').feature('e1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p2' 'comp1_u2' 'comp1_p' 'comp1_tsb1_lm_up' 'comp1_tsb1_lm_down' 'comp1_tsb1_lm'});
model.sol('sol1').feature('e1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('e1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('e1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('e1').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i1').feature('dp3').set('hybridvar', {'comp1_u' 'comp1_ar'});
model.sol('sol1').feature('e1').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('e1').create('i2', 'Iterative');
model.sol('sol1').feature('e1').feature('i2').set('rhob', 10);
model.sol('sol1').feature('e1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (tsb1_atb1)');
model.sol('sol1').feature('e1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('hybridvar', {'comp1_u2' 'comp1_p' 'comp1_tsb1_lm_up' 'comp1_tsb1_lm_down' 'comp1_tsb1_lm' 'comp1_T'});
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol1').feature('e1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_p' 'comp1_tsb1_lm_up' 'comp1_tsb1_lm_down' 'comp1_tsb1_lm'});
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('e1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('e1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('e1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p2' 'comp1_u' 'comp1_ar'});
model.sol('sol1').feature('e1').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol1').feature('e1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('e1').feature('d1').active(true);
model.sol('sol1').attach('std1');
model.sol('sol1').feature('e1').feature('i1').active(true);
model.sol('sol1').runAll;

model.result.dataset.create('dset1shellshl', 'Shell');
model.result.dataset('dset1shellshl').set('data', 'dset1');
model.result.dataset('dset1shellshl').setIndex('topconst', '1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('bottomconst', '-1', 3, 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlX', 0);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arx', 0);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlY', 1);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'ary', 1);
model.result.dataset('dset1shellshl').setIndex('orientationexpr', 'shell.nlZ', 2);
model.result.dataset('dset1shellshl').setIndex('displacementexpr', 'arz', 2);
model.result.dataset('dset1shellshl').set('distanceexpr', 'shell.z_pos');
model.result.dataset('dset1shellshl').set('seplevels', false);
model.result.dataset('dset1shellshl').set('resolution', 2);
model.result.dataset('dset1shellshl').set('areascalefactor', 'shell.ASF');
model.result.dataset('dset1shellshl').set('linescalefactor', 'shell.LSF');
model.result.dataset('dset1shellshl').set('defaultPlotIDs', {'modeShape|shell' 'modalStress|shell' 'shellGeometry|shell|surf1'});
model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'modeShape');
model.result('pg1').label('Mode Shape (shell)');
model.result('pg1').set('showlegends', false);
model.result('pg1').set('data', 'dset1shellshl');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'shell.disp'});
model.result('pg1').feature('surf1').set('threshold', 'manual');
model.result('pg1').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg1').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg1').feature('surf1').set('colortabletrans', 'none');
model.result('pg1').feature('surf1').set('colorscalemode', 'linear');
model.result('pg1').feature('surf1').create('def', 'Deform');
model.result('pg1').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg1').label('Mode Shape (shell)');
model.result('pg1').run;
model.result('pg1').set('looplevel', [2]);
model.result('pg1').run;
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').set('defaultPlotID', 'modalStress');
model.result('pg2').label('Modal Stress (shell)');
model.result('pg2').set('showlegends', true);
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1shellshl');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'shell.misesGp'});
model.result('pg2').feature('surf1').set('threshold', 'manual');
model.result('pg2').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg2').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg2').feature('surf1').set('colortabletrans', 'none');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').feature('surf1').set('descr', 'von Mises stress');
model.result('pg2').feature('surf1').create('def', 'Deform');
model.result('pg2').feature('surf1').feature('def').set('expr', {'shell.u' 'shell.v' 'shell.w'});
model.result('pg2').label('Modal Stress (shell)');
model.result('pg2').run;

model.study.create('std2');
model.study('std2').create('freq', 'Frequency');
model.study('std2').feature('freq').setSolveFor('/physics/shell', true);
model.study('std2').feature('freq').setSolveFor('/physics/ta', true);
model.study('std2').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/atb1', true);
model.study('std2').feature('freq').setSolveFor('/multiphysics/tsb1', true);
model.study('std2').feature('freq').set('plist', 'range(f0-deltaf,50,f0+deltaf)');
model.study('std2').setGenPlots(false);

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'freq');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scalemethod', 'manual');
model.sol('sol2').feature('v1').feature('comp1_ar').set('resscalemethod', 'parent');
model.sol('sol2').feature('v1').feature('comp1_ar').set('scaleval', '0.01');
model.sol('sol2').feature('v1').set('control', 'freq');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').set('stol', 0.001);
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'range(f0-deltaf,50,f0+deltaf)'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'pg1');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol2').feature('s1').set('linpmethod', 'sol');
model.sol('sol2').feature('s1').set('linpsol', 'zero');
model.sol('sol2').feature('s1').set('control', 'freq');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').create('seDef', 'Segregated');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('d1').label('Suggested Direct Solver (tsb1_atb1) (Merged)');
model.sol('sol2').feature('s1').create('i1', 'Iterative');
model.sol('sol2').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with Direct Precon.) (tsb1_atb1)');
model.sol('sol2').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_p2' 'comp1_u2' 'comp1_p'});
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol2').feature('s1').feature('i1').create('dp2', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i1').feature('dp2').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i1').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol2').feature('s1').feature('i1').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol2').feature('s1').feature('i1').create('dp3', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i1').feature('dp3').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i1').feature('dp3').set('hybridvar', {'comp1_u' 'comp1_ar'});
model.sol('sol2').feature('s1').feature('i1').feature('dp3').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i1').feature('dp3').set('pivotperturb', '1.0E-9');
model.sol('sol2').feature('s1').create('i2', 'Iterative');
model.sol('sol2').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with DD) (tsb1_atb1)');
model.sol('sol2').feature('s1').feature('i2').create('dd1', 'DomainDecomposition');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('hybridvar', {'comp1_u2' 'comp1_p' 'comp1_T'});
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('prefun', 'ddhyb');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('domdofmax', 200000);
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('ddolhandling', 'ddrestricted');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('userac', false);
model.sol('sol2').feature('s1').feature('i2').feature('dd1').set('usecoarse', 'aggregation');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('hybridvar', {'comp1_u2' 'comp1_p'});
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp1').set('pivotperturb', '1.0E-13');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').create('dp2', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('hybridvar', {'comp1_T'});
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('ds').feature('dp2').set('pivotperturb', '1.0E-13');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('cs').create('d1', 'Direct');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('dd1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol2').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol2').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol2').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_p2' 'comp1_u' 'comp1_ar'});
model.sol('sol2').feature('s1').feature('i2').feature('dp1').set('linsolver', 'pardiso');
model.sol('sol2').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').feature('s1').feature.remove('seDef');
model.sol('sol2').attach('std2');
model.sol('sol2').feature('s1').feature('i1').active(true);
model.sol('sol2').runAll;

model.result.dataset.create('mir1', 'Mirror3D');
model.result.dataset('mir1').set('quickplane', 'xz');
model.result.dataset('mir1').set('data', 'dset2');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Displacement');
model.result('pg3').set('data', 'mir1');
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('unit', [native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.result('pg3').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg3').feature('surf1').create('def1', 'Deform');
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Temperature Variation');
model.result('pg4').set('data', 'dset2');
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').create('slc1', 'Slice');
model.result('pg4').feature('slc1').set('expr', 'ta.T_t');
model.result('pg4').feature('slc1').set('unit', 'mK');
model.result('pg4').feature('slc1').set('quickplane', 'zx');
model.result('pg4').feature('slc1').set('colortable', 'ThermalWave');
model.result('pg4').feature('slc1').set('colorscalemode', 'linearsymmetric');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').run;
model.result('pg5').label('Acoustic Pressure');
model.result('pg5').set('data', 'dset2');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('iso1', 'Isosurface');
model.result('pg5').feature('iso1').set('expr', 'atb1.p_t');
model.result('pg5').feature('iso1').set('descr', 'Total acoustic pressure');
model.result('pg5').feature('iso1').set('number', 20);
model.result('pg5').feature('iso1').set('colortable', 'Wave');
model.result('pg5').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg5').run;
model.result('pg4').run;
model.result.duplicate('pg6', 'pg4');
model.result('pg6').run;
model.result('pg6').label('Acoustic Velocity');
model.result('pg6').run;
model.result('pg6').feature('slc1').set('expr', 'ta.v_inst');
model.result('pg6').feature('slc1').set('unit', 'mm/s');
model.result('pg6').feature('slc1').set('colortable', 'Rainbow');
model.result('pg6').feature('slc1').set('colorscalemode', 'linear');
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Displacement Response');
model.result('pg7').set('data', 'dset2');
model.result('pg7').set('titletype', 'label');
model.result('pg7').create('ptgr1', 'PointGraph');
model.result('pg7').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg7').feature('ptgr1').set('linewidth', 'preference');
model.result('pg7').feature('ptgr1').selection.set([16]);
model.result('pg7').feature('ptgr1').set('expr', 'abs(w)');
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Power Response');
model.result('pg8').set('data', 'dset2');
model.result('pg8').set('titletype', 'label');
model.result('pg8').set('legendpos', 'lowerleft');
model.result('pg8').create('ptgr1', 'PointGraph');
model.result('pg8').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg8').feature('ptgr1').set('linewidth', 'preference');
model.result('pg8').feature('ptgr1').selection.set([16]);
model.result('pg8').feature('ptgr1').set('expr', '20*log10(abs(w*ta.iomega))-with(12,20*log10(abs(w*ta.iomega)))');
model.result('pg8').feature('ptgr1').set('legend', true);
model.result('pg8').feature('ptgr1').set('legendmethod', 'manual');
model.result('pg8').feature('ptgr1').setIndex('legends', 'Simulated response', 0);
model.result('pg8').run;
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').setIndex('expr', 'P_simple', 0);
model.result('pg8').feature('glob1').setIndex('unit', '', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Simple harmonic oscillator model fit', 0);
model.result('pg8').run;
model.result('pg8').feature('ptgr1').create('gmrk1', 'GraphMarker');
model.result('pg8').feature('ptgr1').feature('gmrk1').set('linewidth', 'preference');
model.result('pg8').run;
model.result('pg8').feature('ptgr1').feature('gmrk1').set('displaymode', 'widthmode');
model.result('pg8').feature('ptgr1').feature('gmrk1').set('cutoffmode', 'offsetfrompeak');
model.result('pg8').feature('ptgr1').feature('gmrk1').set('precision', 5);
model.result('pg8').feature('ptgr1').feature('gmrk1').set('includeunit', true);
model.result('pg8').run;
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').setIndex('looplevelinput', 'first', 0);
model.result.evaluationGroup('eg1').label('Evaluation Group 1 - Harmonic Oscillator Parameters');
model.result.evaluationGroup('eg1').set('transpose', true);
model.result.evaluationGroup('eg1').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'f_r', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Resonance frequency', 0);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'omega_r', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Resonance angular frequency', 1);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'alpha_r', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Attenuation coefficient', 2);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'Q_r', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 1, 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Q factor', 3);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('expr', 'df_r', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('unit', 'Hz', 4);
model.result.evaluationGroup('eg1').feature('gev1').setIndex('descr', 'Resonance half power width', 4);
model.result.evaluationGroup('eg1').run;
model.result('pg1').run;

model.study('std1').label('Study 1 - Eigenfrequency');
model.study('std2').label('Study 2 - Frequency Domain');

model.result('pg1').run;

model.title('Vibrating Micromirror with Viscous and Thermal Damping');

model.description(['Micromirrors are used in certain MEMS devices to control optic elements. This example of a vibrating micromirror surrounded by air uses the Thermoviscous Acoustic' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Shell Interaction multiphysics interface to model the fluid' native2unicode(hex2dec({'20' '13'}), 'unicode') 'solid interaction, and it thus includes the correct viscous and thermal damping of the mirror from the surrounding air. The resonance frequency of the mirror when under a torquing load is studied in the frequency domain by means of both frequency-response and eigenfrequency analyses. A simple RLC model is fitted to the system.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('vibrating_micromirror.mph');

model.modelNode.label('Components');

out = model;
