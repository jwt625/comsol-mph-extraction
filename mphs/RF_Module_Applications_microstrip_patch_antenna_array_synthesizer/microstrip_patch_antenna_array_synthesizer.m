function out = model
%
% microstrip_patch_antenna_array_synthesizer.m
%
% Model exported on May 26 2025, 21:32 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/RF_Module/Applications');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('emw', 'ElectromagneticWaves', 'geom1');
model.physics('emw').model('comp1');

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('solnum', 'auto');
model.study('std1').feature('freq').set('notsolnum', 'auto');
model.study('std1').feature('freq').set('outputmap', {});
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').set('ngenAUX', '1');
model.study('std1').feature('freq').set('goalngenAUX', '1');
model.study('std1').feature('freq').setSolveFor('/physics/emw', true);

model.param.set('w_patch', '1.63[mm]');
model.param.descr('w_patch', 'Patch width (y)');
model.param.set('l_patch', '1.7[mm]');
model.param.descr('l_patch', 'Patch length (x)');
model.param.set('w_sub', '4[mm]');
model.param.descr('w_sub', 'Substrate width (y)');
model.param.set('l_sub', '4[mm]');
model.param.descr('l_sub', 'Substrate length (x)');
model.param.set('w_slot', '0.1[mm]');
model.param.descr('w_slot', 'Slot width (y)');
model.param.set('l_slot', '0.605[mm]');
model.param.descr('l_slot', 'Slot length (x)');
model.param.set('thickness_p', '0.1[mm]');
model.param.descr('thickness_p', 'Patch substrate thickness (z)');
model.param.set('thickness_f', '0.1[mm]');
model.param.descr('thickness_f', 'Feed substrate thickness (z)');
model.param.set('w_feed', '0.11[mm]');
model.param.descr('w_feed', 'Feed line width (x)');
model.param.set('l_ext_feed', '0.52[mm]');
model.param.descr('l_ext_feed', 'Extend feed line length (y)');
model.param.set('f0', '30[GHz]');
model.param.descr('f0', 'Frequency');
model.param.set('lda0', 'c_const/f0');
model.param.descr('lda0', 'Wave length');
model.param.set('p_sub_eps', '7.8');
model.param.descr('p_sub_eps', 'Patch substrate permittivity');
model.param.set('f_sub_eps', '7.8');
model.param.descr('f_sub_eps', 'Feed substrate permittivity');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').label('Patch substrate');
model.geom('geom1').feature('blk1').set('size', {'l_sub' 'w_sub' 'thickness_p'});
model.geom('geom1').feature('blk1').set('pos', {'-l_sub/2' '-w_sub/2' '0'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'l_patch' 'w_patch' '1'});
model.geom('geom1').feature('blk2').setIndex('size', 'thickness_p', 2);
model.geom('geom1').feature('blk2').set('pos', {'-l_patch/2' '0' '0'});
model.geom('geom1').feature('blk2').setIndex('pos', '-w_patch/2', 1);

model.view('view1').set('renderwireframe', true);

model.geom('geom1').feature('blk2').label('Patch');
model.geom('geom1').run('blk2');
model.geom('geom1').create('sph1', 'Sphere');
model.geom('geom1').feature('sph1').set('r', 'sqrt((0.5*l_sub)^2+(0.5*w_sub)^2)+0.15*lda0');
model.geom('geom1').feature('sph1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('sph1').setIndex('layer', '0.1*lda0', 0);
model.geom('geom1').run('sph1');
model.geom('geom1').create('blk3', 'Block');
model.geom('geom1').feature('blk3').label('Feed substrate');
model.geom('geom1').feature('blk3').set('size', {'l_sub' 'w_sub' 'thickness_f'});
model.geom('geom1').feature('blk3').set('pos', {'-l_sub/2' '-w_sub/2' '0'});
model.geom('geom1').feature('blk3').setIndex('pos', '-thickness_f', 2);
model.geom('geom1').run('blk3');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('planetype', 'faceparallel');
model.geom('geom1').feature('wp1').selection('face').set('blk3', 4);
model.geom('geom1').feature('wp1').geom.create('r1', 'Rectangle');
model.geom('geom1').feature('wp1').geom.feature('r1').set('size', {'l_slot' 'w_slot'});
model.geom('geom1').feature('wp1').geom.feature('r1').set('base', 'center');
model.geom('geom1').run('wp1');
model.geom('geom1').create('blk4', 'Block');
model.geom('geom1').feature('blk4').label('Feed');
model.geom('geom1').feature('blk4').set('size', {'w_feed' 'w_sub/3' '1'});
model.geom('geom1').feature('blk4').setIndex('size', 'thickness_f', 2);
model.geom('geom1').feature('blk4').set('pos', {'-w_feed/2' '0' '-thickness_f'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'blk4'});
model.geom('geom1').feature('rot1').set('rot', 180);
model.geom('geom1').run('rot1');
model.geom('geom1').create('blk5', 'Block');
model.geom('geom1').feature('blk5').label('Feed extended');
model.geom('geom1').feature('blk5').set('size', {'w_feed' 'l_ext_feed' '1'});
model.geom('geom1').feature('blk5').setIndex('size', 'thickness_f', 2);
model.geom('geom1').feature('blk5').set('pos', {'-w_feed/2' '0' '-thickness_f'});
model.geom('geom1').run('fin');

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').set('cosphi', '(x+1e-12)/sqrt(x^2+y^2+1e-12)');
model.variable('var1').set('sinphi', '(y+1e-12)/sqrt(y^2+x^2+1e-12)');
model.variable('var1').set('sintheta', 'sqrt(x^2+y^2+1e-12)/sqrt(x^2+y^2+z^2)');

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([1 2 3 4 11 12 13 14]);
model.coordSystem('pml1').set('ScalingType', 'Spherical');

model.physics('emw').create('pec2', 'PerfectElectricConductor', 2);
model.physics('emw').feature('pec2').selection.set([18 24 25 30 31 32 36 38]);
model.physics('emw').create('ffd1', 'FarFieldDomain', 3);
model.physics('emw').create('lport1', 'LumpedPort', 2);
model.physics('emw').feature('lport1').selection.set([29]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Patch Substrate');
model.material('mat2').selection.set([7 8]);
model.material('mat2').propertyGroup('def').set('relpermittivity', {'p_sub_eps'});
model.material('mat2').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Feed Substrate');
model.material('mat3').selection.set([6 9 10]);
model.material('mat3').propertyGroup('def').set('relpermittivity', {'f_sub_eps'});
model.material('mat3').propertyGroup('def').set('relpermeability', {'1'});
model.material('mat3').propertyGroup('def').set('electricconductivity', {'0'});

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').set([1 2 3 4 5 11 12 13 14]);

model.physics('emw').prop('MeshControl').set('SizeControlParameter', 'Frequency');
model.physics('emw').prop('MeshControl').set('PhysicsControlledMeshMaximumFrequency', 'f0');

model.study('std1').feature('freq').set('plist', 'f0');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'f0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'GHz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').set('prefuntype', 'right');
model.sol('sol1').feature('s1').feature('i1').set('itrestart', '300');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (emw)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('iter', '1');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('prefun', 'sorvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sv1', 'SORVector');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('prefun', 'soruvec');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('iter', 2);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('relax', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sv1').set('sorvecdof', {'comp1_E'});
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Electric Field (emw)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWaves/phys1/pdef1/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').label('Multislice');
model.result('pg1').feature('mslc1').set('smooth', 'internal');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature('mslc1').feature.create('filt1', 'Filter');
model.result('pg1').feature('mslc1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.numerical.create('gev1', 'EvalGlobal');
model.result.numerical('gev1').label('S-parameter (emw)');
model.result.numerical('gev1').set('data', 'dset1');
model.result.numerical('gev1').set('expr', {'emw.S11dB'});
model.result.table.create('tbl1', 'Table');
model.result.numerical('gev1').set('table', 'tbl1');
model.result.numerical('gev1').run;
model.result.numerical('gev1').setResult;
model.result.create('pg2', 'PolarGroup');
model.result('pg2').label('2D Far Field (emw)');
model.result('pg2').set('data', 'dset1');
model.result('pg2').create('rp1', 'RadiationPattern');
model.result('pg2').feature('rp1').set('legend', 'on');
model.result('pg2').feature('rp1').set('phidisc', '180');
model.result('pg2').feature('rp1').set('expr', {'emw.normEfar'});
model.result('pg2').feature('rp1').create('exp1', 'Export');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('3D Far Field, Gain (emw)');
model.result('pg3').set('data', 'dset1');
model.result('pg3').set('view', 'new');
model.result('pg3').set('edges', 'off');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').create('rp1', 'RadiationPattern');
model.result('pg3').feature('rp1').set('expr', {'emw.rGaindBEfar'});
model.result('pg3').feature('rp1').set('colorexpr', {'emw.normEfar'});
model.result('pg3').feature('rp1').set('useradiusascolor', true);
model.result('pg3').feature('rp1').set('directivityexpr', {'emw.normEfar^2'});
model.result('pg3').feature('rp1').set('thetadisc', '45');
model.result('pg3').feature('rp1').set('phidisc', '45');
model.result('pg3').feature('rp1').set('directivity', 'on');
model.result('pg3').feature('rp1').set('colortable', 'RainbowLight');
model.result('pg3').feature('rp1').create('exp1', 'Export');
model.result('pg3').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg3').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.phi', 1);
model.result('pg2').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.theta', 0);
model.result('pg2').feature('rp1').feature('exp1').setIndex('expr', 'comp1.emw.phi', 1);
model.result('pg1').run;
model.result.dataset('dset1').selection.geom('geom1', 3);
model.result.dataset('dset1').selection.geom('geom1', 3);
model.result.dataset('dset1').selection.set([6 7 8 9 10]);
model.result.dataset.create('dset2', 'Solution');
model.result.dataset('dset2').label('Patch');
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.geom('geom1', 2);
model.result.dataset('dset2').selection.set([25]);
model.result.dataset.create('dset3', 'Solution');
model.result.dataset('dset3').label('Patch Substrate');
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.set([16 17 18 19 21 24 27 31 32 33 37 38 57 61]);
model.result.dataset.create('dset4', 'Solution');
model.result.dataset('dset4').label('Feed');
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.set([30 36]);
model.result.dataset.create('dset5', 'Solution');
model.result.dataset('dset5').label('Feed Substrate');
model.result.dataset('dset5').selection.geom('geom1', 2);
model.result.dataset('dset5').selection.geom('geom1', 2);
model.result.dataset('dset5').selection.set([13 14 15 18 20 24 27 31 32 33 37 38 57 60]);
model.result.dataset.create('dset6', 'Solution');
model.result.dataset('dset6').label('Slot with Ground');
model.result.dataset('dset6').selection.geom('geom1', 2);
model.result.dataset('dset6').selection.geom('geom1', 2);
model.result.dataset('dset6').selection.set([18 24 31 32 38]);
model.result.dataset.create('dset7', 'Solution');
model.result.dataset('dset7').label('Study 1/Solution 1, Patch and Feed Domain');
model.result.dataset('dset7').selection.geom('geom1', 3);
model.result.dataset('dset7').selection.geom('geom1', 3);
model.result.dataset('dset7').selection.set([8 9 10]);
model.result.dataset.create('arr1', 'Array3D');
model.result.dataset('arr1').label('Array 3D Patch and Feed');
model.result.dataset('arr1').set('data', 'dset7');
model.result.dataset('arr1').set('fullsize', [8 8 1]);
model.result.dataset('arr1').set('displmethod', 'manual');
model.result.dataset('arr1').set('displ', [4 4 0]);
model.result.dataset.create('dset8', 'Solution');
model.result.dataset('dset8').label('Study 1/Solution 1, Patch Substrate Domain');
model.result.dataset('dset8').selection.geom('geom1', 3);
model.result.dataset('dset8').selection.geom('geom1', 3);
model.result.dataset('dset8').selection.set([7]);
model.result.dataset.create('arr2', 'Array3D');
model.result.dataset('arr2').label('Array 3D Patch Substrate');
model.result.dataset('arr2').set('data', 'dset8');
model.result.dataset('arr2').set('fullsize', [8 8 1]);
model.result.dataset('arr2').set('displmethod', 'manual');
model.result.dataset('arr2').set('displ', [4 4 0]);
model.result.dataset.create('dset9', 'Solution');
model.result.dataset('dset9').label('Study 1/Solution 1, Feed Substrate Domain');
model.result.dataset('dset9').selection.geom('geom1', 3);
model.result.dataset('dset9').selection.geom('geom1', 3);
model.result.dataset('dset9').selection.set([6]);
model.result.dataset.create('arr3', 'Array3D');
model.result.dataset('arr3').set('data', 'dset9');
model.result.dataset('arr3').label('Array 3D Feed Substrate');
model.result.dataset('arr3').set('fullsize', [8 8 1]);
model.result.dataset('arr3').set('displmethod', 'manual');
model.result.dataset('arr3').set('displ', [4 4 0]);
model.result.numerical.create('gev2', 'EvalGlobal');
model.result.numerical('gev2').label('Input impedance');
model.result.numerical('gev2').setIndex('expr', 'emw.Zport_1', 0);
model.result.numerical('gev2').setIndex('unit', ['ohm' ], 0);
model.result.numerical('gev2').setIndex('descr', 'Lumped port impedance', 0);
model.result.table.create('tbl2', 'Table');
model.result.table('tbl2').comments('Input impedance');
model.result.numerical('gev2').set('table', 'tbl2');
model.result.numerical('gev2').setResult;
model.result.numerical.create('max1', 'MaxSurface');
model.result.numerical('max1').selection.set([10 12 46 53]);
model.result.numerical('max1').setIndex('expr', 'emw.gaindBEfar+20*log10(sin(8*(emw.k0*0.004*sintheta*cosphi)/2)/(sin((emw.k0*0.004*sintheta*cosphi)/2))*sin(8*(emw.k0*0.004*sintheta*sinphi)/2)/(sin((emw.k0*0.004*sintheta*sinphi)/2)))+0', 0);
model.result.numerical('max1').setIndex('unit', '', 0);
model.result.numerical('max1').setIndex('descr', '', 0);
model.result.table.create('tbl3', 'Table');
model.result.table('tbl3').comments('Surface Maximum 1');
model.result.numerical('max1').set('table', 'tbl3');
model.result.numerical('max1').setResult;
model.result('pg1').run;
model.result('pg1').set('view', 'new');
model.result('pg1').run;

model.view('view3').label('View single antenna');
model.view('view3').set('showgrid', false);
model.view('view3').camera.set('zoomanglefull', 15);
model.view('view3').camera.setIndex('position', -18.11149024963379, 0);
model.view('view3').camera.setIndex('position', -24.14865493774414, 1);
model.view('view3').camera.setIndex('position', 18.11149024963379, 2);
model.view('view3').camera.setIndex('viewoffset', -0.006423640996217728, 0);
model.view('view3').camera.setIndex('viewoffset', 0.0019178534857928753, 1);

model.result('pg1').run;
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('titlecolor', 'custom');
model.result('pg1').set('customtitlecolor', [0 0.3333333432674408 0.5882353186607361]);
model.result('pg1').set('title', 'Single Antenna, Electric field norm (V/m), Exploded View');
model.result('pg1').run;
model.result('pg1').feature.remove('mslc1');
model.result('pg1').run;
model.result('pg1').set('edges', false);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Patch Surface');
model.result('pg1').feature('surf1').set('data', 'dset2');
model.result('pg1').feature('surf1').set('colortable', 'ThermalDark');
model.result('pg1').feature('surf1').set('colorlegend', false);
model.result('pg1').feature('surf1').set('coloring', 'uniform');
model.result('pg1').feature('surf1').set('color', 'custom');
model.result('pg1').feature('surf1').set('customcolor', [0.9921568632125854 0.7254902124404907 0.07450980693101883]);
model.result('pg1').feature('surf1').set('coloring', 'colortable');
model.result('pg1').feature('surf1').create('def1', 'Deform');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('def1').set('expr', {'0' '0' 'l_patch'});
model.result('pg1').feature('surf1').feature('def1').set('scaleactive', true);
model.result('pg1').feature('surf1').feature('def1').set('scale', 1);
model.result('pg1').run;
model.result('pg1').create('surf2', 'Surface');
model.result('pg1').feature('surf2').label('Patch Substrate Surface');
model.result('pg1').feature('surf2').set('data', 'dset3');
model.result('pg1').feature('surf2').set('colortable', 'ThermalDark');
model.result('pg1').feature('surf2').set('colorlegend', false);
model.result('pg1').feature('surf2').set('coloring', 'uniform');
model.result('pg1').feature('surf2').set('color', 'custom');
model.result('pg1').feature('surf2').set('customcolor', [0.5176470875740051 0.7607843279838562 0.9176470637321472]);
model.result('pg1').feature('surf2').set('coloring', 'colortable');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf2').feature.copy('def1', 'pg1/surf1/def1');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').create('surf3', 'Surface');
model.result('pg1').feature('surf3').label('Feed Surface');
model.result('pg1').feature('surf3').set('data', 'dset4');
model.result('pg1').feature('surf3').set('colortable', 'ThermalDark');
model.result('pg1').feature('surf3').set('colorlegend', false);
model.result('pg1').feature('surf3').set('colortabletrans', 'reverse');
model.result('pg1').feature('surf3').set('coloring', 'uniform');
model.result('pg1').feature('surf3').set('color', 'custom');
model.result('pg1').feature('surf3').set('customcolor', [0.9921568632125854 0.7254902124404907 0.07450980693101883]);
model.result('pg1').feature('surf3').set('coloring', 'colortable');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf3').feature.copy('def1', 'pg1/surf1/def1');
model.result('pg1').run;
model.result('pg1').feature('surf3').feature('def1').set('expr', {'0' '0' '-l_patch'});
model.result('pg1').run;
model.result('pg1').create('surf4', 'Surface');
model.result('pg1').feature('surf4').label('Feed Substrate Surface');
model.result('pg1').feature('surf4').set('data', 'dset5');
model.result('pg1').feature('surf4').set('colortable', 'ThermalDark');
model.result('pg1').feature('surf4').set('colorlegend', false);
model.result('pg1').feature('surf4').set('coloring', 'uniform');
model.result('pg1').feature('surf4').set('color', 'custom');
model.result('pg1').feature('surf4').set('customcolor', [0.7529411911964417 0.7529411911964417 0.7529411911964417]);
model.result('pg1').feature('surf4').set('coloring', 'colortable');
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('surf4').feature.copy('def1', 'pg1/surf1/def1');
model.result('pg1').run;
model.result('pg1').feature('surf4').feature('def1').set('expr', {'0' '0' '-l_patch'});
model.result('pg1').run;
model.result('pg1').create('surf5', 'Surface');
model.result('pg1').feature('surf5').label('Ground Plane Surface');
model.result('pg1').feature('surf5').set('data', 'dset6');
model.result('pg1').feature('surf5').set('colortable', 'ThermalDark');
model.result('pg1').feature('surf5').set('colorlegend', false);
model.result('pg1').feature('surf5').set('coloring', 'uniform');
model.result('pg1').feature('surf5').set('color', 'custom');
model.result('pg1').feature('surf5').set('customcolor', [0.9921568632125854 0.7254902124404907 0.07450980693101883]);
model.result('pg1').feature('surf5').set('coloring', 'colortable');
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').set('titletype', 'manual');
model.result('pg3').set('titlecolor', 'custom');
model.result('pg3').set('customtitlecolor', [0 0.3333333432674408 0.5882353186607361]);
model.result('pg3').set('title', 'Normalized 3D Far-field Pattern');
model.result('pg2').run;
model.result('pg2').label('2D Far Field yz (emw)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('titlecolor', 'custom');
model.result('pg2').set('customtitlecolor', [0 0.3333333432674408 0.5882353186607361]);
model.result('pg2').set('title', 'Normalized Far-field Pattern on yz-plane');
model.result('pg2').set('manualgrid', true);
model.result('pg2').set('axislimits', true);
model.result('pg2').set('tspacing', 10);
model.result('pg2').set('rspacing', 5);
model.result('pg2').set('rmin', -50);
model.result('pg2').set('rmax', 0.5);
model.result('pg2').run;
model.result('pg2').run;
model.result('pg2').feature('rp1').set('expr', 'emw.gaindBEfar+20*log10(sin(8*(emw.k0*0.004*sintheta*cosphi)/2)/(sin((emw.k0*0.004*sintheta*cosphi)/2))*sin(8*(emw.k0*0.004*sintheta*sinphi)/2)/(sin((emw.k0*0.004*sintheta*sinphi)/2)))-41.626');
model.result('pg2').feature('rp1').set('normal', [1 0 0]);
model.result('pg2').feature('rp1').set('refdir', [0 1 0]);
model.result('pg2').feature('rp1').set('linecolor', 'red');
model.result('pg2').feature('rp1').set('linewidth', 2);
model.result('pg2').feature('rp1').set('legend', false);
model.result('pg2').run;
model.result('pg2').set('showlegends', false);

model.view('view4').label('View far-field');
model.view('view4').set('showgrid', false);
model.view('view4').camera.set('zoomanglefull', 11);
model.view('view4').camera.setIndex('position', 369.4031982421875, 0);
model.view('view4').camera.setIndex('position', -255.27793884277344, 1);
model.view('view4').camera.setIndex('position', 296.1266784667969, 2);
model.view('view4').camera.setIndex('target', 0.05853271484375, 0);
model.view('view4').camera.setIndex('target', -0.11920166015625, 1);
model.view('view4').camera.setIndex('target', 4.057891845703125, 2);
model.view('view4').camera.setIndex('up', 0.4395850896835327, 0);
model.view('view4').camera.setIndex('up', 0.8738890886306763, 1);
model.view('view4').camera.setIndex('up', 0.20756082236766815, 2);
model.view('view4').camera.setIndex('rotationpoint', 0.05865478515625, 0);
model.view('view4').camera.setIndex('rotationpoint', -0.11928939819335938, 1);
model.view('view4').camera.setIndex('rotationpoint', 4.057941436767578, 2);
model.view('view4').camera.setIndex('viewoffset', -0.009620064869523048, 0);
model.view('view4').camera.setIndex('viewoffset', -0.02400832623243332, 1);

model.result('pg3').run;
model.result('pg3').feature('rp1').set('expr', 'emw.gaindBEfar+20*log10(sin(8*(emw.k0*0.004*sintheta*cosphi)/2)/(sin((emw.k0*0.004*sintheta*cosphi)/2))*sin(8*(emw.k0*0.004*sintheta*sinphi)/2)/(sin((emw.k0*0.004*sintheta*sinphi)/2)))-41.626');
model.result('pg3').feature('rp1').set('thresholdactive', true);
model.result('pg3').feature('rp1').set('threshold', -45);
model.result('pg3').feature('rp1').set('thetadisc', 180);
model.result('pg3').feature('rp1').set('phidisc', 180);
model.result('pg3').feature('rp1').set('directivityexpr', '(emw.normEfar*(sin(8*(emw.k0*0.004*sintheta*cosphi)/2)/(8*sin((emw.k0*0.004*sintheta*cosphi)/2))*sin(8*(emw.k0*0.004*sintheta*sinphi)/2)/(8*sin((emw.k0*0.004*sintheta*sinphi)/2))))^2');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').run;
model.result('pg4').label('Virtual array view');
model.result('pg4').set('titletype', 'manual');
model.result('pg4').set('titlecolor', 'custom');
model.result('pg4').set('customtitlecolor', [0 0.3333333432674408 0.5882353186607361]);
model.result('pg4').set('title', 'Virtual Array View');
model.result('pg4').set('edges', false);
model.result('pg4').set('view', 'new');
model.result('pg4').run;

model.view('view5').label('View virtual array');
model.view('view5').set('showgrid', false);

model.result('pg4').run;
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('data', 'arr1');
model.result('pg4').feature('surf1').set('expr', '1');
model.result('pg4').feature('surf1').set('colortable', 'Thermal');
model.result('pg4').feature('surf1').set('colortabletrans', 'reverse');
model.result('pg4').feature('surf1').set('colorlegend', false);
model.result('pg4').feature('surf1').set('coloring', 'uniform');
model.result('pg4').feature('surf1').set('color', 'custom');
model.result('pg4').feature('surf1').set('customcolor', [0.9921568632125854 0.7254902124404907 0.07450980693101883]);
model.result('pg4').feature.duplicate('surf2', 'surf1');
model.result('pg4').run;
model.result('pg4').feature('surf2').set('data', 'arr2');
model.result('pg4').feature('surf2').set('customcolor', [0.21176470816135406 0.5490196347236633 0.7960784435272217]);
model.result('pg4').run;
model.result('pg4').feature.duplicate('surf3', 'surf1');
model.result('pg4').run;
model.result('pg4').feature('surf3').set('data', 'arr3');
model.result('pg4').feature('surf3').set('customcolor', [0.7529411911964417 0.7529411911964417 0.7529411911964417]);
model.result('pg4').run;
model.result('pg4').run;
model.result.create('pg5', 'PolarGroup');
model.result('pg5').run;
model.result('pg5').label('2D Far Field xz (emw)');
model.result('pg5').set('titletype', 'manual');
model.result('pg5').set('titlecolor', 'custom');
model.result('pg5').set('customtitlecolor', [0 0.3333333432674408 0.5882353186607361]);
model.result('pg5').set('title', 'Normalized Far-field Pattern on xz-plane');
model.result('pg5').set('manualgrid', true);
model.result('pg5').set('axislimits', true);
model.result('pg5').set('tspacing', 10);
model.result('pg5').set('rspacing', 5);
model.result('pg5').set('rmin', -50);
model.result('pg5').set('rmax', 0.5);
model.result('pg5').set('showlegends', false);
model.result('pg5').create('rp1', 'RadiationPattern');
model.result('pg5').feature('rp1').set('markerpos', 'datapoints');
model.result('pg5').feature('rp1').set('linewidth', 'preference');
model.result('pg5').feature('rp1').set('expr', 'emw.gaindBEfar+20*log10(sin(8*(emw.k0*0.004*sintheta*cosphi)/2)/(sin((emw.k0*0.004*sintheta*cosphi)/2))*sin(8*(emw.k0*0.004*sintheta*sinphi)/2)/(sin((emw.k0*0.004*sintheta*sinphi)/2)))-41.626');
model.result('pg5').feature('rp1').set('phidisc', 180);
model.result('pg5').feature('rp1').set('normal', [0 -1 0]);
model.result('pg5').feature('rp1').set('linecolor', 'green');
model.result('pg5').feature('rp1').set('linewidth', 2);
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('2D Far Field xy (emw)');
model.result('pg6').set('title', 'Normalized Far-field Pattern on xy-plane');
model.result('pg6').run;
model.result('pg6').feature('rp1').set('linecolor', 'blue');
model.result('pg6').feature('rp1').set('normal', [0 0 1]);

model.title('Slot-Coupled Microstrip Patch Antenna Array Synthesizer');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing material appearance, color, and texture' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Multiple plots in the same window to visualize the results' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Options to visualize the results with different views using check boxes' newline  newline 'Microstrip patch antenna arrays are used in a number of industries as transceivers of radar and RF signals. This is a prime candidate for the 5G mobile network system.' newline  newline 'The app simulates a single slot-coupled microstrip patch antenna, fabricated on a multilayered low-temperature cofired ceramic (LTCC) substrate. When using this app, you will be able to simulate the far-field radiation pattern of the antenna array and its directivity. The far-field radiation pattern is approximated by multiplying the array factor and the single antenna radiation pattern to perform an efficient far-field analysis without simulating a complicated full-array model.' newline  newline 'You can also evaluate phased antenna array prototypes for 5G mobile networks with a default input frequency of 30' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'GHz. You can do this by varying antenna properties such as the geometric dimension and substrate material.']);

model.label('microstrip_patch_antenna_array_synthesizer.mph');

model.result('pg6').run;
model.result.report.create('rpt1', 'Report');
model.result.report('rpt1').set('filename', 'user:///microstrip_patch_antenna_array_synthesizer');
model.result.report('rpt1').set('imagesize', 'xlarge');
model.result.report('rpt1').feature.create('tp1', 'TitlePage');
model.result.report('rpt1').feature('tp1').set('summary', 'This app simulates a single slot-coupled microstrip patch antenna that is fabricated on a multilayered low temperature co-fired ceramic (LTCC) substrate. Results include the far-field radiation pattern of the antenna array and its directivity. The far-field radiation pattern is approximated by multiplying the array factor and the single antenna radiation pattern to perform an efficient far-field analysis without simulating a complicated full array model. Phased antenna array prototypes for 5G mobile networks can be easily evaluated with the default input frequency, 30 GHz.');
model.result.report('rpt1').feature('tp1').set('includeacknowledgment', false);
model.result.report('rpt1').feature.create('toc1', 'TableOfContents');
model.result.report('rpt1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').label('Global Definitions');
model.result.report('rpt1').feature('sec1').feature.create('root1', 'Model');
model.result.report('rpt1').feature('sec1').feature('root1').label('About the Software');
model.result.report('rpt1').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec1').feature('sec1').label('Parameters 1');
model.result.report('rpt1').feature('sec1').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec1').feature('sec1').feature.create('param1', 'Parameter');
model.result.report('rpt1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').label('Component 1');
model.result.report('rpt1').feature('sec2').feature.create('comp1', 'ModelNode');
model.result.report('rpt1').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec1').label('Geometry 1');
model.result.report('rpt1').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec1').feature.create('geom1', 'Geometry');
model.result.report('rpt1').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').label('Materials');
model.result.report('rpt1').feature('sec2').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').label('Patch Substrate');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec2').feature('sec1').feature.create('mat1', 'Material');
model.result.report('rpt1').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec2').feature('sec3').label('Mesh 1');
model.result.report('rpt1').feature('sec2').feature('sec3').set('source', 'firstchild');
model.result.report('rpt1').feature('sec2').feature('sec3').feature.create('mesh1', 'Mesh');
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 0, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 1, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 2, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 3, 1);
model.result.report('rpt1').feature('sec2').feature('sec3').feature('mesh1').setIndex('children', false, 4, 1);
model.result.report('rpt1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').label('Results');
model.result.report('rpt1').feature('sec3').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').label('Derived Values');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').label('S-parameter, S11dB (emw)');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec1').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').label('Input impedance');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec2').feature('mtbl1').set('noderef', 'tbl2');
model.result.report('rpt1').feature('sec3').feature('sec1').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').label('Directivity');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature.create('mtbl1', 'Table');
model.result.report('rpt1').feature('sec3').feature('sec1').feature('sec3').feature('mtbl1').set('noderef', 'rp1');
model.result.report('rpt1').feature('sec3').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').label('Plot Groups');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec1', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec1').label('Electric Field (emw)');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec1').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec2', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').label('2D Far Field xy (emw)');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec2').feature('pg1').set('noderef', 'pg6');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec3', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').label('2D Radiation Pattern yz (emw)');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec3').feature('pg1').set('noderef', 'pg2');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec4', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').label('2D Far Field xz (emw)');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec4').feature('pg1').set('noderef', 'pg5');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec5', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec5').label('3D Far Field (emw)');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec5').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec5').feature('pg1').set('noderef', 'pg3');
model.result.report('rpt1').feature('sec3').feature('sec2').feature.create('sec6', 'Section');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec6').label('Virtual array view');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec6').feature.create('pg1', 'PlotGroup');
model.result.report('rpt1').feature('sec3').feature('sec2').feature('sec6').feature('pg1').set('noderef', 'pg4');

model.title('Slot-Coupled Microstrip Patch Antenna Array Synthesizer');

model.description(['This app demonstrates the following:' newline  newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Parameterized geometries' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Visualizing material appearance, color, and texture' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Multiple plots in the same window to visualize the results' newline  native2unicode(hex2dec({'20' '22'}), 'unicode') ' Options to visualize the results with different views using check boxes' newline  newline 'Microstrip patch antenna arrays are used in a number of industries as transceivers of radar and RF signals. This is a prime candidate for the 5G mobile network system.' newline  newline 'The app simulates a single slot-coupled microstrip patch antenna, fabricated on a multilayered low-temperature cofired ceramic (LTCC) substrate. When using this app, you will be able to simulate the far-field radiation pattern of the antenna array and its directivity. The far-field radiation pattern is approximated by multiplying the array factor and the single antenna radiation pattern to perform an efficient far-field analysis without simulating a complicated full-array model.' newline  newline 'You can also evaluate phased antenna array prototypes for 5G mobile networks with a default input frequency of 30' native2unicode(hex2dec({'00' 'a0'}), 'unicode') 'GHz. You can do this by varying antenna properties such as the geometric dimension and substrate material.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('microstrip_patch_antenna_array_synthesizer.mph');

model.modelNode.label('Components');

out = model;
