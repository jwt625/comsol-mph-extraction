function out = model
%
% inductance_matrix_pcb_coils.m
%
% Model exported on May 26 2025, 21:24 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/ACDC_Module/Devices,_Inductive');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('mfco', 'MagneticFieldsCurrentsOnly', 'geom1');
model.physics('mfco').model('comp1');

model.study.create('std1');
model.study('std1').create('init', 'SourceInitialization');
model.study('std1').feature('init').set('solnum', 'auto');
model.study('std1').feature('init').set('notsolnum', 'auto');
model.study('std1').feature('init').set('outputmap', {});
model.study('std1').feature('init').set('ngenAUX', '1');
model.study('std1').feature('init').set('goalngenAUX', '1');
model.study('std1').feature('init').set('ngenAUX', '1');
model.study('std1').feature('init').set('goalngenAUX', '1');
model.study('std1').feature('init').setSolveFor('/physics/mfco', true);
model.study('std1').create('stssw', 'StationarySourceSweep');
model.study('std1').feature('stssw').set('solnum', 'auto');
model.study('std1').feature('stssw').set('notsolnum', 'auto');
model.study('std1').feature('stssw').set('outputmap', {});
model.study('std1').feature('stssw').set('ngenAUX', '1');
model.study('std1').feature('stssw').set('goalngenAUX', '1');
model.study('std1').feature('stssw').set('ngenAUX', '1');
model.study('std1').feature('stssw').set('goalngenAUX', '1');
model.study('std1').feature('stssw').setSolveFor('/physics/mfco', true);

model.geom('geom1').geomRep('cadps');
model.geom('geom1').create('imp1', 'Import');
model.geom('geom1').feature('imp1').set('type', 'native');
model.geom('geom1').feature('imp1').set('filename', 'inductance_matrix_pcb_coils.mphbin');
model.geom('geom1').feature('imp1').importData;
model.geom('geom1').feature('imp1').set('selresult', true);
model.geom('geom1').feature('imp1').set('selresultshow', 'all');

model.view('view1').set('transparency', true);

model.geom('geom1').create('sel1', 'ExplicitSelection');
model.geom('geom1').feature('sel1').selection('selection').init(2);
model.geom('geom1').feature('sel1').selection('selection').set('imp1', [6 16 26 36 2502 2504 2506 2508]);
model.geom('geom1').feature('sel1').label('Ground Boundaries');
model.geom('geom1').run('sel1');
model.geom('geom1').create('sel2', 'ExplicitSelection');
model.geom('geom1').feature('sel2').selection('selection').init(2);
model.geom('geom1').feature('sel2').selection('selection').set('imp1', [1 11 21 31]);
model.geom('geom1').feature('sel2').label('Input Terminals');
model.geom('geom1').run('sel2');
model.geom('geom1').create('sel3', 'ExplicitSelection');
model.geom('geom1').feature('sel3').selection('selection').init(2);
model.geom('geom1').feature('sel3').selection('selection').set('imp1', [1261 1266 1271 1276]);
model.geom('geom1').feature('sel3').label('Interior Terminals');
model.geom('geom1').run('sel3');
model.geom('geom1').create('sel4', 'ExplicitSelection');
model.geom('geom1').feature('sel4').label('Output Terminals');
model.geom('geom1').feature('sel4').selection('selection').init(2);
model.geom('geom1').feature('sel4').selection('selection').set('imp1', [2501 2503 2505 2507]);
model.geom('geom1').run('sel4');
model.geom('geom1').create('unisel1', 'UnionSelection');
model.geom('geom1').feature('unisel1').set('entitydim', 2);
model.geom('geom1').feature('unisel1').set('input', {'sel2' 'sel3' 'sel4'});
model.geom('geom1').run('unisel1');
model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'5[cm]' '6[cm]' '2[cm]'});
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').run('blk1');
model.geom('geom1').create('wp1', 'WorkPlane');
model.geom('geom1').feature('wp1').set('unite', true);
model.geom('geom1').feature('wp1').set('quickz', '-2[mm]');
model.geom('geom1').run('wp1');
model.geom('geom1').create('par1', 'Partition');
model.geom('geom1').feature('par1').selection('input').set({'blk1'});
model.geom('geom1').feature('par1').set('partitionwith', 'workplane');
model.geom('geom1').run('par1');
model.geom('geom1').create('wp2', 'WorkPlane');
model.geom('geom1').feature('wp2').set('unite', true);
model.geom('geom1').feature('wp2').set('quickplane', 'yz');
model.geom('geom1').feature('wp2').set('quickx', '7[mm]');
model.geom('geom1').run('wp2');
model.geom('geom1').create('par2', 'Partition');
model.geom('geom1').feature('par2').selection('input').set({'par1'});
model.geom('geom1').feature('par2').set('partitionwith', 'workplane');
model.geom('geom1').run('par2');
model.geom('geom1').create('wp3', 'WorkPlane');
model.geom('geom1').feature('wp3').set('unite', true);
model.geom('geom1').feature('wp3').set('quickplane', 'zx');
model.geom('geom1').feature('wp3').set('quicky', '14.25[mm]');
model.geom('geom1').run('wp3');
model.geom('geom1').create('par3', 'Partition');
model.geom('geom1').feature('par3').selection('input').set({'par2'});
model.geom('geom1').feature('par3').set('partitionwith', 'workplane');
model.geom('geom1').run('fin');

model.physics('mfco').create('cond1', 'Conductor', 3);
model.physics('mfco').feature('cond1').selection.named('geom1_imp1_dom');
model.physics('mfco').feature('cond1').create('gnd1', 'Ground', 2);
model.physics('mfco').feature('cond1').feature('term1').selection.named('geom1_unisel1');
model.physics('mfco').feature('cond1').feature('gnd1').selection.named('geom1_sel1');
model.physics('mfco').create('cond2', 'Conductor');
model.physics('mfco').feature('cond2').selection.set([7 8 15 16 26 27 28 29 30 58 66 67 68 69 70]);
model.physics('mfco').feature('cond2').create('gnd2', 'Ground');
model.physics('mfco').feature('cond2').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond2').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond3', 'Conductor');
model.physics('mfco').feature('cond3').selection.set([9 10 17 18 31 32 33 34 35 59 71 72 73 74 75]);
model.physics('mfco').feature('cond3').create('gnd2', 'Ground');
model.physics('mfco').feature('cond3').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond3').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond4', 'Conductor');
model.physics('mfco').feature('cond4').selection.set([11 12 19 20 36 37 38 39 40 46 48 50 52 54 55 56 60 76 77 78 79 80]);
model.physics('mfco').feature('cond4').create('gnd2', 'Ground');
model.physics('mfco').feature('cond4').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond4').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond5', 'Conductor');
model.physics('mfco').feature('cond5').selection.set([41 81 82 89 90 91 92 93 111 115 116 123 124 125 126 127 143 147 158 168 177 182 186 187 188 189 190 209 211 213]);
model.physics('mfco').feature('cond5').create('gnd2', 'Ground');
model.physics('mfco').feature('cond5').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond5').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond6', 'Conductor');
model.physics('mfco').feature('cond6').selection.set([42 83 84 94 95 96 97 98 112 117 118 128 129 130 131 132 144 148 160 170 178 183 191 192 193 194 195 216 218 220]);
model.physics('mfco').feature('cond6').create('gnd2', 'Ground');
model.physics('mfco').feature('cond6').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond6').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond7', 'Conductor');
model.physics('mfco').feature('cond7').selection.set([43 85 86 99 100 101 102 103 113 119 120 133 134 135 136 137 145 149 162 172 179 184 196 197 198 199 200 223 225 227]);
model.physics('mfco').feature('cond7').create('gnd2', 'Ground');
model.physics('mfco').feature('cond7').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond7').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond8', 'Conductor');
model.physics('mfco').feature('cond8').selection.set([44 45 47 49 51 53 87 88 104 105 106 107 108 109 110 114 121 122 138 139 140 141 142 146 150 156 164 166 174 176 180 181 185 201 202 203 204 205 230 232 234 238 240 242]);
model.physics('mfco').feature('cond8').create('gnd2', 'Ground');
model.physics('mfco').feature('cond8').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond8').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond9', 'Conductor');
model.physics('mfco').feature('cond9').selection.set([151 157 167 208 210 212 214 243 244 251 252 253 254 255 273 274 275 276 289 290 291 292 293 294 295 296 297 298]);
model.physics('mfco').feature('cond9').create('gnd2', 'Ground');
model.physics('mfco').feature('cond9').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond9').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond10', 'Conductor');
model.physics('mfco').feature('cond10').selection.set([152 159 169 215 217 219 221 245 246 256 257 258 259 260 277 278 279 280 299 300 301 302 303 304 305 306 307 308]);
model.physics('mfco').feature('cond10').create('gnd2', 'Ground');
model.physics('mfco').feature('cond10').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond10').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond11', 'Conductor');
model.physics('mfco').feature('cond11').selection.set([153 161 171 222 224 226 228 247 248 261 262 263 264 265 281 282 283 284 309 310 311 312 313 314 315 316 317 318]);
model.physics('mfco').feature('cond11').create('gnd2', 'Ground');
model.physics('mfco').feature('cond11').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond11').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);
model.physics('mfco').create('cond12', 'Conductor');
model.physics('mfco').feature('cond12').selection.set([154 155 163 165 173 175 229 231 233 237 239 241 249 250 266 267 268 269 270 271 272 285 286 287 288 319 320 321 322 323 324 325 326 327 328]);
model.physics('mfco').feature('cond12').create('gnd2', 'Ground');
model.physics('mfco').feature('cond12').feature('gnd2').selection.set([22 32 42 52 2914 2916 2918 2920]);
model.physics('mfco').feature('cond12').feature('term1').selection.set([17 27 37 47 1347 1352 1357 1362 2913 2915 2917 2919]);

model.view('view1').hideEntities.create('hide1');
model.view('view1').hideEntities('hide1').geom('geom1', 2);
model.view('view1').hideEntities('hide1').set([4 5 7]);

model.mesh('mesh1').autoMeshSize(4);

model.view('view1').set('transparency', false);

model.mesh('mesh1').run;

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').selection.named('geom1_imp1_dom');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'6e7'});

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'init');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'init');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stssw');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stssw');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').create('p1', 'Parametric');
model.sol('sol1').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s2').feature('p1').set('control', 'stssw');
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('linsolver', 'fgmres');
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('solnum', 'auto');
model.sol('sol1').feature('v2').set('solvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Magnetic Flux Density Norm (mfco)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('showlegendsmaxmin', true);
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 12, 0);
model.result('pg1').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom17/pdef1/pcond2/pcond1/pg1');
model.result('pg1').feature.create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('solutionparams', 'parent');
model.result('pg1').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('mslc1').set('xcoord', 'mfco.CPx');
model.result('pg1').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('mslc1').set('ycoord', 'mfco.CPy');
model.result('pg1').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('mslc1').set('zcoord', 'mfco.CPz');
model.result('pg1').feature('mslc1').set('colortable', 'Prism');
model.result('pg1').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg1').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg1').feature('mslc1').set('data', 'parent');
model.result('pg1').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg1').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg1').feature('strmsl1').set('xcoord', 'mfco.CPx');
model.result('pg1').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg1').feature('strmsl1').set('ycoord', 'mfco.CPy');
model.result('pg1').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg1').feature('strmsl1').set('zcoord', 'mfco.CPz');
model.result('pg1').feature('strmsl1').set('titletype', 'none');
model.result('pg1').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg1').feature('strmsl1').set('udist', 0.02);
model.result('pg1').feature('strmsl1').set('maxlen', 0.4);
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('inheritcolor', false);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg1').feature('strmsl1').set('maxtime', Inf);
model.result('pg1').feature('strmsl1').set('data', 'parent');
model.result('pg1').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg1').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg1').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg1').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg1').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg1').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg1').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg1').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').set('data', 'dset1');
model.result.evaluationGroup('eg1').label(' (mfco)');
model.result.evaluationGroup('eg1').label('Resistance (DC) (dset1, mfco)');
model.result.evaluationGroup('eg1').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg1').feature('gmev1').label('Resistance (DC) (dset1, mfco)');
model.result.evaluationGroup('eg1').feature('gmev1').set('expr', 'root.comp1.mfco.Rdc');
model.result.evaluationGroup('eg1').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg1').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup.create('grp1', 'Results');
model.nodeGroup('grp1').label('Lumped Parameters (dset1, mfco)');
model.nodeGroup('grp1').set('type', 'evaluationgroup');
model.nodeGroup('grp1').add('evaluationgroup', 'eg1');

model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup.create('eg2', 'EvaluationGroup');
model.result.evaluationGroup('eg2').set('data', 'dset1');
model.result.evaluationGroup('eg2').label(' (mfco)');
model.result.evaluationGroup('eg2').label('Inductance (DC) (dset1, mfco)');
model.result.evaluationGroup('eg2').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg2').feature('gmev1').label('Inductance (DC) (dset1, mfco)');
model.result.evaluationGroup('eg2').feature('gmev1').set('expr', 'root.comp1.mfco.Ldc');
model.result.evaluationGroup('eg2').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg2').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup('grp1').add('evaluationgroup', 'eg2');

model.result.evaluationGroup('eg2').run;
model.result('pg1').run;
model.result('pg1').run;
model.result('pg1').feature('mslc1').set('xcoord', '7[mm]');
model.result('pg1').feature('mslc1').set('ycoord', '14.25[mm]');
model.result('pg1').feature('mslc1').set('zcoord', '-2[mm]');
model.result('pg1').feature('mslc1').set('rangecoloractive', true);
model.result('pg1').feature('mslc1').set('rangecolormax', 8.0E-4);
model.result('pg1').run;
model.result('pg1').feature('strmsl1').set('xcoord', '7[mm]');
model.result('pg1').feature('strmsl1').set('ycoord', '14.25[mm]');
model.result('pg1').feature('strmsl1').set('zcoord', '-2[mm]');
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', '1');
model.result('pg1').feature('surf1').create('sel1', 'Selection');
model.result('pg1').feature('surf1').feature('sel1').selection.named('geom1_imp1_bnd');
model.result('pg1').run;
model.result('pg1').feature('surf1').create('mtrl1', 'MaterialAppearance');
model.result('pg1').run;
model.result('pg1').feature('surf1').feature('mtrl1').set('appearance', 'custom');
model.result('pg1').feature('surf1').feature('mtrl1').set('family', 'copper');
model.result('pg1').run;
model.result('pg1').label('Magnetic Flux Density Norm (DC)');
model.result('pg1').setIndex('looplevel', 8, 0);
model.result('pg1').set('titletype', 'label');
model.result('pg1').set('edges', false);
model.result('pg1').set('showlegendsmaxmin', false);
model.result('pg1').run;
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg2').run;
model.result.create('pg2', 'PlotGroup2D');
model.result('pg2').set('data', 'none');
model.result('pg2').create('tbls1', 'TableSurface');
model.result('pg2').feature('tbls1').set('source', 'evaluationgroup');
model.result('pg2').feature('tbls1').set('evaluationgroup', 'eg2');
model.result('pg2').run;
model.result('pg2').feature('tbls1').set('dataformat', 'cells');
model.result('pg2').feature('tbls1').set('function', 'discrete');
model.result('pg2').run;
model.result('pg2').feature('tbls1').set('colortable', 'Wave');
model.result('pg2').feature('tbls1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').feature('tbls1').set('titletype', 'none');
model.result('pg2').run;
model.result('pg2').label('Inductance Matrix (DC)');
model.result('pg2').run;
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').run;
model.result('pg3').label('Terminal Number');
model.result('pg3').create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('expr', 'mfco.TerminalNumber');
model.result('pg3').feature('vol1').set('descr', 'Terminal number');
model.result('pg3').feature('vol1').set('colortable', 'Cyclic');
model.result('pg3').run;

model.study.create('std2');
model.study('std2').create('init', 'SourceInitialization');
model.study('std2').feature('init').set('plotgroup', 'Default');
model.study('std2').feature('init').set('solnum', 'auto');
model.study('std2').feature('init').set('notsolnum', 'auto');
model.study('std2').feature('init').set('outputmap', {});
model.study('std2').feature('init').set('ngenAUX', '1');
model.study('std2').feature('init').set('goalngenAUX', '1');
model.study('std2').feature('init').set('ngenAUX', '1');
model.study('std2').feature('init').set('goalngenAUX', '1');
model.study('std2').feature('init').setSolveFor('/physics/mfco', true);
model.study('std2').create('fdss', 'FrequencyDomainSourceSweep');
model.study('std2').feature('fdss').set('plotgroup', 'Default');
model.study('std2').feature('fdss').set('plist', '1000');
model.study('std2').feature('fdss').set('probesel', 'none');
model.study('std2').feature('fdss').set('solnum', 'auto');
model.study('std2').feature('fdss').set('notsolnum', 'auto');
model.study('std2').feature('fdss').set('outputmap', {});
model.study('std2').feature('fdss').set('ngenAUX', '1');
model.study('std2').feature('fdss').set('goalngenAUX', '1');
model.study('std2').feature('fdss').set('ngenAUX', '1');
model.study('std2').feature('fdss').set('goalngenAUX', '1');
model.study('std2').feature('fdss').setSolveFor('/physics/mfco', true);
model.study('std2').feature('fdss').set('plist', '200[kHz]');

model.sol.create('sol3');
model.sol('sol3').study('std2');
model.sol('sol3').create('st1', 'StudyStep');
model.sol('sol3').feature('st1').set('study', 'std2');
model.sol('sol3').feature('st1').set('studystep', 'init');
model.sol('sol3').create('v1', 'Variables');
model.sol('sol3').feature('v1').set('control', 'init');
model.sol('sol3').create('s1', 'Stationary');
model.sol('sol3').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol3').feature('s1').feature.remove('fcDef');
model.sol('sol3').create('su1', 'StoreSolution');
model.sol('sol3').create('st2', 'StudyStep');
model.sol('sol3').feature('st2').set('study', 'std2');
model.sol('sol3').feature('st2').set('studystep', 'fdss');
model.sol('sol3').create('v2', 'Variables');
model.sol('sol3').feature('v2').set('initmethod', 'sol');
model.sol('sol3').feature('v2').set('initsol', 'sol3');
model.sol('sol3').feature('v2').set('notsolmethod', 'sol');
model.sol('sol3').feature('v2').set('notsol', 'sol3');
model.sol('sol3').feature('v2').set('control', 'fdss');
model.sol('sol3').create('s2', 'Stationary');
model.sol('sol3').feature('s2').create('p1', 'Parametric');
model.sol('sol3').feature('s2').feature.remove('pDef');
model.sol('sol3').feature('s2').feature('p1').set('pname', {'freq' 'PortName'});
model.sol('sol3').feature('s2').feature('p1').set('punit', {'Hz' ''});
model.sol('sol3').feature('s2').feature('p1').set('sweeptype', 'filled');
model.sol('sol3').feature('s2').feature('p1').set('plistarr', {'200[kHz]' '1 2 3 4 5 6 7 8 9 10 11 12 '});
model.sol('sol3').feature('s2').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol3').feature('s2').feature('p1').set('pcontinuation', '');
model.sol('sol3').feature('s2').feature('p1').set('preusesol', 'no');
model.sol('sol3').feature('s2').feature('p1').set('plot', 'off');
model.sol('sol3').feature('s2').feature('p1').set('plotgroup', 'Default');
model.sol('sol3').feature('s2').feature('p1').set('probesel', 'none');
model.sol('sol3').feature('s2').feature('p1').set('probes', {});
model.sol('sol3').feature('s2').feature('p1').set('control', 'fdss');
model.sol('sol3').feature('s2').set('control', 'fdss');
model.sol('sol3').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol3').feature('s2').create('i1', 'Iterative');
model.sol('sol3').feature('s2').feature('i1').set('linsolver', 'fgmres');
model.sol('sol3').feature('s2').feature('i1').set('nlinnormuse', true);
model.sol('sol3').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol3').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol3').feature('s2').feature.remove('fcDef');
model.sol('sol3').feature('v2').set('notsolnum', 'auto');
model.sol('sol3').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol3').feature('v2').set('solnum', 'auto');
model.sol('sol3').feature('v2').set('solvertype', 'solnum');
model.sol('sol3').attach('std2');
model.sol('sol3').runAll;

model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Magnetic Flux Density Norm (mfco)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 12, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 12, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom17/pdef1/pcond2/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'mfco.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'mfco.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'mfco.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Prism');
model.result('pg4').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'mfco.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'mfco.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'mfco.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').set('data', 'dset3');
model.result.evaluationGroup('eg3').label(' (mfco)');
model.result.evaluationGroup('eg3').label('Resistance (DC) (dset3, mfco)');
model.result.evaluationGroup('eg3').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg3').feature('gmev1').label('Resistance (DC) (dset3, mfco)');
model.result.evaluationGroup('eg3').feature('gmev1').set('expr', 'root.comp1.mfco.Rdc');
model.result.evaluationGroup('eg3').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg3').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup.create('grp2', 'Results');
model.nodeGroup('grp2').label('Lumped Parameters (dset3, mfco)');
model.nodeGroup('grp2').set('type', 'evaluationgroup');
model.nodeGroup('grp2').add('evaluationgroup', 'eg3');

model.result.evaluationGroup('eg3').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg3').run;
model.result.evaluationGroup.create('eg4', 'EvaluationGroup');
model.result.evaluationGroup('eg4').set('data', 'dset3');
model.result.evaluationGroup('eg4').label(' (mfco)');
model.result.evaluationGroup('eg4').label('Resistance (AC) (dset3, mfco)');
model.result.evaluationGroup('eg4').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg4').feature('gmev1').label('Resistance (AC) (dset3, mfco)');
model.result.evaluationGroup('eg4').feature('gmev1').set('expr', 'root.comp1.mfco.Rac');
model.result.evaluationGroup('eg4').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg4').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup('grp2').add('evaluationgroup', 'eg4');

model.result.evaluationGroup('eg4').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg4').run;
model.result.evaluationGroup.create('eg5', 'EvaluationGroup');
model.result.evaluationGroup('eg5').set('data', 'dset3');
model.result.evaluationGroup('eg5').label(' (mfco)');
model.result.evaluationGroup('eg5').label('Inductance (AC) (dset3, mfco)');
model.result.evaluationGroup('eg5').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg5').feature('gmev1').label('Inductance (AC) (dset3, mfco)');
model.result.evaluationGroup('eg5').feature('gmev1').set('expr', 'root.comp1.mfco.Lac');
model.result.evaluationGroup('eg5').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg5').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup('grp2').add('evaluationgroup', 'eg5');

model.result.evaluationGroup('eg5').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg5').run;
model.result.evaluationGroup.create('eg6', 'EvaluationGroup');
model.result.evaluationGroup('eg6').set('data', 'dset3');
model.result.evaluationGroup('eg6').label(' (mfco)');
model.result.evaluationGroup('eg6').label('Impedance (dset3, mfco)');
model.result.evaluationGroup('eg6').create('gmev1', 'EvalGlobalMatrix');
model.result.evaluationGroup('eg6').feature('gmev1').label('Impedance (dset3, mfco)');
model.result.evaluationGroup('eg6').feature('gmev1').set('expr', 'root.comp1.mfco.Z');
model.result.evaluationGroup('eg6').feature('gmev1').set('outerdataseries', 'none');
model.result.evaluationGroup('eg6').feature('gmev1').set('dataseries', 'sum');

model.nodeGroup('grp2').add('evaluationgroup', 'eg6');

model.result.evaluationGroup('eg6').setIndex('looplevelinput', 'last', 1);
model.result.evaluationGroup('eg6').run;
model.result('pg4').run;
model.result.remove('pg4');
model.result('pg1').run;
model.result.duplicate('pg4', 'pg1');
model.result('pg4').run;
model.result('pg4').label('Magnetic Flux Density Norm (AC)');
model.result('pg4').set('data', 'dset3');
model.result('pg4').setIndex('looplevel', 8, 0);
model.result('pg4').run;
model.result.evaluationGroup('eg3').run;
model.result.evaluationGroup('eg4').run;
model.result.evaluationGroup('eg5').feature('gmev1').set('outerdataseries', 'sum');
model.result.evaluationGroup('eg5').run;
model.result.evaluationGroup('eg6').run;
model.result('pg2').run;
model.result.duplicate('pg5', 'pg2');
model.result('pg5').run;
model.result('pg5').label('Inductance Matrix (AC)');
model.result('pg5').run;
model.result('pg5').feature('tbls1').set('evaluationgroup', 'eg5');
model.result('pg5').feature('tbls1').set('dataformat', 'cells');
model.result('pg5').run;
model.result('pg4').run;

model.title('Inductance Matrix Calculation of PCB Coils');

model.description('This model demonstrates how to use the Magnetic Fields, Currents Only interface together with the Stationary Source Sweep with Initialization study to compute the inductance matrix of PCB coils with a number of 12.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;

model.result('pg5').feature('tbls1').set('showparam', false);
model.result('pg2').feature('tbls1').set('showparam', false);

model.label('inductance_matrix_pcb_coils.mph');

model.modelNode.label('Components');

out = model;
