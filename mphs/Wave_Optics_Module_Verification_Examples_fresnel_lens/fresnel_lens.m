function out = model
%
% fresnel_lens.m
%
% Model exported on May 26 2025, 21:34 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Wave_Optics_Module/Verification_Examples');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ewfd', 'ElectromagneticWavesFrequencyDomain', 'geom1');
model.physics('ewfd').model('comp1');
model.physics.create('ewbe', 'ElectromagneticWavesBeamEnvelopes', 'geom1');
model.physics('ewbe').model('comp1');

model.study.create('std1');
model.study('std1').create('wave', 'Wavelength');
model.study('std1').feature('wave').set('solnum', 'auto');
model.study('std1').feature('wave').set('notsolnum', 'auto');
model.study('std1').feature('wave').set('outputmap', {});
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').set('ngenAUX', '1');
model.study('std1').feature('wave').set('goalngenAUX', '1');
model.study('std1').feature('wave').setSolveFor('/physics/ewfd', true);
model.study('std1').feature('wave').setSolveFor('/physics/ewbe', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('lda0', '0.5[um]', 'Wavelength');
model.param.set('k0', '2*pi/lda0', 'Wave number');
model.param.set('f', '150[um]', 'Focal length');
model.param.set('R', 'f/2', 'Radius of curvature of lens surface');
model.param.set('D', '50[um]', 'Lens diameter');
model.param.set('m', '1', 'Fresnel lens order');
model.param.set('z0', 'sqrt(R^2-(D/2)^2)', 'Lens base position in Z');
model.param.set('sag', 'R-z0', 'Unfolded lens sag');
model.param.set('n', '1.5', 'Refractive index');
model.param.set('d', 'm*lda0/(n-1)', 'Folded lens sag for m-th order');
model.param.set('M', '16', 'Digitization level');
model.param.set('dm', 'd/M', 'Step height per level');
model.param.set('N', 'floor(sag/d)+1', 'Number of zones');
model.param.set('Nmesh', '5', 'The number of mesh elements per wavelength');
model.param.set('Nx', '256', 'Sampling resolution');

model.geom.create('part1', 'Part', 2);
model.geom('part1').label('Fresnel Lens Zone');
model.geom('part1').inputParam.set('zone', '1');
model.geom('part1').inputParam.descr('zone', 'Zone index');
model.geom('part1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);

% To import content from file, use:
% model.geom('part1').localParam.loadFile('FILENAME');
model.geom('part1').localParam.set('Mi', 'if(zone>1,M,floor(M*(sag/d-N+1))+1)', 'Digitization count for zone');
model.geom('part1').localParam.set('x0', 'if(zone>1,sqrt(R^2-(R-(sag-(N+1-zone)*d))^2),0)', 'Left end of zone');
model.geom('part1').localParam.set('x1', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+1)*dm)^2)', '1st step right end');
model.geom('part1').localParam.set('x2', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+2)*dm)^2)', '2nd step right end');
model.geom('part1').localParam.set('x3', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+3)*dm)^2)', '3rd step right end');
model.geom('part1').localParam.set('x4', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+4)*dm)^2)', '4th step right end');
model.geom('part1').localParam.set('x5', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+5)*dm)^2)', '5th step right end');
model.geom('part1').localParam.set('x6', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+6)*dm)^2)', '6th step right end');
model.geom('part1').localParam.set('x7', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+7)*dm)^2)', '7th step right end');
model.geom('part1').localParam.set('x8', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+8)*dm)^2)', '8th step right end');
model.geom('part1').localParam.set('x9', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+9)*dm)^2)', '9th step right end');
model.geom('part1').localParam.set('x10', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+10)*dm)^2)', '10th step right end');
model.geom('part1').localParam.set('x11', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+11)*dm)^2)', '11th step right end');
model.geom('part1').localParam.set('x12', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+12)*dm)^2)', '12th step right end');
model.geom('part1').localParam.set('x13', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+13)*dm)^2)', '13th step right end');
model.geom('part1').localParam.set('x14', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+14)*dm)^2)', '14th step right end');
model.geom('part1').localParam.set('x15', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+15)*dm)^2)', '15th step right end');
model.geom('part1').localParam.set('x16', 'sqrt(R^2-(R-(sag-(N-zone)*d))^2)', 'Right end of zone');
model.geom('part1').localParam.set('y0', '-dm', 'Base level');
model.geom('part1').localParam.set('y1', '(Mi-1)*dm', '1st level');
model.geom('part1').localParam.set('y2', '(Mi-2)*dm', '2nd level');
model.geom('part1').localParam.set('y3', '(Mi-3)*dm', '3rd level');
model.geom('part1').localParam.set('y4', '(Mi-4)*dm', '4th level');
model.geom('part1').localParam.set('y5', '(Mi-5)*dm', '5th level');
model.geom('part1').localParam.set('y6', '(Mi-6)*dm', '6th level');
model.geom('part1').localParam.set('y7', '(Mi-7)*dm', '7th level');
model.geom('part1').localParam.set('y8', '(Mi-8)*dm', '8th level');
model.geom('part1').localParam.set('y9', '(Mi-9)*dm', '9th level');
model.geom('part1').localParam.set('y10', '(Mi-10)*dm', '10th level');
model.geom('part1').localParam.set('y11', '(Mi-11)*dm', '11th level');
model.geom('part1').localParam.set('y12', '(Mi-12)*dm', '12th level');
model.geom('part1').localParam.set('y13', '(Mi-13)*dm', '13th level');
model.geom('part1').localParam.set('y14', '(Mi-14)*dm', '14th level');
model.geom('part1').localParam.set('y15', '(Mi-15)*dm', '15th level');
model.geom('part1').localParam.set('y16', '(Mi-16)*dm', '16th level');
model.geom('part1').create('pol1', 'Polygon');
model.geom('part1').feature('pol1').set('source', 'vectors');
model.geom('part1').feature('pol1').set('x', 'x0 x0 x1 x1 x2 x2 x3 x3 x4 x4 x5 x5 x6 x6 x7 x7 x8 x8 x9 x9 x10 x10 x11 x11 x12 x12 x13 x13 x14 x14 x15 x15 x16 x16');
model.geom('part1').feature('pol1').set('y', 'y0 y1 y1 y2 y2 y3 y3 y4 y4 y5 y5 y6 y6 y7 y7 y8 y8 y9 y9 y10 y10 y11 y11 y12 y12 y13 y13 y14 y14 y15 y15 y16 y16 y0');
model.geom('part1').selection.create('csel1', 'CumulativeSelection');
model.geom('part1').selection('csel1').label('Fresnel Lens Zone');
model.geom('part1').feature('pol1').set('contributeto', 'csel1');
model.geom('part1').run('pol1');
model.geom('geom1').lengthUnit([native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']);
model.geom('geom1').create('pi1', 'PartInstance');
model.geom('geom1').feature('pi1').set('selkeepnoncontr', false);
model.geom('geom1').feature('pi1').set('part', 'part1');
model.geom('geom1').selection.create('csel1', 'CumulativeSelection');
model.geom('geom1').selection('csel1').label('Fresnel Lens');
model.geom('geom1').feature('pi1').setEntry('selcontributetodom', 'pi1_csel1.dom', 'csel1');
model.geom('geom1').feature.duplicate('pi2', 'pi1');
model.geom('geom1').feature('pi1').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi1').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi1').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi1').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi1').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi1').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi1').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi1').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi1').set('selcontributetodom', {'csel1'});
model.geom('geom1').feature('pi1').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi1').set('selshowdom', {'on'});
model.geom('geom1').feature('pi2').setEntry('inputexpr', 'zone', 2);
model.geom('geom1').feature.duplicate('pi3', 'pi2');
model.geom('geom1').feature('pi2').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi2').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi2').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi2').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi2').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi2').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi2').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi2').set('selcontributetodom', {'csel1'});
model.geom('geom1').feature('pi2').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi2').set('selshowdom', {'on'});
model.geom('geom1').feature('pi3').setEntry('inputexpr', 'zone', 3);
model.geom('geom1').feature.duplicate('pi4', 'pi3');
model.geom('geom1').feature('pi3').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi3').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi3').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi3').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi3').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi3').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi3').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi3').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi3').set('selcontributetodom', {'csel1'});
model.geom('geom1').feature('pi3').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi3').set('selshowdom', {'on'});
model.geom('geom1').feature('pi4').setEntry('inputexpr', 'zone', 4);
model.geom('geom1').feature.duplicate('pi5', 'pi4');
model.geom('geom1').feature('pi4').set('selcontributetoobj', {'none'});
model.geom('geom1').feature('pi4').set('selkeepobj', {'off'});
model.geom('geom1').feature('pi4').set('selcontributetopnt', {'none'});
model.geom('geom1').feature('pi4').set('selkeeppnt', {'off'});
model.geom('geom1').feature('pi4').set('selshowpnt', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetobnd', {'none'});
model.geom('geom1').feature('pi4').set('selkeepbnd', {'off'});
model.geom('geom1').feature('pi4').set('selshowbnd', {'on'});
model.geom('geom1').feature('pi4').set('selcontributetodom', {'csel1'});
model.geom('geom1').feature('pi4').set('selkeepdom', {'off'});
model.geom('geom1').feature('pi4').set('selshowdom', {'on'});
model.geom('geom1').feature('pi5').setEntry('inputexpr', 'zone', 5);
model.geom('geom1').run('pi5');
model.geom('geom1').create('uni1', 'Union');
model.geom('geom1').feature('uni1').selection('input').set({'pi1' 'pi2' 'pi3' 'pi4' 'pi5'});
model.geom('geom1').feature('uni1').set('intbnd', false);
model.geom('geom1').run('uni1');
model.geom('geom1').create('mir1', 'Mirror');
model.geom('geom1').feature('mir1').selection('input').set({'uni1'});
model.geom('geom1').feature('mir1').set('keep', true);
model.geom('geom1').run('mir1');
model.geom('geom1').create('uni2', 'Union');
model.geom('geom1').feature('uni2').selection('input').set({'mir1' 'uni1'});
model.geom('geom1').feature('uni2').set('intbnd', false);
model.geom('geom1').run('uni2');
model.geom('geom1').create('r1', 'Rectangle');
model.geom('geom1').feature('r1').set('size', {'D' 'd+dm'});
model.geom('geom1').feature('r1').set('pos', {'-D/2' '-dm'});
model.geom('geom1').run('r1');
model.geom('geom1').create('int1', 'Intersection');
model.geom('geom1').feature('int1').selection('input').set({'r1' 'uni2'});
model.geom('geom1').runPre('fin');
model.geom('geom1').create('r2', 'Rectangle');
model.geom('geom1').feature('r2').set('size', {'D' 'f+dm'});
model.geom('geom1').feature('r2').set('pos', {'-D/2' '-dm'});
model.geom('geom1').feature('r2').setIndex('layer', 'd+dm', 0);
model.geom('geom1').feature.duplicate('r3', 'r2');
model.geom('geom1').feature('r3').set('size', {'lda0' 'f+dm'});
model.geom('geom1').feature('r3').set('pos', {'-D/2-lda0' '-dm'});
model.geom('geom1').feature.duplicate('r4', 'r3');
model.geom('geom1').feature('r4').set('pos', {'D/2' '-dm'});
model.geom('geom1').runPre('fin');

model.coordSystem.create('pml1', 'geom1', 'PML');

model.geom('geom1').run;

model.coordSystem('pml1').selection.set([1 2 6 7]);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Glass');
model.material('mat2').selection.named('geom1_csel1_dom');
model.material('mat2').propertyGroup.create('RefractiveIndex', 'Refractive_index');
model.material('mat2').propertyGroup('RefractiveIndex').set('n', {'n'});

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Exterior Boundaries');
model.selection('sel1').all;
model.selection('sel1').geom('geom1', 2, 1, {'exterior'});
model.selection('sel1').all;
model.selection.create('box1', 'Box');
model.selection('box1').model('comp1');
model.selection('box1').label('Input Plane');
model.selection('box1').set('entitydim', 1);
model.selection('box1').set('inputent', 'selections');
model.selection('box1').set('input', {'sel1'});
model.selection('box1').set('xmin', '-D/2');
model.selection('box1').set('xmax', 'D/2');
model.selection('box1').set('ymin', '-dm');
model.selection('box1').set('ymax', '-dm/2');
model.selection('box1').set('condition', 'inside');
model.selection.create('dif1', 'Difference');
model.selection('dif1').model('comp1');
model.selection('dif1').label('Scattering Boundaries');
model.selection('dif1').set('entitydim', 1);
model.selection('dif1').set('add', {'sel1'});
model.selection('dif1').set('subtract', {'box1'});
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Exit Plane');
model.selection('sel2').geom(1);
model.selection('sel2').set([11]);

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').selection.geom('geom1', 1);
model.cpl('intop1').selection.named('sel2');

model.physics('ewfd').prop('components').set('components', 'outofplane');
model.physics('ewfd').create('sctr1', 'Scattering', 1);
model.physics('ewfd').feature('sctr1').selection.named('box1');
model.physics('ewfd').feature('sctr1').set('IncidentField', 'EField');
model.physics('ewfd').feature('sctr1').set('E0i', [0 0 1]);
model.physics('ewfd').feature('sctr1').set('Order', 'SecondOrder');
model.physics('ewfd').create('sctr2', 'Scattering', 1);
model.physics('ewfd').feature('sctr2').selection.named('dif1');
model.physics('ewfd').feature('sctr2').set('Order', 'SecondOrder');

model.mesh('mesh1').label('Fine Mesh');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'lda0/Nmesh');
model.mesh('mesh1').feature('ftri1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').selection.set([3 4]);
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([3]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hmax', 'lda0/n/Nmesh');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([4 301]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 8);

model.study('std1').feature('wave').set('plist', 'lda0');
model.study('std1').feature('wave').setEntry('activate', 'ewbe', false);

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'wave');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'wave');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.01);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {'lda0'});
model.sol('sol1').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol1').feature('s1').set('control', 'wave');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (ewfd)');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').label('Electric Field (ewfd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').set('defaultPlotID', 'ElectromagneticWavesFrequencyDomain/phys1/pdef1/pcond2/pg1');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('smooth', 'internal');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result('pg1').label('Electric Field Norm (ewfd)');
model.result('pg1').set('view', 'view1');

model.view('view1').axis.set('viewscaletype', 'manual');
model.view('view1').axis.set('xscale', 2);

model.result('pg1').run;
model.result.duplicate('pg2', 'pg1');
model.result('pg2').run;
model.result('pg2').label('Electric Field Amplitude (ewfd)');
model.result('pg2').run;
model.result('pg2').feature('surf1').set('expr', 'ewfd.Ez');
model.result('pg2').feature('surf1').set('colortable', 'WaveLight');
model.result('pg2').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg2').run;
model.result('pg1').run;
model.result.duplicate('pg3', 'pg1');
model.result('pg3').run;
model.result('pg3').label('Electric Field Norm Near Lens (ewfd)');

model.view.duplicate('view3', 'view1');
model.view('view3').axis.set('xscale', 1);
model.view('view3').axis.set('yscale', 10);
model.view('view3').hideEntities.create('hide1');
model.view('view3').hideEntities('hide1').set([1 2 5 6 7]);

model.result('pg3').run;
model.result('pg3').set('view', 'view3');
model.result('pg3').run;
model.result('pg2').run;
model.result.duplicate('pg4', 'pg2');
model.result('pg4').run;
model.result('pg4').label('Electric Field Amplitude Near Lens (ewfd)');
model.result('pg4').set('view', 'view3');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup1D');
model.result('pg5').run;
model.result('pg5').label('Electric Field Amplitude at Exit Plane (ewfd)');
model.result('pg5').create('lngr1', 'LineGraph');
model.result('pg5').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg5').feature('lngr1').set('linewidth', 'preference');
model.result('pg5').feature('lngr1').selection.named('sel2');
model.result('pg5').feature('lngr1').set('expr', 'ewfd.Ez');
model.result('pg5').feature('lngr1').set('xdata', 'expr');
model.result('pg5').feature('lngr1').set('xdataexpr', 'x');
model.result('pg5').run;
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').run;
model.result('pg6').label('Electric Field Phase at Exit Plane (ewfd)');
model.result('pg6').run;
model.result('pg6').feature('lngr1').set('expr', 'arg(ewfd.Ez)');
model.result('pg6').run;
model.result.dataset.create('grid1', 'Grid1D');
model.result.dataset('grid1').set('source', 'data');
model.result.dataset('grid1').set('par1', 'u');
model.result.dataset('grid1').set('parmin1', '-D/2');
model.result.dataset('grid1').set('parmax1', 'D/2');
model.result.dataset.create('cln1', 'CutLine2D');
model.result.dataset('cln1').setIndex('genpoints', -25, 0, 0);
model.result.dataset('cln1').setIndex('genpoints', 1, 0, 1);
model.result.dataset('cln1').setIndex('genpoints', 25, 1, 0);
model.result.dataset('cln1').setIndex('genpoints', 1, 1, 1);
model.result.dataset.create('sfft1', 'SpatialFFT');
model.result.dataset('sfft1').set('data', 'cln1');
model.result.dataset('sfft1').set('gridres', 'manual');
model.result.dataset('sfft1').set('sampresx', 256);
model.result.dataset('sfft1').set('layout', 'padding');
model.result.dataset('sfft1').set('padx', 16384);
model.result.dataset('sfft1').set('fxvar', 'fx');
model.result.dataset('sfft1').set('maskdc', false);
model.result.create('pg7', 'PlotGroup1D');
model.result('pg7').run;
model.result('pg7').label('Fresnel Versus Helmholtz Comparison');
model.result('pg7').set('data', 'grid1');
model.result('pg7').create('lngr1', 'LineGraph');
model.result('pg7').feature('lngr1').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr1').set('linewidth', 'preference');
model.result('pg7').feature('lngr1').label('Integral Fresnel Approximation');
model.result('pg7').feature('lngr1').set('expr', '1/sqrt(lda0*f)*abs(intop1(ewfd.Ez*exp(-i*k0*x^2/(2*f))*exp(i*2*pi*dest(u)*x/(lda0*f))))');
model.result('pg7').feature('lngr1').set('descractive', true);
model.result('pg7').feature('lngr1').set('descr', 'Diffraction integral');
model.result('pg7').feature('lngr1').set('xdata', 'expr');
model.result('pg7').feature('lngr1').set('xdataexpr', 'u');
model.result('pg7').feature('lngr1').set('legend', true);
model.result('pg7').feature('lngr1').set('autoplotlabel', true);
model.result('pg7').feature('lngr1').set('autosolution', false);
model.result('pg7').run;
model.result('pg7').create('lngr2', 'LineGraph');
model.result('pg7').feature('lngr2').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr2').set('linewidth', 'preference');
model.result('pg7').feature('lngr2').label('FFT Fresnel Approximation');
model.result('pg7').feature('lngr2').set('data', 'sfft1');
model.result('pg7').feature('lngr2').set('expr', '1/sqrt(lda0*f)*abs(fft(ewfd.Ez*exp(-i*k0*x^2/(2*f)) ))*D/Nx');
model.result('pg7').feature('lngr2').set('xdata', 'expr');
model.result('pg7').feature('lngr2').set('xdataexpr', 'fx*lda0/(1[um])*f/(1[um])');
model.result('pg7').feature('lngr2').set('legend', true);
model.result('pg7').feature('lngr2').set('autoplotlabel', true);
model.result('pg7').feature('lngr2').set('autosolution', false);
model.result('pg7').run;
model.result('pg7').create('lngr3', 'LineGraph');
model.result('pg7').feature('lngr3').set('markerpos', 'datapoints');
model.result('pg7').feature('lngr3').set('linewidth', 'preference');
model.result('pg7').feature('lngr3').label('Helmholtz Equation (ewfd)');
model.result('pg7').feature('lngr3').set('data', 'dset1');
model.result('pg7').feature('lngr3').selection.set([12]);
model.result('pg7').feature('lngr3').set('xdata', 'expr');
model.result('pg7').feature('lngr3').set('xdataexpr', 'x');
model.result('pg7').feature('lngr3').set('legend', true);
model.result('pg7').feature('lngr3').set('autoplotlabel', true);
model.result('pg7').feature('lngr3').set('autosolution', false);
model.result('pg7').run;
model.result('pg7').set('xlabelactive', true);
model.result('pg7').set('xlabel', ['x-coordinate (' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm)']);
model.result('pg7').set('ylabelactive', true);
model.result('pg7').set('ylabel', 'Electric field amplitude (a.u.)');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'Comparison Between the Fresnel Approximation and the Helmholtz Equation');
model.result('pg7').set('axislimits', true);
model.result('pg7').set('xmin', -25);
model.result('pg7').set('xmax', 25);
model.result('pg7').run;

model.physics('ewbe').prop('components').set('components', 'outofplane');
model.physics('ewbe').prop('WaveVector').set('dirCount', 'UniDirectionality');
model.physics('ewbe').prop('WaveVector').set('k1', {'0' 'ewbe.k0' '0'});
model.physics('ewbe').create('sctr1', 'Scattering', 1);
model.physics('ewbe').feature('sctr1').selection.named('box1');
model.physics('ewbe').feature('sctr1').set('IncidentField', 'EField');
model.physics('ewbe').feature('sctr1').set('E0i', [0 0 1]);
model.physics('ewbe').create('sctr2', 'Scattering', 1);
model.physics('ewbe').feature('sctr2').selection.named('dif1');

model.mesh.duplicate('mesh2', 'mesh1');
model.mesh('mesh2').label('Coarse Mesh');
model.mesh('mesh2').feature('map1').create('size1', 'Size');
model.mesh('mesh2').feature('map1').feature('size1').set('custom', true);
model.mesh('mesh2').feature('map1').feature('size1').set('hmaxactive', true);
model.mesh('mesh2').feature('map1').feature('size1').set('hmax', '2*lda0');

model.study.create('std2');
model.study('std2').create('wave', 'Wavelength');
model.study('std2').feature('wave').set('plotgroup', 'Default');
model.study('std2').feature('wave').set('solnum', 'auto');
model.study('std2').feature('wave').set('notsolnum', 'auto');
model.study('std2').feature('wave').set('outputmap', {});
model.study('std2').feature('wave').set('ngenAUX', '1');
model.study('std2').feature('wave').set('goalngenAUX', '1');
model.study('std2').feature('wave').set('ngenAUX', '1');
model.study('std2').feature('wave').set('goalngenAUX', '1');
model.study('std2').feature('wave').setSolveFor('/physics/ewfd', false);
model.study('std2').feature('wave').setSolveFor('/physics/ewbe', true);
model.study('std2').feature('wave').set('plist', 'lda0');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'wave');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'wave');
model.sol('sol2').create('s1', 'Stationary');
model.sol('sol2').feature('s1').create('p1', 'Parametric');
model.sol('sol2').feature('s1').feature.remove('pDef');
model.sol('sol2').feature('s1').feature('p1').set('pname', {'lambda0'});
model.sol('sol2').feature('s1').feature('p1').set('plistarr', {'lda0'});
model.sol('sol2').feature('s1').feature('p1').set('punit', {[native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm']});
model.sol('sol2').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol2').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol2').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol2').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol2').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol2').feature('s1').feature('p1').set('probes', {});
model.sol('sol2').feature('s1').feature('p1').set('control', 'wave');
model.sol('sol2').feature('s1').set('control', 'wave');
model.sol('sol2').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol2').feature('s1').feature('aDef').set('cachepattern', false);
model.sol('sol2').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol2').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol2').feature('s1').feature('aDef').set('nullfun', 'auto');
model.sol('sol2').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol2').feature('s1').feature('fc1').set('linsolver', 'dDef');
model.sol('sol2').feature('s1').feature.remove('fcDef');
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Electric Field (ewbe)');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').set('defaultPlotID', 'ElectromagneticWavesBeamEnvelopes/phys1/pdef1/pcond2/pg1');
model.result('pg8').feature.create('surf1', 'Surface');
model.result('pg8').feature('surf1').label('Electric Field');
model.result('pg8').feature('surf1').set('expr', 'ewbe.normE');
model.result('pg8').feature('surf1').set('smooth', 'internal');
model.result('pg8').feature('surf1').set('data', 'parent');
model.result('pg8').run;
model.result('pg8').set('view', 'view1');
model.result('pg7').run;
model.result('pg7').feature.duplicate('lngr4', 'lngr3');
model.result('pg7').run;
model.result('pg7').feature('lngr4').label('Helmholtz Equation (ewbe)');
model.result('pg7').feature('lngr4').set('data', 'dset2');
model.result('pg7').feature('lngr4').set('expr', 'ewbe.normE');
model.result('pg7').run;

model.param.set('M', '8');

% Started to run method rebuildGeometry

model.geom('part1').localParam.remove('x0');
model.geom('part1').localParam.remove('x1');
model.geom('part1').localParam.remove('x2');
model.geom('part1').localParam.remove('x3');
model.geom('part1').localParam.remove('x4');
model.geom('part1').localParam.remove('x5');
model.geom('part1').localParam.remove('x6');
model.geom('part1').localParam.remove('x7');
model.geom('part1').localParam.remove('x8');
model.geom('part1').localParam.remove('x9');
model.geom('part1').localParam.remove('x10');
model.geom('part1').localParam.remove('x11');
model.geom('part1').localParam.remove('x12');
model.geom('part1').localParam.remove('x13');
model.geom('part1').localParam.remove('x14');
model.geom('part1').localParam.remove('x15');
model.geom('part1').localParam.remove('x16');
model.geom('part1').localParam.remove('y0');
model.geom('part1').localParam.remove('y1');
model.geom('part1').localParam.remove('y2');
model.geom('part1').localParam.remove('y3');
model.geom('part1').localParam.remove('y4');
model.geom('part1').localParam.remove('y5');
model.geom('part1').localParam.remove('y6');
model.geom('part1').localParam.remove('y7');
model.geom('part1').localParam.remove('y8');
model.geom('part1').localParam.remove('y9');
model.geom('part1').localParam.remove('y10');
model.geom('part1').localParam.remove('y11');
model.geom('part1').localParam.remove('y12');
model.geom('part1').localParam.remove('y13');
model.geom('part1').localParam.remove('y14');
model.geom('part1').localParam.remove('y15');
model.geom('part1').localParam.remove('y16');
model.geom('part1').localParam.set('x0', 'if(zone > 1,sqrt(R^2-(R-(sag-(N+1-zone)*d))^2),0)', 'Left end of zone');
model.geom('part1').localParam.set('x1', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+1)*dm)^2)', '1st step right end');
model.geom('part1').localParam.set('x2', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+2)*dm)^2)', '2nd step right end');
model.geom('part1').localParam.set('x3', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+3)*dm)^2)', '3rd step right end');
model.geom('part1').localParam.set('x4', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+4)*dm)^2)', '4th step right end');
model.geom('part1').localParam.set('x5', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+5)*dm)^2)', '5th step right end');
model.geom('part1').localParam.set('x6', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+6)*dm)^2)', '6th step right end');
model.geom('part1').localParam.set('x7', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+7)*dm)^2)', '7th step right end');
model.geom('part1').localParam.set('x8', 'sqrt(R^2-(R-(sag-(N-zone)*d))^2)', 'Right end of zone');
model.geom('part1').localParam.set('y0', '-dm', 'Base level');
model.geom('part1').localParam.set('y1', '(Mi-1)*dm', '1st level');
model.geom('part1').localParam.set('y2', '(Mi-2)*dm', '2nd level');
model.geom('part1').localParam.set('y3', '(Mi-3)*dm', '3rd level');
model.geom('part1').localParam.set('y4', '(Mi-4)*dm', '4th level');
model.geom('part1').localParam.set('y5', '(Mi-5)*dm', '5th level');
model.geom('part1').localParam.set('y6', '(Mi-6)*dm', '6th level');
model.geom('part1').localParam.set('y7', '(Mi-7)*dm', '7th level');
model.geom('part1').localParam.set('y8', '(Mi-8)*dm', '8th level');
model.geom('part1').feature('pol1').set('x', 'x0 x0 x1 x1 x2 x2 x3 x3 x4 x4 x5 x5 x6 x6 x7 x7 x8 x8');
model.geom('part1').feature('pol1').set('y', 'y0 y1 y1 y2 y2 y3 y3 y4 y4 y5 y5 y6 y6 y7 y7 y8 y8 y0');
model.geom('geom1').run;

% Finished running method rebuildGeometry

model.param.set('M', '16');

% Started to run method rebuildGeometry

model.geom('part1').localParam.remove('x0');
model.geom('part1').localParam.remove('x1');
model.geom('part1').localParam.remove('x2');
model.geom('part1').localParam.remove('x3');
model.geom('part1').localParam.remove('x4');
model.geom('part1').localParam.remove('x5');
model.geom('part1').localParam.remove('x6');
model.geom('part1').localParam.remove('x7');
model.geom('part1').localParam.remove('x8');
model.geom('part1').localParam.remove('y0');
model.geom('part1').localParam.remove('y1');
model.geom('part1').localParam.remove('y2');
model.geom('part1').localParam.remove('y3');
model.geom('part1').localParam.remove('y4');
model.geom('part1').localParam.remove('y5');
model.geom('part1').localParam.remove('y6');
model.geom('part1').localParam.remove('y7');
model.geom('part1').localParam.remove('y8');
model.geom('part1').localParam.set('x0', 'if(zone > 1,sqrt(R^2-(R-(sag-(N+1-zone)*d))^2),0)', 'Left end of zone');
model.geom('part1').localParam.set('x1', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+1)*dm)^2)', '1st step right end');
model.geom('part1').localParam.set('x2', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+2)*dm)^2)', '2nd step right end');
model.geom('part1').localParam.set('x3', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+3)*dm)^2)', '3rd step right end');
model.geom('part1').localParam.set('x4', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+4)*dm)^2)', '4th step right end');
model.geom('part1').localParam.set('x5', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+5)*dm)^2)', '5th step right end');
model.geom('part1').localParam.set('x6', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+6)*dm)^2)', '6th step right end');
model.geom('part1').localParam.set('x7', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+7)*dm)^2)', '7th step right end');
model.geom('part1').localParam.set('x8', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+8)*dm)^2)', '8th step right end');
model.geom('part1').localParam.set('x9', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+9)*dm)^2)', '9th step right end');
model.geom('part1').localParam.set('x10', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+10)*dm)^2)', '10th step right end');
model.geom('part1').localParam.set('x11', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+11)*dm)^2)', '11th step right end');
model.geom('part1').localParam.set('x12', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+12)*dm)^2)', '12th step right end');
model.geom('part1').localParam.set('x13', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+13)*dm)^2)', '13th step right end');
model.geom('part1').localParam.set('x14', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+14)*dm)^2)', '14th step right end');
model.geom('part1').localParam.set('x15', 'sqrt(R^2-(z0+(N-zone+1)*d-(M-Mi+15)*dm)^2)', '15th step right end');
model.geom('part1').localParam.set('x16', 'sqrt(R^2-(R-(sag-(N-zone)*d))^2)', 'Right end of zone');
model.geom('part1').localParam.set('y0', '-dm', 'Base level');
model.geom('part1').localParam.set('y1', '(Mi-1)*dm', '1st level');
model.geom('part1').localParam.set('y2', '(Mi-2)*dm', '2nd level');
model.geom('part1').localParam.set('y3', '(Mi-3)*dm', '3rd level');
model.geom('part1').localParam.set('y4', '(Mi-4)*dm', '4th level');
model.geom('part1').localParam.set('y5', '(Mi-5)*dm', '5th level');
model.geom('part1').localParam.set('y6', '(Mi-6)*dm', '6th level');
model.geom('part1').localParam.set('y7', '(Mi-7)*dm', '7th level');
model.geom('part1').localParam.set('y8', '(Mi-8)*dm', '8th level');
model.geom('part1').localParam.set('y9', '(Mi-9)*dm', '9th level');
model.geom('part1').localParam.set('y10', '(Mi-10)*dm', '10th level');
model.geom('part1').localParam.set('y11', '(Mi-11)*dm', '11th level');
model.geom('part1').localParam.set('y12', '(Mi-12)*dm', '12th level');
model.geom('part1').localParam.set('y13', '(Mi-13)*dm', '13th level');
model.geom('part1').localParam.set('y14', '(Mi-14)*dm', '14th level');
model.geom('part1').localParam.set('y15', '(Mi-15)*dm', '15th level');
model.geom('part1').localParam.set('y16', '(Mi-16)*dm', '16th level');
model.geom('part1').feature('pol1').set('x', 'x0 x0 x1 x1 x2 x2 x3 x3 x4 x4 x5 x5 x6 x6 x7 x7 x8 x8 x9 x9 x10 x10 x11 x11 x12 x12 x13 x13 x14 x14 x15 x15 x16 x16');
model.geom('part1').feature('pol1').set('y', 'y0 y1 y1 y2 y2 y3 y3 y4 y4 y5 y5 y6 y6 y7 y7 y8 y8 y9 y9 y10 y10 y11 y11 y12 y12 y13 y13 y14 y14 y15 y15 y16 y16 y0');
model.geom('geom1').run;

% Finished running method rebuildGeometry

model.result('pg1').run;

model.title('Fresnel Lens');

model.description(['This model simulates a 16-level, first-order, focusing Fresnel lens with 50 ' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm diameter and 150 ' native2unicode(hex2dec({'00' 'b5'}), 'unicode') 'm focal length. In one simulation, the Electromagnetic Waves, Frequency Domain interface computes the electric field in the Fresnel lens and the surrounding air domain extended to the focal plane. In the second simulation, the electric field at the exit plane right above the Fresnel lens is propagated to the focal plane using the Fresnel approximation. Finally, the simulation is performed using the Electromagnetic Waves, Beam Envelopes interface. The electric fields at the focal plane calculated by the three methods are compared. The results are in very good agreement.' newline  newline 'Additionally, this model demonstrates the short simulation time for the Electromagnetic Waves, Beam Envelopes interface, as it can perform the simulation with a coarser mesh.' newline  newline 'The model also demonstrates how to build and run a model method. The model method automatically rebuilds the complex geometry, when a design parameter has changed.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('fresnel_lens.mph');

model.modelNode.label('Components');

out = model;
