function out = model
%
% tumor_ablation.m
%
% Model exported on May 26 2025, 21:29 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Heat_Transfer_Module/Medical_Technology');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('ec', 'ConductiveMedia', 'geom1');
model.physics('ec').model('comp1');
model.physics.create('ht', 'BioHeat', 'geom1');
model.physics('ht').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/ec', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);

model.param.set('rho_b', '1000[kg/m^3]');
model.param.descr('rho_b', 'Density, blood');
model.param.set('c_b', '4180[J/(kg*K)]');
model.param.descr('c_b', 'Heat capacity, blood');
model.param.set('omega_b', '6.4e-3[1/s]');
model.param.descr('omega_b', 'Blood perfusion rate');
model.param.set('T_b', '37[degC]');
model.param.descr('T_b', 'Arterial blood temperature');
model.param.set('T0', '37[degC]');
model.param.descr('T0', 'Initial and boundary temperature');
model.param.set('V0', '22[V]');
model.param.descr('V0', 'Electric voltage');
model.param.set('xc_v', '26[mm]');
model.param.descr('xc_v', 'Vessel cylinder center x-coordinate');
model.param.set('a_time', '10[min]');
model.param.descr('a_time', 'Ablation time');

model.geom('geom1').lengthUnit('mm');
model.geom('geom1').create('cyl1', 'Cylinder');
model.geom('geom1').feature('cyl1').set('r', 0.9144);
model.geom('geom1').feature('cyl1').set('h', 60);
model.geom('geom1').feature('cyl1').set('pos', [0 0 60]);
model.geom('geom1').feature('cyl1').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('cyl1').setIndex('layer', 10, 0);
model.geom('geom1').feature('cyl1').set('layerside', false);
model.geom('geom1').feature('cyl1').set('layerbottom', true);
model.geom('geom1').run('cyl1');
model.geom('geom1').create('tor1', 'Torus');
model.geom('geom1').feature('tor1').set('rmaj', 7.5);
model.geom('geom1').feature('tor1').set('rmin', 0.2667);
model.geom('geom1').feature('tor1').set('angle', 180);
model.geom('geom1').feature('tor1').set('pos', [8 0 60]);
model.geom('geom1').feature('tor1').set('axistype', 'y');
model.geom('geom1').feature('tor1').set('rot', -90);
model.geom('geom1').run('tor1');
model.geom('geom1').create('rot1', 'Rotate');
model.geom('geom1').feature('rot1').selection('input').set({'tor1'});
model.geom('geom1').feature('rot1').set('rot', 'range(0,90,270)');
model.geom('geom1').run('rot1');
model.geom('geom1').create('cyl2', 'Cylinder');
model.geom('geom1').feature('cyl2').set('r', 5);
model.geom('geom1').feature('cyl2').set('h', 120);
model.geom('geom1').feature('cyl2').set('pos', {'xc_v' '0' '0'});
model.geom('geom1').run('cyl2');
model.geom('geom1').create('cyl3', 'Cylinder');
model.geom('geom1').feature('cyl3').set('r', 50);
model.geom('geom1').feature('cyl3').set('h', 120);
model.geom('geom1').run('fin');

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Exterior Boundaries');
model.selection('sel1').all;
model.selection('sel1').geom('geom1', 3, 2, {'exterior'});
model.selection('sel1').all;
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Liver Tissue');
model.selection('sel2').set([1]);
model.selection.create('sel3', 'Explicit');
model.selection('sel3').model('comp1');
model.selection('sel3').label('Blood Vessel');
model.selection('sel3').set([8]);
model.selection.create('sel4', 'Explicit');
model.selection('sel4').model('comp1');
model.selection('sel4').label('Electrodes');

model.view('view1').set('renderwireframe', true);

model.selection('sel4').set([2 5 6 7]);
model.selection.create('sel5', 'Explicit');
model.selection('sel5').model('comp1');
model.selection('sel5').label('Trocar Tip');
model.selection('sel5').set([3]);
model.selection.create('sel6', 'Explicit');
model.selection('sel6').model('comp1');
model.selection('sel6').label('Trocar Base');
model.selection('sel6').set([4]);
model.selection.create('uni1', 'Union');
model.selection('uni1').model('comp1');
model.selection('uni1').label('Trocar');
model.selection('uni1').set('input', {'sel4' 'sel5' 'sel6'});
model.selection.create('uni2', 'Union');
model.selection('uni2').model('comp1');
model.selection('uni2').label('Tissue and Trocar');
model.selection('uni2').set('input', {'sel2' 'uni1'});
model.selection.create('adj1', 'Adjacent');
model.selection('adj1').model('comp1');
model.selection('adj1').label('Tissue and Trocar, Exterior Boundaries');
model.selection('adj1').set('input', {'uni2'});
model.selection.create('adj2', 'Adjacent');
model.selection('adj2').model('comp1');
model.selection('adj2').label('Trocar Tip and Electrodes, Exterior Boundaries');
model.selection('adj2').set('input', {'sel4' 'sel5'});

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').label('Liver (human)');
model.material('mat1').propertyGroup('def').set('heatcapacity', '3540[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('density', '1079[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'0.52[W/(m*K)]' '0' '0' '0' '0.52[W/(m*K)]' '0' '0' '0' '0.52[W/(m*K)]'});
model.material('mat1').propertyGroup('def').set('frequencyfactor', '7.39e39');
model.material('mat1').propertyGroup('def').set('activationenergy', '2.577e5');
model.material('mat1').selection.named('sel2');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0.333[S/m]'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Blood');
model.material('mat2').selection.named('sel3');
model.material('mat2').propertyGroup('def').set('electricconductivity', {'0.667[S/m]'});
model.material('mat2').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'0.543[W/(m*K)]'});
model.material('mat2').propertyGroup('def').set('density', {'rho_b'});
model.material('mat2').propertyGroup('def').set('heatcapacity', {'c_b'});
model.material.create('mat3', 'Common', 'comp1');
model.material('mat3').label('Electrodes');
model.material('mat3').selection.named('sel4');
model.material('mat3').propertyGroup('def').set('electricconductivity', {'1e8[S/m]'});
model.material('mat3').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat3').propertyGroup('def').set('thermalconductivity', {'18[W/(m*K)]'});
model.material('mat3').propertyGroup('def').set('density', {'6450[kg/m^3]'});
model.material('mat3').propertyGroup('def').set('heatcapacity', {'840[J/(kg*K)]'});
model.material.create('mat4', 'Common', 'comp1');
model.material('mat4').label('Trocar Tip');
model.material('mat4').selection.named('sel5');
model.material('mat4').propertyGroup('def').set('electricconductivity', {'4e6[S/m]'});
model.material('mat4').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat4').propertyGroup('def').set('thermalconductivity', {'71[W/(m*K)]'});
model.material('mat4').propertyGroup('def').set('density', {'21500[kg/m^3]'});
model.material('mat4').propertyGroup('def').set('heatcapacity', {'132[J/(kg*K)]'});
model.material.create('mat5', 'Common', 'comp1');
model.material('mat5').label('Trocar Base');
model.material('mat5').selection.named('sel6');
model.material('mat5').propertyGroup('def').set('electricconductivity', {'1e-5[S/m]'});
model.material('mat5').propertyGroup('def').set('relpermittivity', {'1'});
model.material('mat5').propertyGroup('def').set('thermalconductivity', {'0.026[W/(m*K)]'});
model.material('mat5').propertyGroup('def').set('density', {'70[kg/m^3]'});
model.material('mat5').propertyGroup('def').set('heatcapacity', {'1045[J/(kg*K)]'});

model.physics('ec').prop('EquationForm').setIndex('form', 'Stationary', 0);
model.physics('ec').prop('ShapeProperty').set('order_electricpotential', 1);
model.physics('ec').create('gnd1', 'Ground', 2);
model.physics('ec').feature('gnd1').selection.named('sel1');
model.physics('ec').create('pot1', 'ElectricPotential', 2);
model.physics('ec').feature('pot1').selection.named('adj2');
model.physics('ec').feature('pot1').set('V0', 'V0');
model.physics('ht').selection.named('uni2');
model.physics('ht').feature('bt1').create('tdam1', 'ThermalDamage', 3);
model.physics('ht').feature('bt1').feature('tdam1').set('TransformationModel', 'ArrheniusKinetics');
model.physics('ht').feature('bt1').feature('bh1').set('Tb', 'T_b');
model.physics('ht').feature('bt1').feature('bh1').set('Cp_b', 'c_b');
model.physics('ht').feature('bt1').feature('bh1').set('omegab', 'omega_b');
model.physics('ht').feature('bt1').feature('bh1').set('rhobl', 'rho_b');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('solid1', 'SolidHeatTransferModel', 3);
model.physics('ht').feature('solid1').selection.named('uni1');
model.physics('ht').create('temp1', 'TemperatureBoundary', 2);
model.physics('ht').feature('temp1').selection.named('adj1');
model.physics('ht').feature('temp1').set('T0', 'T_b');

model.multiphysics.create('emh1', 'ElectromagneticHeating', 'geom1', 3);

model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size1').selection.set([2 5 6 7]);
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 0.38);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hminactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmin', 0.35);
model.mesh('mesh1').feature('ftet1').create('size2', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size2').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').feature('size2').selection.set([3 4]);
model.mesh('mesh1').feature('ftet1').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmax', 1.3);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hminactive', true);
model.mesh('mesh1').feature('ftet1').feature('size2').set('hmin', 1.1);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hnarrow', 0);
model.mesh('mesh1').run;

model.study('std1').feature('time').set('tunit', 'min');
model.study('std1').feature('time').set('tlist', 'range(0,a_time/4,a_time)');

model.probe.create('pdom1', 'DomainPoint');
model.probe('pdom1').model('comp1');
model.probe('pdom1').setIndex('coords3', -4, 0);
model.probe('pdom1').setIndex('coords3', 65, 2);
model.probe('pdom1').feature('ppb1').set('expr', 'ht.theta_d');
model.probe('pdom1').feature('ppb1').set('descr', 'Fraction of damage');
model.probe('pdom1').feature('ppb1').set('window', 'window1');
model.probe('pdom1').feature('ppb1').set('windowtitle', 'Probe Plot 1');
model.probe.duplicate('pdom2', 'pdom1');
model.probe('pdom2').setIndex('coords3', -12, 0);
model.probe.duplicate('pdom3', 'pdom1');
model.probe('pdom3').setIndex('coords3', -20, 0);
model.probe.create('pdom4', 'DomainPoint');
model.probe('pdom4').model('comp1');
model.probe('pdom4').setIndex('coords3', -0.2667, 0);
model.probe('pdom4').setIndex('coords3', 15.5, 1);
model.probe('pdom4').setIndex('coords3', 60, 2);
model.probe('pdom4').feature('ppb4').set('expr', 'T');
model.probe('pdom4').feature('ppb4').set('descr', 'Temperature');
model.probe('pdom4').feature('ppb4').set('window', 'window2');
model.probe('pdom4').feature('ppb4').set('windowtitle', 'Probe Plot 2');
model.probe('pdom4').feature('ppb4').set('unit', 'degC');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_ht_alpha').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_ht_alpha').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,a_time/4,a_time)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {'pdom1' 'pdom2' 'pdom3' 'pdom4'});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_ht_alpha' 'scaled' 'comp1_T' 'global' 'comp1_V' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_ht_alpha' '1e-2' 'comp1_T' '1e-3' 'comp1_V' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_ht_alpha' 'manual' 'comp1_T' 'factor' 'comp1_V' 'factor'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Electric Currents');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_T'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subdamp', 0.8);
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('subjtech', 'once');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Temperature');
model.sol('sol1').feature('t1').feature('se1').create('ss3', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('segvar', {'comp1_ht_alpha'});
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').label('iterative');
model.sol('sol1').feature('t1').feature('i1').create('ja1', 'Jacobi');
model.sol('sol1').feature('t1').feature('se1').feature('ss3').set('linsolver', 'i1');
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 0);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('t1').create('i2', 'Iterative');
model.sol('sol1').feature('t1').feature('i2').set('linsolver', 'cg');
model.sol('sol1').feature('t1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('prefun', 'amg');
model.sol('sol1').feature('t1').feature('i2').feature('mg1').set('coarseningmethod', 'classic');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');

model.probe('pdom1').genResult('none');
model.probe('pdom2').genResult('none');
model.probe('pdom3').genResult('none');
model.probe('pdom4').genResult('none');

model.sol('sol1').runAll;

model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').label('Electric Potential (ec)');
model.result('pg3').set('frametype', 'spatial');
model.result('pg3').set('showlegendsmaxmin', true);
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 5, 0);
model.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond2/pg1');
model.result('pg3').feature.create('vol1', 'Volume');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('solutionparams', 'parent');
model.result('pg3').feature('vol1').set('colortable', 'Dipole');
model.result('pg3').feature('vol1').set('showsolutionparams', 'on');
model.result('pg3').feature('vol1').set('data', 'parent');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').label('Electric Field Norm (ec)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').set('showlegendsmaxmin', true);
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 5, 0);
model.result('pg4').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');
model.result('pg4').feature.create('mslc1', 'Multislice');
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('solutionparams', 'parent');
model.result('pg4').feature('mslc1').set('expr', 'ec.normE');
model.result('pg4').feature('mslc1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('mslc1').set('xcoord', 'ec.CPx');
model.result('pg4').feature('mslc1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('mslc1').set('ycoord', 'ec.CPy');
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('mslc1').set('zcoord', 'ec.CPz');
model.result('pg4').feature('mslc1').set('colortable', 'Prism');
model.result('pg4').feature('mslc1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('mslc1').set('colorcalibration', -0.8);
model.result('pg4').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg4').feature('mslc1').set('data', 'parent');
model.result('pg4').feature.create('strmsl1', 'StreamlineMultislice');
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('solutionparams', 'parent');
model.result('pg4').feature('strmsl1').set('expr', {'ec.Ex' 'ec.Ey' 'ec.Ez'});
model.result('pg4').feature('strmsl1').set('multiplanexmethod', 'coord');
model.result('pg4').feature('strmsl1').set('xcoord', 'ec.CPx');
model.result('pg4').feature('strmsl1').set('multiplaneymethod', 'coord');
model.result('pg4').feature('strmsl1').set('ycoord', 'ec.CPy');
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'coord');
model.result('pg4').feature('strmsl1').set('zcoord', 'ec.CPz');
model.result('pg4').feature('strmsl1').set('titletype', 'none');
model.result('pg4').feature('strmsl1').set('posmethod', 'uniform');
model.result('pg4').feature('strmsl1').set('udist', 0.02);
model.result('pg4').feature('strmsl1').set('maxlen', 0.4);
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('inheritcolor', false);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('showsolutionparams', 'on');
model.result('pg4').feature('strmsl1').set('maxtime', Inf);
model.result('pg4').feature('strmsl1').set('data', 'parent');
model.result('pg4').feature('strmsl1').set('inheritplot', 'mslc1');
model.result('pg4').feature('strmsl1').feature.create('col1', 'Color');
model.result('pg4').feature('strmsl1').feature('col1').set('expr', 'ec.normE');
model.result('pg4').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');
model.result('pg4').feature('strmsl1').feature('col1').set('colorlegend', false);
model.result('pg4').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');
model.result('pg4').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);
model.result('pg4').feature('strmsl1').feature.create('filt1', 'Filter');
model.result('pg4').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature (ht)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg1');
model.result('pg5').feature.create('vol1', 'Volume');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('solutionparams', 'parent');
model.result('pg5').feature('vol1').set('expr', 'T');
model.result('pg5').feature('vol1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('vol1').set('smooth', 'internal');
model.result('pg5').feature('vol1').set('showsolutionparams', 'on');
model.result('pg5').feature('vol1').set('data', 'parent');
model.result('pg3').run;
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').label('Damaged Tissue, 1D');
model.result('pg1').set('titletype', 'manual');
model.result('pg1').set('title', 'Fraction of damage at the probe locations over time');
model.result('pg1').set('ylabelactive', true);
model.result('pg1').set('ylabel', 'Fraction of damage (1)');
model.result('pg1').set('legendpos', 'lowerright');
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg1').feature('tblp1').set('legendmethod', 'manual');
model.result('pg1').feature('tblp1').setIndex('legends', 'Point: (-4, 0, 65)', 0);
model.result('pg1').feature('tblp1').setIndex('legends', 'Point: (-12, 0, 65)', 1);
model.result('pg1').feature('tblp1').setIndex('legends', 'Point: (-20, 0, 65)', 2);
model.result('pg1').set('window', 'window1');
model.result('pg1').run;
model.result('pg2').set('window', 'window2');
model.result('pg2').set('windowtitle', 'Probe Plot 2');
model.result('pg2').run;
model.result('pg2').label('Temperature at One Electrode Tip');
model.result('pg2').set('ylabelactive', true);
model.result('pg2').set('ylabel', 'Temperature (degC)');
model.result('pg2').set('titletype', 'manual');
model.result('pg2').set('title', 'Temperature at one of the electrode tip over time');
model.result('pg2').set('legendpos', 'lowerright');
model.result('pg2').set('window', 'window2');
model.result('pg2').set('windowtitle', 'Probe Plot 2');
model.result('pg2').run;
model.result('pg2').feature('tblp1').set('legendmethod', 'manual');
model.result('pg2').feature('tblp1').setIndex('legends', 'Point: (-0.2667, 15.5, 60)', 0);
model.result('pg2').set('window', 'window2');
model.result('pg2').set('windowtitle', 'Probe Plot 2');
model.result('pg2').run;
model.result('pg3').run;
model.result('pg3').run;
model.result('pg3').feature.remove('vol1');
model.result('pg3').run;
model.result('pg3').create('mslc1', 'Multislice');
model.result('pg3').feature('mslc1').set('znumber', '0');
model.result('pg3').feature('mslc1').set('colortable', 'Dipole');
model.result('pg3').run;
model.result('pg4').run;
model.result('pg4').run;
model.result('pg4').feature('mslc1').set('multiplanezmethod', 'number');
model.result('pg4').feature('mslc1').set('znumber', '0');
model.result('pg4').run;
model.result('pg4').feature('strmsl1').set('multiplanezmethod', 'number');
model.result('pg4').feature('strmsl1').set('znumber', '0');
model.result('pg4').run;
model.result('pg5').run;
model.result.remove('pg5');
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Temperature, Multislice (ht)');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 5, 0);
model.result('pg5').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg2');
model.result('pg5').feature.create('mslc1', 'Multislice');
model.result('pg5').feature('mslc1').set('solutionparams', 'parent');
model.result('pg5').feature('mslc1').set('expr', 'T');
model.result('pg5').feature('mslc1').set('colortable', 'HeatCameraLight');
model.result('pg5').feature('mslc1').set('smooth', 'internal');
model.result('pg5').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg5').feature('mslc1').set('data', 'parent');
model.result('pg5').label('Temperature, Multislice (ht)');
model.result('pg5').run;
model.result('pg5').run;
model.result('pg5').feature('mslc1').set('znumber', '0');
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 5, 0);
model.result('pg6').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond3/pcond3/pg3');
model.result('pg6').feature.create('iso1', 'Isosurface');
model.result('pg6').feature('iso1').set('solutionparams', 'parent');
model.result('pg6').feature('iso1').set('expr', 'T');
model.result('pg6').feature('iso1').set('number', 10);
model.result('pg6').feature('iso1').set('colortable', 'HeatCameraLight');
model.result('pg6').feature('iso1').set('smooth', 'internal');
model.result('pg6').feature('iso1').set('showsolutionparams', 'on');
model.result('pg6').feature('iso1').set('data', 'parent');
model.result('pg6').label('Isothermal Contours (ht)');
model.result('pg6').run;
model.result('pg6').run;
model.result('pg6').feature('iso1').set('unit', 'degC');
model.result('pg6').feature('iso1').set('levelmethod', 'levels');
model.result('pg6').feature('iso1').set('levels', 50);
model.result('pg6').run;
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').label('Damaged Tissue, Multislice (ht)');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 5, 0);
model.result('pg7').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom12/pdef1/pcond4/pcond1/pg2');
model.result('pg7').feature.create('mslc1', 'Multislice');
model.result('pg7').feature('mslc1').set('solutionparams', 'parent');
model.result('pg7').feature('mslc1').set('expr', 'ht.theta_d');
model.result('pg7').feature('mslc1').set('smooth', 'internal');
model.result('pg7').feature('mslc1').set('showsolutionparams', 'on');
model.result('pg7').feature('mslc1').set('data', 'parent');
model.result('pg7').label('Damaged Tissue, Multislice (ht)');
model.result('pg7').run;
model.result('pg7').run;
model.result('pg7').feature('mslc1').set('znumber', '0');
model.result('pg7').run;
model.result('pg7').run;

model.title('Hepatic Tumor Ablation');

model.description('In this example, tumor tissue is heated using an electric probe. The example uses the bioheat equation to describe transient heat transfer and the Electric Currents interface to model a heat source.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('tumor_ablation.mph');

model.modelNode.label('Components');

out = model;
