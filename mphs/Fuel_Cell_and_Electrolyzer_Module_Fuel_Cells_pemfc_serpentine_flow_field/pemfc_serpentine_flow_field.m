function out = model
%
% pemfc_serpentine_flow_field.m
%
% Model exported on May 26 2025, 21:28 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Fuel_Cell_and_Electrolyzer_Module/Fuel_Cells');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('fc', 'HydrogenFuelCell', 'geom1');
model.physics('fc').model('comp1');
model.physics('fc').prop('H2GasMixture').set('H2O', '1');
model.physics('fc').prop('H2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('O2GasMixture').set('H2O', '1');
model.physics('fc').prop('O2GasMixture').set('N2', '1');
model.physics('fc').prop('O2GasMixture').set('GasPhaseDiffusion', '1');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('ElectrolyteType', 'ProtonExchange');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('OperationMode', 'FuelCell');
model.physics('fc').prop('DefaultElectrodeReactionSettings').set('TRHE', '50[degC]');

model.study.create('std1');
model.study('std1').create('cdi', 'CurrentDistributionInitialization');
model.study('std1').feature('cdi').set('solnum', 'auto');
model.study('std1').feature('cdi').set('notsolnum', 'auto');
model.study('std1').feature('cdi').set('outputmap', {});
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').set('ngenAUX', '1');
model.study('std1').feature('cdi').set('goalngenAUX', '1');
model.study('std1').feature('cdi').setSolveFor('/physics/fc', true);
model.study('std1').create('stat', 'Stationary');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('outputmap', {});
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').set('ngenAUX', '1');
model.study('std1').feature('stat').set('goalngenAUX', '1');
model.study('std1').feature('stat').setSolveFor('/physics/fc', true);

model.geom('geom1').insertFile('pemfc_serpentine_flow_field_geom_sequence.mph', 'geom1');
model.geom('geom1').run('unisel2');

model.param.label('Geometry Parameters');
model.param.set('W_plate_min', '10[mm]');
model.param.descr('W_plate_min', 'Minimum plate width');
model.param.set('N_ch', '1');
model.param.descr('N_ch', 'Number of channels');
model.param.set('N_repeat', '1');
model.param.descr('N_repeat', 'Number of repeating units');

model.geom('geom1').run('unisel2');

model.param.create('par2');
model.param('par2').label('Physics Parameters');

% To import content from file, use:
% model.param('par2').loadFile('FILENAME');
model.param('par2').set('stoich_H2', '1.2', 'Hydrogen flow stoichiometry');
model.param('par2').set('stoich_O2', '2.5', 'Oxygen flow stoichiometry');
model.param('par2').set('RH_an', '25[%]', 'Inlet relative humidity, anode side');
model.param('par2').set('RH_cath', '75[%]', 'Inlet relative humidity, cathode side');
model.param('par2').set('T', '70[degC]', 'Cell temperature');
model.param('par2').set('I_avg_init', '0.01[A/cm^2]', 'Initial average current density in sweep');
model.param('par2').set('I_avg_final', '1[A/cm^2]', 'Final average current density in sweep');
model.param('par2').set('L_CL', '10[um]', 'Catalytic layer thickness');
model.param('par2').set('i0_H2_ref', '1e2[A/m^2]', 'Exchange current density, hydrogen oxidation');
model.param('par2').set('i0_O2_ref', '1e-4[A/m^2]', 'Exchange current density, oxygen reduction');
model.param('par2').set('a_CL', '5e7[m^2/m^3]', 'Specific area, catalytic layers');
model.param('par2').set('sigmas_GDL_IP', '5000[S/m]', 'Electric in-plane conductivity, gas diffusion layer');
model.param('par2').set('sigmas_GDL_TP', '200[S/m]', 'Electric thru-plane conductivity, gas diffusion layer');
model.param('par2').set('kappag_GDL', '5e-12[m^2]', 'Gas permeability, gas diffusion layer');
model.param('par2').set('alphaa_O2', '3', 'Anodic transfer coefficient, oxygen reduction');
model.param('par2').set('epsg_GDL', '1-epss_GDL', 'Gas phase volume fraction, gas diffusion layers');
model.param('par2').set('epss_GDL', '0.4', 'Solid phase volume fraction, gas diffusion layer');
model.param('par2').set('I_avg', 'I_avg_init', 'Average cell current density');
model.param('par2').set('A_plate', 'L_plate*W_plate', 'Cell area');
model.param('par2').set('I_flow', 'max(I_avg,0.1[A/cm^2])*A_plate', 'Total current for stoichiometric flow calculations');
model.param('par2').set('I_tot', 'I_avg*A_plate', 'Total cell current');
model.param('par2').set('Rc', '1e-7[ohm*m^2]', 'Contact Resistance');
model.param('par2').set('j_H2', 'stoich_H2*I_flow/(2*F_const)', 'Hydrogen molar flow rate');
model.param('par2').set('j_H2O_an', 'j_H2*x_H2O_an/x_H2', 'Vapor molar flow rate, anode side');
model.param('par2').set('j_H2O_cath', 'j_O2*x_H2O_cath/x_O2_cath', 'Vapor molar flow rate, cathode side');
model.param('par2').set('j_N2', 'j_O2*x_N2_cath/x_O2_cath', 'Nitrogen molar flow rate');
model.param('par2').set('j_O2', 'stoich_O2*I_flow/(4*F_const)', 'Oxygen molar flow rate');
model.param('par2').set('m_an', 'm_H2O_an+m_H2', 'Anode total mass flow rate');
model.param('par2').set('m_cath', 'm_O2+m_N2+m_H2O_cath', 'Cathode total mass flow rate');
model.param('par2').set('m_H2', 'j_H2*2[g/mol]', 'Hydrogen mass flow rate');
model.param('par2').set('m_H2O_an', 'j_H2O_an*18[g/mol]', 'Vapor mass flow rate, anode side');
model.param('par2').set('m_H2O_cath', 'j_H2O_cath*18[g/mol]', 'Vapor mass flow rate, cathode side');
model.param('par2').set('m_N2', 'j_N2*28[g/mol]', 'Nitrogen mass flow rate');
model.param('par2').set('m_O2', 'j_O2*32[g/mol]', 'Oxygen mass flow rate');
model.param('par2').set('w_H2O_an', 'm_H2O_an/m_an', 'Water mass fraction in anode flow stream');
model.param('par2').set('w_H2O_cath', 'm_H2O_cath/m_cath', 'Water mass fraction in cathode flow stream');
model.param('par2').set('w_N2', 'm_N2/m_cath', 'Nitrogen mass fraction in cathode flow stream');
model.param('par2').set('x_H2', '1-x_H2O_an', 'Hydrogen molar fraction in anode flow stream');
model.param('par2').set('T_hum', 'T', 'Humidification temperature');
model.param('par2').set('p_vapor', '0.61121*exp((18.678-(T_hum-0[degC])/234.5[K])*((T_hum-0[degC])/(257.14+T_hum-0[degC])))[kPa]', 'Vapor pressure');
model.param('par2').set('x_H2O_an', 'RH_an*p_vapor/1[atm]', 'Vapor molar fraction in anode flow stream');
model.param('par2').set('x_H2O_cath', 'RH_cath*p_vapor/1[atm]', 'Vapor molar fraction in cathode flow stream');
model.param('par2').set('x_N2_cath', '1-x_O2_cath-x_H2O_cath', 'Nitrogen molar fraction in cathode flow stream');
model.param('par2').set('x_O2_cath', '0.21*(1-x_H2O_cath)', 'Oxygen molar fraction in cathode flow stream');
model.param('par2').set('stoich_H2', '3');
model.param('par2').descr('stoich_H2', 'Hydrogen flow stoichiometry');
model.param('par2').set('RH_an', '50[%]');
model.param('par2').descr('RH_an', 'Inlet relative humidity, anode side');

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('ElectrolyteConductivity', 'Electrolyte conductivity');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('MembraneCrossover', 'Membrane crossover');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterTransport', 'Polymer electrolyte water transport');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func.create('int1', 'Interpolation');
model.material('mat1').propertyGroup.create('PolymerElectrolyteWaterAbsorptionDesorption', 'Polymer electrolyte water absorption-desorption');
model.material('mat1').label('Nafion, EW 1100, Vapor Equilibrated, Protonated');
model.material('mat1').set('family', 'glass');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]' '0' '0' '0' '(0.177+3.7e-3*lambda)[W/m/K]'});
model.material('mat1').propertyGroup('def').set('INFO_PREFIX:thermalconductivity', ['Ex situ measurements of through-plane thermal conductivities' newline 'in a polymer electrolyte fuel cell,' newline 'O Burheim, P Vie, J Pharoah, S. Kjelstrup, Journal of Power Sources 195 (2010) 249' native2unicode(hex2dec({'20' '13'}), 'unicode') '256']);
model.material('mat1').propertyGroup('def').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('def').descr('lambda', '');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('source', 'file');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importedname', 'nafion_1100_conductivity_vapor_eq.csv');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('importeddim', '2D');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('funcs', {'sigma_vs_T_and_RH' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('fununit', {'S/cm'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('argunit', {'1' '1'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('sourcetype', 'model');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('nargs', '2');
model.material('mat1').propertyGroup('ElectrolyteConductivity').func('int1').set('struct', 'spreadsheet');
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('sigmal', {'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))' '0' '0' '0' 'sigma_vs_T_and_RH((T-0[degC])[1/K],min(max(phi,0.1),1))'});
model.material('mat1').propertyGroup('ElectrolyteConductivity').set('INFO_PREFIX:sigmal', ['Yoshitsugu Sone et al 1996 J. Electrochem. Soc. 143 1254' newline '(Conductivity data refers to the "E-form" values, Figure 5a and 5b)']);
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('temperature');
model.material('mat1').propertyGroup('ElectrolyteConductivity').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_H2', '(2.2e-11*f+2.9e-12)[mol/cm/s/bar]*exp(21[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_H2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041' newline ]);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_O2', '(1.9e-11*f+1.1e-12)[mol/cm/s/bar]*exp(22[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_O2', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('MembraneCrossover').set('Psi_N2', 'Psi_O2');
model.material('mat1').propertyGroup('MembraneCrossover').set('INFO_PREFIX:Psi_N2', 'Approximated as equal to oxygen value (no reference).');
model.material('mat1').propertyGroup('MembraneCrossover').set('lambda', 'pewt.lambda');
model.material('mat1').propertyGroup('MembraneCrossover').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('MembraneCrossover').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('MembraneCrossover').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('MembraneCrossover').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('MembraneCrossover').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('MembraneCrossover').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('MembraneCrossover').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('relativehumidity');
model.material('mat1').propertyGroup('MembraneCrossover').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('funcname', 'lambda');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('table', {'0.00' '0.0';  ...
'0.14' '1.9';  ...
'0.37' '2.9';  ...
'0.45' '3.1';  ...
'0.51' '3.7';  ...
'0.57' '4.3';  ...
'0.79' '6.3';  ...
'0.80' '6.8';  ...
'0.81' '7.9';  ...
'0.88' '10.0';  ...
'0.91' '12.0';  ...
'0.96' '13.2';  ...
'1.00' '14.0'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('fununit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').func('int1').set('argunit', {'1'});
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('alpha', 'max(c0*Dmu/(R_const*T*(1-x0)),1e-9)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:alpha', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('xi', 'if(lambda>1,1,lambda)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('INFO_PREFIX:xi', ['Adam Z. Weber and John Newman 2004 J. Electrochem. Soc. 151 A311' newline  newline 'Water uptake (lambda) from  Thomas A. Zawodzinski Jr. et al 1993 J. Electrochem. Soc. 140 1041']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('lambda', 'lambda(phi)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('lambda', 'Water uptake');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('EW', '1100[g/mol]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('EW', 'Polymer electrolyte equivalent weight');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Vm', 'EW/2[g/cm^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Vm', 'Partial molar volume of dry polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('V0', '18[g/mol]/1000[kg/m^3]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('V0', 'Water partial molar volume');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('f', 'lambda*V0/(Vm+lambda*V0)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('f', 'Water volume fraction in polymer');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('Dmu', '1.8e-5[cm^2/s]*f*exp(20[kJ/mol]/R_const*(1/30[degC]-1/T))');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('Dmu', 'Water diffusion coefficient');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('c0', 'lambda/(V0*lambda+Vm)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('c0', 'Water concentration');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').set('x0', 'lambda/(lambda+1)');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').descr('x0', 'Water mole fraction');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('temperature');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterTransport').addInput('relativehumidity');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('k_abs_dsp', '1.04e-7*exp(4.48*max(min(phi,0.85),0.25))[mol/cm^2/s]');
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').set('INFO_PREFIX:k_abs_dsp', ['Kientiz, Yamada, Nonoyama, Weber,' newline 'Journal of Fuel Cell Science and Technology, Feb 2011, Vol. 8,  Article Number 011013']);
model.material('mat1').propertyGroup('PolymerElectrolyteWaterAbsorptionDesorption').addInput('relativehumidity');

model.physics('fc').prop('H2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').prop('O2GasMixture').set('GasMixtureDarcy', true);
model.physics('fc').create('mem1', 'Membrane', 3);
model.physics('fc').feature('mem1').selection.named('geom1_ext2_dom');
model.physics('fc').prop('MembraneTransport').set('H2O_mem', true);
model.physics('fc').feature('mem1').feature('init1').set('aw0', '(RH_cath+RH_an)/2');
model.physics('fc').feature('mem1').feature('init1').set('T0', 'T_hum');
model.physics('fc').feature('mem1').feature('wadh2side1').set('ElectrolyteMaterial', 'mat1');
model.physics('fc').feature('mem1').feature('wado2side1').set('ElectrolyteMaterial', 'mat1');
model.physics('fc').create('h2gdl1', 'H2GasDiffusionLayer', 3);
model.physics('fc').feature('h2gdl1').selection.named('geom1_intsel1');
model.physics('fc').feature('h2gdl1').set('sigmas', {'sigmas_GDL_IP' '0' '0' '0' 'sigmas_GDL_IP' '0' '0' '0' 'sigmas_GDL_TP'});
model.physics('fc').feature('h2gdl1').set('epsg', 'epsg_GDL');
model.physics('fc').feature('h2gdl1').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').create('o2gdl1', 'O2GasDiffusionLayer', 3);
model.physics('fc').feature('o2gdl1').selection.named('geom1_intsel2');
model.physics('fc').feature('o2gdl1').set('sigmas', {'sigmas_GDL_TP' '0' '0' '0' 'sigmas_GDL_TP' '0' '0' '0' 'sigmas_GDL_IP'});
model.physics('fc').feature('o2gdl1').set('epsg', 'epsg_GDL');
model.physics('fc').feature('o2gdl1').set('kappag', {'kappag_GDL' '0' '0' '0' 'kappag_GDL' '0' '0' '0' 'kappag_GDL'});
model.physics('fc').create('h2fch1', 'H2FlowChannel', 3);
model.physics('fc').feature('h2fch1').selection.named('geom1_intsel3');
model.physics('fc').feature('h2fch1').set('GasPermeabilityModel', 'StraightChannels');
model.physics('fc').feature('h2fch1').set('H_ch', 'H_ch');
model.physics('fc').feature('h2fch1').set('W_ch', 'W_ch');
model.physics('fc').create('o2fch1', 'O2FlowChannel', 3);
model.physics('fc').feature('o2fch1').selection.named('geom1_intsel4');
model.physics('fc').feature('o2fch1').set('GasPermeabilityModel', 'StraightChannels');
model.physics('fc').feature('o2fch1').set('H_ch', 'H_ch');
model.physics('fc').feature('o2fch1').set('W_ch', 'W_ch');
model.physics('fc').create('th2gde1', 'ThinH2GasDiffusionElectrode', 2);
model.physics('fc').feature('th2gde1').selection.named('geom1_boxsel8');
model.physics('fc').feature('th2gde1').set('d_gde', 'L_CL');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('i0_ref', 'i0_H2_ref');
model.physics('fc').feature('th2gde1').feature('th2gder1').set('Av', 'a_CL');
model.physics('fc').create('to2gde1', 'ThinO2GasDiffusionElectrode', 2);
model.physics('fc').feature('to2gde1').selection.named('geom1_boxsel9');
model.physics('fc').feature('to2gde1').set('d_gde', 'L_CL');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('i0_ref', 'i0_O2_ref');
model.physics('fc').feature('to2gde1').feature('to2gder1').set('alphaa', 3);
model.physics('fc').feature('to2gde1').feature('to2gder1').set('Av', 'a_CL');
model.physics('fc').feature('ecph1').create('inito2dom1', 'InitialValuesO2Domains', 3);
model.physics('fc').feature('ecph1').feature('inito2dom1').selection.all;
model.physics('fc').feature('ecph1').create('egnd1', 'ElectricGround', 2);
model.physics('fc').feature('ecph1').feature('egnd1').selection.named('geom1_difsel1');
model.physics('fc').feature('ecph1').feature('egnd1').set('IncludeContactResistance', true);
model.physics('fc').feature('ecph1').feature('egnd1').set('Rc', 'Rc');
model.physics('fc').feature('ecph1').create('ec1', 'ElectrodeCurrent', 2);
model.physics('fc').feature('ecph1').feature('ec1').selection.named('geom1_difsel2');
model.physics('fc').feature('ecph1').feature('ec1').set('Its', '-I_tot');
model.physics('fc').feature('ecph1').feature('ec1').set('IncludeContactResistance', true);
model.physics('fc').feature('ecph1').feature('ec1').set('Rc', 'Rc');
model.physics('fc').feature('h2gasph1').feature('init1').set('x0H2O', 'x_H2O_an');
model.physics('fc').feature('h2gasph1').create('h2in1', 'H2Inlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2in1').selection.named('geom1_boxsel4');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('J0H2O', 'm_H2O_an');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('w0bndH2O', 'w_H2O_an');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('FlowBoundaryCondition', 'TotalMassFlowRate');
model.physics('fc').feature('h2gasph1').feature('h2in1').set('J0', 'm_an');
model.physics('fc').feature('h2gasph1').create('h2out1', 'H2Outlet', 2);
model.physics('fc').feature('h2gasph1').feature('h2out1').selection.named('geom1_boxsel6');
model.physics('fc').feature('o2gasph1').feature('init1').set('x0H2O', 'x_H2O_cath');
model.physics('fc').feature('o2gasph1').feature('init1').set('x0N2', 'x_N2_cath');
model.physics('fc').feature('o2gasph1').create('o2in1', 'O2Inlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2in1').selection.named('geom1_boxsel5');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('MixtureSpecification', 'MassFlowRates');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('J0H2O', 'm_H2O_cath');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('J0N2', 'm_N2');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('w0bndH2O', 'w_H2O_cath');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('w0bndN2', 'w_N2');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('FlowBoundaryCondition', 'TotalMassFlowRate');
model.physics('fc').feature('o2gasph1').feature('o2in1').set('J0', 'm_cath');
model.physics('fc').feature('o2gasph1').create('o2out1', 'O2Outlet', 2);
model.physics('fc').feature('o2gasph1').feature('o2out1').selection.named('geom1_boxsel7');

model.common('cminpt').set('modified', {'temperature' 'T'});

model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('size').set('hmax', 'W_ch/2');
model.mesh('mesh1').feature('map1').selection.named('geom1_intsel5');
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.all;
model.mesh('mesh1').feature('map1').feature('dis1').set('type', 'predefined');
model.mesh('mesh1').feature('map1').feature('dis1').set('elemcount', 4);
model.mesh('mesh1').feature('map1').feature('dis1').set('elemratio', 2);
model.mesh('mesh1').feature('map1').feature('dis1').set('symmetric', true);
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('swe1').selection.named('geom1_boxsel12');
model.mesh('mesh1').feature('swe1').create('size1', 'Size');
model.mesh('mesh1').feature('swe1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('swe1').feature('size1').set('hmax', 'W_ch/1.1');
model.mesh('mesh1').run;
model.mesh('mesh1').create('map2', 'Map');
model.mesh('mesh1').feature('map2').selection.named('geom1_unisel1');
model.mesh('mesh1').run('map2');
model.mesh('mesh1').create('ftri1', 'FreeTri');
model.mesh('mesh1').feature('ftri1').selection.named('geom1_difsel4');
model.mesh('mesh1').run('ftri1');
model.mesh('mesh1').create('bl1', 'BndLayer');
model.mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.mesh('mesh1').feature('bl1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('bl1').selection.named('geom1_unisel2');
model.mesh('mesh1').feature('bl1').feature('blp').selection.named('geom1_ext1_edg');
model.mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 2);
model.mesh('mesh1').feature('bl1').feature('blp').set('inittype', 'blhmin');
model.mesh('mesh1').feature('bl1').feature('blp').set('blhmin', 'W_rib/10');
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').create('ftet1', 'FreeTet');
model.mesh('mesh1').feature('ftet1').selection.geom('geom1', 3);
model.mesh('mesh1').feature('ftet1').selection.named('geom1_difsel3');
model.mesh('mesh1').feature('ftet1').create('size1', 'Size');
model.mesh('mesh1').feature('ftet1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftet1').feature('size1').set('hmax', 'W_ch/2.1');
model.mesh('mesh1').run('ftet1');
model.mesh('mesh1').create('swe2', 'Sweep');
model.mesh('mesh1').feature('swe2').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis1').selection.named('geom1_blk1_dom');
model.mesh('mesh1').feature('swe2').feature('dis1').set('numelem', 4);
model.mesh('mesh1').feature('swe2').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe2').feature('dis2').selection.named('geom1_ext2_dom');
model.mesh('mesh1').feature('swe2').feature('dis2').set('numelem', 4);
model.mesh('mesh1').run;

model.study('std1').feature('cdi').set('initType', 'secondary');
model.study('std1').feature('stat').label('Stationary - Pressures Only');
model.study('std1').create('stat2', 'Stationary');
model.study('std1').feature('stat2').label('Stationary - All Physics');
model.study('std1').feature('stat2').set('useparam', true);
model.study('std1').feature('stat2').setIndex('pname', 'a_CL', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat2').setIndex('pname', 'a_CL', 0);
model.study('std1').feature('stat2').setIndex('plistarr', '', 0);
model.study('std1').feature('stat2').setIndex('punit', '1/m', 0);
model.study('std1').feature('stat2').setIndex('pname', 'I_avg', 0);
model.study('std1').feature('stat2').setIndex('plistarr', 'I_avg_init range(I_avg_final/10, I_avg_final/10, I_avg_final)', 0);
model.study('std1').feature('stat2').setIndex('punit', 'A/cm^2', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 16]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 16]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 5 6 7 8 9 10 11 12 13 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([16 17 18 19 20 21 22 23 24 25 26 27 28]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 16]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 15]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 5 6 7 8 9 10 11 12 13 14]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([16 17 18 19 20 21 22 23 24 25 26 27 28]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v1').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');
model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s3').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s3').set('control', 'stat2');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').feature.remove('fcDef');
model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('v2').set('control', 'user');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('solvefor', false);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 11, 0);
model.result('pg1').label('Electrode Potential with Respect to Ground (fc)');
model.result('pg1').create('mslc1', 'Multislice');
model.result('pg1').feature('mslc1').set('expr', {'fc.phis'});
model.result('pg1').create('arwv1', 'ArrowVolume');
model.result('pg1').feature('arwv1').set('expr', {'fc.Isx' 'fc.Isy' 'fc.Isz'});
model.result('pg1').feature('arwv1').set('arrowbase', 'center');
model.result('pg1').feature('arwv1').set('color', 'gray');
model.result('pg1').feature('arwv1').create('filt1', 'Filter');
model.result('pg1').feature('arwv1').feature('filt1').set('expr', 'isdefined(root.comp1.fc.phis)');
model.result('pg1').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 11, 0);
model.result('pg2').label('Electrolyte Potential (fc)');
model.result('pg2').create('mslc1', 'Multislice');
model.result('pg2').feature('mslc1').set('expr', {'fc.phil'});
model.result('pg2').create('arwv1', 'ArrowVolume');
model.result('pg2').feature('arwv1').set('expr', {'fc.Ilx' 'fc.Ily' 'fc.Ilz'});
model.result('pg2').feature('arwv1').set('arrowbase', 'center');
model.result('pg2').feature('arwv1').set('color', 'gray');
model.result('pg2').feature('arwv1').create('filt1', 'Filter');
model.result('pg2').feature('arwv1').feature('filt1').set('expr', 'isdefined(fc.phil)');
model.result('pg2').feature('arwv1').feature('filt1').set('nodespec', 'all');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 11, 0);
model.result('pg3').label('Mole Fraction, H2, Streamline (fc)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('typeintitle', true);
model.result('pg3').set('prefixintitle', 'Species H2:');
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'fc.tfluxH2x' 'fc.tfluxH2y' 'fc.tfluxH2z'});
model.result('pg3').feature('str1').set('posmethod', 'start');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result('pg3').feature('str1').create('col', 'Color');
model.result('pg3').feature('str1').feature('col').set('expr', 'fc.xH2');
model.result('pg3').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 11, 0);
model.result('pg4').label('Mole Fraction, H2, Surface (fc)');
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('prefixintitle', 'Species H2:');
model.result('pg4').set('expressionintitle', false);
model.result('pg4').set('typeintitle', false);
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'fc.xH2'});
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').set('data', 'dset1');
model.result('pg5').setIndex('looplevel', 11, 0);
model.result('pg5').label('Mole Fraction, O2, Streamline (fc)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('typeintitle', true);
model.result('pg5').set('prefixintitle', 'Species O2:');
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'fc.tfluxO2x' 'fc.tfluxO2y' 'fc.tfluxO2z'});
model.result('pg5').feature('str1').set('posmethod', 'start');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result('pg5').feature('str1').create('col', 'Color');
model.result('pg5').feature('str1').feature('col').set('expr', 'fc.xO2');
model.result('pg5').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'dset1');
model.result('pg6').setIndex('looplevel', 11, 0);
model.result('pg6').label('Mole Fraction, O2, Surface (fc)');
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('prefixintitle', 'Species O2:');
model.result('pg6').set('expressionintitle', false);
model.result('pg6').set('typeintitle', false);
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'fc.xO2'});
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 11, 0);
model.result('pg7').label('Mole Fraction, H2O, Streamline (fc)');
model.result('pg7').set('titletype', 'custom');
model.result('pg7').set('typeintitle', true);
model.result('pg7').set('prefixintitle', 'Species H2O:');
model.result('pg7').create('str1', 'Streamline');
model.result('pg7').feature('str1').set('expr', {'fc.tfluxH2Ox' 'fc.tfluxH2Oy' 'fc.tfluxH2Oz'});
model.result('pg7').feature('str1').set('posmethod', 'start');
model.result('pg7').feature('str1').set('pointtype', 'arrow');
model.result('pg7').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg7').feature('str1').set('color', 'gray');
model.result('pg7').feature('str1').create('col', 'Color');
model.result('pg7').feature('str1').feature('col').set('expr', 'fc.xH2O');
model.result('pg7').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg8', 'PlotGroup3D');
model.result('pg8').set('data', 'dset1');
model.result('pg8').setIndex('looplevel', 11, 0);
model.result('pg8').label('Mole Fraction, H2O, Surface (fc)');
model.result('pg8').set('titletype', 'custom');
model.result('pg8').set('prefixintitle', 'Species H2O:');
model.result('pg8').set('expressionintitle', false);
model.result('pg8').set('typeintitle', false);
model.result('pg8').create('surf1', 'Surface');
model.result('pg8').feature('surf1').set('expr', {'fc.xH2O'});
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').set('data', 'dset1');
model.result('pg9').setIndex('looplevel', 11, 0);
model.result('pg9').label('Mole Fraction, N2, Streamline (fc)');
model.result('pg9').set('titletype', 'custom');
model.result('pg9').set('typeintitle', true);
model.result('pg9').set('prefixintitle', 'Species N2:');
model.result('pg9').create('str1', 'Streamline');
model.result('pg9').feature('str1').set('expr', {'fc.tfluxN2x' 'fc.tfluxN2y' 'fc.tfluxN2z'});
model.result('pg9').feature('str1').set('posmethod', 'start');
model.result('pg9').feature('str1').set('pointtype', 'arrow');
model.result('pg9').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg9').feature('str1').set('color', 'gray');
model.result('pg9').feature('str1').create('col', 'Color');
model.result('pg9').feature('str1').feature('col').set('expr', 'fc.xN2');
model.result('pg9').feature('str1').feature('col').set('titletype', 'custom');
model.result.create('pg10', 'PlotGroup3D');
model.result('pg10').set('data', 'dset1');
model.result('pg10').setIndex('looplevel', 11, 0);
model.result('pg10').label('Mole Fraction, N2, Surface (fc)');
model.result('pg10').set('titletype', 'custom');
model.result('pg10').set('prefixintitle', 'Species N2:');
model.result('pg10').set('expressionintitle', false);
model.result('pg10').set('typeintitle', false);
model.result('pg10').create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('expr', {'fc.xN2'});
model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset1');
model.result('pg11').setIndex('looplevel', 11, 0);
model.result('pg11').label('Pressure (fc)');
model.result('pg11').create('mslc1', 'Multislice');
model.result('pg11').feature('mslc1').set('expr', {'fc.p'});
model.result('pg11').create('str1', 'Streamline');
model.result('pg11').feature('str1').set('expr', {'fc.u' 'fc.v' 'fc.w'});
model.result('pg11').feature('str1').set('posmethod', 'start');
model.result('pg11').feature('str1').set('pointtype', 'arrow');
model.result('pg11').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('str1').set('color', 'gray');
model.result.create('pg12', 'PlotGroup3D');
model.result('pg12').set('data', 'dset1');
model.result('pg12').setIndex('looplevel', 11, 0);
model.result('pg12').label('Water Activity (Relative Humidity) (fc)');
model.result('pg12').create('mslc1', 'Multislice');
model.result('pg12').feature('mslc1').set('expr', {'fc.aw'});
model.result('pg1').run;
model.result('pg3').run;
model.result('pg3').set('edges', false);
model.result('pg3').run;
model.result('pg3').feature('str1').set('posmethod', 'selection');
model.result('pg3').feature('str1').selection.named('geom1_boxsel4');
model.result('pg3').feature('str1').set('arrowdistr', 'equaltime');
model.result('pg3').run;
model.result('pg5').run;
model.result('pg5').set('edges', false);
model.result('pg5').run;
model.result('pg5').feature('str1').set('posmethod', 'selection');
model.result('pg5').feature('str1').selection.named('geom1_boxsel5');
model.result('pg5').feature('str1').set('arrowdistr', 'equaltime');
model.result('pg5').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').label('Polarization Plot');
model.result('pg13').create('glob1', 'Global');
model.result('pg13').feature('glob1').set('markerpos', 'datapoints');
model.result('pg13').feature('glob1').set('linewidth', 'preference');
model.result('pg13').feature('glob1').set('expr', {'fc.phis0_ec1'});
model.result('pg13').feature('glob1').set('descr', {'Electric potential on boundary'});
model.result('pg13').feature('glob1').set('unit', {'V'});
model.result('pg13').run;
model.result('pg13').set('titletype', 'none');
model.result('pg13').set('showlegends', false);
model.result('pg13').run;
model.result.create('pg14', 'PlotGroup3D');
model.result('pg14').run;
model.result('pg14').label('Channel Water Activity');
model.result('pg14').set('edges', false);
model.result('pg14').create('surf1', 'Surface');
model.result('pg14').feature('surf1').set('expr', 'fc.aw');
model.result('pg14').feature('surf1').set('descr', 'Water activity (relative humidity)');
model.result('pg14').feature('surf1').create('sel1', 'Selection');
model.result('pg14').feature('surf1').feature('sel1').selection.named('geom1_ext1_bnd');
model.result('pg14').run;
model.result('pg14').run;
model.result.duplicate('pg15', 'pg14');
model.result('pg15').run;
model.result('pg15').label('Membrane Water Activity');
model.result('pg15').run;
model.result('pg15').feature('surf1').feature('sel1').selection.named('geom1_ext2_bnd');
model.result('pg15').run;
model.result('pg15').feature('surf1').set('expr', 'fc.aw_mem');
model.result('pg15').feature('surf1').set('descr', 'Water activity (relative humidity)');
model.result('pg15').run;
model.result('pg15').run;
model.result.duplicate('pg16', 'pg15');
model.result('pg16').run;
model.result('pg16').label('Membrane Conductivity');
model.result('pg16').run;
model.result('pg16').feature('surf1').set('expr', 'fc.sigmalzz');
model.result('pg16').feature('surf1').set('descr', 'Electrolyte conductivity, zz-component');
model.result('pg16').run;
model.result('pg16').run;
model.result.duplicate('pg17', 'pg16');
model.result('pg17').run;
model.result('pg17').label('Cross-Membrane Current Density');
model.result('pg17').run;
model.result('pg17').feature('surf1').set('expr', 'fc.nIl');
model.result('pg17').feature('surf1').set('descr', 'Normal electrolyte current density');
model.result('pg17').run;
model.result('pg17').feature('surf1').feature('sel1').selection.named('geom1_boxsel9');
model.result('pg17').run;
model.result('pg17').run;
model.result.duplicate('pg18', 'pg17');
model.result('pg18').run;
model.result('pg18').label('Cross-Membrane Water Flux');
model.result('pg18').run;
model.result('pg18').feature('surf1').set('expr', '-fc.r_abs_dsp');
model.result('pg18').run;

model.param.set('W_plate_min', '20[mm]');
model.param.descr('W_plate_min', 'Minimum plate width');
model.param.set('N_ch', '2');
model.param.descr('N_ch', 'Number of channels');
model.param.set('N_repeat', '2');
model.param.descr('N_repeat', 'Number of repeating units');

model.geom('geom1').run('unisel2');

model.param('par2').set('stoich_H2', '1.2');
model.param('par2').descr('stoich_H2', 'Hydrogen flow stoichiometry');
model.param('par2').set('RH_an', '25[%]');
model.param('par2').descr('RH_an', 'Inlet relative humidity, anode side');

model.sol('sol1').copySolution('sol4');
model.sol('sol4').label('Solution - Small Geometry');

model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 60]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 60]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 60]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([2 59]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58]);
model.mesh('mesh1').stat.selection.geom(3);
model.mesh('mesh1').stat.selection.set([60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116]);

model.sol('sol1').study('std1');

model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('notsolvertype', 'solnum');
model.study('std1').feature('stat2').set('notsolnumhide', 'off');
model.study('std1').feature('stat2').set('notstudyhide', 'off');
model.study('std1').feature('stat2').set('notsolhide', 'off');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('notsolvertype', 'solnum');
model.study('std1').feature('stat').set('notsolnumhide', 'off');
model.study('std1').feature('stat').set('notstudyhide', 'off');
model.study('std1').feature('stat').set('notsolhide', 'off');
model.study('std1').feature('stat').set('solnum', 'auto');
model.study('std1').feature('stat').set('solvertype', 'solnum');
model.study('std1').feature('stat').set('solnumhide', 'off');
model.study('std1').feature('stat').set('initstudyhide', 'off');
model.study('std1').feature('stat').set('initsolhide', 'off');

model.sol('sol2').copySolution('sol5');
model.sol('sol3').copySolution('sol6');

model.study('std1').feature('stat2').set('notlistsolnum', 1);
model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('listsolnum', 1);
model.study('std1').feature('stat2').set('solnum', 'auto');

model.result.dataset('dset3').set('solution', 'none');
model.result.dataset('dset2').set('solution', 'none');

model.sol('sol1').feature.remove('s3');
model.sol('sol1').feature.remove('v3');
model.sol('sol1').feature.remove('st3');
model.sol('sol1').feature.remove('su2');
model.sol('sol1').feature.remove('s2');
model.sol('sol1').feature.remove('v2');
model.sol('sol1').feature.remove('st2');
model.sol('sol1').feature.remove('su1');
model.sol('sol1').feature.remove('s1');
model.sol('sol1').feature.remove('v1');
model.sol('sol1').feature.remove('st1');
model.sol('sol6').copySolution('sol3');
model.sol.remove('sol6');
model.sol('sol3').label('Solution Store 2');

model.result.dataset.remove('dset7');

model.sol('sol5').copySolution('sol2');
model.sol.remove('sol5');
model.sol('sol2').label('Solution Store 1');

model.result.dataset.remove('dset6');

model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'cdi');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v1').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v1').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v1').set('control', 'cdi');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 1.0E-4);
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s1').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s1').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s1').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s1').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s1').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').create('su1', 'StoreSolution');
model.sol('sol1').feature('su1').set('sol', 'sol2');
model.sol('sol1').feature('su1').label('Solution Store 1');
model.sol('sol1').create('st2', 'StudyStep');
model.sol('sol1').feature('st2').set('study', 'std1');
model.sol('sol1').feature('st2').set('studystep', 'stat');
model.sol('sol1').create('v2', 'Variables');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v2').set('initmethod', 'sol');
model.sol('sol1').feature('v2').set('initsol', 'sol1');
model.sol('sol1').feature('v2').set('initsoluse', 'sol2');
model.sol('sol1').feature('v2').set('notsolmethod', 'sol');
model.sol('sol1').feature('v2').set('notsol', 'sol1');
model.sol('sol1').feature('v2').set('control', 'stat');
model.sol('sol1').create('s2', 'Stationary');
model.sol('sol1').feature('s2').set('stol', 1.0E-4);
model.sol('sol1').feature('s2').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').create('i1', 'Iterative');
model.sol('sol1').feature('s2').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s2').create('i2', 'Iterative');
model.sol('sol1').feature('s2').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s2').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s2').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s2').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s2').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s2').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s2').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s2').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s2').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s2').feature.remove('fcDef');
model.sol('sol1').create('su2', 'StoreSolution');
model.sol('sol1').feature('su2').set('sol', 'sol3');
model.sol('sol1').feature('su2').label('Solution Store 2');
model.sol('sol1').create('st3', 'StudyStep');
model.sol('sol1').feature('st3').set('study', 'std1');
model.sol('sol1').feature('st3').set('studystep', 'stat2');

model.study('std1').feature('stat2').set('initsoluse', 'sol3');

model.sol('sol1').create('v3', 'Variables');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_ecph1_ec1_phis0').set('scalemethod', 'manual');
model.sol('sol1').feature('v3').feature('comp1_fc_phis').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wN2_O2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_phil').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_wH2O_H2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_mu0').set('scaleval', 'F_const');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('scaleval', '1');
model.sol('sol1').feature('v3').feature('comp1_fc_ecph1_ec1_phis0').set('scaleval', '1');
model.sol('sol1').feature('v3').set('initmethod', 'sol');
model.sol('sol1').feature('v3').set('initsol', 'sol1');
model.sol('sol1').feature('v3').set('initsoluse', 'sol3');
model.sol('sol1').feature('v3').set('notsolmethod', 'sol');
model.sol('sol1').feature('v3').set('notsol', 'sol1');
model.sol('sol1').feature('v3').set('control', 'stat2');
model.sol('sol1').create('s3', 'Stationary');
model.sol('sol1').feature('s3').set('stol', 1.0E-4);
model.sol('sol1').feature('s3').create('p1', 'Parametric');
model.sol('sol1').feature('s3').feature.remove('pDef');
model.sol('sol1').feature('s3').feature('p1').set('porder', 'constant');
model.sol('sol1').feature('s3').feature('p1').set('control', 'stat2');
model.sol('sol1').feature('s3').set('control', 'stat2');
model.sol('sol1').feature('s3').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').create('i1', 'Iterative');
model.sol('sol1').feature('s3').feature('i1').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i1').label('Algebraic Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('maxcoarsedof', 50000);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').set('compactaggregation', true);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('d1').label('Direct (fc)');
model.sol('sol1').feature('s3').create('i2', 'Iterative');
model.sol('sol1').feature('s3').feature('i2').set('maxlinit', 1000);
model.sol('sol1').feature('s3').feature('i2').set('nlinnormuse', 'on');
model.sol('sol1').feature('s3').feature('i2').label('Geometric Multigrid (fc)');
model.sol('sol1').feature('s3').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('s3').feature('i2').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s3').feature('fc1').set('linsolver', 'i1');
model.sol('sol1').feature('s3').feature('fc1').set('dtech', 'auto');
model.sol('sol1').feature('s3').feature('fc1').set('maxiter', 50);
model.sol('sol1').feature('s3').feature('fc1').set('minstep', 1.0E-6);
model.sol('sol1').feature('s3').feature.remove('fcDef');

model.result.dataset('dset3').set('solution', 'sol3');
model.result.dataset('dset2').set('solution', 'sol2');

model.sol('sol1').feature('v3').set('notsolnum', 'auto');
model.sol('sol1').feature('v3').set('notsolvertype', 'solnum');
model.sol('sol1').feature('v2').set('notsolnum', 'auto');
model.sol('sol1').feature('v2').set('notsolvertype', 'solnum');

model.study('std1').feature('stat2').set('notsolnum', 'auto');
model.study('std1').feature('stat2').set('notsolvertype', 'solnum');
model.study('std1').feature('stat2').set('notsolnumhide', 'off');
model.study('std1').feature('stat2').set('notstudyhide', 'off');
model.study('std1').feature('stat2').set('notsolhide', 'off');
model.study('std1').feature('stat').set('notsolnum', 'auto');
model.study('std1').feature('stat').set('notsolvertype', 'solnum');
model.study('std1').feature('stat').set('notsolnumhide', 'off');
model.study('std1').feature('stat').set('notstudyhide', 'off');
model.study('std1').feature('stat').set('notsolhide', 'off');

model.sol('sol1').feature('v2').set('control', 'user');
model.sol('sol1').feature('v2').feature('comp1_fc_mu0').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_phil').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_phis').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_H2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wH2O_O2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_wN2_O2').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_ecph1_ec1_phis0').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_h2gasph1_h2in1_wbndH2O').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndH2O').set('solvefor', false);
model.sol('sol1').feature('v2').feature('comp1_fc_o2gasph1_o2in1_wbndN2').set('solvefor', false);

model.study('std1').feature('stat2').set('plot', true);
model.study('std1').feature('stat2').set('plotgroup', 'pg14');

model.sol('sol1').runAll;

model.result('pg1').run;
model.result('pg3').run;
model.result('pg5').run;
model.result('pg13').run;
model.result('pg14').run;
model.result('pg15').run;
model.result('pg16').run;
model.result('pg17').run;
model.result('pg18').run;
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').feature.remove('mslc1');
model.result('pg12').run;
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('expr', 'fc.aw');
model.result('pg12').feature('surf1').set('descr', 'Water activity (relative humidity)');
model.result('pg12').run;
model.result('pg12').set('edges', false);
model.result('pg12').run;

model.title('Low Temperature PEM Fuel Cell with Serpentine Flow Field');

model.description(['This tutorial explores the current distribution in a low temperature PEMFC when using serpentine-based flow field patterns.' newline  newline 'The cell is operated in counter-flow mode so that the oxygen and hydrogen inlet flow streams are located at opposite sides.' newline  newline 'Relatively dry inlet gas compositions are used so that the cell relies on self-humidification for achieving good performance.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('pemfc_serpentine_flow_field.mph');

model.modelNode.label('Components');

out = model;
