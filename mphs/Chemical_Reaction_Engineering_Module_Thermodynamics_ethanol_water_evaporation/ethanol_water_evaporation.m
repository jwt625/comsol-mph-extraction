function out = model
%
% ethanol_water_evaporation.m
%
% Model exported on May 26 2025, 21:27 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Chemical_Reaction_Engineering_Module/Thermodynamics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 2);
model.geom('geom1').model('comp1');
model.geom('geom1').axisymmetric(true);

model.mesh.create('mesh1', 'geom1');

model.physics.create('tcs', 'ConcentratedSpeciesInVapor', 'geom1', {'wEth' 'wW' 'wN2'});
model.physics.create('spf', 'LaminarFlow', 'geom1');
model.physics('spf').model('comp1');
model.physics('spf').prop('ShapeProperty').set('order_fluid', '1');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'WeaklyCompressible');
model.physics.create('ht', 'HeatTransferInFluids', 'geom1');
model.physics('ht').model('comp1');

model.multiphysics.create('nirf1', 'NonIsothermalReactingFlow', 'geom1', 2);

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/tcs', true);
model.study('std1').feature('time').setSolveFor('/physics/spf', true);
model.study('std1').feature('time').setSolveFor('/physics/ht', true);
model.study('std1').feature('time').setSolveFor('/multiphysics/nirf1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('abv', '0.35', '0.35 Alcohol by volume');
model.param.set('T0', '23[degC]', '296.15 K Initial temperature');
model.param.set('p0', '1[atm]', '1.0133E5 Pa Initial pressure');
model.param.set('relH', '0.3', '0.3 Relative humidity');

model.thermodynamics.feature.create('pp1', 'BuiltinPropertyPackage');
model.thermodynamics.feature('pp1').set('compoundlist', {'ethanol' '64-17-5' 'C2H6O' 'COMSOL';  ...
'nitrogen' '7727-37-9' 'N2' 'COMSOL';  ...
'water' '7732-18-5' 'H2O' 'COMSOL'});
model.thermodynamics.feature('pp1').set('phase_list', {'Vapor' 'Vapor'; 'Liquid' 'Liquid'});
model.thermodynamics.feature('pp1').label('Vapor-Liquid System 1');
model.thermodynamics.feature('pp1').set('manager_id', 'COMSOL');
model.thermodynamics.feature('pp1').set('manager_version', '1.0');
model.thermodynamics.feature('pp1').set('packagename', 'pp1');
model.thermodynamics.feature('pp1').set('package_desc', 'Built-in property package');
model.thermodynamics.feature('pp1').set('managerindex', '0');
model.thermodynamics.feature('pp1').set('packageid', 'COMSOL1');
model.thermodynamics.feature('pp1').set('ThermodynamicModel', 'UNIQUAC');
model.thermodynamics.feature('pp1').set('EOS', 'SoaveRedlichKwong');
model.thermodynamics.feature('pp1').set('LiquidPhaseModel', 'UNIQUAC');
model.thermodynamics.feature('pp1').set('LiquidCard', 'LiquidPhaseModel');
model.thermodynamics.feature('pp1').set('EOSModel', 'SoaveRedlichKwong');
model.thermodynamics.feature('pp1').set('GasPhaseModel', 'SoaveRedlichKwong');
model.thermodynamics.feature('pp1').set('GasEOSCard', 'GasPhaseModel');
model.thermodynamics.feature('pp1').set('EOS', 'SoaveRedlichKwong');
model.thermodynamics.feature('pp1').set('VapDiffusivity', 'Automatic');
model.thermodynamics.feature('pp1').set('VLSurfaceTension', 'Ideal');
model.thermodynamics.feature('pp1').set('VapThermalConductivity', 'KineticTheory');
model.thermodynamics.feature('pp1').set('VapViscosity', 'Brokaw');
model.thermodynamics.feature('pp1').set('LiqDiffusivity', 'WesselinghKrishna');
model.thermodynamics.feature('pp1').set('LiqDiffusivityAtInfDilution', 'Automatic');
model.thermodynamics.feature('pp1').set('LLSurfaceTension', 'None');
model.thermodynamics.feature('pp1').set('LiqThermalConductivity', 'Ideal');
model.thermodynamics.feature('pp1').set('LiqViscosity', 'LogarithmicMassMixing');
model.thermodynamics.feature('pp1').set('LiqVolume', 'EOS');
model.thermodynamics.feature('pp1').set('PoyntingFactor', 'off');
model.thermodynamics.feature('pp1').set('UseSaturatedVaporFugacity', 'off');
model.thermodynamics.feature('pp1').set('property', {'Automatic' 'Ideal' 'KineticTheory' 'Brokaw' 'WesselinghKrishna' 'Automatic' 'None' 'Ideal' 'LogarithmicMassMixing' 'EOS'  ...
'off' 'off'});
model.thermodynamics.feature('pp1').storePersistenceData;
model.thermodynamics.feature('pp1').set('WarningState', false);
model.thermodynamics.feature('pp1').set('Warning', {''});

model.physics.create('chem', 'Chemistry', 'geom1');
model.physics('chem').model('comp1');

model.geom('geom1').run;

model.physics('chem').create('spec1', 'SpeciesChem', 2);
model.physics('chem').feature('spec1').set('specName', 'C2H6O');
model.physics('chem').create('spec1', 'SpeciesChem', 2);
model.physics('chem').feature('spec1').set('specName', 'N2');
model.physics('chem').create('spec1', 'SpeciesChem', 2);
model.physics('chem').feature('spec1').set('specName', 'H2O');
model.physics('chem').prop('calcTransport').set('calcTransport', true);
model.physics('chem').prop('mixture').set('ConcentrationType', 'MassFraction');
model.physics('chem').prop('mixture').set('Thermodynamics', true);
model.physics('chem').prop('mixture').set('PropertyPackage', 'pp1');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'ethanol', 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '0.33', 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'water', 1);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '0.33', 1);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'nitrogen', 2);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationValue', '0.33', 2);
model.physics('chem').prop('mixture').set('mixture', 'gas');
model.physics('chem').prop('ChemistryModelInputParameter').set('MassTransfer', 'tcs');
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'wEth', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'ethanol', 0, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'wW', 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'water', 1, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('ConcentrationInput', 'wN2', 2, 0);
model.physics('chem').prop('ChemistryModelInputParameter').setIndex('PackageSpecies', 'nitrogen', 2, 0);

model.geom('geom1').insertFile('ethanol_water_evaporation_geom_sequence.mph', 'geom1');
model.geom('geom1').run('sel5');

model.multiphysics('nirf1').set('Chemistry_physics', 'chem');
model.multiphysics('nirf1').set('Heat_physics', 'ht');

model.cpl.create('aveop1', 'Average', 'geom1');
model.cpl('aveop1').set('axisym', true);
model.cpl('aveop1').selection.geom('geom1', 1);
model.cpl('aveop1').selection.set([8]);

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Vapor-liquid interface variables');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('wW0', '(chempp1fug_mixture_water(T0, p0, 0, 0, 1)/p0)*relH', 'Initial water mass fraction');
model.variable('var1').set('wEth0', '0', 'Initial ethanol mass fraction');
model.variable('var1').set('wEthLiq', 'aveop1(tcs.wL0_ethanol)', 'Mass fraction in liquid phase');
model.variable('var1').set('wWLiq', 'aveop1(tcs.wL0_water)', 'Mass fraction in liquid phase');

model.thermodynamics.feature('pp1').feature.create('singlephase1', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase1').label('Density 2');
model.thermodynamics.feature('pp1').feature('singlephase1').set('funcname', 'Density_ethanol_water_Liquid11');
model.thermodynamics.feature('pp1').feature('singlephase1').set('property', 'Density');
model.thermodynamics.feature('pp1').feature('singlephase1').set('propertydescr', 'Density');
model.thermodynamics.feature('pp1').feature('singlephase1').set('unit', 'kg/m^3');
model.thermodynamics.feature('pp1').feature('singlephase1').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase1').set('compounds', {'ethanol' 'water'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('args', {'temperature' 'K' 'Temperature';  ...
'pressure' 'Pa' 'Pressure';  ...
'massfraction_ethanol' '1' 'Mass fraction ethanol';  ...
'massfraction_water' '1' 'Mass fraction water'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('plotargs', {'temperature' '298.15' '373.15';  ...
'pressure' '101325' '101325';  ...
'massfraction_ethanol' '0.5' '0.5';  ...
'massfraction_water' '0.5' '0.5'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('derivatives', {'Density_ethanol_water_Liquid11_Dtemperature' 'Density_ethanol_water_Liquid11_Dpressure' 'Density_ethanol_water_Liquid11_Dmassfraction_ethanol' 'Density_ethanol_water_Liquid11_Dmassfraction_water'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('SecondDerivatives', {'Density_ethanol_water_Liquid11_Dtemperature_Dtemperature' 'Density_ethanol_water_Liquid11_Dtemperature_Dpressure' 'Density_ethanol_water_Liquid11_Dpressure_Dpressure'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('SecondDerivativeIndices', {'0' '0' '0' '0' '1' '1' '1' '1' '2'});
model.thermodynamics.feature('pp1').feature('singlephase1').set('phase', 'Liquid');
model.thermodynamics.feature('pp1').feature('singlephase1').set('comp_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase1').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase2', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase2').label('Heat capacity (Cp) 2');
model.thermodynamics.feature('pp1').feature('singlephase2').set('funcname', 'HeatCapacityCp_ethanol_water_Liquid12');
model.thermodynamics.feature('pp1').feature('singlephase2').set('property', 'HeatCapacityCp');
model.thermodynamics.feature('pp1').feature('singlephase2').set('propertydescr', 'Heat capacity (Cp)');
model.thermodynamics.feature('pp1').feature('singlephase2').set('unit', 'J/kg/K');
model.thermodynamics.feature('pp1').feature('singlephase2').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase2').set('compounds', {'ethanol' 'water'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('args', {'temperature' 'K' 'Temperature';  ...
'pressure' 'Pa' 'Pressure';  ...
'massfraction_ethanol' '1' 'Mass fraction ethanol';  ...
'massfraction_water' '1' 'Mass fraction water'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('plotargs', {'temperature' '298.15' '373.15';  ...
'pressure' '101325' '101325';  ...
'massfraction_ethanol' '0.5' '0.5';  ...
'massfraction_water' '0.5' '0.5'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('derivatives', {'HeatCapacityCp_ethanol_water_Liquid12_Dtemperature' 'HeatCapacityCp_ethanol_water_Liquid12_Dpressure' 'HeatCapacityCp_ethanol_water_Liquid12_Dmassfraction_ethanol' 'HeatCapacityCp_ethanol_water_Liquid12_Dmassfraction_water'});
model.thermodynamics.feature('pp1').feature('singlephase2').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase2').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase2').set('phase', 'Liquid');
model.thermodynamics.feature('pp1').feature('singlephase2').set('comp_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase2').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase3', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase3').label('Heat capacity ratio (Cp/Cv) 2');
model.thermodynamics.feature('pp1').feature('singlephase3').set('funcname', 'HeatCapacityRatioCpCv_ethanol_water_Liquid13');
model.thermodynamics.feature('pp1').feature('singlephase3').set('property', 'HeatCapacityRatioCpCv');
model.thermodynamics.feature('pp1').feature('singlephase3').set('propertydescr', 'Heat capacity ratio (Cp/Cv)');
model.thermodynamics.feature('pp1').feature('singlephase3').set('unit', '1');
model.thermodynamics.feature('pp1').feature('singlephase3').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase3').set('compounds', {'ethanol' 'water'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('args', {'temperature' 'K' 'Temperature';  ...
'pressure' 'Pa' 'Pressure';  ...
'massfraction_ethanol' '1' 'Mass fraction ethanol';  ...
'massfraction_water' '1' 'Mass fraction water'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('plotargs', {'temperature' '298.15' '373.15';  ...
'pressure' '101325' '101325';  ...
'massfraction_ethanol' '0.5' '0.5';  ...
'massfraction_water' '0.5' '0.5'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('derivatives', {'HeatCapacityRatioCpCv_ethanol_water_Liquid13_Dtemperature' 'HeatCapacityRatioCpCv_ethanol_water_Liquid13_Dpressure' 'HeatCapacityRatioCpCv_ethanol_water_Liquid13_Dmassfraction_ethanol' 'HeatCapacityRatioCpCv_ethanol_water_Liquid13_Dmassfraction_water'});
model.thermodynamics.feature('pp1').feature('singlephase3').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase3').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase3').set('phase', 'Liquid');
model.thermodynamics.feature('pp1').feature('singlephase3').set('comp_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase3').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase4', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase4').label('Thermal conductivity 2');
model.thermodynamics.feature('pp1').feature('singlephase4').set('funcname', 'ThermalConductivity_ethanol_water_Liquid14');
model.thermodynamics.feature('pp1').feature('singlephase4').set('property', 'ThermalConductivity');
model.thermodynamics.feature('pp1').feature('singlephase4').set('propertydescr', 'Thermal conductivity');
model.thermodynamics.feature('pp1').feature('singlephase4').set('unit', 'W/m/K');
model.thermodynamics.feature('pp1').feature('singlephase4').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase4').set('compounds', {'ethanol' 'water'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('args', {'temperature' 'K' 'Temperature';  ...
'pressure' 'Pa' 'Pressure';  ...
'massfraction_ethanol' '1' 'Mass fraction ethanol';  ...
'massfraction_water' '1' 'Mass fraction water'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('plotargs', {'temperature' '298.15' '373.15';  ...
'pressure' '101325' '101325';  ...
'massfraction_ethanol' '0.5' '0.5';  ...
'massfraction_water' '0.5' '0.5'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('derivatives', {'ThermalConductivity_ethanol_water_Liquid14_Dtemperature' 'ThermalConductivity_ethanol_water_Liquid14_Dpressure' 'ThermalConductivity_ethanol_water_Liquid14_Dmassfraction_ethanol' 'ThermalConductivity_ethanol_water_Liquid14_Dmassfraction_water'});
model.thermodynamics.feature('pp1').feature('singlephase4').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase4').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase4').set('phase', 'Liquid');
model.thermodynamics.feature('pp1').feature('singlephase4').set('comp_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase4').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature.create('singlephase5', 'OnePhaseProperty');
model.thermodynamics.feature('pp1').feature('singlephase5').label('Viscosity 2');
model.thermodynamics.feature('pp1').feature('singlephase5').set('funcname', 'Viscosity_ethanol_water_Liquid15');
model.thermodynamics.feature('pp1').feature('singlephase5').set('property', 'Viscosity');
model.thermodynamics.feature('pp1').feature('singlephase5').set('propertydescr', 'Viscosity');
model.thermodynamics.feature('pp1').feature('singlephase5').set('unit', 'Pa*s');
model.thermodynamics.feature('pp1').feature('singlephase5').set('prop_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase5').set('compounds', {'ethanol' 'water'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('args', {'temperature' 'K' 'Temperature';  ...
'pressure' 'Pa' 'Pressure';  ...
'massfraction_ethanol' '1' 'Mass fraction ethanol';  ...
'massfraction_water' '1' 'Mass fraction water'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('plotargs', {'temperature' '298.15' '373.15';  ...
'pressure' '101325' '101325';  ...
'massfraction_ethanol' '0.5' '0.5';  ...
'massfraction_water' '0.5' '0.5'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('derivatives', {'Viscosity_ethanol_water_Liquid15_Dtemperature' 'Viscosity_ethanol_water_Liquid15_Dpressure' 'Viscosity_ethanol_water_Liquid15_Dmassfraction_ethanol' 'Viscosity_ethanol_water_Liquid15_Dmassfraction_water'});
model.thermodynamics.feature('pp1').feature('singlephase5').set('SecondDerivatives', {});
model.thermodynamics.feature('pp1').feature('singlephase5').set('SecondDerivativeIndices', {});
model.thermodynamics.feature('pp1').feature('singlephase5').set('phase', 'Liquid');
model.thermodynamics.feature('pp1').feature('singlephase5').set('comp_basis', 'mass');
model.thermodynamics.feature('pp1').feature('singlephase5').set('include_derivatives', 'yes');
model.thermodynamics.feature('pp1').feature('singlephase1').tag('mat_singlephase1');
model.thermodynamics.feature('pp1').feature('mat_singlephase1').set('funcname', 'Densitypp1');
model.thermodynamics.feature('pp1').feature('singlephase2').tag('mat_singlephase2');
model.thermodynamics.feature('pp1').feature('mat_singlephase2').set('funcname', 'HeatCapacityCppp1');
model.thermodynamics.feature('pp1').feature('singlephase3').tag('mat_singlephase3');
model.thermodynamics.feature('pp1').feature('mat_singlephase3').set('funcname', 'HeatCapacityRatioCpCvpp1');
model.thermodynamics.feature('pp1').feature('singlephase4').tag('mat_singlephase4');
model.thermodynamics.feature('pp1').feature('mat_singlephase4').set('funcname', 'ThermalConductivitypp1');
model.thermodynamics.feature('pp1').feature('singlephase5').tag('mat_singlephase5');
model.thermodynamics.feature('pp1').feature('mat_singlephase5').set('funcname', 'Viscositypp1');
model.thermodynamics.createMaterial('comp1', 'pp1', 'Liquid', {'ethanol' 'water'}, {'0.5' '0.5'}, {}, {'density' 'Densitypp1'; 'heatcapacitycp' 'HeatCapacityCppp1'; 'heatcapacityratiocpcv' 'HeatCapacityRatioCpCvpp1'; 'thermalconductivity' 'ThermalConductivitypp1'; 'viscosity' 'Viscositypp1'}, 'Thermodynamics', {'8' '273' '373' '20' '101325' '201325' '15';  ...
'72' '273' '373' '20' '101325' '201325' '15';  ...
'80' '273' '373' '20' '101325' '201325' '15';  ...
'60' '273' '373' '20' '101325' '201325' '15';  ...
'64' '273' '373' '20' '101325' '201325' '15'}, {'mass' 'mass'});

model.material('pp1mat1').selection.named('geom1_sel1');
model.material('pp1mat1').propertyGroup('def').set('xw1', {'wEthLiq'});
model.material('pp1mat1').propertyGroup('def').set('xw2', {'wWLiq'});
model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').label('Silica glass');
model.material('mat1').set('family', 'custom');
model.material('mat1').set('customambient', [1 1 1]);
model.material('mat1').set('noise', true);
model.material('mat1').set('fresnel', 0.99);
model.material('mat1').set('roughness', 0.02);
model.material('mat1').set('metallic', 0);
model.material('mat1').set('pearl', 0);
model.material('mat1').set('diffusewrap', 0);
model.material('mat1').set('clearcoat', 0);
model.material('mat1').set('reflectance', 0);
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('electricconductivity', {'1e-14[S/m]' '0' '0' '0' '1e-14[S/m]' '0' '0' '0' '1e-14[S/m]'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]' '0' '0' '0' '0.55e-6[1/K]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', '703[J/(kg*K)]');
model.material('mat1').propertyGroup('def').set('relpermittivity', {'3.75' '0' '0' '0' '3.75' '0' '0' '0' '3.75'});
model.material('mat1').propertyGroup('def').set('density', '2203[kg/m^3]');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]' '0' '0' '0' '1.38[W/(m*K)]'});
model.material('mat1').propertyGroup('Enu').set('E', '73.1[GPa]');
model.material('mat1').propertyGroup('Enu').set('nu', '0.17');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1.45' '0' '0' '0' '1.45' '0' '0' '0' '1.45'});
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').propertyGroup('def').func.create('int1', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('int2', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat2').propertyGroup('def').func.create('int3', 'Interpolation');
model.material('mat2').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat2').label('Wood (pine)');
model.material('mat2').propertyGroup('def').func('int1').label('wc');
model.material('mat2').propertyGroup('def').func('int1').set('funcname', 'wc');
model.material('mat2').propertyGroup('def').func('int1').set('table', {'0' '0'; '0.55' '45'; '0.75' '80'; '0.97' '185'; '1' '870'});
model.material('mat2').propertyGroup('def').func('int1').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('int1').set('fununit', {'kg/m^3'});
model.material('mat2').propertyGroup('def').func('int1').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('int2').label('Dw');
model.material('mat2').propertyGroup('def').func('int2').set('funcname', 'Dw');
model.material('mat2').propertyGroup('def').func('int2').set('table', {'0' '1.32e-13'; '0.65' '1.32e-13'; '1' '8.03e-11'});
model.material('mat2').propertyGroup('def').func('int2').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('int2').set('fununit', {'m^2/s'});
model.material('mat2').propertyGroup('def').func('int2').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('an1').label('delta_p');
model.material('mat2').propertyGroup('def').func('an1').set('funcname', 'delta_p');
model.material('mat2').propertyGroup('def').func('an1').set('expr', 'max(7e-13*exp(2.84*phi),0)');
model.material('mat2').propertyGroup('def').func('an1').set('args', {'phi'});
model.material('mat2').propertyGroup('def').func('an1').set('fununit', 's');
model.material('mat2').propertyGroup('def').func('an1').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('an1').set('plotargs', {'phi' '0' '1'});
model.material('mat2').propertyGroup('def').func('int3').label('k');
model.material('mat2').propertyGroup('def').func('int3').set('funcname', 'k');
model.material('mat2').propertyGroup('def').func('int3').set('table', {'0' '0.1'; '0.97' '0.15'; '1' '0.6'});
model.material('mat2').propertyGroup('def').func('int3').set('interp', 'piecewisecubic');
model.material('mat2').propertyGroup('def').func('int3').set('fununit', {'W/(m*K)'});
model.material('mat2').propertyGroup('def').func('int3').set('argunit', {'1'});
model.material('mat2').propertyGroup('def').func('an2').label('mu_vrf');
model.material('mat2').propertyGroup('def').func('an2').set('funcname', 'mu_vrf');
model.material('mat2').propertyGroup('def').func('an2').set('expr', 'max(2.01E-7*T^0.81/p/delta_p(phi),0)');
model.material('mat2').propertyGroup('def').func('an2').set('args', {'T' 'p' 'phi'});
model.material('mat2').propertyGroup('def').func('an2').set('fununit', '1');
model.material('mat2').propertyGroup('def').func('an2').set('argunit', {'K' 'Pa' '1'});
model.material('mat2').propertyGroup('def').func('an2').set('plotaxis', {'off' 'off' 'on'});
model.material('mat2').propertyGroup('def').func('an2').set('plotfixedvalue', {'293.15' '1e5' '0'});
model.material('mat2').propertyGroup('def').func('an2').set('plotargs', {'T' '293.15' '293.15'; 'p' '1e5' '1e5'; 'phi' '0' '1'});
model.material('mat2').propertyGroup('def').set('density', '532');
model.material('mat2').propertyGroup('def').set('heatcapacity', '2700');
model.material('mat2').propertyGroup('def').set('thermalconductivity', {'k(phi)' '0' '0' '0' 'k(phi)' '0' '0' '0' 'k(phi)'});
model.material('mat2').propertyGroup('def').set('diffusion', {'Dw(phi)' '0' '0' '0' 'Dw(phi)' '0' '0' '0' 'Dw(phi)'});
model.material('mat2').propertyGroup('def').set('watercontent', 'wc(phi)');
model.material('mat2').propertyGroup('def').set('vaporpermeability', {'delta_p(phi)' '0' '0' '0' 'delta_p(phi)' '0' '0' '0' 'delta_p(phi)'});
model.material('mat2').propertyGroup('def').set('vaporresistancefactor', {'mu_vrf(T,pA,phi)' '0' '0' '0' 'mu_vrf(T,pA,phi)' '0' '0' '0' 'mu_vrf(T,pA,phi)'});
model.material('mat2').propertyGroup('def').addInput('relativehumidity');
model.material('mat2').propertyGroup('def').addInput('pressure');
model.material('mat2').propertyGroup('def').addInput('temperature');
model.material('mat1').selection.named('geom1_sel2');
model.material('mat2').selection.named('geom1_sel4');

model.physics('tcs').selection.named('geom1_sel3');
model.physics('tcs').prop('SpeciesProperties').set('FromMassConstraint', 3);
model.physics('tcs').feature('cdm1').set('rho_src', 'root.comp1.chem.rho_chem');
model.physics('tcs').feature('cdm1').setIndex('DiffusivityFrom', 'comp1.chem.D_C2H6O_H2O', 0, 0);
model.physics('tcs').feature('cdm1').setIndex('DiffusivityFrom', 'comp1.chem.D_C2H6O_N2', 1, 0);
model.physics('tcs').feature('cdm1').setIndex('DiffusivityFrom', 'comp1.chem.D_H2O_N2', 2, 0);
model.physics('tcs').feature('init1').setIndex('w0', 'wEth0', 0);
model.physics('tcs').feature('init1').setIndex('w0', 'wW0', 1);
model.physics('tcs').feature.remove('vin1');
model.physics('tcs').feature('vl1').selection.set([8]);
model.physics('tcs').feature('vl1').set('pressureModel', 'Thermodynamics');
model.physics('tcs').feature('vl1').set('chemTag', 'chem');
model.physics('tcs').feature('vl1').setIndex('ThermodynamicsSpecies', true, 0);
model.physics('tcs').feature('vl1').setIndex('ThermodynamicsSpecies', true, 1);
model.physics('tcs').feature('vl1').set('LiquidPhaseConcentrationType', 'VolumeFraction');
model.physics('tcs').feature('vl1').setIndex('VolumeFraction', 'abv', 0, 0);
model.physics('tcs').feature('vl1').setIndex('VolumeFraction', 0, 1, 0);
model.physics('tcs').feature('vl1').setIndex('VolumeFraction', '1-abv', 2, 0);
model.physics('spf').selection.named('geom1_sel3');
model.physics('spf').prop('PhysicalModelProperty').set('Compressibility', 'CompressibleMALT03');
model.physics('spf').prop('PhysicalModelProperty').set('IncludeGravity', true);
model.physics('spf').prop('PhysicalModelProperty').set('pref', 'p0');
model.physics('spf').create('wallbc2', 'WallBC', 1);
model.physics('spf').feature('wallbc2').label('Vapor-Liquid Slip');
model.physics('spf').feature('wallbc2').selection.set([8]);
model.physics('spf').feature('wallbc2').set('BoundaryCondition', 'NavierSlip');
model.physics('ht').feature('init1').set('Tinit', 'T0');
model.physics('ht').create('solid1', 'SolidHeatTransferModel', 2);
model.physics('ht').feature('solid1').selection.set([1 2 3]);
model.physics('ht').create('bhs1', 'BoundaryHeatSource', 1);
model.physics('ht').feature('bhs1').selection.named('geom1_sel5');
model.physics('ht').feature('bhs1').set('Qb_input_src', 'root.comp1.tcs.vl1.Qvap');
model.physics('ht').create('temp1', 'TemperatureBoundary', 1);
model.physics('ht').feature('temp1').selection.set([2]);
model.physics('ht').feature('temp1').set('T0', 'T0');

model.mesh('mesh1').automatic(false);
model.mesh('mesh1').create('size3', 'Size');
model.mesh('mesh1').feature.move('size3', 3);
model.mesh('mesh1').feature('size3').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size3').selection.set([32]);
model.mesh('mesh1').feature('size3').set('table', 'cfd');
model.mesh('mesh1').feature('size3').set('hauto', 3);
model.mesh('mesh1').feature('size3').set('custom', true);
model.mesh('mesh1').feature('size3').set('hmaxactive', true);
model.mesh('mesh1').feature('size3').set('hmax', 0.01);
model.mesh('mesh1').create('size4', 'Size');
model.mesh('mesh1').feature('size4').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size4').selection.set([35 36]);
model.mesh('mesh1').feature('size4').set('table', 'cfd');
model.mesh('mesh1').feature('size4').set('hauto', 3);
model.mesh('mesh1').feature('size4').set('custom', true);
model.mesh('mesh1').feature('size4').set('hmaxactive', true);
model.mesh('mesh1').feature('size4').set('hmax', '0.75[cm]');
model.mesh('mesh1').feature('ftri1').create('size1', 'Size');
model.mesh('mesh1').feature('ftri1').feature('size1').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri1').feature('size1').selection.set([5]);
model.mesh('mesh1').feature('ftri1').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('ftri1').feature('size1').set('hauto', 6);
model.mesh('mesh1').feature('ftri1').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgradactive', true);
model.mesh('mesh1').feature('ftri1').feature('size1').set('hgrad', 1.15);
model.mesh('mesh1').feature('bl1').selection.set([3 4 5]);
model.mesh('mesh1').feature('bl1').feature('blp1').selection.set([7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 27 29 30 31 32 33 34]);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blnlayers', 4);
model.mesh('mesh1').feature('bl1').feature('blp1').set('blhminfact', 2);
model.mesh('mesh1').run('bl1');
model.mesh('mesh1').feature.remove('size1');
model.mesh('mesh1').feature('size2').selection.set([7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 25 26 28 31 32 34]);
model.mesh('mesh1').feature('size2').set('hauto', 2);
model.mesh('mesh1').create('size5', 'Size');
model.mesh('mesh1').feature.move('size5', 4);
model.mesh('mesh1').feature('size5').selection.geom('geom1', 1);
model.mesh('mesh1').feature('size5').selection.set([7]);
model.mesh('mesh1').feature('size5').set('table', 'cfd');
model.mesh('mesh1').feature('size5').set('hauto', 2);
model.mesh('mesh1').create('ftri2', 'FreeTri');
model.mesh('mesh1').feature.move('ftri2', 1);
model.mesh('mesh1').feature('ftri2').selection.geom('geom1', 2);
model.mesh('mesh1').feature('ftri2').selection.set([4]);
model.mesh('mesh1').feature('ftri2').create('size1', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size1').set('table', 'cfd');
model.mesh('mesh1').feature('ftri2').feature('size1').set('hauto', 2);
model.mesh('mesh1').feature('ftri2').feature('size1').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri2').feature('size1').set('hmax', 0.0015);
model.mesh('mesh1').feature('ftri2').create('size2', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size2').selection.geom('geom1', 0);
model.mesh('mesh1').feature('ftri2').feature('size2').selection.set([19]);
model.mesh('mesh1').feature('ftri2').feature('size2').set('table', 'cfd');
model.mesh('mesh1').feature('ftri2').feature('size2').set('hauto', 2);
model.mesh('mesh1').feature('ftri2').feature('size2').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size2').set('hmaxactive', true);
model.mesh('mesh1').feature('ftri2').feature('size2').set('hmax', '3e-4');
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').feature('ftri2').create('size3', 'Size');
model.mesh('mesh1').feature('ftri2').feature('size3').selection.geom('geom1', 1);
model.mesh('mesh1').feature('ftri2').feature('size3').selection.set([25 26]);
model.mesh('mesh1').feature('ftri2').feature('size3').set('custom', true);
model.mesh('mesh1').feature('ftri2').feature('size3').set('hcurveactive', true);
model.mesh('mesh1').feature('ftri2').feature('size3').set('hcurve', 0.1);
model.mesh('mesh1').run('ftri2');
model.mesh('mesh1').run;

model.study('std1').create('param', 'Parametric');
model.study('std1').feature('param').setIndex('pname', 'abv', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('pname', 'abv', 0);
model.study('std1').feature('param').setIndex('plistarr', '', 0);
model.study('std1').feature('param').setIndex('punit', '', 0);
model.study('std1').feature('param').setIndex('plistarr', '0.01 0.15 0.4 0.99', 0);

model.sol.create('sol1');

model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([4]);
model.mesh('mesh1').stat.selection.geom(2);
model.mesh('mesh1').stat.selection.set([4]);

model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.1,1)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.005);
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.05);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolmethod', {'comp1_p' 'scaled' 'comp1_T' 'global' 'comp1_u' 'global' 'comp1_wEth' 'global' 'comp1_wEth_lm' 'global'  ...
'comp1_wW' 'global' 'comp1_wW_lm' 'global'});
model.sol('sol1').feature('t1').set('atol', {'comp1_p' '1e-3' 'comp1_T' '1e-3' 'comp1_u' '1e-3' 'comp1_wEth' '1e-3' 'comp1_wEth_lm' '1e-3'  ...
'comp1_wW' '1e-3' 'comp1_wW_lm' '1e-3'});
model.sol('sol1').feature('t1').set('atolvaluemethod', {'comp1_p' 'factor' 'comp1_T' 'factor' 'comp1_u' 'factor' 'comp1_wEth' 'factor' 'comp1_wEth_lm' 'factor'  ...
'comp1_wW' 'factor' 'comp1_wW_lm' 'factor'});
model.sol('sol1').feature('t1').set('atolfactor', {'comp1_p' '1' 'comp1_T' '0.1' 'comp1_u' '0.1' 'comp1_wEth' '0.1' 'comp1_wEth_lm' '0.1'  ...
'comp1_wW' '0.1' 'comp1_wW_lm' '0.1'});
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('estrat', 'exclude');
model.sol('sol1').feature('t1').set('rhoinf', 0.5);
model.sol('sol1').feature('t1').set('predictor', 'constant');
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('stabcntrl', true);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.01');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('seDef', 'Segregated');
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_u' 'comp1_p' 'comp1_T' 'comp1_wEth' 'comp1_wW' 'comp1_wEth_lm' 'comp1_wW_lm'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subdamp', 0.5);
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('subjtech', 'once');
model.sol('sol1').feature('t1').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature('d1').label('Direct, reacting_flow');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'd1');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Reacting Flow');
model.sol('sol1').feature('t1').feature('se1').set('ntolfact', 0.5);
model.sol('sol1').feature('t1').feature('se1').set('segstabacc', 'segaacc');
model.sol('sol1').feature('t1').feature('se1').set('segaaccdim', 5);
model.sol('sol1').feature('t1').feature('se1').set('segaaccmix', 0.9);
model.sol('sol1').feature('t1').feature('se1').set('segaaccdelay', 1);
model.sol('sol1').feature('t1').feature('se1').set('maxsegiter', 10);
model.sol('sol1').feature('t1').feature('se1').create('ll1', 'LowerLimit');
model.sol('sol1').feature('t1').feature('se1').feature('ll1').set('lowerlimit', 'comp1.T 0 ');
model.sol('sol1').feature('t1').create('i1', 'Iterative');
model.sol('sol1').feature('t1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('t1').feature('i1').set('prefuntype', 'left');
model.sol('sol1').feature('t1').feature('i1').set('itrestart', 50);
model.sol('sol1').feature('t1').feature('i1').set('rhob', 20);
model.sol('sol1').feature('t1').feature('i1').set('maxlinit', 100);
model.sol('sol1').feature('t1').feature('i1').set('nlinnormuse', 'on');
model.sol('sol1').feature('t1').feature('i1').label('AMG, reacting_flow');
model.sol('sol1').feature('t1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('prefun', 'saamg');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('mgcycle', 'v');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('maxcoarsedof', 80000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('strconn', 0.02);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('nullspace', 'constant');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('usesmooth', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('saamgcompwise', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('loweramg', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').set('compactaggregation', false);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('iter', 0);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('pr').feature('sc1').set('vankavars', {'comp1_wEth_lm' 'comp1_wW_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').create('sc1', 'SCGS');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('linesweeptype', 'ssor');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('iter', 1);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsmethod', 'lines');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsvertexrelax', 0.7);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('relax', 0.5);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgssolv', 'stored');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('approxscgs', true);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('scgsdirectmaxsize', 1000);
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavarsactive', 'on');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('po').feature('sc1').set('vankavars', {'comp1_wEth_lm' 'comp1_wW_lm'});
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').create('d1', 'Direct');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('t1').feature('i1').feature('mg1').feature('cs').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').feature('t1').feature.remove('seDef');
model.sol('sol1').attach('std1');

model.batch.create('p1', 'Parametric');
model.batch('p1').study('std1');
model.batch('p1').create('so1', 'Solutionseq');
model.batch('p1').feature('so1').set('seq', 'sol1');
model.batch('p1').feature('so1').set('store', 'on');
model.batch('p1').feature('so1').set('clear', 'on');
model.batch('p1').feature('so1').set('psol', 'none');
model.batch('p1').set('pname', {'abv'});
model.batch('p1').set('plistarr', {'0.01 0.15 0.4 0.99'});
model.batch('p1').set('sweeptype', 'sparse');
model.batch('p1').set('probesel', 'all');
model.batch('p1').set('probes', {});
model.batch('p1').set('plot', 'off');
model.batch('p1').set('err', 'on');
model.batch('p1').attach('std1');
model.batch('p1').set('control', 'param');

model.study('std1').feature('time').set('tlist', 'range(0,0.1,1) range(1.25,0.25,4) range(5,1,20) range(25,5,120) range(130,10,240) range(270,30,900)');

model.sol('sol1').feature('v1').feature('comp1_T').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_T').set('scaleval', 'T0');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', 0.01);
model.sol('sol1').feature('v1').feature('comp1_wEth').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_wW').set('scalemethod', 'manual');
model.sol('sol1').feature('t1').set('initialstepbdfactive', true);
model.sol.create('sol2');
model.sol('sol2').study('std1');
model.sol('sol2').label('Parametric Solutions 1');

model.batch('p1').feature('so1').set('psol', 'sol2');
model.batch('p1').getInitialValue;

model.result.create('pg1', 'PlotGroup2D');
model.result('pg1').set('data', 'dset2');
model.result('pg1').setIndex('looplevel', 1, 0);
model.result('pg1').setIndex('looplevel', 1, 1);
model.result('pg1').label('Vapor Pressure, Eth (tcs)');
model.result('pg1').set('titletype', 'custom');
model.result('pg1').set('prefixintitle', 'Species Eth:');
model.result('pg1').set('expressionintitle', false);
model.result('pg1').set('typeintitle', true);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'tcs.p_wEth'});
model.result('pg1').create('str1', 'Streamline');
model.result('pg1').feature('str1').set('expr', {'tcs.tflux_wEthr' 'tcs.tflux_wEthz'});
model.result('pg1').feature('str1').set('posmethod', 'uniform');
model.result('pg1').feature('str1').set('recover', 'pprint');
model.result('pg1').feature('str1').set('pointtype', 'arrow');
model.result('pg1').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg1').feature('str1').set('color', 'gray');
model.result.dataset.create('rev1', 'Revolve2D');
model.result.dataset('rev1').set('data', 'dset2');
model.result.dataset('rev1').set('revangle', 225);
model.result.dataset('rev1').set('startangle', -90);
model.result.dataset('rev1').set('hasspacevars', false);
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'rev1');
model.result('pg2').setIndex('looplevel', 1, 0);
model.result('pg2').setIndex('looplevel', 1, 1);
model.result('pg2').label('Vapor Pressure, Eth, 3D (tcs)');
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'tcs.p_wEth'});
model.result('pg2').set('titletype', 'custom');
model.result('pg2').set('typeintitle', false);
model.result('pg2').set('prefixintitle', 'Species Eth:');
model.result('pg2').set('expressionintitle', false);
model.result.create('pg3', 'PlotGroup2D');
model.result('pg3').set('data', 'dset2');
model.result('pg3').setIndex('looplevel', 1, 0);
model.result('pg3').setIndex('looplevel', 1, 1);
model.result('pg3').label('Vapor Pressure, W (tcs)');
model.result('pg3').set('titletype', 'custom');
model.result('pg3').set('prefixintitle', 'Species W:');
model.result('pg3').set('expressionintitle', false);
model.result('pg3').set('typeintitle', true);
model.result('pg3').create('surf1', 'Surface');
model.result('pg3').feature('surf1').set('expr', {'tcs.p_wW'});
model.result('pg3').create('str1', 'Streamline');
model.result('pg3').feature('str1').set('expr', {'tcs.tflux_wWr' 'tcs.tflux_wWz'});
model.result('pg3').feature('str1').set('posmethod', 'uniform');
model.result('pg3').feature('str1').set('recover', 'pprint');
model.result('pg3').feature('str1').set('pointtype', 'arrow');
model.result('pg3').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg3').feature('str1').set('color', 'gray');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'rev1');
model.result('pg4').setIndex('looplevel', 1, 0);
model.result('pg4').setIndex('looplevel', 1, 1);
model.result('pg4').label('Vapor Pressure, W, 3D (tcs)');
model.result('pg4').create('surf1', 'Surface');
model.result('pg4').feature('surf1').set('expr', {'tcs.p_wW'});
model.result('pg4').set('titletype', 'custom');
model.result('pg4').set('typeintitle', false);
model.result('pg4').set('prefixintitle', 'Species W:');
model.result('pg4').set('expressionintitle', false);
model.result.create('pg5', 'PlotGroup2D');
model.result('pg5').set('data', 'dset2');
model.result('pg5').setIndex('looplevel', 1, 0);
model.result('pg5').setIndex('looplevel', 1, 1);
model.result('pg5').label('Vapor Pressure, N2 (tcs)');
model.result('pg5').set('titletype', 'custom');
model.result('pg5').set('prefixintitle', 'Species N2:');
model.result('pg5').set('expressionintitle', false);
model.result('pg5').set('typeintitle', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', {'tcs.p_wN2'});
model.result('pg5').create('str1', 'Streamline');
model.result('pg5').feature('str1').set('expr', {'tcs.tflux_wN2r' 'tcs.tflux_wN2z'});
model.result('pg5').feature('str1').set('posmethod', 'uniform');
model.result('pg5').feature('str1').set('recover', 'pprint');
model.result('pg5').feature('str1').set('pointtype', 'arrow');
model.result('pg5').feature('str1').set('arrowlength', 'logarithmic');
model.result('pg5').feature('str1').set('color', 'gray');
model.result.create('pg6', 'PlotGroup3D');
model.result('pg6').set('data', 'rev1');
model.result('pg6').setIndex('looplevel', 1, 0);
model.result('pg6').setIndex('looplevel', 1, 1);
model.result('pg6').label('Vapor Pressure, N2, 3D (tcs)');
model.result('pg6').create('surf1', 'Surface');
model.result('pg6').feature('surf1').set('expr', {'tcs.p_wN2'});
model.result('pg6').set('titletype', 'custom');
model.result('pg6').set('typeintitle', false);
model.result('pg6').set('prefixintitle', 'Species N2:');
model.result('pg6').set('expressionintitle', false);
model.result.dataset('dset2').set('geom', 'geom1');
model.result.create('pg7', 'PlotGroup2D');
model.result('pg7').label('Velocity (spf)');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('dataisaxisym', 'off');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('data', 'dset2');
model.result('pg7').setIndex('looplevel', 1, 0);
model.result('pg7').setIndex('looplevel', 1, 1);
model.result('pg7').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg1');
model.result('pg7').feature.create('surf1', 'Surface');
model.result('pg7').feature('surf1').label('Surface');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('expr', 'spf.U');
model.result('pg7').feature('surf1').set('smooth', 'internal');
model.result('pg7').feature('surf1').set('showsolutionparams', 'on');
model.result('pg7').feature('surf1').set('data', 'parent');
model.result.create('pg8', 'PlotGroup2D');
model.result('pg8').label('Pressure (spf)');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 1, 1);
model.result('pg8').set('dataisaxisym', 'off');
model.result('pg8').set('frametype', 'spatial');
model.result('pg8').set('data', 'dset2');
model.result('pg8').setIndex('looplevel', 1, 0);
model.result('pg8').setIndex('looplevel', 1, 1);
model.result('pg8').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pg2');
model.result('pg8').feature.create('con1', 'Contour');
model.result('pg8').feature('con1').label('Contour');
model.result('pg8').feature('con1').set('showsolutionparams', 'on');
model.result('pg8').feature('con1').set('expr', 'p');
model.result('pg8').feature('con1').set('number', 40);
model.result('pg8').feature('con1').set('levelrounding', false);
model.result('pg8').feature('con1').set('smooth', 'internal');
model.result('pg8').feature('con1').set('showsolutionparams', 'on');
model.result('pg8').feature('con1').set('data', 'parent');
model.result.dataset('rev1').set('data', 'dset2');
model.result.create('pg9', 'PlotGroup3D');
model.result('pg9').label('Velocity, 3D (spf)');
model.result('pg9').set('frametype', 'spatial');
model.result('pg9').set('data', 'rev1');
model.result('pg9').setIndex('looplevel', 1, 0);
model.result('pg9').setIndex('looplevel', 1, 1);
model.result('pg9').set('defaultPlotID', 'ResultDefaults_SinglePhaseFlow/icom1/pdef1/pcond1/pcond1/pg1');
model.result('pg9').feature.create('surf1', 'Surface');
model.result('pg9').feature('surf1').label('Surface');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('expr', 'spf.U');
model.result('pg9').feature('surf1').set('smooth', 'internal');
model.result('pg9').feature('surf1').set('showsolutionparams', 'on');
model.result('pg9').feature('surf1').set('data', 'parent');
model.result.create('pg10', 'PlotGroup2D');
model.result('pg10').label('Temperature (ht)');
model.result('pg10').set('data', 'dset2');
model.result('pg10').setIndex('looplevel', 1, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('dataisaxisym', 'off');
model.result('pg10').set('data', 'dset2');
model.result('pg10').setIndex('looplevel', 1, 0);
model.result('pg10').setIndex('looplevel', 1, 1);
model.result('pg10').set('defaultPlotID', 'ht/HT_PhysicsInterfaces/icom8/pdef1/pcond2/pcond4/pg2');
model.result('pg10').feature.create('surf1', 'Surface');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('solutionparams', 'parent');
model.result('pg10').feature('surf1').set('expr', 'T');
model.result('pg10').feature('surf1').set('colortable', 'HeatCameraLight');
model.result('pg10').feature('surf1').set('showsolutionparams', 'on');
model.result('pg10').feature('surf1').set('data', 'parent');
model.result('pg1').run;
model.result.create('pg11', 'PlotGroup2D');
model.result('pg11').run;
model.result.dataset.create('mir1', 'Mirror2D');
model.result.dataset('mir1').set('removesymelem', true);
model.result('pg11').run;
model.result('pg11').label('Array: Velocity, Temperature, and Mass Fractions');
model.result('pg11').set('data', 'mir1');
model.result('pg11').set('titletype', 'manual');
model.result('pg11').set('paramindicator', 'eval(abv*100)% Ethanol, Time =eval(t) s');
model.result('pg11').set('showlegendsmaxmin', true);
model.result('pg11').set('showlegendsunit', true);
model.result('pg11').set('legendactive', true);
model.result('pg11').set('legendnotation', 'scientific');
model.result('pg11').set('plotarrayenable', true);
model.result('pg11').set('arrayshape', 'square');
model.result('pg11').set('order', 'columnmajor');
model.result('pg11').set('relrowpadding', 0.1);
model.result('pg11').set('relcolumnpadding', 0.1);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('arraydim', '2');
model.result('pg11').feature('surf1').label('Velocity');
model.result('pg11').feature('surf1').set('expr', 'spf.U');
model.result('pg11').run;
model.result('pg11').create('surf2', 'Surface');
model.result('pg11').feature('surf2').set('arraydim', '2');
model.result('pg11').feature('surf2').label('Mass Fraction, Water');
model.result('pg11').feature('surf2').set('expr', 'wW');
model.result('pg11').feature('surf2').set('colortable', 'Disco');
model.result('pg11').feature('surf2').set('manualindexing', true);
model.result('pg11').feature('surf2').set('rowindex', -1);
model.result('pg11').run;
model.result('pg11').create('surf3', 'Surface');
model.result('pg11').feature('surf3').set('arraydim', '2');
model.result('pg11').feature('surf3').label('Temperature');
model.result('pg11').feature('surf3').set('expr', 'T');
model.result('pg11').feature('surf3').set('unit', 'degC');
model.result('pg11').feature('surf3').set('colortable', 'HeatCamera');
model.result('pg11').feature('surf3').set('manualindexing', true);
model.result('pg11').feature('surf3').set('colindex', 1);
model.result('pg11').feature('surf2').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature.duplicate('surf4', 'surf2');
model.result('pg11').feature('surf4').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('surf4').label('Mass Fraction, Ethanol');
model.result('pg11').feature('surf4').set('expr', 'wEth');
model.result('pg11').feature('surf4').set('colindex', 1);
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').set('legendpos', 'rightdouble');
model.result('pg11').create('arws1', 'ArrowSurface');
model.result('pg11').feature('arws1').set('arraydim', '2');
model.result('pg11').feature('arws1').set('xnumber', 12);
model.result('pg11').feature('arws1').set('ynumber', 12);
model.result('pg11').feature('arws1').set('arrowtype', 'cone');
model.result('pg11').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg11').feature('arws1').set('logrange', 20);
model.result('pg11').feature('arws1').set('color', 'white');
model.result('pg11').feature('arws1').set('manualindexing', true);
model.result('pg11').run;
model.result('pg11').run;
model.result('pg11').create('ann1', 'Annotation');
model.result('pg11').feature('ann1').set('arraydim', '2');
model.result('pg11').feature('ann1').label('Annotation: Velocity');
model.result('pg11').feature('ann1').set('text', 'Velocity');
model.result('pg11').feature('ann1').set('posxexpr', -0.5);
model.result('pg11').feature('ann1').set('posyexpr', 0.5);
model.result('pg11').feature('ann1').set('showpoint', false);
model.result('pg11').feature('ann1').set('belongstoplotarray', false);
model.result('pg11').feature('ann1').set('anchorpoint', 'lowerleft');
model.result('pg11').feature.duplicate('ann2', 'ann1');
model.result('pg11').feature('ann2').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann2').label('Annotation: Temperature');
model.result('pg11').feature('ann2').set('text', 'Temperature');
model.result('pg11').feature('ann2').set('posxexpr', 0.6);
model.result('pg11').feature.duplicate('ann3', 'ann2');
model.result('pg11').feature('ann3').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann3').label('Annotation: Water');
model.result('pg11').feature('ann3').set('text', 'Water');
model.result('pg11').feature('ann3').set('posxexpr', -0.5);
model.result('pg11').feature('ann3').set('posyexpr', -0.7);
model.result('pg11').feature.duplicate('ann4', 'ann3');
model.result('pg11').feature('ann4').set('arraydim', '2');
model.result('pg11').run;
model.result('pg11').feature('ann4').label('Annotation: Ethanol');
model.result('pg11').feature('ann4').set('text', 'Ethanol');
model.result('pg11').feature('ann4').set('posxexpr', 0.6);

model.study('std1').feature('time').set('plot', true);
model.study('std1').feature('time').set('plotgroup', 'pg11');
model.study('std1').feature('time').set('plotfreq', 'tsteps');
model.study('std1').feature('param').set('plot', true);
model.study('std1').feature('param').set('plotgroup', 'pg11');

model.batch('p1').run('compute');

model.result('pg1').run;
model.result.dataset('mir1').set('data', 'dset2');
model.result('pg11').run;
model.result('pg11').set('showlegends', false);
model.result('pg11').setIndex('looplevel', 1, 1);
model.result('pg11').run;
model.result('pg11').setIndex('looplevel', 2, 1);
model.result('pg11').run;
model.result('pg11').set('showlegends', true);
model.result('pg11').setIndex('looplevel', 1, 1);
model.result.create('pg12', 'PlotGroup2D');
model.result('pg12').run;
model.result('pg12').label('Array: Velocity all cases');
model.result('pg12').set('data', 'mir1');
model.result('pg12').set('titletype', 'manual');
model.result('pg12').set('paramindicator', 'Time =eval(t) s');
model.result('pg12').set('plotarrayenable', true);
model.result('pg12').set('arrayshape', 'square');
model.result('pg12').set('relrowpadding', 0.1);
model.result('pg12').set('relcolumnpadding', 0.1);
model.result('pg12').create('surf1', 'Surface');
model.result('pg12').feature('surf1').set('arraydim', '2');
model.result('pg12').feature('surf1').label('abv = 0.01');
model.result('pg12').feature('surf1').set('expr', 'withsol(''sol2'',spf.U,setval(abv,0.01,t,t))');
model.result('pg12').run;
model.result('pg12').feature.duplicate('surf2', 'surf1');
model.result('pg12').feature('surf2').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('surf2').label('abv = 0.15');
model.result('pg12').feature('surf2').set('expr', 'withsol(''sol2'',spf.U,setval(abv,0.15,t,t))');
model.result('pg12').feature('surf2').set('manualindexing', true);
model.result('pg12').feature('surf2').set('rowindex', -1);
model.result('pg12').feature('surf2').set('inheritplot', 'surf1');
model.result('pg12').run;
model.result('pg12').feature.duplicate('surf3', 'surf2');
model.result('pg12').feature('surf3').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('surf3').label('abv = 0.4');
model.result('pg12').feature('surf3').set('expr', 'withsol(''sol2'',spf.U,setval(abv,0.4,t,t))');
model.result('pg12').feature('surf3').set('rowindex', 0);
model.result('pg12').feature('surf3').set('colindex', 1);
model.result('pg12').run;
model.result('pg12').feature.duplicate('surf4', 'surf3');
model.result('pg12').feature('surf4').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('surf4').label('abv = 0.99');
model.result('pg12').feature('surf4').set('expr', 'withsol(''sol2'',spf.U,setval(abv,0.99,t,t))');
model.result('pg12').feature('surf4').set('rowindex', -1);
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('arws1', 'ArrowSurface');
model.result('pg12').feature('arws1').set('arraydim', '2');
model.result('pg12').feature('arws1').label('Arrow Surface: abv = 0.01');
model.result('pg12').feature('arws1').setIndex('expr', 'withsol(''sol2'',u,setval(abv,0.01,t,t))', 0);
model.result('pg12').feature('arws1').setIndex('expr', 'withsol(''sol2'',w,setval(abv,0.01,t,t))', 1);
model.result('pg12').feature('arws1').set('xnumber', 12);
model.result('pg12').feature('arws1').set('ynumber', 12);
model.result('pg12').feature('arws1').set('arrowtype', 'cone');
model.result('pg12').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg12').feature('arws1').set('logrange', 20);
model.result('pg12').feature('arws1').set('color', 'white');
model.result('pg12').feature('arws1').set('manualindexing', true);
model.result('pg12').feature.duplicate('arws2', 'arws1');
model.result('pg12').feature('arws2').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('arws2').label('Arrow Surface: abv = 0.15');
model.result('pg12').feature('arws2').setIndex('expr', 'withsol(''sol2'',u,setval(abv,0.15,t,t))', 0);
model.result('pg12').feature('arws2').setIndex('expr', 'withsol(''sol2'',w,setval(abv,0.15,t,t))', 1);
model.result('pg12').feature('arws2').set('rowindex', -1);
model.result('pg12').feature.duplicate('arws3', 'arws2');
model.result('pg12').feature('arws3').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('arws3').label('Arrow Surface: abv = 0.4');
model.result('pg12').feature('arws3').setIndex('expr', 'withsol(''sol2'',u,setval(abv,0.4,t,t))', 0);
model.result('pg12').feature('arws3').setIndex('expr', 'withsol(''sol2'',w,setval(abv,0.4,t,t))', 1);
model.result('pg12').feature('arws3').set('rowindex', 0);
model.result('pg12').feature('arws3').set('colindex', 1);
model.result('pg12').feature.duplicate('arws4', 'arws3');
model.result('pg12').feature('arws4').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('arws4').label('Arrow Surface: abv = 0.99');
model.result('pg12').feature('arws4').setIndex('expr', 'withsol(''sol2'',u,setval(abv,0.99,t,t))', 0);
model.result('pg12').feature('arws4').setIndex('expr', 'withsol(''sol2'',w,setval(abv,0.99,t,t))', 1);
model.result('pg12').feature('arws4').set('rowindex', -1);
model.result('pg12').run;
model.result('pg12').feature('surf2').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').create('ann1', 'Annotation');
model.result('pg12').feature('ann1').set('arraydim', '2');
model.result('pg12').feature('ann1').label('Annotation: abv = 0.01');
model.result('pg12').feature('ann1').set('text', 'abv = 0.01');
model.result('pg12').feature('ann1').set('posxexpr', -0.5);
model.result('pg12').feature('ann1').set('posyexpr', 0.5);
model.result('pg12').feature('ann1').set('showpoint', false);
model.result('pg12').feature('ann1').set('anchorpoint', 'lowerleft');
model.result('pg12').feature('ann1').set('belongstoplotarray', false);
model.result('pg12').run;
model.result('pg12').feature.duplicate('ann2', 'ann1');
model.result('pg12').feature('ann2').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('ann2').label('Annotation: abv = 0.4');
model.result('pg12').feature('ann2').set('text', 'abv = 0.4');
model.result('pg12').feature('ann2').set('posxexpr', 0.6);
model.result('pg12').run;
model.result('pg12').feature.duplicate('ann3', 'ann2');
model.result('pg12').feature('ann3').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('ann3').label('Annotation: abv = 0.15');
model.result('pg12').feature('ann3').set('text', 'abv = 0.15');
model.result('pg12').feature('ann3').set('posxexpr', -0.5);
model.result('pg12').feature('ann3').set('posyexpr', -0.7);
model.result('pg12').run;
model.result('pg12').feature.duplicate('ann4', 'ann3');
model.result('pg12').feature('ann4').set('arraydim', '2');
model.result('pg12').run;
model.result('pg12').feature('ann4').label('Annotation: abv = 0.99');
model.result('pg12').feature('ann4').set('text', 'abv = 0.99');
model.result('pg12').feature('ann4').set('posxexpr', 0.6);
model.result('pg12').run;
model.result('pg12').run;
model.result('pg12').set('showlegends', true);
model.result.evaluationGroup.create('eg1', 'EvaluationGroup');
model.result.evaluationGroup('eg1').label('Evaluation: Water Flux');
model.result.evaluationGroup('eg1').set('data', 'dset2');
model.result.evaluationGroup('eg1').create('int1', 'IntLine');
model.result.evaluationGroup('eg1').feature('int1').set('intsurface', true);
model.result.evaluationGroup('eg1').feature('int1').set('tablecols', 'level2');
model.result.evaluationGroup('eg1').feature('int1').selection.named('geom1_sel5');
model.result.evaluationGroup('eg1').feature('int1').setIndex('expr', '-tcs.ntflux_wW', 0);
model.result.evaluationGroup('eg1').feature('int1').setIndex('unit', 'g/h', 0);
model.result.evaluationGroup('eg1').run;
model.result.evaluationGroup('eg1').feature.duplicate('int2', 'int1');
model.result.evaluationGroup('eg1').feature('int2').set('dataseries', 'integral');
model.result.evaluationGroup('eg1').feature('int2').set('dataseriescumulative', true);
model.result.evaluationGroup('eg1').run;
model.result.create('pg13', 'PlotGroup1D');
model.result('pg13').run;
model.result('pg13').create('tblp1', 'Table');
model.result('pg13').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg13').feature('tblp1').set('linewidth', 'preference');
model.result('pg13').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg13').feature('tblp1').set('plotcolumninput', 'manual');
model.result('pg13').feature('tblp1').set('plotcolumns', [2 3 4 5]);
model.result('pg13').feature('tblp1').set('legend', true);
model.result('pg13').feature('tblp1').set('legendmethod', 'manual');
model.result('pg13').feature('tblp1').setIndex('legends', 'abv=0.01', 0);
model.result('pg13').feature('tblp1').setIndex('legends', 'abv=0.15', 1);
model.result('pg13').feature('tblp1').setIndex('legends', 'abv=0.4', 2);
model.result('pg13').feature('tblp1').setIndex('legends', 'abv=0.99', 3);
model.result('pg13').run;
model.result('pg13').feature.duplicate('tblp2', 'tblp1');
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').label('Water Mass Flux');
model.result('pg13').set('data', 'none');
model.result('pg13').set('ylabelactive', true);
model.result('pg13').set('ylabel', 'Vapor Mass Flux (g/h)');
model.result('pg13').set('twoyaxes', true);
model.result('pg13').set('yseclabelactive', true);
model.result('pg13').set('yseclabel', 'Accumulated Mass (g)');
model.result('pg13').setIndex('plotonsecyaxis', true, 1, 1);
model.result('pg13').set('legendlayout', 'outside');
model.result('pg13').set('legendposoutside', 'top');
model.result('pg13').set('legendrowcount', 2);
model.result('pg13').run;
model.result('pg13').feature('tblp2').set('plotcolumns', [6 7 8 9]);
model.result('pg13').feature('tblp2').set('linestyle', 'dashed');
model.result('pg13').feature('tblp2').set('linecolor', 'cyclereset');
model.result('pg13').feature('tblp2').setIndex('legends', 'abv=0.01, Cumulative', 0);
model.result('pg13').feature('tblp2').setIndex('legends', 'abv=0.15, Cumulative', 1);
model.result('pg13').feature('tblp2').setIndex('legends', 'abv=0.4, Cumulative', 2);
model.result('pg13').feature('tblp2').setIndex('legends', 'abv=0.99, Cumulative', 3);
model.result('pg13').run;
model.result('pg13').run;
model.result('pg13').set('axislimits', true);
model.result('pg13').set('ymin', -0.1);
model.result('pg13').set('ymax', 0.2);
model.result('pg13').run;
model.result.evaluationGroup.duplicate('eg2', 'eg1');
model.result.evaluationGroup('eg2').label('Evaluation: Ethanol Flux');
model.result.evaluationGroup('eg2').feature('int1').set('expr', {'tcs.ntflux_wEth'});
model.result.evaluationGroup('eg2').feature('int1').set('descr', {'Normal total flux'});
model.result.evaluationGroup('eg2').feature('int1').set('unit', {'g/h'});
model.result.evaluationGroup('eg2').feature('int1').setIndex('expr', '-tcs.ntflux_wEth', 0);
model.result.evaluationGroup('eg2').feature('int1').setIndex('unit', 'g/h', 0);
model.result.evaluationGroup('eg2').feature('int2').set('expr', {'tcs.ntflux_wEth'});
model.result.evaluationGroup('eg2').feature('int2').set('descr', {'Normal total flux'});
model.result.evaluationGroup('eg2').feature('int2').set('unit', {'g/h'});
model.result.evaluationGroup('eg2').feature('int2').setIndex('expr', '-tcs.ntflux_wEth', 0);
model.result.evaluationGroup('eg2').feature('int2').setIndex('unit', 'g/h', 0);
model.result.evaluationGroup('eg2').run;
model.result('pg13').run;
model.result.duplicate('pg14', 'pg13');
model.result('pg14').run;
model.result('pg14').label('Ethanol Mass Flux');
model.result('pg14').run;
model.result('pg14').feature('tblp1').set('evaluationgroup', 'eg2');
model.result('pg14').run;
model.result('pg14').feature('tblp2').set('evaluationgroup', 'eg2');
model.result('pg14').run;
model.result('pg14').run;
model.result('pg14').set('ymin', 0);
model.result('pg14').set('ymax', 1);
model.result('pg14').set('yminsec', 0);
model.result('pg14').set('ymaxsec', 0.085);
model.result.evaluationGroup.create('eg3', 'EvaluationGroup');
model.result.evaluationGroup('eg3').label('Evaluation: Kinetic Energy');
model.result.evaluationGroup('eg3').set('data', 'dset2');
model.result.evaluationGroup('eg3').create('int1', 'IntSurface');
model.result.evaluationGroup('eg3').feature('int1').set('intvolume', true);
model.result.evaluationGroup('eg3').feature('int1').set('tablecols', 'level2');
model.result.evaluationGroup('eg3').feature('int1').selection.named('geom1_sel3');
model.result.evaluationGroup('eg3').feature('int1').setIndex('expr', 'spf.rho*spf.U', 0);
model.result.evaluationGroup('eg3').feature('int1').setIndex('unit', 'N*s', 0);
model.result.evaluationGroup('eg3').run;
model.result.create('pg15', 'PlotGroup1D');
model.result('pg15').run;
model.result('pg15').label('Kinetic Energy');
model.result('pg15').set('data', 'none');
model.result('pg15').set('ylabelactive', true);
model.result('pg15').set('ylabel', 'Kinetic Energy (N*s)');
model.result('pg15').set('legendlayout', 'outside');
model.result('pg15').create('tblp1', 'Table');
model.result('pg15').feature('tblp1').set('markerpos', 'datapoints');
model.result('pg15').feature('tblp1').set('linewidth', 'preference');
model.result('pg15').feature('tblp1').set('source', 'evaluationgroup');
model.result('pg15').feature('tblp1').set('evaluationgroup', 'eg3');
model.result('pg15').feature('tblp1').set('legend', true);
model.result('pg15').run;
model.result('pg15').feature('tblp1').set('legendmethod', 'manual');
model.result('pg15').feature('tblp1').setIndex('legends', 'abv=0.01', 0);
model.result('pg15').feature('tblp1').setIndex('legends', 'abv=0.15', 1);
model.result('pg15').feature('tblp1').setIndex('legends', 'abv=0.4', 2);
model.result('pg15').feature('tblp1').setIndex('legends', 'abv=0.99', 3);
model.result('pg15').run;
model.result.create('pg16', 'PlotGroup1D');
model.result('pg16').run;
model.result('pg16').label('Surface Temperature');
model.result('pg16').set('data', 'dset2');
model.result('pg16').set('titletype', 'none');
model.result('pg16').set('legendlayout', 'outside');
model.result('pg16').create('ptgr1', 'PointGraph');
model.result('pg16').feature('ptgr1').set('markerpos', 'datapoints');
model.result('pg16').feature('ptgr1').set('linewidth', 'preference');
model.result('pg16').feature('ptgr1').selection.set([4]);
model.result('pg16').feature('ptgr1').set('expr', 'T');
model.result('pg16').feature('ptgr1').set('unit', 'degC');
model.result('pg16').feature('ptgr1').set('legend', true);
model.result('pg16').feature('ptgr1').set('autopoint', false);
model.result('pg16').run;
model.result('pg16').run;
model.result.duplicate('pg17', 'pg16');
model.result('pg17').run;
model.result('pg17').label('Surface Concentration Ethanol');
model.result('pg17').run;
model.result('pg17').feature('ptgr1').set('expr', 'tcs.c_wEth');
model.result('pg17').feature('ptgr1').set('descr', 'Molar concentration');
model.result('pg17').run;
model.result.dataset.create('dset3', 'Solution');
model.result.dataset('dset3').set('solution', 'sol2');
model.result.dataset('dset3').selection.geom('geom1', 2);
model.result.dataset('dset3').selection.named('geom1_sel2');
model.result.dataset.create('rev2', 'Revolve2D');
model.result.dataset('rev2').label('Revolution Glass');
model.result.dataset('rev2').set('data', 'dset3');
model.result.dataset('rev2').set('startangle', -90);
model.result.create('pg18', 'PlotGroup3D');
model.result('pg18').run;
model.result('pg18').set('data', 'rev2');
model.result('pg18').label('Glass and Table');
model.result('pg18').setIndex('looplevel', 2, 1);
model.result('pg18').setIndex('looplevel', 55, 0);
model.result('pg18').set('edges', false);
model.result('pg18').create('vol1', 'Volume');
model.result('pg18').feature('vol1').set('data', 'rev2');
model.result('pg18').feature('vol1').set('titletype', 'none');
model.result('pg18').feature('vol1').set('expr', '1');
model.result('pg18').feature('vol1').create('mtrl1', 'MaterialAppearance');
model.result('pg18').run;
model.result('pg18').feature('vol1').feature('mtrl1').set('appearance', 'custom');
model.result('pg18').feature('vol1').feature('mtrl1').set('family', 'custom');
model.result('pg18').feature('vol1').feature('mtrl1').set('customspecular', [0.9372549057006836 0.9372549057006836 0.9215686321258545]);
model.result('pg18').feature('vol1').feature('mtrl1').set('customdiffuse', [0.9019607901573181 0.9019607901573181 1]);
model.result('pg18').feature('vol1').feature('mtrl1').set('customambient', [0.9019607901573181 0.9019607901573181 1]);
model.result('pg18').feature('vol1').feature('mtrl1').set('noise', true);
model.result('pg18').feature('vol1').feature('mtrl1').set('noisescale', 0.1);
model.result('pg18').feature('vol1').feature('mtrl1').set('noisefreq', 30);
model.result('pg18').feature('vol1').feature('mtrl1').set('colornoise', true);
model.result('pg18').feature('vol1').feature('mtrl1').set('colornoisescale', 1);
model.result('pg18').feature('vol1').feature('mtrl1').set('colornoisefrequency', 10);
model.result('pg18').feature('vol1').feature('mtrl1').set('noisecolorblend', 0.55);
model.result('pg18').feature('vol1').feature('mtrl1').set('customnoisecolor', [0.062745101749897 0.12156862765550613 0.33725491166114807]);
model.result('pg18').feature('vol1').feature('mtrl1').set('transparency', 0.5);
model.result('pg18').feature('vol1').feature('mtrl1').set('fresnel', 0.9);
model.result('pg18').feature('vol1').feature('mtrl1').set('roughness', 0.25);
model.result('pg18').feature('vol1').feature('mtrl1').set('metallic', 0.85);
model.result('pg18').feature('vol1').feature('mtrl1').set('pearl', 0.05);
model.result('pg18').feature('vol1').feature('mtrl1').set('diffusewrap', 0.45);
model.result('pg18').feature('vol1').feature('mtrl1').set('clearcoat', 0.3);
model.result('pg18').feature('vol1').feature('mtrl1').set('reflectance', 0.75);
model.result.dataset.duplicate('dset4', 'dset3');
model.result.dataset('dset4').selection.geom('geom1', 2);
model.result.dataset('dset4').selection.set([1]);
model.result.dataset.duplicate('rev3', 'rev2');
model.result.dataset('rev3').label('Revolution Table');
model.result.dataset('rev3').set('data', 'dset4');
model.result('pg18').run;
model.result('pg18').create('vol2', 'Volume');
model.result('pg18').feature('vol2').set('data', 'rev3');
model.result('pg18').feature('vol2').set('expr', '1');
model.result('pg18').feature('vol2').set('titletype', 'none');
model.result('pg18').feature('vol2').create('mtrl1', 'MaterialAppearance');
model.result('pg18').run;
model.result('pg18').feature('vol2').feature('mtrl1').set('appearance', 'custom');
model.result('pg18').feature('vol2').feature('mtrl1').set('family', 'wood');
model.result.dataset.create('cpl1', 'CutPlane');
model.result('pg18').run;
model.result('pg18').create('surf1', 'Surface');
model.result('pg18').feature('surf1').set('data', 'cpl1');
model.result('pg18').feature('surf1').set('solutionparams', 'parent');
model.result('pg18').feature('surf1').set('expr', 'spf.U');
model.result('pg18').feature('surf1').create('tran1', 'Transparency');
model.result('pg18').run;
model.result('pg18').feature('surf1').feature('tran1').set('transparency', 0.4);
model.result('pg18').run;
model.result('pg18').run;
model.result('pg18').create('arws1', 'ArrowSurface');
model.result('pg18').feature('arws1').set('revcoordsys', 'cylindrical');
model.result('pg18').feature('arws1').set('data', 'cpl1');
model.result('pg18').feature('arws1').set('solutionparams', 'parent');
model.result('pg18').feature('arws1').setIndex('expr', 'u', 0);
model.result('pg18').feature('arws1').setIndex('expr', 'v', 1);
model.result('pg18').feature('arws1').set('expr', {'u' 'v' 'w'});
model.result('pg18').feature('arws1').set('arrowcount', 300);
model.result('pg18').feature('arws1').set('arrowlength', 'logarithmic');
model.result('pg18').feature('arws1').set('color', 'black');
model.result('pg18').run;
model.result('pg18').run;

model.view('view4').camera.set('zoomanglefull', 7.55587244033813);
model.view('view4').camera.setIndex('position', '6.0715093612670', 0);
model.view('view4').camera.setIndex('position', -3.836441040039062, 1);
model.view('view4').camera.setIndex('position', '3.41434192657470', 2);
model.view('view4').camera.setIndex('target', -0.0537457466125488, 0);
model.view('view4').camera.setIndex('target', -0.00538253784179687, 1);
model.view('view4').camera.setIndex('target', 0.2091314792633056, 2);
model.view('view4').camera.setIndex('up', -0.345619320869445, 0);
model.view('view4').camera.setIndex('up', 0.1804702281951904, 1);
model.view('view4').camera.setIndex('up', 0.806934475898742, 2);
model.view('view4').camera.setIndex('rotationpoint', 0.0400786399841308, 0);
model.view('view4').camera.setIndex('rotationpoint', 0.0116240978240966, 1);
model.view('view4').camera.setIndex('rotationpoint', 0.1726796627044677, 2);
model.view('view4').camera.setIndex('viewoffset', -0.0640072077512741, 0);
model.view('view4').camera.setIndex('viewoffset', 0.0995445698499679, 1);

model.thermodynamics.feature('pp1').feature('tdep1_chem').createPlot('pg19');

model.result('pg19').run;

model.thermodynamics.feature('pp1').feature('tdep2_chem').createPlot('pg20');

model.result('pg20').run;
model.result('pg20').run;
model.result('pg19').feature.copy('plot2', 'pg20/plot1');
model.result('pg20').feature.remove('plot1');
model.result('pg19').feature('plot2').label('Water');
model.result('pg19').feature('plot2').set('legend', true);
model.result('pg19').feature('plot2').set('legendmethod', 'manual');
model.result('pg19').feature('plot2').setIndex('legends', 'Water', 0);
model.result('pg19').run;
model.result('pg19').feature('plot1').label('Ethanol');
model.result('pg19').feature('plot1').set('legend', true);
model.result('pg19').feature('plot1').set('legendmethod', 'manual');
model.result('pg19').feature('plot1').setIndex('legends', 'Ethanol', 0);
model.result('pg19').run;
model.result('pg19').label('Heat of Vaporization');
model.result('pg19').set('titletype', 'none');
model.result('pg19').set('ylabelactive', true);
model.result('pg19').set('ylabel', 'Heat of Vaporization (J/kg)');
model.result('pg19').set('legendpos', 'middleright');
model.result('pg19').set('axislimits', true);
model.result('pg19').set('ymin', '-1e5');
model.result('pg19').set('ymax', '3e6');
model.result('pg19').run;
model.result('pg1').run;
model.result.remove('pg1');
model.result.remove('pg3');
model.result.remove('pg5');
model.result.remove('pg7');
model.result.remove('pg8');
model.result.remove('pg20');
model.result('pg2').run;
model.result('pg11').run;

model.title('Evaporation of Ethanol and Water from a Wine Glass');

model.description(['During professional wine tasting, several samples of wine are judged in one session. It is important that each sample is covered, since evaporation of ethanol and water will change the taste. This model simulates the evaporation of ethanol and water from a wine glass. Evaporation of multiple species from a nonideal liquid mixture is modeled using the extended Raoult''s law. The evaporation induces free convection in the surrounding vapor phase, both due to the change in composition and due to the heat of vaporization. The model is set up in 2D axisymmetry using coupled Laminar Flow, Transport of Concentrated Species, and Heat Transfer in Fluids interfaces. Accurate thermodynamic data is provided by the Thermodynamics functionality. The UNIQUAC model is used for the liquid system combined with the Peng' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Robinson cubic equation of state, while the Soave' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Redlich' native2unicode(hex2dec({'20' '13'}), 'unicode') 'Kwong model is used for the vapor-liquid system.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;
model.sol('sol3').clearSolutionData;
model.sol('sol4').clearSolutionData;
model.sol('sol5').clearSolutionData;
model.sol('sol6').clearSolutionData;

model.label('ethanol_water_evaporation.mph');

model.modelNode.label('Components');

out = model;
