function out = model
%
% lumped_vehicle_suspension_system.m
%
% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Multibody_Dynamics_Module/Automotive_and_Aerospace');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('lms', 'LumpedMechanicalSystem', 'geom1');
model.physics('lms').model('comp1');
model.physics.create('mbd', 'MultibodyDynamics', 'geom1');
model.physics('mbd').model('comp1');

model.study.create('std1');
model.study('std1').create('time', 'Transient');
model.study('std1').feature('time').setSolveFor('/physics/lms', true);
model.study('std1').feature('time').setSolveFor('/physics/mbd', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('m_body', '670[kg]', 'Mass of vehicle body');
model.param.set('I_roll', '800[kg*m^2]', 'Inertia around roll');
model.param.set('I_pitch', '1100[kg*m^2]', 'Inertia around pitch');
model.param.set('m_wh', '30[kg]', 'Mass of wheels');
model.param.set('m_p', '120[kg]', 'Mass of passengers');
model.param.set('k_wh', '175500[N/m]', 'Stiffness of wheels');
model.param.set('k_sus', '17500[N/m]', 'Stiffness of suspension springs');
model.param.set('k_seat', '1750[N/m]', 'Stiffness of seat springs');
model.param.set('c_sus', '1460[N*s/m]', 'Viscosity of suspension dampers');
model.param.set('c_seat', '700[N*s/m]', 'Viscosity of seat dampers');
model.param.set('r_wb', '1.9975[m]', 'Wheel base');
model.param.set('r_tw', '0.8025[m]', 'Track width');
model.param.set('hb', '4[cm]', 'Bump height');
model.param.set('wb', '7.5[cm]', 'Bump width');
model.param.set('speed', '40[km/h]', 'Vehicle speed');
model.param.set('tb', '4*wb/speed', 'Bump time period');
model.param.set('td', 'r_wb/speed', 'Time delay between front and rear wheel');

model.func.create('wv1', 'Wave');
model.func('wv1').set('type', 'square');
model.func('wv1').set('smooth', 'tb/10');
model.func('wv1').set('dutycycle', 0.25);
model.func('wv1').set('period', 'tb');
model.func('wv1').set('amplitude', 'hb/2');
model.func.duplicate('wv2', 'wv1');
model.func('wv2').set('phase', '-2*pi/tb*td');

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'2*r_wb' '2*r_tw' '1'});
model.geom('geom1').feature('blk1').setIndex('size', 'r_wb/20', 2);
model.geom('geom1').feature('blk1').set('base', 'center');
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('lms').feature('fix1').active(false);
model.physics('lms').create('sub1', 'SubSystemBlock', -1);
model.physics('lms').feature('sub1').label('Subsystem Definition: Wheel');
model.physics('lms').feature('sub1').create('K1', 'Spring', -1);
model.physics('lms').feature('sub1').feature('K1').setIndex('Connections', 'a', 0, 0);
model.physics('lms').feature('sub1').feature('K1').setIndex('Connections', 1, 1, 0);
model.physics('lms').feature('sub1').feature('K1').set('k', 'k_wh');
model.physics('lms').feature('sub1').create('M1', 'Mass', -1);
model.physics('lms').feature('sub1').feature('M1').setIndex('Connections', 1, 0, 0);
model.physics('lms').feature('sub1').feature('M1').set('m', 'm_wh');
model.physics('lms').feature('sub1').create('K2', 'Spring', -1);
model.physics('lms').feature('sub1').feature('K2').setIndex('Connections', 2, 0, 0);
model.physics('lms').feature('sub1').feature('K2').setIndex('Connections', 'b', 1, 0);
model.physics('lms').feature('sub1').feature('K2').set('k', 'k_sus');
model.physics('lms').feature('sub1').create('C1', 'Damper', -1);
model.physics('lms').feature('sub1').feature('C1').setIndex('Connections', 2, 0, 0);
model.physics('lms').feature('sub1').feature('C1').setIndex('Connections', 'b', 1, 0);
model.physics('lms').feature('sub1').feature('C1').set('c', 'c_sus');
model.physics('lms').create('sub2', 'SubSystemBlock', -1);
model.physics('lms').feature('sub2').label('Subsystem Definition: Seat');
model.physics('lms').feature('sub2').setIndex('Connections', 'b', 1, 0);
model.physics('lms').feature('sub2').set('Connections', {'a'});
model.physics('lms').feature('sub2').create('K1', 'Spring', -1);
model.physics('lms').feature('sub2').feature('K1').setIndex('Connections', 'a', 0, 0);
model.physics('lms').feature('sub2').feature('K1').setIndex('Connections', 1, 1, 0);
model.physics('lms').feature('sub2').feature('K1').set('k', 'k_seat');
model.physics('lms').feature('sub2').create('C1', 'Damper', -1);
model.physics('lms').feature('sub2').feature('C1').setIndex('Connections', 'a', 0, 0);
model.physics('lms').feature('sub2').feature('C1').setIndex('Connections', 1, 1, 0);
model.physics('lms').feature('sub2').feature('C1').set('c', 'c_seat');
model.physics('lms').feature('sub2').create('M1', 'Mass', -1);
model.physics('lms').feature('sub2').feature('M1').setIndex('Connections', 1, 0, 0);
model.physics('lms').feature('sub2').feature('M1').set('m', 'm_p');
model.physics('lms').feature('sub2').create('fr1', 'FreeNode', -1);
model.physics('lms').feature('sub2').feature('fr1').setIndex('Connections', 2, 0, 0);
model.physics('lms').create('disp1', 'DisplacementNode', -1);
model.physics('lms').feature('disp1').label('Displacement Node: Front-Left');
model.physics('lms').feature('disp1').set('up1', 'hb/2+wv1(t[1/s])');
model.physics('lms').create('disp2', 'DisplacementNode', -1);
model.physics('lms').feature('disp2').label('Displacement Node: Front-Right');
model.physics('lms').feature('disp2').set('up1', '0[mm]');
model.physics('lms').create('disp3', 'DisplacementNode', -1);
model.physics('lms').feature('disp3').label('Displacement Node: Rear-Left');
model.physics('lms').feature('disp3').set('up1', 'hb/2+wv2(t[1/s])');
model.physics('lms').create('disp4', 'DisplacementNode', -1);
model.physics('lms').feature('disp4').label('Displacement Node: Rear-Right');
model.physics('lms').feature('disp4').set('up1', '0[mm]');
model.physics('lms').create('X1', 'SubSystem', -1);
model.physics('lms').feature('X1').label('Subsystem Instance X1: Front-Left Wheel');
model.physics('lms').feature('X1').set('subSystemName', 'sub1');
model.physics('lms').feature('X1').setIndex('Connections', 1, 0, 0);
model.physics('lms').feature('X1').setIndex('Connections', 5, 1, 0);
model.physics('lms').create('X2', 'SubSystem', -1);
model.physics('lms').feature('X2').label('Subsystem Instance X2: Front-Right Wheel');
model.physics('lms').feature('X2').set('subSystemName', 'sub1');
model.physics('lms').feature('X2').setIndex('Connections', 2, 0, 0);
model.physics('lms').feature('X2').setIndex('Connections', 6, 1, 0);
model.physics('lms').create('X3', 'SubSystem', -1);
model.physics('lms').feature('X3').label('Subsystem Instance X3: Rear-Left Wheel');
model.physics('lms').feature('X3').set('subSystemName', 'sub1');
model.physics('lms').feature('X3').setIndex('Connections', 3, 0, 0);
model.physics('lms').feature('X3').setIndex('Connections', 7, 1, 0);
model.physics('lms').create('X4', 'SubSystem', -1);
model.physics('lms').feature('X4').label('Subsystem Instance X4: Rear-Right Wheel');
model.physics('lms').feature('X4').set('subSystemName', 'sub1');
model.physics('lms').feature('X4').setIndex('Connections', 4, 0, 0);
model.physics('lms').feature('X4').setIndex('Connections', 8, 1, 0);
model.physics('lms').create('E1', 'ExternalSource', -1);
model.physics('lms').feature('E1').label('External Source E1: Front-Left');
model.physics('lms').feature('E1').setIndex('Connections', 5, 0, 0);
model.physics('lms').feature('E1').setIndex('Connections', 9, 1, 0);
model.physics('lms').feature('E1').set('InputDisp', 'Coupled');
model.physics('lms').feature('E1').set('includeForce', false);
model.physics('lms').feature('E1').set('includeDisplacement', false);
model.physics('lms').create('E2', 'ExternalSource', -1);
model.physics('lms').feature('E2').label('External Source E2: Front-Right');
model.physics('lms').feature('E2').setIndex('Connections', 6, 0, 0);
model.physics('lms').feature('E2').setIndex('Connections', 10, 1, 0);
model.physics('lms').feature('E2').set('InputDisp', 'Coupled');
model.physics('lms').feature('E2').set('includeForce', false);
model.physics('lms').feature('E2').set('includeDisplacement', false);
model.physics('lms').create('E3', 'ExternalSource', -1);
model.physics('lms').feature('E3').label('External Source E3: Rear-Left');
model.physics('lms').feature('E3').setIndex('Connections', 7, 0, 0);
model.physics('lms').feature('E3').setIndex('Connections', 11, 1, 0);
model.physics('lms').feature('E3').set('InputDisp', 'Coupled');
model.physics('lms').feature('E3').set('includeForce', false);
model.physics('lms').feature('E3').set('includeDisplacement', false);
model.physics('lms').create('E4', 'ExternalSource', -1);
model.physics('lms').feature('E4').label('External Source E4: Rear-Right');
model.physics('lms').feature('E4').setIndex('Connections', 8, 0, 0);
model.physics('lms').feature('E4').setIndex('Connections', 12, 1, 0);
model.physics('lms').feature('E4').set('InputDisp', 'Coupled');
model.physics('lms').feature('E4').set('includeForce', false);
model.physics('lms').feature('E4').set('includeDisplacement', false);
model.physics('lms').create('X5', 'SubSystem', -1);
model.physics('lms').feature('X5').label('Subsystem Instance X5: Front-Left Seat');
model.physics('lms').feature('X5').set('subSystemName', 'sub2');
model.physics('lms').feature('X5').setIndex('Connections', 9, 0, 0);
model.physics('lms').create('X6', 'SubSystem', -1);
model.physics('lms').feature('X6').label('Subsystem Instance X6: Front-Right Seat');
model.physics('lms').feature('X6').set('subSystemName', 'sub2');
model.physics('lms').feature('X6').setIndex('Connections', 10, 0, 0);
model.physics('lms').create('X7', 'SubSystem', -1);
model.physics('lms').feature('X7').label('Subsystem Instance X7: Rear-Left Seat');
model.physics('lms').feature('X7').set('subSystemName', 'sub2');
model.physics('lms').feature('X7').setIndex('Connections', 11, 0, 0);
model.physics('lms').create('X8', 'SubSystem', -1);
model.physics('lms').feature('X8').label('Subsystem Instance X8: Rear-Right Seat');
model.physics('lms').feature('X8').set('subSystemName', 'sub2');
model.physics('lms').feature('X8').setIndex('Connections', 12, 0, 0);
model.physics('mbd').create('rd1', 'RigidDomain', 3);
model.physics('mbd').feature('rd1').selection.set([1]);
model.physics('mbd').feature('rd1').set('rho_mat', 'userdef');
model.physics('mbd').feature('rd1').set('CenterOfRotationType', 'UserDefined');
model.physics('mbd').feature('rd1').create('mmi1', 'MassInertia', -1);
model.physics('mbd').feature('rd1').feature('mmi1').set('mt', 'm_body');
model.physics('mbd').feature('rd1').feature('mmi1').set('mi', {'I_roll' '0' '0' '0' 'I_pitch' '0' '0' '0' '0'});
model.physics('mbd').feature('rd1').create('pdr1', 'PrescribedDispRot', -1);
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('Direction', true, 0);
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('Direction', true, 1);
model.physics('mbd').feature('rd1').feature('pdr1').set('RotationType', 'ConstrainedRotationGroup');
model.physics('mbd').feature('rd1').feature('pdr1').setIndex('ConstrainedRotation', true, 2);

model.multiphysics.create('lsc1', 'LumpedStructureConnection', 'geom1', -1);
model.multiphysics('lsc1').label('Lumped-Structure Connection: Front-Left');
model.multiphysics('lsc1').selection('ExtSrcSel1').set([7]);
model.multiphysics('lsc1').selection('ExtSrcSel2').set([8]);
model.multiphysics.create('lsc2', 'LumpedStructureConnection', 'geom1', -1);
model.multiphysics('lsc2').label('Lumped-Structure Connection: Front-Right');
model.multiphysics('lsc2').selection('ExtSrcSel1').set([5]);
model.multiphysics('lsc2').selection('ExtSrcSel2').set([6]);
model.multiphysics('lsc2').set('LmsFeat', 'E2');
model.multiphysics.create('lsc3', 'LumpedStructureConnection', 'geom1', -1);
model.multiphysics('lsc3').label('Lumped-Structure Connection: Rear-Left');
model.multiphysics('lsc3').selection('ExtSrcSel1').set([3]);
model.multiphysics('lsc3').selection('ExtSrcSel2').set([4]);
model.multiphysics('lsc3').set('LmsFeat', 'E3');
model.multiphysics.create('lsc4', 'LumpedStructureConnection', 'geom1', -1);
model.multiphysics('lsc4').label('Lumped-Structure Connection: Rear-Right');
model.multiphysics('lsc4').selection('ExtSrcSel1').set([1]);
model.multiphysics('lsc4').selection('ExtSrcSel2').set([2]);
model.multiphysics('lsc4').set('LmsFeat', 'E4');

model.study('std1').feature('time').set('tlist', 'range(0,0.0002,2)');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'time');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('resscalemethod', 'parent');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_disp').set('scaleval', '0.043065096093733504');
model.sol('sol1').feature('v1').feature('comp1_mbd_rd_rot').set('scaleval', '0.1');
model.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.30650960937335');
model.sol('sol1').feature('v1').set('control', 'time');
model.sol('sol1').create('t1', 'Time');
model.sol('sol1').feature('t1').set('tlist', 'range(0,0.0002,2)');
model.sol('sol1').feature('t1').set('plot', 'off');
model.sol('sol1').feature('t1').set('plotgroup', 'Default');
model.sol('sol1').feature('t1').set('plotfreq', 'tout');
model.sol('sol1').feature('t1').set('probesel', 'all');
model.sol('sol1').feature('t1').set('probes', {});
model.sol('sol1').feature('t1').set('probefreq', 'tsteps');
model.sol('sol1').feature('t1').set('rtol', 0.001);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('atolglobalmethod', 'scaled');
model.sol('sol1').feature('t1').set('atolglobalfactor', 0.1);
model.sol('sol1').feature('t1').set('atolglobalvaluemethod', 'factor');
model.sol('sol1').feature('t1').set('eventtol', 0.01);
model.sol('sol1').feature('t1').set('reacf', true);
model.sol('sol1').feature('t1').set('storeudot', true);
model.sol('sol1').feature('t1').set('tstepsbdf', 'strict');
model.sol('sol1').feature('t1').set('endtimeinterpolation', true);
model.sol('sol1').feature('t1').set('maxorder', 2);
model.sol('sol1').feature('t1').set('minorder', 1);
model.sol('sol1').feature('t1').set('rescaleafterinitbw', false);
model.sol('sol1').feature('t1').set('bwinitstepfrac', '0.001');
model.sol('sol1').feature('t1').set('control', 'time');
model.sol('sol1').feature('t1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('t1').create('se1', 'Segregated');
model.sol('sol1').feature('t1').feature('se1').feature.remove('ssDef');
model.sol('sol1').feature('t1').feature('se1').create('ss1', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('segvar', {'comp1_displacements' 'comp1_velocities' 'comp1_forces'});
model.sol('sol1').feature('t1').feature('se1').feature('ss1').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss1').label('Lumped Mechanical System');
model.sol('sol1').feature('t1').feature('se1').create('ss2', 'SegregatedStep');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('segvar', {'comp1_u' 'comp1_mbd_rd_disp' 'comp1_mbd_rd_rot'});
model.sol('sol1').feature('t1').feature('se1').feature('ss2').set('linsolver', 'dDef');
model.sol('sol1').feature('t1').feature('se1').feature('ss2').label('Multibody Dynamics');
model.sol('sol1').feature('t1').feature.remove('fcDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('t1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('t1').feature('fc1').set('jtech', 'onevery');
model.sol('sol1').feature('t1').feature('fc1').set('maxiter', 15);
model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').label('Displacement (mbd)');
model.result('pg1').set('frametype', 'spatial');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 10001, 0);
model.result('pg1').set('defaultPlotID', 'displacement');
model.result('pg1').feature.create('surf1', 'Surface');
model.result('pg1').feature('surf1').label('Surface');
model.result('pg1').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg1').feature('surf1').set('data', 'parent');
model.result('pg1').feature('surf1').feature.create('def1', 'Deform');
model.result('pg1').feature('surf1').feature('def1').label('Deformation');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').label('Velocity (mbd)');
model.result('pg2').set('frametype', 'spatial');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 10001, 0);
model.result('pg2').set('defaultPlotID', 'velocity');
model.result('pg2').feature.create('vol1', 'Volume');
model.result('pg2').feature('vol1').label('Volume');
model.result('pg2').feature('vol1').set('expr', 'mod(dom,10)');
model.result('pg2').feature('vol1').set('unit', '1');
model.result('pg2').feature('vol1').set('colortable', 'Cyclic');
model.result('pg2').feature('vol1').set('colorlegend', false);
model.result('pg2').feature('vol1').set('data', 'parent');
model.result('pg2').feature('vol1').feature.create('def1', 'Deform');
model.result('pg2').feature('vol1').feature('def1').label('Deformation');
model.result('pg2').feature.create('arwl1', 'ArrowLine');
model.result('pg2').feature('arwl1').label('Arrow Line');
model.result('pg2').feature('arwl1').set('expr', {'mbd.u_tX' 'mbd.u_tY' 'mbd.u_tZ'});
model.result('pg2').feature('arwl1').set('placement', 'elements');
model.result('pg2').feature('arwl1').set('data', 'parent');
model.result('pg2').feature('arwl1').feature.create('def1', 'Deform');
model.result('pg2').feature('arwl1').feature('def1').label('Deformation');
model.result('pg1').run;
model.result.create('pg3', 'PlotGroup1D');
model.result('pg3').run;
model.result('pg3').label('Road Excitation (Left Wheels)');
model.result('pg3').set('titletype', 'label');
model.result('pg3').setIndex('looplevelinput', 'interp', 0);
model.result('pg3').setIndex('interp', 'range(0,0.0002,0.1)', 0);
model.result('pg3').create('glob1', 'Global');
model.result('pg3').feature('glob1').set('markerpos', 'datapoints');
model.result('pg3').feature('glob1').set('linewidth', 'preference');
model.result('pg3').feature('glob1').set('expr', {'lms.u_1'});
model.result('pg3').feature('glob1').set('descr', {'Displacement at node 1'});
model.result('pg3').feature('glob1').set('unit', {'m'});
model.result('pg3').feature('glob1').set('expr', {'lms.u_1' 'lms.u_3'});
model.result('pg3').feature('glob1').set('descr', {'Displacement at node 1' 'Displacement at node 3'});
model.result('pg3').feature('glob1').setIndex('descr', 'Front-Left', 0);
model.result('pg3').feature('glob1').setIndex('descr', 'Rear-Left', 1);
model.result('pg3').run;
model.result('pg3').set('ylabelactive', true);
model.result('pg3').set('ylabel', 'Displacement (m)');
model.result('pg3').run;
model.result.create('pg4', 'PlotGroup1D');
model.result('pg4').run;
model.result('pg4').label('Vehicle Motion (CG)');
model.result('pg4').set('titletype', 'label');
model.result('pg4').set('twoyaxes', true);
model.result('pg4').create('glob1', 'Global');
model.result('pg4').feature('glob1').set('markerpos', 'datapoints');
model.result('pg4').feature('glob1').set('linewidth', 'preference');
model.result('pg4').feature('glob1').set('expr', {'mbd.rd1.thx'});
model.result('pg4').feature('glob1').set('descr', {'Rigid body rotation, x-component'});
model.result('pg4').feature('glob1').set('unit', {'rad'});
model.result('pg4').feature('glob1').set('expr', {'mbd.rd1.thx' 'mbd.rd1.thy'});
model.result('pg4').feature('glob1').set('descr', {'Rigid body rotation, x-component' 'Rigid body rotation, y-component'});
model.result('pg4').feature('glob1').setIndex('unit', 'deg', 0);
model.result('pg4').feature('glob1').setIndex('descr', 'Roll', 0);
model.result('pg4').feature('glob1').setIndex('unit', 'deg', 1);
model.result('pg4').feature('glob1').setIndex('descr', 'Pitch', 1);
model.result('pg4').run;
model.result('pg4').create('glob2', 'Global');
model.result('pg4').feature('glob2').set('markerpos', 'datapoints');
model.result('pg4').feature('glob2').set('linewidth', 'preference');
model.result('pg4').feature('glob2').set('expr', {'mbd.rd1.w'});
model.result('pg4').feature('glob2').set('descr', {'Rigid body displacement, z-component'});
model.result('pg4').feature('glob2').set('unit', {'m'});
model.result('pg4').feature('glob2').setIndex('descr', 'Heave', 0);
model.result('pg4').feature('glob2').set('plotonsecyaxis', true);
model.result('pg4').run;
model.result('pg4').set('ylabelactive', true);
model.result('pg4').set('ylabel', 'Rotation (deg)');
model.result('pg4').set('yseclabelactive', true);
model.result('pg4').set('yseclabel', 'Displacement (m)');
model.result('pg4').run;
model.result.duplicate('pg5', 'pg4');
model.result('pg5').run;
model.result('pg5').label('Vehicle Velocity (CG)');
model.result('pg5').set('ylabel', 'Angular velocity (rad/s)');
model.result('pg5').set('yseclabel', 'Velocity (m/s)');
model.result('pg5').run;
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.rd1.th_tx', 0);
model.result('pg5').feature('glob1').setIndex('unit', 'rad/s', 0);
model.result('pg5').feature('glob1').setIndex('descr', 'Roll', 0);
model.result('pg5').feature('glob1').setIndex('expr', 'mbd.rd1.th_ty', 1);
model.result('pg5').feature('glob1').setIndex('unit', 'rad/s', 1);
model.result('pg5').feature('glob1').setIndex('descr', 'Pitch', 1);
model.result('pg5').run;
model.result('pg5').feature('glob2').setIndex('expr', 'mbd.rd1.Wt', 0);
model.result('pg5').feature('glob2').setIndex('unit', 'm/s', 0);
model.result('pg5').feature('glob2').setIndex('descr', 'Heave', 0);
model.result('pg5').run;
model.result('pg5').run;
model.result.create('pg6', 'PlotGroup1D');
model.result('pg6').run;
model.result('pg6').label('Seat Displacement');
model.result('pg6').set('titletype', 'label');
model.result('pg6').create('glob1', 'Global');
model.result('pg6').feature('glob1').set('markerpos', 'datapoints');
model.result('pg6').feature('glob1').set('linewidth', 'preference');
model.result('pg6').feature('glob1').set('expr', {'lms.X5_M1_u'});
model.result('pg6').feature('glob1').set('descr', {'Displacement (M1)'});
model.result('pg6').feature('glob1').set('unit', {'m'});
model.result('pg6').feature('glob1').set('expr', {'lms.X5_M1_u' 'lms.X6_M1_u'});
model.result('pg6').feature('glob1').set('descr', {'Displacement (M1)' 'Displacement (M1)'});
model.result('pg6').feature('glob1').set('expr', {'lms.X5_M1_u' 'lms.X6_M1_u' 'lms.X7_M1_u'});
model.result('pg6').feature('glob1').set('descr', {'Displacement (M1)' 'Displacement (M1)' 'Displacement (M1)'});
model.result('pg6').feature('glob1').set('expr', {'lms.X5_M1_u' 'lms.X6_M1_u' 'lms.X7_M1_u' 'lms.X8_M1_u'});
model.result('pg6').feature('glob1').set('descr', {'Displacement (M1)' 'Displacement (M1)' 'Displacement (M1)' 'Displacement (M1)'});
model.result('pg6').feature('glob1').setIndex('descr', 'Front-Left', 0);
model.result('pg6').feature('glob1').setIndex('descr', 'Front-Right', 1);
model.result('pg6').feature('glob1').setIndex('descr', 'Rear-Left', 2);
model.result('pg6').feature('glob1').setIndex('descr', 'Rear-Right', 3);
model.result('pg6').run;
model.result('pg6').set('ylabelactive', true);
model.result('pg6').set('ylabel', 'Displacement (m)');
model.result('pg6').run;
model.result.duplicate('pg7', 'pg6');
model.result('pg7').run;
model.result('pg7').label('Seat Acceleration');
model.result('pg7').set('ylabel', 'Acceleration (m/s^2)');
model.result('pg7').run;
model.result('pg7').feature('glob1').setIndex('expr', 'd(lms.X5_M1_dudt,t)', 0);
model.result('pg7').feature('glob1').setIndex('unit', '1/s', 0);
model.result('pg7').feature('glob1').setIndex('descr', 'Front-Left', 0);
model.result('pg7').feature('glob1').setIndex('expr', 'd(lms.X6_M1_dudt,t)', 1);
model.result('pg7').feature('glob1').setIndex('unit', '1/s', 1);
model.result('pg7').feature('glob1').setIndex('descr', 'Front-Right', 1);
model.result('pg7').feature('glob1').setIndex('expr', 'd(lms.X7_M1_dudt,t)', 2);
model.result('pg7').feature('glob1').setIndex('unit', '1/s', 2);
model.result('pg7').feature('glob1').setIndex('descr', 'Rear-Left', 2);
model.result('pg7').feature('glob1').setIndex('expr', 'd(lms.X8_M1_dudt,t)', 3);
model.result('pg7').feature('glob1').setIndex('unit', '1/s', 3);
model.result('pg7').feature('glob1').setIndex('descr', 'Rear-Right', 3);
model.result('pg7').run;
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').run;
model.result('pg8').label('Forces (Front-Left Wheel)');
model.result('pg8').set('titletype', 'label');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').set('expr', {'lms.X1_K1_f'});
model.result('pg8').feature('glob1').set('descr', {'Spring force (K1)'});
model.result('pg8').feature('glob1').set('unit', {'N'});
model.result('pg8').feature('glob1').set('expr', {'lms.X1_K1_f' 'lms.X1_K2_f'});
model.result('pg8').feature('glob1').set('descr', {'Spring force (K1)' 'Spring force (K2)'});
model.result('pg8').feature('glob1').set('expr', {'lms.X1_K1_f' 'lms.X1_K2_f' 'lms.X1_C1_f'});
model.result('pg8').feature('glob1').set('descr', {'Spring force (K1)' 'Spring force (K2)' 'Damping force (C1)'});
model.result('pg8').run;
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'Force (N)');
model.result('pg8').run;
model.result.create('pg9', 'PlotGroup1D');
model.result('pg9').run;
model.result('pg9').label('Forces (Front-Left Seat)');
model.result('pg9').set('titletype', 'label');
model.result('pg9').create('glob1', 'Global');
model.result('pg9').feature('glob1').set('markerpos', 'datapoints');
model.result('pg9').feature('glob1').set('linewidth', 'preference');
model.result('pg9').feature('glob1').set('expr', {'lms.X5_K1_f'});
model.result('pg9').feature('glob1').set('descr', {'Spring force (K1)'});
model.result('pg9').feature('glob1').set('unit', {'N'});
model.result('pg9').feature('glob1').set('expr', {'lms.X5_K1_f' 'lms.X5_C1_f'});
model.result('pg9').feature('glob1').set('descr', {'Spring force (K1)' 'Damping force (C1)'});
model.result('pg9').run;
model.result('pg9').set('ylabelactive', true);
model.result('pg9').set('ylabel', 'Force (N)');
model.result('pg9').run;
model.result('pg7').run;

model.title('Lumped Model of a Vehicle Suspension System');

model.description(['In this example, a lumped model of a vehicle suspension system having eleven degrees of freedom is analyzed. The Mass, Spring, and Damper nodes of the Lumped Mechanical System interface are used to model the wheels, including suspension system as well as the seats with a passenger. The vehicle body, having three degrees of freedom, is modeled as a rigid body in the Multibody Dynamics interface.' newline  newline 'The External Source node of the Lumped Mechanical System interface is used to connect the MBD model of the vehicle body to the lumped model of the rest of the system. A transient analysis is performed to compute the vehicle motion as well as the seat vibration levels for a given road profile.']);

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;

model.label('lumped_vehicle_suspension_system.mph');

model.modelNode.label('Components');

out = model;
