function out = model
%
% sound_transmission_loss_concrete.m
%
% Model exported on May 26 2025, 21:25 by COMSOL 6.2.0.339.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('/Applications/COMSOL62/Multiphysics/applications/Acoustics_Module/Building_and_Room_Acoustics');

model.modelNode.create('comp1', true);

model.geom.create('geom1', 3);
model.geom('geom1').model('comp1');

model.mesh.create('mesh1', 'geom1');

model.physics.create('acpr', 'PressureAcoustics', 'geom1');
model.physics('acpr').model('comp1');
model.physics.create('solid', 'SolidMechanics', 'geom1');
model.physics('solid').model('comp1');

model.multiphysics.create('asb1', 'AcousticStructureBoundary', 'geom1', 2);
model.multiphysics('asb1').set('Acoustics_physics', 'acpr');
model.multiphysics('asb1').set('Structure_physics', 'solid');
model.multiphysics('asb1').selection.all;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').setSolveFor('/physics/acpr', true);
model.study('std1').feature('freq').setSolveFor('/physics/solid', true);
model.study('std1').feature('freq').setSolveFor('/multiphysics/asb1', true);

% To import content from file, use:
% model.param.loadFile('FILENAME');
model.param.set('T', '203[mm]', 'Thickness of concrete wall');
model.param.set('H', '4.37[m]', 'Height of concrete wall');
model.param.set('W', '2.84[m]', 'Width of concrete wall');
model.param.set('seed', '42', 'Seed for random function');
model.param.set('A', '1[Pa]', 'Plane wave amplitude');
model.param.set('N', '100', 'Number of random waves in sum');
model.param.set('c0', '343.2[m/s]', 'Speed of sound in air');
model.param.set('rho0', '1.2[kg/m^3]', 'Density of air');
model.param.set('fmax', '1200[Hz]', 'Maximum study frequency');
model.param.set('m', '2275[kg/m^3]*T', 'Wall surface density');

model.func.create('int1', 'Interpolation');
model.func('int1').set('source', 'file');
model.func('int1').set('filename', 'sound_transmission_loss_concrete_measurement_data.txt');
model.func('int1').setIndex('funcs', 'STL_typical', 0, 0);
model.func('int1').setIndex('funcs', 1, 0, 1);
model.func('int1').importData;
model.func('int1').set('interp', 'piecewisecubic');
model.func('int1').setIndex('argunit', 'Hz', 0);
model.func('int1').setIndex('fununit', 'dB', 0);

model.geom('geom1').create('blk1', 'Block');
model.geom('geom1').feature('blk1').set('size', {'T' 'W' 'H'});
model.geom('geom1').run('blk1');
model.geom('geom1').create('blk2', 'Block');
model.geom('geom1').feature('blk2').set('size', {'3*T' 'W+4*T' 'H+4*T'});
model.geom('geom1').feature('blk2').set('pos', {'T' '-2*T' '-2*T'});
model.geom('geom1').feature('blk2').setIndex('layername', 'Layer 1', 0);
model.geom('geom1').feature('blk2').setIndex('layer', 'T', 0);
model.geom('geom1').feature('blk2').set('layerright', true);
model.geom('geom1').feature('blk2').set('layerfront', true);
model.geom('geom1').feature('blk2').set('layerback', true);
model.geom('geom1').feature('blk2').set('layertop', true);
model.geom('geom1').runPre('fin');
model.geom('geom1').run;

model.physics('acpr').selection.set([2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.physics('solid').selection.set([1]);

model.view('view1').set('renderwireframe', true);

model.material.create('mat1', 'Common', 'comp1');
model.material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.material('mat1').label('Air');
model.material('mat1').set('family', 'air');
model.material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('rho').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('rho').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.material('mat1').propertyGroup('def').func('cs').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.material('mat1').propertyGroup('def').func('cs').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('cs').set('plotfixedvalue', {'273.15'});
model.material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.material('mat1').propertyGroup('def').func('an1').set('plotaxis', {'off' 'on'});
model.material('mat1').propertyGroup('def').func('an1').set('plotfixedvalue', {'101325' '273.15'});
model.material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.material('mat1').propertyGroup('def').func('an2').set('args', {'T'});
model.material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.material('mat1').propertyGroup('def').func('an2').set('argunit', {'K'});
model.material('mat1').propertyGroup('def').func('an2').set('plotfixedvalue', {'200'});
model.material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.material('mat1').propertyGroup('def').set('molarmass', '');
model.material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.material('mat1').propertyGroup('def').addInput('temperature');
model.material('mat1').propertyGroup('def').addInput('pressure');
model.material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.material('mat1').propertyGroup('NonlinearModel').set('BA', 'def.gamma-1');
model.material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.material('mat1').propertyGroup('idealGas').addInput('temperature');
model.material('mat1').propertyGroup('idealGas').addInput('pressure');
model.material('mat1').materialType('nonSolid');
model.material.create('mat2', 'Common', 'comp1');
model.material('mat2').label('Concrete');
model.material('mat2').selection.set([1]);
model.material('mat2').propertyGroup.create('Enu', 'Young''s_modulus_and_Poisson''s_ratio');
model.material('mat2').propertyGroup('Enu').set('E', {'31.6e9'});
model.material('mat2').propertyGroup('Enu').set('nu', {'0.2'});
model.material('mat2').propertyGroup('def').set('density', {'2275'});

model.variable.create('var1');
model.variable('var1').model('comp1');
model.variable('var1').label('Variables: Diffuse Field');

% To import content from file, use:
% model.variable('var1').loadFile('FILENAME');
model.variable('var1').set('theta', 'acos(costheta_rnd(n,freq[1/Hz],2,seed))');
model.variable('var1').set('phi', 'phi_rnd(n,freq[1/Hz],1,seed)');
model.variable('var1').set('phase', 'phase_rnd(n,freq[1/Hz],3,seed)');
model.variable('var1').set('k0', '2*pi*freq/c0', 'Wave number in air');
model.variable('var1').set('kx', 'cos(theta)*k0', 'Partial wave vector, x-component');
model.variable('var1').set('ky', 'sin(theta)*cos(phi)*k0', 'Partial wave vector, y-component');
model.variable('var1').set('kz', 'sin(theta)*sin(phi)*k0', 'Partial wave vector, z-component');
model.variable('var1').set('px_room', 'A/sqrt(2*N)*sum(exp(i*phase)*exp(-i*(kx*x+ky*y+kz*z)),n,1,N)', 'Room diffuse pressure field, waves in positive x direction');
model.variable('var1').set('vx_room', 'A/(acpr.omega*rho0)/sqrt(2*N)*sum(kx*exp(i*phase)*exp(-i*(kx*x+ky*y+kz*z)),n,1,N)', 'Room diffuse particle velocity field, waves in positive x direction');
model.variable('var1').set('p_room_sq', '2*abs(px_room)^2', 'Room diffuse field, total squared pressure');
model.variable('var1').set('p_refl', 'A/sqrt(2*N)*sum(exp(i*phase)*exp(-i*(-kx*x+ky*y+kz*z)),n,1,N)', 'Pressure field reflected from the concrete surface');
model.variable('var1').set('p_wall', 'px_room+p_refl', 'Total wall pressure (mechanical load)');
model.variable.create('var2');
model.variable('var2').model('comp1');
model.variable('var2').label('Variables: STL');

% To import content from file, use:
% model.variable('var2').loadFile('FILENAME');
model.variable('var2').set('Ix_room', '0.5*realdot(px_room,vx_room)', 'Sound intensity, positive x direction');
model.variable('var2').set('P_in', 'intop_in(Ix_room)', 'Incident power on the concrete surface');
model.variable('var2').set('P_in_proom', 'intop_in(0.5*p_room_sq)/(4*rho0*c0)', 'Incident power (room pressure)');
model.variable('var2').set('p_ms_th', '0.5*A^2', 'Theoretical mean square pressure in source room (limit N->infinity)');
model.variable('var2').set('P_in_th', 'intop_in(p_ms_th)/(4*rho0*c0)', 'Theoretical incident power (limit N->infinity)');
model.variable('var2').set('P_tr', 'intop_tr(acpr.Ix)', 'Transmitted power');

model.func.create('rn1', 'Random');
model.func('rn1').model('comp1');
model.func('rn1').set('funcname', 'costheta_rnd');
model.func('rn1').set('nargs', 4);
model.func('rn1').set('mean', 0.5);
model.func.create('rn2', 'Random');
model.func('rn2').model('comp1');
model.func('rn2').set('funcname', 'phi_rnd');
model.func('rn2').set('nargs', 4);
model.func('rn2').set('mean', 'pi');
model.func('rn2').set('uniformrange', '2*pi');
model.func.create('rn3', 'Random');
model.func('rn3').model('comp1');
model.func('rn3').set('funcname', 'phase_rnd');
model.func('rn3').set('nargs', 4);
model.func('rn3').set('mean', 'pi');
model.func('rn3').set('uniformrange', '2*pi');

model.cpl.create('intop1', 'Integration', 'geom1');
model.cpl('intop1').set('axisym', true);
model.cpl('intop1').set('opname', 'intop_in');
model.cpl('intop1').selection.geom('geom1', 2);
model.cpl('intop1').selection.set([1]);
model.cpl.create('intop2', 'Integration', 'geom1');
model.cpl('intop2').set('axisym', true);
model.cpl('intop2').set('opname', 'intop_tr');
model.cpl('intop2').selection.geom('geom1', 2);
model.cpl('intop2').selection.set([26]);

model.selection.create('sel1', 'Explicit');
model.selection('sel1').model('comp1');
model.selection('sel1').label('Save acoustic solution on boundaries');
model.selection('sel1').geom(2);
model.selection('sel1').set([19 26 53]);
model.selection.create('sel2', 'Explicit');
model.selection('sel2').model('comp1');
model.selection('sel2').label('Save solid solution on boundaries');
model.selection('sel2').geom(2);
model.selection('sel2').set([1 2 3 4 5 26]);

model.coordSystem.create('pml1', 'geom1', 'PML');
model.coordSystem('pml1').selection.set([2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19]);
model.coordSystem('pml1').set('PMLgamma', '3');

model.physics('solid').feature('lemm1').create('dmp1', 'Damping', 3);
model.physics('solid').feature('lemm1').feature('dmp1').set('DampingType', 'IsotropicLossFactor');

model.material('mat2').propertyGroup('def').set('lossfactor', {'0.01'});

model.physics('solid').create('fix1', 'Fixed', 2);
model.physics('solid').feature('fix1').selection.set([2 3 4 5]);
model.physics('solid').create('bndl1', 'BoundaryLoad', 2);
model.physics('solid').feature('bndl1').selection.set([1]);
model.physics('solid').feature('bndl1').set('LoadType', 'FollowerPressure');
model.physics('solid').feature('bndl1').set('FollowerPressure', 'p_wall');

model.mesh('mesh1').create('fq1', 'FreeQuad');
model.mesh('mesh1').feature('fq1').selection.set([19]);
model.mesh('mesh1').feature('size').set('custom', true);
model.mesh('mesh1').feature('size').set('hmax', 'c0/fmax/5');
model.mesh('mesh1').feature('size').set('hmin', 'c0/fmax/6');
model.mesh('mesh1').create('map1', 'Map');
model.mesh('mesh1').feature('map1').selection.set([6 9 12 16 22 26 27 30 33]);
model.mesh('mesh1').feature('map1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('map1').feature('dis1').selection.set([16 26 35 39]);
model.mesh('mesh1').feature('map1').feature('dis1').set('numelem', 8);
model.mesh('mesh1').run;
model.mesh('mesh1').create('swe1', 'Sweep');
model.mesh('mesh1').feature('swe1').create('dis1', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis1').selection.set([1]);
model.mesh('mesh1').feature('swe1').feature('dis1').set('numelem', 2);
model.mesh('mesh1').feature('swe1').create('dis2', 'Distribution');
model.mesh('mesh1').feature('swe1').feature('dis2').selection.set([11 12 13 14 15 16 17 18 19]);
model.mesh('mesh1').feature('swe1').feature('dis2').set('numelem', 8);
model.mesh('mesh1').run;

model.study('std1').label('Study 1 - Frequency Analysis');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').set('study', 'std1');
model.sol('sol1').feature('st1').set('studystep', 'freq');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').set('control', 'freq');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').set('stol', 0.001);
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature.remove('pDef');
model.sol('sol1').feature('s1').feature('p1').set('pname', {'freq'});
model.sol('sol1').feature('s1').feature('p1').set('plistarr', {''});
model.sol('sol1').feature('s1').feature('p1').set('punit', {'Hz'});
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'no');
model.sol('sol1').feature('s1').feature('p1').set('pdistrib', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plot', 'off');
model.sol('sol1').feature('s1').feature('p1').set('plotgroup', 'Default');
model.sol('sol1').feature('s1').feature('p1').set('probesel', 'all');
model.sol('sol1').feature('s1').feature('p1').set('probes', {});
model.sol('sol1').feature('s1').feature('p1').set('control', 'freq');
model.sol('sol1').feature('s1').set('linpmethod', 'sol');
model.sol('sol1').feature('s1').set('linpsol', 'zero');
model.sol('sol1').feature('s1').set('control', 'freq');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);
model.sol('sol1').feature('s1').feature('aDef').set('matherr', true);
model.sol('sol1').feature('s1').feature('aDef').set('blocksizeactive', false);
model.sol('sol1').feature('s1').create('seDef', 'Segregated');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');
model.sol('sol1').feature('s1').feature('d1').label('Suggested Direct Solver (asb1) (Merged)');
model.sol('sol1').feature('s1').create('i1', 'Iterative');
model.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i1').label('Suggested Iterative Solver (GMRES with GMG) (asb1)');
model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').feature('i1').create('mg2', 'Multigrid');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i1').feature('mg2').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s1').create('i2', 'Iterative');
model.sol('sol1').feature('s1').feature('i2').set('linsolver', 'gmres');
model.sol('sol1').feature('s1').feature('i2').label('Suggested Iterative Solver (GMRES with GMG and Direct Precond.) (asb1)');
model.sol('sol1').feature('s1').feature('i2').create('mg1', 'Multigrid');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('mg1').set('hybridvar', {'comp1_p'});
model.sol('sol1').feature('s1').feature('i2').create('dp1', 'DirectPreconditioner');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridization', 'multi');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('hybridvar', {'comp1_u'});
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('pivotperturb', '1.0E-9');
model.sol('sol1').feature('s1').feature('i2').feature('dp1').set('mumpsblr', true);
model.sol('sol1').feature('s1').feature('fc1').set('linsolver', 'd1');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').feature.remove('seDef');
model.sol('sol1').attach('std1');
model.sol('sol1').feature('s1').feature('i2').active(true);

model.study('std1').feature('freq').set('plist', '{35.5, 37.5, 40, 42.5, 45, 47.5, 50, 53, 56, 60, 63, 67, 71, 75, 80, 85, 90, 95, 100, 106, 112, 118, 125, 132, 140, 150, 160, 170, 180, 190, 200, 212, 224, 236, 250, 265, 280, 300, 315, 335, 355, 375, 400, 425, 450, 475, 500, 530, 560, 600, 630, 670, 710, 750, 800, 850, 900, 950, 1e3, 1.06e3, 1.12e3, 1.18e3}');
model.study('std1').feature('freq').setEntry('outputmap', 'acpr', 'selection');
model.study('std1').feature('freq').setEntry('outputselectionmap', 'acpr', 'sel1');
model.study('std1').feature('freq').setEntry('outputmap', 'solid', 'selection');
model.study('std1').feature('freq').setEntry('outputselectionmap', 'solid', 'sel2');

model.sol('sol1').runAll;

model.result.create('pg1', 'PlotGroup3D');
model.result('pg1').set('data', 'dset1');
model.result('pg1').setIndex('looplevel', 62, 0);
model.result('pg1').create('surf1', 'Surface');
model.result('pg1').feature('surf1').set('expr', {'acpr.p_t'});
model.result('pg1').feature('surf1').set('colortable', 'Wave');
model.result('pg1').feature('surf1').set('colorscalemode', 'linearsymmetric');
model.result('pg1').set('showlegendsunit', true);
model.result('pg1').label('Acoustic Pressure (acpr)');
model.result.create('pg2', 'PlotGroup3D');
model.result('pg2').set('data', 'dset1');
model.result('pg2').setIndex('looplevel', 62, 0);
model.result('pg2').create('surf1', 'Surface');
model.result('pg2').feature('surf1').set('expr', {'acpr.Lp_t'});
model.result('pg2').feature('surf1').set('colortable', 'Rainbow');
model.result('pg2').feature('surf1').set('colorscalemode', 'linear');
model.result('pg2').set('showlegendsunit', true);
model.result('pg2').label('Sound Pressure Level (acpr)');
model.result.create('pg3', 'PlotGroup3D');
model.result('pg3').set('data', 'dset1');
model.result('pg3').setIndex('looplevel', 62, 0);
model.result('pg3').create('iso1', 'Isosurface');
model.result('pg3').feature('iso1').set('expr', {'acpr.p_t'});
model.result('pg3').feature('iso1').set('number', '10');
model.result('pg3').feature('iso1').set('colortable', 'Wave');
model.result('pg3').feature('iso1').set('colorscalemode', 'linearsymmetric');
model.result('pg3').set('showlegendsunit', true);
model.result('pg3').label('Acoustic Pressure, Isosurfaces (acpr)');
model.result.create('pg4', 'PlotGroup3D');
model.result('pg4').set('data', 'dset1');
model.result('pg4').setIndex('looplevel', 62, 0);
model.result('pg4').set('defaultPlotID', 'stress');
model.result('pg4').label('Stress (solid)');
model.result('pg4').set('frametype', 'spatial');
model.result('pg4').create('vol1', 'Volume');
model.result('pg4').feature('vol1').set('expr', {'solid.misesGp_peak'});
model.result('pg4').feature('vol1').set('threshold', 'manual');
model.result('pg4').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg4').feature('vol1').set('colortable', 'Rainbow');
model.result('pg4').feature('vol1').set('colortabletrans', 'none');
model.result('pg4').feature('vol1').set('colorscalemode', 'linear');
model.result('pg4').feature('vol1').set('resolution', 'custom');
model.result('pg4').feature('vol1').set('refine', 2);
model.result('pg4').feature('vol1').set('colortable', 'Prism');
model.result('pg4').feature('vol1').create('def', 'Deform');
model.result('pg4').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg4').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg1').run;
model.result('pg2').run;
model.result('pg3').run;
model.result.setOnlyPlotWhenRequested(true);
model.result('pg4').set('showlegendsunit', true);
model.result('pg4').feature('vol1').feature.remove('def');
model.result('pg4').run;
model.result.create('pg5', 'PlotGroup3D');
model.result('pg5').label('Incident Intensity');
model.result('pg5').set('showlegendsunit', true);
model.result('pg5').create('surf1', 'Surface');
model.result('pg5').feature('surf1').set('expr', 'Ix_room');
model.result('pg5').feature('surf1').set('colortable', 'Rainbow');
model.result('pg5').feature('surf1').set('colorscalemode', 'linear');
model.result('pg5').feature('surf1').create('sel1', 'Selection');
model.result('pg5').feature('surf1').feature('sel1').selection.set([1]);
model.result('pg5').run;
model.result.duplicate('pg6', 'pg5');
model.result('pg6').label('Transmitted Intensity');
model.result('pg6').feature('surf1').set('expr', 'acpr.Ix');
model.result('pg6').feature('surf1').feature('sel1').selection.set([26]);
model.result('pg6').run;
model.result.create('pg7', 'PlotGroup3D');
model.result('pg7').set('data', 'dset1');
model.result('pg7').setIndex('looplevel', 62, 0);
model.result('pg7').set('defaultPlotID', 'displacement');
model.result('pg7').label('Displacement (solid)');
model.result('pg7').set('frametype', 'spatial');
model.result('pg7').set('showlegends', true);
model.result('pg7').create('vol1', 'Volume');
model.result('pg7').feature('vol1').set('expr', {'solid.disp'});
model.result('pg7').feature('vol1').set('threshold', 'manual');
model.result('pg7').feature('vol1').set('thresholdvalue', 0.2);
model.result('pg7').feature('vol1').set('colortable', 'SpectrumLight');
model.result('pg7').feature('vol1').set('colortabletrans', 'none');
model.result('pg7').feature('vol1').set('colorscalemode', 'linear');
model.result('pg7').feature('vol1').set('resolution', 'custom');
model.result('pg7').feature('vol1').set('refine', 2);
model.result('pg7').feature('vol1').create('def', 'Deform');
model.result('pg7').feature('vol1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg7').feature('vol1').feature('def').set('descr', 'Displacement field');
model.result('pg7').label('Displacement (solid)');
model.result('pg7').set('titletype', 'manual');
model.result('pg7').set('title', 'f = eval(freq) Hz');
model.result('pg7').set('edges', false);
model.result('pg7').set('showlegendsunit', true);
model.result('pg7').feature.remove('vol1');
model.result('pg7').create('surf1', 'Surface');
model.result('pg7').feature('surf1').set('expr', 'solid.disp');
model.result('pg7').feature('surf1').set('colortable', 'SpectrumLight');
model.result('pg7').feature('surf1').set('colorscalemode', 'linear');
model.result('pg7').feature('surf1').create('def1', 'Deform');
model.result('pg7').feature('surf1').create('filt1', 'Filter');
model.result('pg7').feature('surf1').feature('filt1').set('expr', 'z>1.5[m]');
model.result('pg7').create('surf2', 'Surface');
model.result('pg7').feature('surf2').create('sel1', 'Selection');
model.result('pg7').feature('surf2').feature('sel1').selection.set([53]);
model.result('pg7').run;
model.result.create('pg8', 'PlotGroup1D');
model.result('pg8').label('STL: P_in/P_tr (octaves)');
model.result('pg8').set('titletype', 'manual');
model.result('pg8').set('title', 'Sound Transmission Loss (octaves)');
model.result('pg8').set('xlabelactive', true);
model.result('pg8').set('xlabel', 'f (Hz)');
model.result('pg8').set('ylabelactive', true);
model.result('pg8').set('ylabel', 'STL (dB)');
model.result('pg8').set('legendpos', 'lowerleft');
model.result('pg8').create('oct1', 'OctaveBand');
model.result('pg8').feature('oct1').set('quantity', 'bandpower');
model.result('pg8').feature('oct1').set('markerpos', 'datapoints');
model.result('pg8').feature('oct1').set('linewidth', 'preference');
model.result('pg8').feature('oct1').selection.geom('geom1');
model.result('pg8').feature('oct1').set('exprtype', 'power');
model.result('pg8').feature('oct1').set('expr', 'P_in');
model.result('pg8').feature('oct1').set('powerref', 'P_tr');
model.result('pg8').feature('oct1').set('quantity', 'continuous');
model.result('pg8').feature.duplicate('oct2', 'oct1');
model.result('pg8').feature('oct2').set('quantity', 'bandaveragepsd');
model.result('pg8').feature('oct2').set('type', 'outline');
model.result('pg8').create('glob1', 'Global');
model.result('pg8').feature('glob1').set('markerpos', 'datapoints');
model.result('pg8').feature('glob1').set('linewidth', 'preference');
model.result('pg8').feature('glob1').set('data', 'dset1');
model.result('pg8').feature('glob1').setIndex('looplevelinput', 'manual', 0);
model.result('pg8').feature('glob1').setIndex('looplevel', [19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62], 0);
model.result('pg8').feature('glob1').setIndex('expr', 'STL_typical(freq)', 0);
model.result('pg8').feature('glob1').setIndex('unit', '', 0);
model.result('pg8').feature('glob1').setIndex('descr', 'Typical Measurements', 0);
model.result('pg8').run;
model.result.duplicate('pg9', 'pg8');
model.result('pg9').label('STL: P_in/P_tr (1/3 octaves)');
model.result('pg9').set('title', 'Sound Transmission Loss (1/3 octaves)');
model.result('pg9').feature('oct2').set('bandtype', 'octave3');
model.result('pg9').create('glob2', 'Global');
model.result('pg9').feature('glob2').set('markerpos', 'datapoints');
model.result('pg9').feature('glob2').set('linewidth', 'preference');
model.result('pg9').feature('glob2').set('data', 'dset1');
model.result('pg9').feature('glob2').setIndex('looplevelinput', 'manual', 0);
model.result('pg9').feature('glob2').setIndex('looplevel', [29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62], 0);
model.result('pg9').feature('glob2').setIndex('expr', '10*log10(1+(pi*freq*m/(rho0*c0))^2)-5.5', 0);
model.result('pg9').feature('glob2').setIndex('unit', '', 0);
model.result('pg9').feature('glob2').setIndex('descr', 'Sharp''s Equation (mass law)', 0);
model.result('pg9').run;
model.result.create('pg10', 'PlotGroup1D');
model.result('pg10').label('Incident Power (three methods)');
model.result('pg10').set('titletype', 'manual');
model.result('pg10').set('title', 'Incident Power: Three Computation Methods');
model.result('pg10').set('xlabelactive', true);
model.result('pg10').set('xlabel', 'f (Hz)');
model.result('pg10').set('ylabelactive', true);
model.result('pg10').set('ylabel', 'Power: P<sub>in</sub> (W)');
model.result('pg10').set('xlog', true);
model.result('pg10').set('ylog', true);
model.result('pg10').set('legendpos', 'lowerright');
model.result('pg10').create('glob1', 'Global');
model.result('pg10').feature('glob1').set('markerpos', 'datapoints');
model.result('pg10').feature('glob1').set('linewidth', 'preference');
model.result('pg10').feature('glob1').setIndex('expr', 'P_in', 0);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 0);
model.result('pg10').feature('glob1').setIndex('expr', 'P_in_proom', 1);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 1);
model.result('pg10').feature('glob1').setIndex('expr', 'P_in_th', 2);
model.result('pg10').feature('glob1').setIndex('unit', 'W', 2);
model.result('pg10').run;

model.study.create('std2');
model.study('std2').create('eig', 'Eigenfrequency');
model.study('std2').feature('eig').set('plotgroup', 'Default');
model.study('std2').feature('eig').set('chkeigregion', true);
model.study('std2').feature('eig').set('conrad', '1');
model.study('std2').feature('eig').set('conradynhm', '1');
model.study('std2').feature('eig').set('storefact', false);
model.study('std2').feature('eig').set('solnum', 'auto');
model.study('std2').feature('eig').set('notsolnum', 'auto');
model.study('std2').feature('eig').set('outputmap', {});
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').set('ngenAUX', '1');
model.study('std2').feature('eig').set('goalngenAUX', '1');
model.study('std2').feature('eig').setSolveFor('/physics/acpr', false);
model.study('std2').feature('eig').setSolveFor('/physics/solid', true);
model.study('std2').feature('eig').setSolveFor('/multiphysics/asb1', false);
model.study('std2').label('Study 2 - Eigenfrequency Analysis');
model.study('std2').feature('eig').set('neigsactive', true);
model.study('std2').feature('eig').set('neigs', 3);
model.study('std2').feature('eig').set('eigwhich', 'lr');

model.sol.create('sol2');
model.sol('sol2').study('std2');
model.sol('sol2').create('st1', 'StudyStep');
model.sol('sol2').feature('st1').set('study', 'std2');
model.sol('sol2').feature('st1').set('studystep', 'eig');
model.sol('sol2').create('v1', 'Variables');
model.sol('sol2').feature('v1').set('control', 'eig');
model.sol('sol2').create('e1', 'Eigenvalue');
model.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');
model.sol('sol2').feature('e1').set('eigvfunscaleparam', '6.39E-6');
model.sol('sol2').feature('e1').set('control', 'eig');
model.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);
model.sol('sol2').attach('std2');
model.sol('sol2').runAll;

model.result.create('pg11', 'PlotGroup3D');
model.result('pg11').set('data', 'dset2');
model.result('pg11').setIndex('looplevel', 1, 0);
model.result('pg11').set('defaultPlotID', 'modeShape');
model.result('pg11').label('Mode Shape (solid)');
model.result('pg11').set('showlegends', false);
model.result('pg11').create('surf1', 'Surface');
model.result('pg11').feature('surf1').set('expr', {'solid.disp'});
model.result('pg11').feature('surf1').set('threshold', 'manual');
model.result('pg11').feature('surf1').set('thresholdvalue', 0.2);
model.result('pg11').feature('surf1').set('colortable', 'Rainbow');
model.result('pg11').feature('surf1').set('colortabletrans', 'none');
model.result('pg11').feature('surf1').set('colorscalemode', 'linear');
model.result('pg11').feature('surf1').set('colortable', 'AuroraBorealis');
model.result('pg11').feature('surf1').create('def', 'Deform');
model.result('pg11').feature('surf1').feature('def').set('expr', {'u' 'v' 'w'});
model.result('pg11').feature('surf1').feature('def').set('descr', 'Displacement field');
model.result.evaluationGroup.create('std2EvgFrq', 'EvaluationGroup');
model.result.evaluationGroup('std2EvgFrq').set('defaultPlotID', 'eigenfrequenciesTable_solid');
model.result.evaluationGroup('std2EvgFrq').set('data', 'dset2');
model.result.evaluationGroup('std2EvgFrq').label('Eigenfrequencies (Study 2 - Eigenfrequency Analysis)');
model.result.evaluationGroup('std2EvgFrq').create('gev1', 'EvalGlobal');
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', '2*pi*freq', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', 'rad/s', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Angular frequency', 0);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'imag(freq)/abs(freq)', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Damping ratio', 1);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('expr', 'abs(freq)/imag(freq)/2', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('unit', '1', 2);
model.result.evaluationGroup('std2EvgFrq').feature('gev1').setIndex('descr', 'Quality factor', 2);
model.result.evaluationGroup('std2EvgFrq').run;
model.result('pg5').setIndex('looplevel', 23, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 35, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 47, 0);
model.result('pg5').run;
model.result('pg5').setIndex('looplevel', 59, 0);
model.result('pg5').run;
model.result('pg6').setIndex('looplevel', 23, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 35, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 47, 0);
model.result('pg6').run;
model.result('pg6').setIndex('looplevel', 59, 0);
model.result('pg6').run;
model.result('pg7').setIndex('looplevel', 23, 0);
model.result('pg7').run;
model.result('pg7').setIndex('looplevel', 35, 0);
model.result('pg7').run;
model.result('pg7').setIndex('looplevel', 47, 0);
model.result('pg7').run;
model.result('pg7').setIndex('looplevel', 59, 0);
model.result('pg7').run;
model.result('pg11').run;
model.result('pg11').set('looplevel', [2]);
model.result('pg11').run;
model.result('pg11').set('looplevel', [3]);
model.result('pg11').run;

model.title('Sound Transmission Loss Through a Concrete Wall');

model.description('This model presents a practical and efficient method to compute the sound transmission loss (STL) through a building component. Specifically, this example treats the case of a concrete wall. The method used here is valid as long as the component has little influence on the acoustic field on the source side. The method is based on assuming an ideal diffuse field on the source side and an ideal anechoic termination on the receiver side of the concrete wall. From the approach used in this model, you can extract an ideal, experiment-independent STL. The results obtained are compared to published experimental data and show good agreement.');

model.mesh.clearMeshes;

model.sol('sol1').clearSolutionData;
model.sol('sol2').clearSolutionData;

model.label('sound_transmission_loss_concrete.mph');

model.modelNode.label('Components');

out = model;
