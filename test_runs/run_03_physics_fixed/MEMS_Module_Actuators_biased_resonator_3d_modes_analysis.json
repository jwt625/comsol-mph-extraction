{
  "model_name": "MEMS_Module_Actuators_biased_resonator_3d_modes",
  "metadata": {
    "apiClass": "Model",
    "author": "COMSOL",
    "created": "1696071808724",
    "description": "An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.",
    "displayLabel": "biased_resonator_3d_modes.mph",
    "icon": "comsol_modelroot.png",
    "label": "biased_resonator_3d_modes.mph",
    "language": "en_US",
    "lastComputationDate": "1696071752745",
    "lastComputationTime": "221641",
    "lastComputationVersion": "COMSOL 6.2.0.259",
    "lastModified": "1696071808740",
    "lastModifiedBy": "COMSOL",
    "modelEntityPath": "/",
    "name": "root",
    "nodes": [
      {
        "apiClass": "NonEntity",
        "icon": "global_branch.png",
        "label": "Global Definitions",
        "nodes": [
          {
            "apiClass": "ModelParamGroup",
            "author": "COMSOL",
            "created": "1664324758101",
            "displayLabel": "Parameters 1",
            "icon": "parameter.png",
            "label": "Parameters 1",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/param/group/default",
            "settings": [
              {
                "description": "DC bias voltage",
                "name": "Vdc",
                "scalarImag": "0.0",
                "scalarReal": "35.0",
                "value": "35[V]"
              }
            ],
            "tag": "default",
            "type": "Parameters",
            "windowType": 1
          },
          {
            "apiClass": "CommonFeature",
            "apiType": "CommonInputDefault",
            "author": "COMSOL",
            "created": "1664324758103",
            "displayLabel": "Default Model Inputs",
            "icon": "commonmodelinput.png",
            "label": "Default Model Inputs",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/common/cminpt",
            "settings": [
              {
                "description": "Model input",
                "name": "quantity"
              }
            ],
            "tag": "cminpt",
            "type": "Default_model_inputs",
            "windowType": 1
          },
          {
            "apiClass": "MaterialList",
            "author": "COMSOL",
            "created": "1664324758103",
            "displayLabel": "Materials",
            "icon": "global_materials.png",
            "label": "Materials",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/material",
            "tag": "material",
            "type": "Materials",
            "windowType": 1
          }
        ],
        "tag": "nonEntity1",
        "windowType": 1
      },
      {
        "apiClass": "ModelNode",
        "author": "COMSOL",
        "axisymmetric": false,
        "created": "1664324758186",
        "displayLabel": "Component 1",
        "icon": "model_3d.png",
        "label": "Component 1",
        "lastModified": "0",
        "lastModifiedBy": "COMSOL",
        "modelEntityPath": "/modelNode/comp1",
        "name": "comp1",
        "nodes": [
          {
            "apiClass": "NonEntity",
            "icon": "definitions.png",
            "label": "Definitions",
            "nodes": [
              {
                "apiClass": "FunctionFeature",
                "apiType": "Interpolation",
                "author": "COMSOL",
                "created": "1696071504328",
                "displayLabel": "Interpolation 1",
                "icon": "function_interpolation.png",
                "label": "Interpolation 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/func/int1",
                "name": "int1",
                "settings": [
                  {
                    "apiValue": "table",
                    "description": "Data source",
                    "name": "source",
                    "value": "Local table"
                  },
                  {
                    "description": "Function name",
                    "name": "funcname",
                    "value": "int1"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Interpolation",
                    "name": "interp",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "value",
                    "description": "Extrapolation",
                    "name": "extrap",
                    "value": "Specific value"
                  },
                  {
                    "description": "Value outside range",
                    "name": "extrapvalue",
                    "scalarReal": "NaN",
                    "value": "NaN"
                  },
                  {
                    "apiValue": "none",
                    "description": "Argument",
                    "name": "argtrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "none",
                    "description": "Function",
                    "name": "valtrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Define inverse function",
                    "name": "defineinv",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Define primitive function",
                    "name": "defineprimfun",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Define random function",
                    "name": "definerandom",
                    "value": "false"
                  }
                ],
                "tag": "int1",
                "type": "Interpolation",
                "windowType": 1
              },
              {
                "apiClass": "NonEntity",
                "icon": "definitions_selections.png",
                "label": "Selections",
                "nodes": [
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Explicit",
                    "author": "COMSOL",
                    "created": "1664324762130",
                    "displayLabel": "All domains",
                    "icon": "selections.png",
                    "label": "All domains",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/sel1",
                    "settings": [
                      {
                        "apiValue": "off",
                        "description": "Group by continuous tangent",
                        "name": "groupcontang",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "sel1",
                    "type": "Explicit",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324762766",
                    "displayLabel": "Ground Plane",
                    "icon": "selection_box.png",
                    "label": "Ground Plane",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box1",
                    "settings": [
                      {
                        "apiValue": "2",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Boundary"
                      },
                      {
                        "apiValue": "off",
                        "description": "Group by continuous tangent",
                        "name": "groupcontang",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "value": "-Inf"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "value": "Inf"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "value": "Inf"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-2.0",
                        "value": "-2"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "-1.0",
                        "value": "-1"
                      },
                      {
                        "apiValue": "inside",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity inside box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box1",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324763823",
                    "displayLabel": "Oxide",
                    "icon": "selection_box.png",
                    "label": "Oxide",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box2",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "value": "-Inf"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "value": "Inf"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "value": "Inf"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-1.0",
                        "value": "-1"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "-0.9",
                        "value": "-0.9"
                      },
                      {
                        "apiValue": "intersects",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity intersects box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box2",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324764662",
                    "displayLabel": "Nitride",
                    "icon": "selection_box.png",
                    "label": "Nitride",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box3",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "value": "-Inf"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "value": "Inf"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "value": "Inf"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-0.4",
                        "value": "-0.4"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "-0.35",
                        "value": "-0.35"
                      },
                      {
                        "apiValue": "intersects",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity intersects box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box3",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324765390",
                    "displayLabel": "Electrode",
                    "icon": "selection_box.png",
                    "label": "Electrode",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box4",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "scalarReal": "-0.1",
                        "value": "-0.1"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "scalarReal": "0.1",
                        "value": "0.1"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "scalarReal": "-4.2",
                        "value": "-4.2"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "value": "Inf"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-0.15",
                        "value": "-0.15"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "-0.1",
                        "value": "-0.1"
                      },
                      {
                        "apiValue": "intersects",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity intersects box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box4",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Ball",
                    "author": "COMSOL",
                    "created": "1664324766559",
                    "displayLabel": "Ball 1",
                    "icon": "selection_ball.png",
                    "label": "Ball 1",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/ball1",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x",
                        "name": "posx",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "description": "y",
                        "name": "posy",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "description": "z",
                        "name": "posz",
                        "scalarReal": "1.0",
                        "value": "1"
                      },
                      {
                        "description": "Radius",
                        "name": "r",
                        "scalarReal": "0.1",
                        "value": "0.1"
                      },
                      {
                        "apiValue": "intersects",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity intersects ball"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "ball1",
                    "type": "Ball",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324767090",
                    "displayLabel": "Box 5",
                    "icon": "selection_box.png",
                    "label": "Box 5",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box5",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "value": "-Inf"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "value": "Inf"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "scalarReal": "4.8",
                        "value": "4.8"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-0.35",
                        "value": "-0.35"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "0.05",
                        "value": "0.05"
                      },
                      {
                        "apiValue": "inside",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity inside box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box5",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324767887",
                    "displayLabel": "Box 6",
                    "icon": "selection_box.png",
                    "label": "Box 6",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box6",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "scalarReal": "-15.0",
                        "value": "-15"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "scalarReal": "15.0",
                        "value": "15"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "scalarReal": "4.8",
                        "value": "4.8"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "scalarReal": "-0.35",
                        "value": "-0.35"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "scalarReal": "0.05",
                        "value": "0.05"
                      },
                      {
                        "apiValue": "inside",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity inside box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box6",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Difference",
                    "author": "COMSOL",
                    "created": "1664324768387",
                    "displayLabel": "Resonator",
                    "icon": "selection_difference.png",
                    "label": "Resonator",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/dif1",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "dif1",
                    "type": "Difference",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Union",
                    "author": "COMSOL",
                    "created": "1664324769841",
                    "displayLabel": "PolySi",
                    "icon": "selection_union.png",
                    "label": "PolySi",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/uni1",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "uni1",
                    "type": "Union",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Difference",
                    "author": "COMSOL",
                    "created": "1664324770639",
                    "displayLabel": "Air",
                    "icon": "selection_difference.png",
                    "label": "Air",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/dif2",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "dif2",
                    "type": "Difference",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Adjacent",
                    "author": "COMSOL",
                    "created": "1664324771984",
                    "displayLabel": "Resonator Boundaries",
                    "icon": "selection_adjacent.png",
                    "label": "Resonator Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/adj1",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Geometric entity level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "2",
                        "description": "Geometric entity level",
                        "name": "outputdim",
                        "value": "Adjacent boundaries"
                      },
                      {
                        "apiValue": "on",
                        "description": "Exterior boundaries",
                        "name": "exterior",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Interior boundaries",
                        "name": "interior",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "adj1",
                    "type": "Adjacent",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Adjacent",
                    "author": "COMSOL",
                    "created": "1664324772797",
                    "displayLabel": "Electrode Boundaries",
                    "icon": "selection_adjacent.png",
                    "label": "Electrode Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/adj2",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Geometric entity level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "2",
                        "description": "Geometric entity level",
                        "name": "outputdim",
                        "value": "Adjacent boundaries"
                      },
                      {
                        "apiValue": "on",
                        "description": "Exterior boundaries",
                        "name": "exterior",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Interior boundaries",
                        "name": "interior",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "adj2",
                    "type": "Adjacent",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Adjacent",
                    "author": "COMSOL",
                    "created": "1664324773580",
                    "displayLabel": "Nitride Boundaries",
                    "icon": "selection_adjacent.png",
                    "label": "Nitride Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/adj3",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Geometric entity level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "2",
                        "description": "Geometric entity level",
                        "name": "outputdim",
                        "value": "Adjacent boundaries"
                      },
                      {
                        "apiValue": "on",
                        "description": "Exterior boundaries",
                        "name": "exterior",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Interior boundaries",
                        "name": "interior",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "adj3",
                    "type": "Adjacent",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Adjacent",
                    "author": "COMSOL",
                    "created": "1664324774363",
                    "displayLabel": "Geometry Exterior Boundaries",
                    "icon": "selection_adjacent.png",
                    "label": "Geometry Exterior Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/adj4",
                    "settings": [
                      {
                        "apiValue": "3",
                        "description": "Geometric entity level",
                        "name": "entitydim",
                        "value": "Domain"
                      },
                      {
                        "apiValue": "2",
                        "description": "Geometric entity level",
                        "name": "outputdim",
                        "value": "Adjacent boundaries"
                      },
                      {
                        "apiValue": "on",
                        "description": "Exterior boundaries",
                        "name": "exterior",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Interior boundaries",
                        "name": "interior",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "adj4",
                    "type": "Adjacent",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Difference",
                    "author": "COMSOL",
                    "created": "1664324775161",
                    "displayLabel": "Resonator Exterior Boundaries",
                    "icon": "selection_difference.png",
                    "label": "Resonator Exterior Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/dif3",
                    "settings": [
                      {
                        "apiValue": "2",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Boundary"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "dif3",
                    "type": "Difference",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Difference",
                    "author": "COMSOL",
                    "created": "1664324776865",
                    "displayLabel": "Electrode Exterior Boundaries",
                    "icon": "selection_difference.png",
                    "label": "Electrode Exterior Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/dif4",
                    "settings": [
                      {
                        "apiValue": "2",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Boundary"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "dif4",
                    "type": "Difference",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Intersection",
                    "author": "COMSOL",
                    "created": "1664324778541",
                    "displayLabel": "Fixed Boundaries",
                    "icon": "selection_intersection.png",
                    "label": "Fixed Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/int1",
                    "settings": [
                      {
                        "apiValue": "2",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Boundary"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "int1",
                    "type": "Intersection",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SelectionFeature",
                    "apiType": "Box",
                    "author": "COMSOL",
                    "created": "1664324779786",
                    "displayLabel": "Symmetry Boundaries",
                    "icon": "selection_box.png",
                    "label": "Symmetry Boundaries",
                    "lastModified": "1696071532901",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/selection/box7",
                    "settings": [
                      {
                        "apiValue": "2",
                        "description": "Level",
                        "name": "entitydim",
                        "value": "Boundary"
                      },
                      {
                        "apiValue": "off",
                        "description": "Group by continuous tangent",
                        "name": "groupcontang",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Entities",
                        "name": "inputent",
                        "value": "All"
                      },
                      {
                        "description": "x minimum",
                        "name": "xmin",
                        "scalarReal": "-0.1",
                        "value": "-0.1"
                      },
                      {
                        "description": "x maximum",
                        "name": "xmax",
                        "scalarReal": "0.1",
                        "value": "0.1"
                      },
                      {
                        "description": "y minimum",
                        "name": "ymin",
                        "value": "-Inf"
                      },
                      {
                        "description": "y maximum",
                        "name": "ymax",
                        "value": "Inf"
                      },
                      {
                        "description": "z minimum",
                        "name": "zmin",
                        "value": "-Inf"
                      },
                      {
                        "description": "z maximum",
                        "name": "zmax",
                        "value": "Inf"
                      },
                      {
                        "apiValue": "inside",
                        "description": "Include entity if",
                        "name": "condition",
                        "value": "Entity inside box"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color",
                        "name": "color",
                        "value": "None"
                      }
                    ],
                    "tag": "box7",
                    "type": "Box[cuboid]",
                    "windowType": 1
                  }
                ],
                "tag": "nonEntity3",
                "windowType": 1
              },
              {
                "apiClass": "CommonFeature",
                "apiType": "ParticipationFactors",
                "author": "COMSOL",
                "created": "1696071506734",
                "displayLabel": "Participation Factors 1",
                "icon": "participation_factors.png",
                "label": "Participation Factors 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/common/mpf1",
                "name": "mpf1",
                "settings": [
                  {
                    "apiValue": "com",
                    "description": "Center of rotation",
                    "name": "cor",
                    "value": "Center of mass"
                  }
                ],
                "tag": "mpf1",
                "type": "Participation_factors",
                "windowType": 1
              },
              {
                "apiClass": "Coordsys",
                "apiType": "Boundary",
                "author": "COMSOL",
                "created": "1664324758187",
                "displayLabel": "Boundary System 1",
                "icon": "coordsys_boundary_coordinate.png",
                "label": "Boundary System 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/coordsys/sys1",
                "name": "sys1",
                "settings": [
                  {
                    "description": "Name",
                    "name": "name",
                    "value": "sys1"
                  },
                  {
                    "apiValue": "spatial",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Deformed configuration"
                  },
                  {
                    "apiValue": "off",
                    "description": "Reverse normal direction",
                    "name": "reversenormal",
                    "value": "false"
                  },
                  {
                    "apiValue": "3",
                    "description": "Axis",
                    "name": "mastercoordsystcomp",
                    "value": "z"
                  },
                  {
                    "apiValue": "globalCartesianSpatial",
                    "description": "Create first tangent direction from",
                    "name": "mastersystem",
                    "value": "Global Cartesian (spatial)"
                  }
                ],
                "tag": "sys1",
                "type": "Boundary_system",
                "windowType": 1
              },
              {
                "apiClass": "View",
                "apiType": "ModelView3D",
                "author": "COMSOL",
                "created": "1664324758194",
                "displayLabel": "View 1",
                "icon": "view3d.png",
                "label": "View 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/view/view1",
                "nodes": [
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "Camera",
                    "author": "COMSOL",
                    "created": "1664324758195",
                    "displayLabel": "Camera",
                    "icon": "camera.png",
                    "label": "Camera",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view1/camera",
                    "settings": [
                      {
                        "apiValue": "perspective",
                        "description": "Projection",
                        "name": "projection",
                        "value": "Perspective"
                      },
                      {
                        "description": "Zoom angle",
                        "name": "zoomanglefull",
                        "scalarReal": "11.42741584777832",
                        "value": "11.42741584777832"
                      },
                      {
                        "apiValue": "none",
                        "description": "View scale",
                        "name": "viewscaletype",
                        "value": "None"
                      },
                      {
                        "apiValue": "off",
                        "description": "Manual spacing",
                        "name": "manualgrid",
                        "value": "false"
                      }
                    ],
                    "tag": "camera",
                    "type": "Camera",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324758195",
                    "displayLabel": "Directional Light 1",
                    "icon": "directional_light.png",
                    "label": "Directional Light 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view1/feature/lgt1",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.8",
                        "value": "0.8"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt1",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324758195",
                    "displayLabel": "Directional Light 2",
                    "icon": "directional_light.png",
                    "label": "Directional Light 2",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view1/feature/lgt2",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.4",
                        "value": "0.4"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt2",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324758195",
                    "displayLabel": "Directional Light 3",
                    "icon": "directional_light.png",
                    "label": "Directional Light 3",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view1/feature/lgt3",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.55",
                        "value": "0.55"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "true"
                      }
                    ],
                    "tag": "lgt3",
                    "type": "Directional_light",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "on",
                    "description": "Wireframe rendering",
                    "name": "renderwireframe",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show geometry labels",
                    "name": "showlabels",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show edge direction arrows",
                    "name": "showDirections",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show grid",
                    "name": "showgrid",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Mesh rendering",
                    "name": "rendermesh",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis orientation",
                    "name": "showaxisorientation",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis units",
                    "name": "showunits",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Lock camera",
                    "name": "locked",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Lock rotation center",
                    "name": "rotcenlocked",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Scene light",
                    "name": "scenelight",
                    "value": "true"
                  },
                  {
                    "description": "Light intensity",
                    "name": "totlightintensity",
                    "scalarReal": "1.0",
                    "value": "1.0"
                  },
                  {
                    "apiValue": "on",
                    "description": "Diffuse light",
                    "name": "usediffuse",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Specular light",
                    "name": "usespecular",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Ambient light",
                    "name": "globalambient",
                    "value": "true"
                  },
                  {
                    "description": "Ambient intensity",
                    "name": "totambient",
                    "scalarReal": "0.3",
                    "value": "0.3"
                  },
                  {
                    "apiValue": "white",
                    "description": "Color",
                    "name": "ambientcolor",
                    "value": "White"
                  },
                  {
                    "apiValue": "off",
                    "description": "Ambient occlusion",
                    "name": "ssao",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Direct shadows",
                    "name": "shadowmapping",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Gamma correction",
                    "name": "displayoutput",
                    "value": "false"
                  },
                  {
                    "apiValue": "envmap_none",
                    "description": "Environment map",
                    "name": "environmentmap",
                    "value": "None"
                  },
                  {
                    "apiValue": "positivey",
                    "description": "Sky direction",
                    "name": "skydirection",
                    "value": "Positive Y"
                  },
                  {
                    "apiValue": "skyrotationzero",
                    "description": "Sky rotation",
                    "name": "skyrotation",
                    "value": "No rotation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Transparency",
                    "name": "transparency",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show selection colors",
                    "name": "showselection",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show material color and texture",
                    "name": "showmaterial",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clipping active",
                    "name": "clippingactive",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip faces",
                    "name": "clipfaces",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip edges",
                    "name": "clipedges",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip points",
                    "name": "clippoints",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip primary hover effect",
                    "name": "clipprimaryhovereffect",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Clip contextual hover effect",
                    "name": "clipsecondaryhovereffect",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Highlight intersection",
                    "name": "cliphighlightintersection",
                    "value": "true"
                  },
                  {
                    "apiValue": "fromtheme",
                    "description": "Color",
                    "name": "clipintersectionhighlightcolor",
                    "value": "From theme"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply clipping",
                    "name": "clipapplyclipping",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show frames",
                    "name": "clipshowframes",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show gizmos",
                    "name": "clipshowgizmos",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show cross section",
                    "name": "clipshowcappedfaces",
                    "value": "false"
                  }
                ],
                "tag": "view1",
                "type": "View",
                "windowType": 1
              }
            ],
            "tag": "nonEntity2",
            "windowType": 1
          },
          {
            "apiClass": "GeomSequence",
            "author": "COMSOL",
            "axisymmetric": false,
            "created": "1664324758187",
            "displayLabel": "Geometry 1",
            "icon": "geometry.png",
            "label": "Geometry 1",
            "lastModified": "1696071800303",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/geom/geom1",
            "nodes": [
              {
                "apiClass": "GeomFeature",
                "apiType": "Block",
                "author": "COMSOL",
                "created": "1664324760443",
                "displayLabel": "Block 1",
                "icon": "block.png",
                "label": "Block 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/blk1",
                "name": "blk1",
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Construction geometry",
                    "name": "assignedconstruction",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Resulting objects selection",
                    "name": "selresult",
                    "value": "false"
                  },
                  {
                    "description": "Rotation",
                    "name": "rot",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "solid",
                    "description": "Type",
                    "name": "type",
                    "value": "Solid"
                  },
                  {
                    "apiValue": "z",
                    "description": "Axis type",
                    "name": "axistype",
                    "value": "z-axis"
                  },
                  {
                    "apiValue": "corner",
                    "description": "Base",
                    "name": "base",
                    "value": "Corner"
                  },
                  {
                    "apiValue": "off",
                    "description": "Left",
                    "name": "layerleft",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Right",
                    "name": "layerright",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Front",
                    "name": "layerfront",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Back",
                    "name": "layerback",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Bottom",
                    "name": "layerbottom",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Top",
                    "name": "layertop",
                    "value": "false"
                  }
                ],
                "tag": "blk1",
                "type": "Block",
                "windowType": 1
              },
              {
                "apiClass": "WorkPlaneFeature",
                "apiType": "WorkPlane",
                "author": "COMSOL",
                "created": "1664324760443",
                "displayLabel": "Work Plane 1",
                "icon": "workplane.png",
                "label": "Work Plane 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/wp1",
                "name": "wp1",
                "nodes": [
                  {
                    "apiClass": "GeomSequence",
                    "author": "COMSOL",
                    "axisymmetric": false,
                    "created": "1664324760443",
                    "displayLabel": "Plane Geometry",
                    "icon": "geometry.png",
                    "label": "Plane Geometry",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D",
                    "nodes": [
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 1",
                        "icon": "rectangle.png",
                        "label": "Rectangle 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r1",
                        "name": "r1",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r1",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 2",
                        "icon": "rectangle.png",
                        "label": "Rectangle 2",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r2",
                        "name": "r2",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r2",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 3",
                        "icon": "rectangle.png",
                        "label": "Rectangle 3",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r3",
                        "name": "r3",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r3",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 4",
                        "icon": "rectangle.png",
                        "label": "Rectangle 4",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r4",
                        "name": "r4",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r4",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 5",
                        "icon": "rectangle.png",
                        "label": "Rectangle 5",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r5",
                        "name": "r5",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r5",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 6",
                        "icon": "rectangle.png",
                        "label": "Rectangle 6",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r6",
                        "name": "r6",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r6",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 7",
                        "icon": "rectangle.png",
                        "label": "Rectangle 7",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r7",
                        "name": "r7",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r7",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 8",
                        "icon": "rectangle.png",
                        "label": "Rectangle 8",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r8",
                        "name": "r8",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r8",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 9",
                        "icon": "rectangle.png",
                        "label": "Rectangle 9",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r9",
                        "name": "r9",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r9",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 10",
                        "icon": "rectangle.png",
                        "label": "Rectangle 10",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r10",
                        "name": "r10",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r10",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 11",
                        "icon": "rectangle.png",
                        "label": "Rectangle 11",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r11",
                        "name": "r11",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r11",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760458",
                        "displayLabel": "Rectangle 12",
                        "icon": "rectangle.png",
                        "label": "Rectangle 12",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r12",
                        "name": "r12",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r12",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760474",
                        "displayLabel": "Rectangle 13",
                        "icon": "rectangle.png",
                        "label": "Rectangle 13",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r13",
                        "name": "r13",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r13",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760474",
                        "displayLabel": "Rectangle 14",
                        "icon": "rectangle.png",
                        "label": "Rectangle 14",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r14",
                        "name": "r14",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r14",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Rectangle",
                        "author": "COMSOL",
                        "created": "1664324760474",
                        "displayLabel": "Rectangle 15",
                        "icon": "rectangle.png",
                        "label": "Rectangle 15",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/r15",
                        "name": "r15",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Construction geometry",
                            "name": "assignedconstruction",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Constrain Rotation",
                            "name": "rotconstr",
                            "value": "false"
                          },
                          {
                            "description": "Rotation",
                            "name": "rot",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "apiValue": "solid",
                            "description": "Type",
                            "name": "type",
                            "value": "Solid"
                          },
                          {
                            "apiValue": "corner",
                            "description": "Base",
                            "name": "base",
                            "value": "Corner"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the left",
                            "name": "layerleft",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers to the right",
                            "name": "layerright",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Layers on bottom",
                            "name": "layerbottom",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Layers on top",
                            "name": "layertop",
                            "value": "false"
                          }
                        ],
                        "tag": "r15",
                        "type": "Rectangle[geometry]",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Union",
                        "author": "COMSOL",
                        "created": "1664324760474",
                        "displayLabel": "Union 1",
                        "icon": "geom_union.png",
                        "label": "Union 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/uni1",
                        "name": "uni1",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Propagate selections to resulting objects",
                            "name": "propagatesel",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Keep input objects",
                            "name": "keep",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Keep interior boundaries",
                            "name": "intbnd",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Repair tolerance",
                            "name": "repairtoltype",
                            "value": "Automatic"
                          }
                        ],
                        "tag": "uni1",
                        "type": "Union",
                        "windowType": 1
                      },
                      {
                        "apiClass": "GeomFeature",
                        "apiType": "Union",
                        "author": "COMSOL",
                        "created": "1664324760474",
                        "displayLabel": "Union 2",
                        "icon": "geom_union.png",
                        "label": "Union 2",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/geom/geom1/feature/wp1/sequence2D/feature/uni2",
                        "name": "uni2",
                        "settings": [
                          {
                            "apiValue": "off",
                            "description": "Resulting objects selection",
                            "name": "selresult",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Propagate selections to resulting objects",
                            "name": "propagatesel",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Keep input objects",
                            "name": "keep",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Keep interior boundaries",
                            "name": "intbnd",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Repair tolerance",
                            "name": "repairtoltype",
                            "value": "Automatic"
                          }
                        ],
                        "tag": "uni2",
                        "type": "Union",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "off",
                        "description": "View work plane geometry in 3D",
                        "name": "workplane3d",
                        "value": "false"
                      },
                      {
                        "apiValue": "on",
                        "description": "Coincident entities (blue)",
                        "name": "showcoincident",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Intersection (green)",
                        "name": "showintersection",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Projection (gray)",
                        "name": "showprojection",
                        "value": "true"
                      }
                    ],
                    "spaceDimension": 2,
                    "tag": "sequence2D",
                    "type": "Plane_geometry",
                    "windowType": 1
                  },
                  {
                    "apiClass": "View",
                    "apiType": "ModelView2D",
                    "author": "COMSOL",
                    "created": "1664324760443",
                    "displayLabel": "View 2",
                    "icon": "view2d.png",
                    "label": "View 2",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view2",
                    "nodes": [
                      {
                        "apiClass": "ViewFeature",
                        "apiType": "Axis2D",
                        "author": "COMSOL",
                        "created": "1664324760443",
                        "displayLabel": "Axis",
                        "icon": "view_axis.png",
                        "label": "Axis",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/view/view2/axis",
                        "settings": [
                          {
                            "description": "x minimum",
                            "name": "xmin",
                            "scalarReal": "-1.0",
                            "value": "-1"
                          },
                          {
                            "description": "x maximum",
                            "name": "xmax",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "description": "y minimum",
                            "name": "ymin",
                            "scalarReal": "-1.0",
                            "value": "-1"
                          },
                          {
                            "description": "y maximum",
                            "name": "ymax",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "none",
                            "description": "View scale",
                            "name": "viewscaletype",
                            "value": "None"
                          },
                          {
                            "apiValue": "off",
                            "description": "Manual spacing",
                            "name": "manualgrid",
                            "value": "false"
                          }
                        ],
                        "tag": "axis",
                        "type": "Axis",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "off",
                        "description": "Show geometry labels",
                        "name": "showlabels",
                        "value": "false"
                      },
                      {
                        "apiValue": "off",
                        "description": "Show edge direction arrows",
                        "name": "showDirections",
                        "value": "false"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show grid",
                        "name": "showgrid",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show axis units",
                        "name": "showunits",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Lock axis",
                        "name": "locked",
                        "value": "false"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show selection colors",
                        "name": "showselection",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Show material color and texture",
                        "name": "showmaterial",
                        "value": "false"
                      }
                    ],
                    "tag": "view2",
                    "type": "View",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Construction geometry",
                    "name": "assignedconstruction",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Resulting objects selection",
                    "name": "selresult",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": [
                      "Show in physics",
                      "Selections from plane geometry"
                    ],
                    "name": "selplaneshow",
                    "value": "false"
                  },
                  {
                    "apiValue": "quick",
                    "description": "Plane type",
                    "name": "planetype",
                    "value": "Quick"
                  },
                  {
                    "apiValue": "zx",
                    "description": "Plane",
                    "name": "quickplane",
                    "value": "zx-plane"
                  },
                  {
                    "apiValue": "distance",
                    "description": "Offset type",
                    "name": "quickoffsettype",
                    "value": "Distance"
                  },
                  {
                    "description": "y-coordinate",
                    "name": "quicky",
                    "scalarReal": "-6.0",
                    "value": "-6"
                  },
                  {
                    "apiValue": "global",
                    "description": "Origin",
                    "name": "quickorigin",
                    "value": "Global"
                  },
                  {
                    "apiValue": "natural",
                    "description": "Local x-axis",
                    "name": "quickaxis",
                    "value": "Natural"
                  },
                  {
                    "description": "Rotation",
                    "name": "rot",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in graphics",
                    "name": "showcoordsys",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Unite objects",
                    "name": "unite",
                    "value": "true"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Repair tolerance",
                    "name": "repairtoltype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "off",
                    "description": "View work plane geometry in 3D",
                    "name": "workplane3d",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Coincident entities (blue)",
                    "name": "showcoincident",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Intersection (green)",
                    "name": "showintersection",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Projection (gray)",
                    "name": "showprojection",
                    "value": "true"
                  }
                ],
                "tag": "wp1",
                "type": "Work_plane",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "Extrude",
                "author": "COMSOL",
                "created": "1664324760474",
                "displayLabel": "Extrude 1",
                "icon": "extrude.png",
                "label": "Extrude 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/ext1",
                "name": "ext1",
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Resulting objects selection",
                    "name": "selresult",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Propagate selections to resulting objects",
                    "name": "propagatesel",
                    "value": "true"
                  },
                  {
                    "apiValue": "workplane",
                    "description": "Extrude from",
                    "name": "extrudefrom",
                    "value": "Work plane"
                  },
                  {
                    "apiValue": "unite",
                    "description": "Input object handling",
                    "name": "inputhandling",
                    "value": "Unite with"
                  },
                  {
                    "apiValue": "distances",
                    "description": "Specify",
                    "name": "specify",
                    "value": "Distances from plane"
                  },
                  {
                    "apiValue": "off",
                    "description": "Reverse direction",
                    "name": "reverse",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Include input faces",
                    "name": "includeinput",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep cross-sectional faces",
                    "name": "crossfaces",
                    "value": "true"
                  }
                ],
                "tag": "ext1",
                "type": "Extrude",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "Mirror",
                "author": "COMSOL",
                "created": "1696071501126",
                "displayLabel": "Mirror 1",
                "icon": "geom_mirror.png",
                "label": "Mirror 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/mir1",
                "name": "mir1",
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Resulting objects selection",
                    "name": "selresult",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Propagate selections to resulting objects",
                    "name": "propagatesel",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep input objects",
                    "name": "keep",
                    "value": "true"
                  }
                ],
                "tag": "mir1",
                "type": "Mirror[reflect]",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "Finalize",
                "author": "COMSOL",
                "created": "1664324758191",
                "displayLabel": "Form Union",
                "icon": "geom_form_union_assembly.png",
                "label": "Form Union",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/fin",
                "name": "fin",
                "settings": [
                  {
                    "apiValue": "union",
                    "description": "Action",
                    "name": "action",
                    "value": "Form a union"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Repair tolerance",
                    "name": "repairtoltype",
                    "value": "Automatic"
                  }
                ],
                "tag": "fin",
                "type": "Form_union/assembly",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "ExplicitSelection",
                "author": "COMSOL",
                "created": "1664324760474",
                "displayLabel": "Geometry",
                "icon": "geom_selections.png",
                "label": "Geometry",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/sel1",
                "name": "sel1",
                "settings": [
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "all",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "All levels"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "sel1",
                "type": "Explicit_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760474",
                "displayLabel": "Ground Plane",
                "icon": "geom_selection_box.png",
                "label": "Ground Plane",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel1",
                "name": "boxsel1",
                "settings": [
                  {
                    "apiValue": "2",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Boundary"
                  },
                  {
                    "apiValue": "off",
                    "description": "Group by continuous tangent",
                    "name": "groupcontang",
                    "value": "false"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "value": "-Inf"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "value": "Inf"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "value": "Inf"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-2.0",
                    "value": "-2"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "-1.0",
                    "value": "-1"
                  },
                  {
                    "apiValue": "inside",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity inside box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel1",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760474",
                "displayLabel": "Oxide",
                "icon": "geom_selection_box.png",
                "label": "Oxide",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel2",
                "name": "boxsel2",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "value": "-Inf"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "value": "Inf"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "value": "Inf"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-1.0",
                    "value": "-1"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "-0.9",
                    "value": "-0.9"
                  },
                  {
                    "apiValue": "intersects",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity intersects box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel2",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Nitride",
                "icon": "geom_selection_box.png",
                "label": "Nitride",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel3",
                "name": "boxsel3",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "value": "-Inf"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "value": "Inf"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "value": "Inf"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-0.4",
                    "value": "-0.4"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "-0.35",
                    "value": "-0.35"
                  },
                  {
                    "apiValue": "intersects",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity intersects box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel3",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Electrode",
                "icon": "geom_selection_box.png",
                "label": "Electrode",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel4",
                "name": "boxsel4",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "scalarReal": "-0.1",
                    "value": "-0.1"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "scalarReal": "0.1",
                    "value": "0.1"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "scalarReal": "-4.2",
                    "value": "-4.2"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "value": "Inf"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-0.15",
                    "value": "-0.15"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "-0.1",
                    "value": "-0.1"
                  },
                  {
                    "apiValue": "intersects",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity intersects box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel4",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BallSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Ball Selection 1",
                "icon": "geom_selection_ball.png",
                "label": "Ball Selection 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/ballsel1",
                "name": "ballsel1",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x",
                    "name": "posx",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "y",
                    "name": "posy",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "z",
                    "name": "posz",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Radius",
                    "name": "r",
                    "scalarReal": "0.1",
                    "value": "0.1"
                  },
                  {
                    "apiValue": "intersects",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity intersects ball"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "ballsel1",
                "type": "Ball_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Box Selection 5",
                "icon": "geom_selection_box.png",
                "label": "Box Selection 5",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel5",
                "name": "boxsel5",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "value": "-Inf"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "value": "Inf"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "scalarReal": "4.8",
                    "value": "4.8"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-0.35",
                    "value": "-0.35"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "0.05",
                    "value": "0.05"
                  },
                  {
                    "apiValue": "inside",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity inside box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel5",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Box Selection 6",
                "icon": "geom_selection_box.png",
                "label": "Box Selection 6",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel6",
                "name": "boxsel6",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "scalarReal": "-15.0",
                    "value": "-15"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "scalarReal": "15.0",
                    "value": "15"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "scalarReal": "4.8",
                    "value": "4.8"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "scalarReal": "-0.35",
                    "value": "-0.35"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "scalarReal": "0.05",
                    "value": "0.05"
                  },
                  {
                    "apiValue": "inside",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity inside box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel6",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "DifferenceSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Resonator",
                "icon": "geom_selection_difference.png",
                "label": "Resonator",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/difsel1",
                "name": "difsel1",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "difsel1",
                "type": "Difference_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "UnionSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "PolySi",
                "icon": "geom_selection_union.png",
                "label": "PolySi",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/unisel1",
                "name": "unisel1",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "unisel1",
                "type": "Union_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "DifferenceSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Air",
                "icon": "geom_selection_difference.png",
                "label": "Air",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/difsel2",
                "name": "difsel2",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "difsel2",
                "type": "Difference_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "AdjacentSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Resonator Boundaries",
                "icon": "geom_selection_adjacent.png",
                "label": "Resonator Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/adjsel1",
                "name": "adjsel1",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Geometric entity level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "2",
                    "description": "Geometric entity level",
                    "name": "outputdim",
                    "value": "Adjacent boundaries"
                  },
                  {
                    "apiValue": "on",
                    "description": "Exterior boundaries",
                    "name": "exterior",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Interior boundaries",
                    "name": "interior",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "adjsel1",
                "type": "Adjacent_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "AdjacentSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Electrode Boundaries",
                "icon": "geom_selection_adjacent.png",
                "label": "Electrode Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/adjsel2",
                "name": "adjsel2",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Geometric entity level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "2",
                    "description": "Geometric entity level",
                    "name": "outputdim",
                    "value": "Adjacent boundaries"
                  },
                  {
                    "apiValue": "on",
                    "description": "Exterior boundaries",
                    "name": "exterior",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Interior boundaries",
                    "name": "interior",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "adjsel2",
                "type": "Adjacent_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "AdjacentSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Nitride Boundaries",
                "icon": "geom_selection_adjacent.png",
                "label": "Nitride Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/adjsel3",
                "name": "adjsel3",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Geometric entity level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "2",
                    "description": "Geometric entity level",
                    "name": "outputdim",
                    "value": "Adjacent boundaries"
                  },
                  {
                    "apiValue": "on",
                    "description": "Exterior boundaries",
                    "name": "exterior",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Interior boundaries",
                    "name": "interior",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "adjsel3",
                "type": "Adjacent_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "AdjacentSelection",
                "author": "COMSOL",
                "created": "1664324760489",
                "displayLabel": "Geometry Exterior Boundaries",
                "icon": "geom_selection_adjacent.png",
                "label": "Geometry Exterior Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/adjsel4",
                "name": "adjsel4",
                "settings": [
                  {
                    "apiValue": "3",
                    "description": "Geometric entity level",
                    "name": "entitydim",
                    "value": "Domain"
                  },
                  {
                    "apiValue": "2",
                    "description": "Geometric entity level",
                    "name": "outputdim",
                    "value": "Adjacent boundaries"
                  },
                  {
                    "apiValue": "on",
                    "description": "Exterior boundaries",
                    "name": "exterior",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Interior boundaries",
                    "name": "interior",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "adjsel4",
                "type": "Adjacent_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "DifferenceSelection",
                "author": "COMSOL",
                "created": "1664324760505",
                "displayLabel": "Resonator Exterior Boundaries",
                "icon": "geom_selection_difference.png",
                "label": "Resonator Exterior Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/difsel3",
                "name": "difsel3",
                "settings": [
                  {
                    "apiValue": "2",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Boundary"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "difsel3",
                "type": "Difference_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "DifferenceSelection",
                "author": "COMSOL",
                "created": "1664324760505",
                "displayLabel": "Electrode Exterior Boundaries",
                "icon": "geom_selection_difference.png",
                "label": "Electrode Exterior Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/difsel4",
                "name": "difsel4",
                "settings": [
                  {
                    "apiValue": "2",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Boundary"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "difsel4",
                "type": "Difference_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "IntersectionSelection",
                "author": "COMSOL",
                "created": "1664324760505",
                "displayLabel": "Fixed Boundaries",
                "icon": "geom_selection_intersection.png",
                "label": "Fixed Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/intsel1",
                "name": "intsel1",
                "settings": [
                  {
                    "apiValue": "2",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Boundary"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "intsel1",
                "type": "Intersection_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "BoxSelection",
                "author": "COMSOL",
                "created": "1664324760505",
                "displayLabel": "Symmetry Boundaries",
                "icon": "geom_selection_box.png",
                "label": "Symmetry Boundaries",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/boxsel7",
                "name": "boxsel7",
                "settings": [
                  {
                    "apiValue": "2",
                    "description": "Level",
                    "name": "entitydim",
                    "value": "Boundary"
                  },
                  {
                    "apiValue": "off",
                    "description": "Group by continuous tangent",
                    "name": "groupcontang",
                    "value": "false"
                  },
                  {
                    "apiValue": "all",
                    "description": "Entities",
                    "name": "inputent",
                    "value": "All"
                  },
                  {
                    "description": "x minimum",
                    "name": "xmin",
                    "scalarReal": "-0.1",
                    "value": "-0.1"
                  },
                  {
                    "description": "x maximum",
                    "name": "xmax",
                    "scalarReal": "0.1",
                    "value": "0.1"
                  },
                  {
                    "description": "y minimum",
                    "name": "ymin",
                    "value": "-Inf"
                  },
                  {
                    "description": "y maximum",
                    "name": "ymax",
                    "value": "Inf"
                  },
                  {
                    "description": "z minimum",
                    "name": "zmin",
                    "value": "-Inf"
                  },
                  {
                    "description": "z maximum",
                    "name": "zmax",
                    "value": "Inf"
                  },
                  {
                    "apiValue": "inside",
                    "description": "Include entity if",
                    "name": "condition",
                    "value": "Entity inside box"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "boxsel7",
                "type": "Box_selection",
                "windowType": 1
              },
              {
                "apiClass": "GeomFeature",
                "apiType": "ExplicitSelection",
                "author": "COMSOL",
                "created": "1664324760505",
                "displayLabel": "Free Triangular Mesh",
                "icon": "geom_selections.png",
                "label": "Free Triangular Mesh",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/geom/geom1/feature/sel2",
                "name": "sel2",
                "settings": [
                  {
                    "apiValue": "on",
                    "description": "Group by continuous tangent",
                    "name": "groupcontang",
                    "value": "true"
                  },
                  {
                    "description": "Angular tolerance",
                    "name": "angletol",
                    "scalarReal": "5.0",
                    "value": "5"
                  },
                  {
                    "apiValue": "on",
                    "description": "Keep selection",
                    "name": "selkeep",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show in physics",
                    "name": "selshow",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color",
                    "name": "color",
                    "value": "None"
                  }
                ],
                "tag": "sel2",
                "type": "Explicit_selection",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Scale values when changing units",
                "name": "scale",
                "value": "false"
              },
              {
                "apiValue": "\u00b5m",
                "description": "Length unit",
                "name": "lengthunit",
                "value": "\u00b5m"
              },
              {
                "apiValue": "deg",
                "description": "Angular unit",
                "name": "angularunit",
                "value": "Degrees"
              },
              {
                "apiValue": "auto",
                "description": "Default repair tolerance",
                "name": "repairtoltype",
                "value": "Automatic"
              },
              {
                "apiValue": "on",
                "description": "Build new operations automatically",
                "name": "autoBuildNew",
                "value": "true"
              },
              {
                "apiValue": "on",
                "description": "Build automatically when leaving geometry",
                "name": "autorebuild",
                "value": "true"
              }
            ],
            "spaceDimension": 3,
            "tag": "geom1",
            "type": "Geometry",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "material.png",
            "label": "Materials",
            "nodes": [
              {
                "apiClass": "Material",
                "apiType": "Common",
                "author": "COMSOL",
                "created": "1664324781187",
                "displayLabel": "Si - Polycrystalline silicon",
                "icon": "material.png",
                "label": "Si - Polycrystalline silicon",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/material/mat1",
                "name": "mat1",
                "nodes": [
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324781187",
                    "displayLabel": "Basic",
                    "icon": "material_property_group.png",
                    "label": "Basic",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat1/materialmodel/def",
                    "name": "def",
                    "settings": [
                      {
                        "description": "Coefficient of thermal expansion",
                        "name": "thermalexpansioncoefficient",
                        "scalarImag": "0.0",
                        "scalarReal": "2.6E-6",
                        "value": "2.6e-6[1/K]"
                      },
                      {
                        "description": "Heat capacity at constant pressure",
                        "name": "heatcapacity",
                        "scalarImag": "0.0",
                        "scalarReal": "678.0",
                        "value": "678[J/(kg*K)]"
                      },
                      {
                        "description": "Relative permittivity",
                        "name": "relpermittivity",
                        "scalarImag": "0.0",
                        "scalarReal": "4.5",
                        "value": "4.5"
                      },
                      {
                        "description": "Density",
                        "name": "density",
                        "scalarImag": "0.0",
                        "scalarReal": "2320.0",
                        "value": "2320[kg/m^3]"
                      },
                      {
                        "description": "Thermal conductivity",
                        "name": "thermalconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "34.0",
                        "value": "34[W/(m*K)]"
                      }
                    ],
                    "tag": "def",
                    "type": "Basic",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324781187",
                    "displayLabel": "Young's modulus and Poisson's ratio",
                    "icon": "material_property_group.png",
                    "label": "Young's modulus and Poisson's ratio",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat1/materialmodel/Enu",
                    "name": "Enu",
                    "settings": [
                      {
                        "description": "Young's modulus",
                        "name": "E",
                        "scalarImag": "0.0",
                        "scalarReal": "1.6E11",
                        "value": "160e9[Pa]"
                      },
                      {
                        "description": "Poisson's ratio",
                        "name": "nu",
                        "scalarImag": "0.0",
                        "scalarReal": "0.22",
                        "value": "0.22"
                      }
                    ],
                    "tag": "Enu",
                    "type": "Young's_modulus_and_Poisson's_ratio",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "custom",
                    "description": "Material type",
                    "name": "family",
                    "value": "Custom"
                  },
                  {
                    "apiValue": "custom",
                    "description": "Specular color",
                    "name": "specular",
                    "value": "Custom"
                  },
                  {
                    "apiValue": "custom",
                    "description": "Diffuse color",
                    "name": "diffuse",
                    "value": "Custom"
                  },
                  {
                    "apiValue": "custom",
                    "description": "Ambient color",
                    "name": "ambient",
                    "value": "Custom"
                  },
                  {
                    "apiValue": "off",
                    "description": "Custom basis for brush lines",
                    "name": "basis",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Normal mapping",
                    "name": "noise",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Additional color",
                    "name": "colornoise",
                    "value": "false"
                  },
                  {
                    "description": "Transparency",
                    "name": "transparency",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Fresnel transmittance",
                    "name": "uniformblending",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "cooktorrance",
                    "description": "Lighting model",
                    "name": "lighting",
                    "value": "Cook-Torrance"
                  },
                  {
                    "description": "Reflectance at normal incidence",
                    "name": "fresnel",
                    "scalarReal": "0.7",
                    "value": "0.7"
                  },
                  {
                    "description": "Surface roughness",
                    "name": "roughness",
                    "scalarReal": "0.5",
                    "value": "0.5"
                  },
                  {
                    "description": "Anisotropy",
                    "name": "anisotropy",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "off",
                    "description": "Flip anisotropy",
                    "name": "flipanisotropy",
                    "value": "false"
                  },
                  {
                    "description": "Metallic",
                    "name": "metallic",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Pearl",
                    "name": "pearl",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Diffuse wrap",
                    "name": "diffusewrap",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Clear coat",
                    "name": "clearcoat",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Reflectance",
                    "name": "reflectance",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Coefficient of thermal expansion",
                    "name": "thermalexpansioncoefficient",
                    "scalarImag": "0.0",
                    "scalarReal": "2.6E-6",
                    "value": "2.6e-6[1/K]"
                  },
                  {
                    "description": "Heat capacity at constant pressure",
                    "name": "heatcapacity",
                    "scalarImag": "0.0",
                    "scalarReal": "678.0",
                    "value": "678[J/(kg*K)]"
                  },
                  {
                    "description": "Relative permittivity",
                    "name": "relpermittivity",
                    "scalarImag": "0.0",
                    "scalarReal": "4.5",
                    "value": "4.5"
                  },
                  {
                    "description": "Density",
                    "name": "density",
                    "scalarImag": "0.0",
                    "scalarReal": "2320.0",
                    "value": "2320[kg/m^3]"
                  },
                  {
                    "description": "Thermal conductivity",
                    "name": "thermalconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "34.0",
                    "value": "34[W/(m*K)]"
                  },
                  {
                    "description": "Young's modulus",
                    "name": "E",
                    "scalarImag": "0.0",
                    "scalarReal": "1.6E11",
                    "value": "160e9[Pa]"
                  },
                  {
                    "description": "Poisson's ratio",
                    "name": "nu",
                    "scalarImag": "0.0",
                    "scalarReal": "0.22",
                    "value": "0.22"
                  }
                ],
                "tag": "mat1",
                "type": "Material",
                "windowType": 1
              },
              {
                "apiClass": "Material",
                "apiType": "Common",
                "author": "COMSOL",
                "created": "1664324781719",
                "displayLabel": "Si3N4 - Silicon nitride",
                "icon": "material.png",
                "label": "Si3N4 - Silicon nitride",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/material/mat2",
                "name": "mat2",
                "nodes": [
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324781719",
                    "displayLabel": "Basic",
                    "icon": "material_property_group.png",
                    "label": "Basic",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat2/materialmodel/def",
                    "name": "def",
                    "settings": [
                      {
                        "description": "Electrical conductivity",
                        "name": "electricconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "0.0",
                        "value": "0[S/m]"
                      },
                      {
                        "description": "Coefficient of thermal expansion",
                        "name": "thermalexpansioncoefficient",
                        "scalarImag": "0.0",
                        "scalarReal": "2.3E-6",
                        "value": "2.3e-6[1/K]"
                      },
                      {
                        "description": "Heat capacity at constant pressure",
                        "name": "heatcapacity",
                        "scalarImag": "0.0",
                        "scalarReal": "700.0",
                        "value": "700[J/(kg*K)]"
                      },
                      {
                        "description": "Relative permittivity",
                        "name": "relpermittivity",
                        "scalarImag": "0.0",
                        "scalarReal": "9.7",
                        "value": "9.7"
                      },
                      {
                        "description": "Density",
                        "name": "density",
                        "scalarImag": "0.0",
                        "scalarReal": "3100.0",
                        "value": "3100[kg/m^3]"
                      },
                      {
                        "description": "Thermal conductivity",
                        "name": "thermalconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "20.0",
                        "value": "20[W/(m*K)]"
                      }
                    ],
                    "tag": "def",
                    "type": "Basic",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324781719",
                    "displayLabel": "Young's modulus and Poisson's ratio",
                    "icon": "material_property_group.png",
                    "label": "Young's modulus and Poisson's ratio",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat2/materialmodel/Enu",
                    "name": "Enu",
                    "settings": [
                      {
                        "description": "Young's modulus",
                        "name": "E",
                        "scalarImag": "0.0",
                        "scalarReal": "2.5E11",
                        "value": "250e9[Pa]"
                      },
                      {
                        "description": "Poisson's ratio",
                        "name": "nu",
                        "scalarImag": "0.0",
                        "scalarReal": "0.23",
                        "value": "0.23"
                      }
                    ],
                    "tag": "Enu",
                    "type": "Young's_modulus_and_Poisson's_ratio",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "plastic",
                    "description": "Material type",
                    "name": "family",
                    "value": "Plastic"
                  },
                  {
                    "apiValue": "white",
                    "description": "Color",
                    "name": "color",
                    "value": "White"
                  },
                  {
                    "description": "Electrical conductivity",
                    "name": "electricconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "0.0",
                    "value": "0[S/m]"
                  },
                  {
                    "description": "Coefficient of thermal expansion",
                    "name": "thermalexpansioncoefficient",
                    "scalarImag": "0.0",
                    "scalarReal": "2.3E-6",
                    "value": "2.3e-6[1/K]"
                  },
                  {
                    "description": "Heat capacity at constant pressure",
                    "name": "heatcapacity",
                    "scalarImag": "0.0",
                    "scalarReal": "700.0",
                    "value": "700[J/(kg*K)]"
                  },
                  {
                    "description": "Relative permittivity",
                    "name": "relpermittivity",
                    "scalarImag": "0.0",
                    "scalarReal": "9.7",
                    "value": "9.7"
                  },
                  {
                    "description": "Density",
                    "name": "density",
                    "scalarImag": "0.0",
                    "scalarReal": "3100.0",
                    "value": "3100[kg/m^3]"
                  },
                  {
                    "description": "Thermal conductivity",
                    "name": "thermalconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "20.0",
                    "value": "20[W/(m*K)]"
                  },
                  {
                    "description": "Young's modulus",
                    "name": "E",
                    "scalarImag": "0.0",
                    "scalarReal": "2.5E11",
                    "value": "250e9[Pa]"
                  },
                  {
                    "description": "Poisson's ratio",
                    "name": "nu",
                    "scalarImag": "0.0",
                    "scalarReal": "0.23",
                    "value": "0.23"
                  }
                ],
                "tag": "mat2",
                "type": "Material",
                "windowType": 1
              },
              {
                "apiClass": "Material",
                "apiType": "Common",
                "author": "COMSOL",
                "created": "1664324782187",
                "displayLabel": "SiO2 - Silicon oxide",
                "icon": "material.png",
                "label": "SiO2 - Silicon oxide",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/material/mat3",
                "name": "mat3",
                "nodes": [
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782187",
                    "displayLabel": "Basic",
                    "icon": "material_property_group.png",
                    "label": "Basic",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat3/materialmodel/def",
                    "name": "def",
                    "settings": [
                      {
                        "description": "Electrical conductivity",
                        "name": "electricconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "0.0",
                        "value": "0[S/m]"
                      },
                      {
                        "description": "Coefficient of thermal expansion",
                        "name": "thermalexpansioncoefficient",
                        "scalarImag": "0.0",
                        "scalarReal": "5.0E-7",
                        "value": "0.5e-6[1/K]"
                      },
                      {
                        "description": "Heat capacity at constant pressure",
                        "name": "heatcapacity",
                        "scalarImag": "0.0",
                        "scalarReal": "730.0",
                        "value": "730[J/(kg*K)]"
                      },
                      {
                        "description": "Relative permittivity",
                        "name": "relpermittivity",
                        "scalarImag": "0.0",
                        "scalarReal": "4.2",
                        "value": "4.2"
                      },
                      {
                        "description": "Density",
                        "name": "density",
                        "scalarImag": "0.0",
                        "scalarReal": "2200.0",
                        "value": "2200[kg/m^3]"
                      },
                      {
                        "description": "Thermal conductivity",
                        "name": "thermalconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "1.4",
                        "value": "1.4[W/(m*K)]"
                      }
                    ],
                    "tag": "def",
                    "type": "Basic",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782187",
                    "displayLabel": "Young's modulus and Poisson's ratio",
                    "icon": "material_property_group.png",
                    "label": "Young's modulus and Poisson's ratio",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat3/materialmodel/Enu",
                    "name": "Enu",
                    "settings": [
                      {
                        "description": "Young's modulus",
                        "name": "E",
                        "scalarImag": "0.0",
                        "scalarReal": "7.0E10",
                        "value": "70e9[Pa]"
                      },
                      {
                        "description": "Poisson's ratio",
                        "name": "nu",
                        "scalarImag": "0.0",
                        "scalarReal": "0.17",
                        "value": "0.17"
                      }
                    ],
                    "tag": "Enu",
                    "type": "Young's_modulus_and_Poisson's_ratio",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "plastic",
                    "description": "Material type",
                    "name": "family",
                    "value": "Plastic"
                  },
                  {
                    "apiValue": "white",
                    "description": "Color",
                    "name": "color",
                    "value": "White"
                  },
                  {
                    "description": "Electrical conductivity",
                    "name": "electricconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "0.0",
                    "value": "0[S/m]"
                  },
                  {
                    "description": "Coefficient of thermal expansion",
                    "name": "thermalexpansioncoefficient",
                    "scalarImag": "0.0",
                    "scalarReal": "5.0E-7",
                    "value": "0.5e-6[1/K]"
                  },
                  {
                    "description": "Heat capacity at constant pressure",
                    "name": "heatcapacity",
                    "scalarImag": "0.0",
                    "scalarReal": "730.0",
                    "value": "730[J/(kg*K)]"
                  },
                  {
                    "description": "Relative permittivity",
                    "name": "relpermittivity",
                    "scalarImag": "0.0",
                    "scalarReal": "4.2",
                    "value": "4.2"
                  },
                  {
                    "description": "Density",
                    "name": "density",
                    "scalarImag": "0.0",
                    "scalarReal": "2200.0",
                    "value": "2200[kg/m^3]"
                  },
                  {
                    "description": "Thermal conductivity",
                    "name": "thermalconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "1.4",
                    "value": "1.4[W/(m*K)]"
                  },
                  {
                    "description": "Young's modulus",
                    "name": "E",
                    "scalarImag": "0.0",
                    "scalarReal": "7.0E10",
                    "value": "70e9[Pa]"
                  },
                  {
                    "description": "Poisson's ratio",
                    "name": "nu",
                    "scalarImag": "0.0",
                    "scalarReal": "0.17",
                    "value": "0.17"
                  }
                ],
                "tag": "mat3",
                "type": "Material",
                "windowType": 1
              },
              {
                "apiClass": "Material",
                "apiType": "Common",
                "author": "COMSOL",
                "created": "1664324782937",
                "displayLabel": "Air",
                "icon": "material.png",
                "label": "Air",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/material/mat4",
                "name": "mat4",
                "nodes": [
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782937",
                    "displayLabel": "Basic",
                    "icon": "material_property_group.png",
                    "label": "Basic",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat4/materialmodel/def",
                    "name": "def",
                    "nodes": [
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Piecewise",
                        "author": "COMSOL",
                        "created": "1664324782937",
                        "displayLabel": "Piecewise",
                        "icon": "function_piecewise.png",
                        "label": "Piecewise",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/eta",
                        "name": "eta",
                        "settings": [
                          {
                            "description": "Argument",
                            "name": "arg",
                            "value": "T"
                          },
                          {
                            "apiValue": "constant",
                            "description": "Extrapolation",
                            "name": "extrap",
                            "value": "Constant"
                          },
                          {
                            "apiValue": "none",
                            "description": "Smoothing",
                            "name": "smooth",
                            "value": "No smoothing"
                          },
                          {
                            "description": "Arguments",
                            "name": "argunit",
                            "value": "K"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "Pa*s"
                          }
                        ],
                        "tag": "eta",
                        "type": "Piecewise",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Piecewise",
                        "author": "COMSOL",
                        "created": "1664324782937",
                        "displayLabel": "Piecewise 2",
                        "icon": "function_piecewise.png",
                        "label": "Piecewise 2",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/Cp",
                        "name": "Cp",
                        "settings": [
                          {
                            "description": "Argument",
                            "name": "arg",
                            "value": "T"
                          },
                          {
                            "apiValue": "constant",
                            "description": "Extrapolation",
                            "name": "extrap",
                            "value": "Constant"
                          },
                          {
                            "apiValue": "none",
                            "description": "Smoothing",
                            "name": "smooth",
                            "value": "No smoothing"
                          },
                          {
                            "description": "Arguments",
                            "name": "argunit",
                            "value": "K"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "J/(kg*K)"
                          }
                        ],
                        "tag": "Cp",
                        "type": "Piecewise",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Analytic",
                        "author": "COMSOL",
                        "created": "1664324782937",
                        "displayLabel": "Analytic",
                        "icon": "function_analytic.png",
                        "label": "Analytic",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/rho",
                        "name": "rho",
                        "settings": [
                          {
                            "description": "Expression",
                            "name": "expr",
                            "value": "pA*0.02897/R_const[K*mol/J]/T"
                          },
                          {
                            "apiValue": "automatic",
                            "description": "Derivatives",
                            "name": "dermethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "off",
                            "description": "Make periodic",
                            "name": "periodic",
                            "value": "false"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "kg/m^3"
                          },
                          {
                            "apiValue": "off",
                            "description": "May produce complex output for real arguments",
                            "name": "complex",
                            "value": "false"
                          }
                        ],
                        "tag": "rho",
                        "type": "Analytic",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Piecewise",
                        "author": "COMSOL",
                        "created": "1664324782937",
                        "displayLabel": "Piecewise 3",
                        "icon": "function_piecewise.png",
                        "label": "Piecewise 3",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/k",
                        "name": "k",
                        "settings": [
                          {
                            "description": "Argument",
                            "name": "arg",
                            "value": "T"
                          },
                          {
                            "apiValue": "constant",
                            "description": "Extrapolation",
                            "name": "extrap",
                            "value": "Constant"
                          },
                          {
                            "apiValue": "none",
                            "description": "Smoothing",
                            "name": "smooth",
                            "value": "No smoothing"
                          },
                          {
                            "description": "Arguments",
                            "name": "argunit",
                            "value": "K"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "W/(m*K)"
                          }
                        ],
                        "tag": "k",
                        "type": "Piecewise",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Analytic",
                        "author": "COMSOL",
                        "created": "1664324782937",
                        "displayLabel": "Analytic 2",
                        "icon": "function_analytic.png",
                        "label": "Analytic 2",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/cs",
                        "name": "cs",
                        "settings": [
                          {
                            "description": "Expression",
                            "name": "expr",
                            "value": "sqrt(1.4*R_const[K*mol/J]/0.02897*T)"
                          },
                          {
                            "apiValue": "automatic",
                            "description": "Derivatives",
                            "name": "dermethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "off",
                            "description": "Make periodic",
                            "name": "periodic",
                            "value": "false"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "m/s"
                          },
                          {
                            "apiValue": "off",
                            "description": "May produce complex output for real arguments",
                            "name": "complex",
                            "value": "false"
                          }
                        ],
                        "tag": "cs",
                        "type": "Analytic",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Analytic",
                        "author": "COMSOL",
                        "created": "1664324782952",
                        "displayLabel": "Analytic 1",
                        "icon": "function_analytic.png",
                        "label": "Analytic 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/an1",
                        "name": "alpha_p",
                        "settings": [
                          {
                            "description": "Expression",
                            "name": "expr",
                            "value": "-1/rho(pA,T)*d(rho(pA,T),T)"
                          },
                          {
                            "apiValue": "automatic",
                            "description": "Derivatives",
                            "name": "dermethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "off",
                            "description": "Make periodic",
                            "name": "periodic",
                            "value": "false"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "1/K"
                          },
                          {
                            "apiValue": "off",
                            "description": "May produce complex output for real arguments",
                            "name": "complex",
                            "value": "false"
                          }
                        ],
                        "tag": "an1",
                        "type": "Analytic",
                        "windowType": 1
                      },
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Analytic",
                        "author": "COMSOL",
                        "created": "1664324782952",
                        "displayLabel": "Analytic 2a",
                        "icon": "function_analytic.png",
                        "label": "Analytic 2a",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/def/func/an2",
                        "name": "muB",
                        "settings": [
                          {
                            "description": "Expression",
                            "name": "expr",
                            "value": "0.6*eta(T)"
                          },
                          {
                            "apiValue": "automatic",
                            "description": "Derivatives",
                            "name": "dermethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "off",
                            "description": "Make periodic",
                            "name": "periodic",
                            "value": "false"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "Pa*s"
                          },
                          {
                            "apiValue": "off",
                            "description": "May produce complex output for real arguments",
                            "name": "complex",
                            "value": "false"
                          }
                        ],
                        "tag": "an2",
                        "type": "Analytic",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Coefficient of thermal expansion",
                        "name": "thermalexpansioncoefficient",
                        "value": "alpha_p(pA,T)"
                      },
                      {
                        "description": "Mean molar mass",
                        "name": "molarmass",
                        "scalarImag": "0.0",
                        "scalarReal": "0.02897",
                        "value": "0.02897[kg/mol]"
                      },
                      {
                        "description": "Bulk viscosity",
                        "name": "bulkviscosity",
                        "value": "muB(T)"
                      },
                      {
                        "description": "Relative permeability",
                        "name": "relpermeability",
                        "scalarImag": "0.0",
                        "scalarReal": "1.0",
                        "value": "1"
                      },
                      {
                        "description": "Relative permittivity",
                        "name": "relpermittivity",
                        "scalarImag": "0.0",
                        "scalarReal": "1.0",
                        "value": "1"
                      },
                      {
                        "description": "Dynamic viscosity",
                        "name": "dynamicviscosity",
                        "value": "eta(T)"
                      },
                      {
                        "description": "Ratio of specific heats",
                        "name": "ratioofspecificheat",
                        "scalarImag": "0.0",
                        "scalarReal": "1.4",
                        "value": "1.4"
                      },
                      {
                        "description": "Electrical conductivity",
                        "name": "electricconductivity",
                        "scalarImag": "0.0",
                        "scalarReal": "0.0",
                        "value": "0[S/m]"
                      },
                      {
                        "description": "Heat capacity at constant pressure",
                        "name": "heatcapacity",
                        "value": "Cp(T)"
                      },
                      {
                        "description": "Density",
                        "name": "density",
                        "value": "rho(pA,T)"
                      },
                      {
                        "description": "Thermal conductivity",
                        "name": "thermalconductivity",
                        "value": "k(T)"
                      },
                      {
                        "description": "Speed of sound",
                        "name": "soundspeed",
                        "value": "cs(T)"
                      }
                    ],
                    "tag": "def",
                    "type": "Basic",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782952",
                    "displayLabel": "Refractive index",
                    "icon": "material_property_group.png",
                    "label": "Refractive index",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat4/materialmodel/RefractiveIndex",
                    "name": "rfi",
                    "settings": [
                      {
                        "description": "Refractive index, real part",
                        "name": "n",
                        "scalarImag": "0.0",
                        "scalarReal": "1.0",
                        "value": "1"
                      },
                      {
                        "description": "Refractive index, imaginary part",
                        "name": "ki",
                        "scalarImag": "0.0",
                        "scalarReal": "0.0",
                        "value": "0"
                      }
                    ],
                    "tag": "RefractiveIndex",
                    "type": "Refractive_index",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782968",
                    "displayLabel": "Nonlinear model",
                    "icon": "material_property_group.png",
                    "label": "Nonlinear model",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat4/materialmodel/NonlinearModel",
                    "name": "NonlinearModel",
                    "settings": [
                      {
                        "description": "Parameter of nonlinearity",
                        "name": "BA",
                        "value": "(def.gamma+1)/2"
                      }
                    ],
                    "tag": "NonlinearModel",
                    "type": "Nonlinear_model",
                    "windowType": 1
                  },
                  {
                    "apiClass": "MaterialModel",
                    "author": "COMSOL",
                    "created": "1664324782968",
                    "displayLabel": "Ideal gas",
                    "icon": "material_property_group.png",
                    "label": "Ideal gas",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/material/mat4/materialmodel/idealGas",
                    "name": "idealGas",
                    "nodes": [
                      {
                        "apiClass": "FunctionFeature",
                        "apiType": "Piecewise",
                        "author": "COMSOL",
                        "created": "1664324782983",
                        "displayLabel": "Piecewise 2",
                        "icon": "function_piecewise.png",
                        "label": "Piecewise 2",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/material/mat4/materialmodel/idealGas/func/Cp",
                        "name": "Cp",
                        "settings": [
                          {
                            "description": "Argument",
                            "name": "arg",
                            "value": "T"
                          },
                          {
                            "apiValue": "constant",
                            "description": "Extrapolation",
                            "name": "extrap",
                            "value": "Constant"
                          },
                          {
                            "apiValue": "none",
                            "description": "Smoothing",
                            "name": "smooth",
                            "value": "No smoothing"
                          },
                          {
                            "description": "Arguments",
                            "name": "argunit",
                            "value": "K"
                          },
                          {
                            "description": "Function",
                            "name": "fununit",
                            "value": "J/(kg*K)"
                          }
                        ],
                        "tag": "Cp",
                        "type": "Piecewise",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Specific gas constant",
                        "name": "Rs",
                        "value": "R_const/Mn"
                      },
                      {
                        "description": "Heat capacity at constant pressure",
                        "name": "heatcapacity",
                        "value": "Cp(T)"
                      },
                      {
                        "description": "Ratio of specific heats",
                        "name": "ratioofspecificheat",
                        "scalarImag": "0.0",
                        "scalarReal": "1.4",
                        "value": "1.4"
                      },
                      {
                        "description": "Mean molar mass",
                        "name": "molarmass",
                        "scalarImag": "0.0",
                        "scalarReal": "0.02897",
                        "value": "0.02897"
                      }
                    ],
                    "tag": "idealGas",
                    "type": "Ideal_gas",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "air",
                    "description": "Material type",
                    "name": "family",
                    "value": "Air"
                  },
                  {
                    "description": "Coefficient of thermal expansion",
                    "name": "thermalexpansioncoefficient",
                    "value": "alpha_p(pA,T)"
                  },
                  {
                    "description": "Mean molar mass",
                    "name": "molarmass",
                    "scalarImag": "0.0",
                    "scalarReal": "0.02897",
                    "value": "0.02897[kg/mol]"
                  },
                  {
                    "description": "Bulk viscosity",
                    "name": "bulkviscosity",
                    "value": "muB(T)"
                  },
                  {
                    "description": "Relative permeability",
                    "name": "relpermeability",
                    "scalarImag": "0.0",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Relative permittivity",
                    "name": "relpermittivity",
                    "scalarImag": "0.0",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Dynamic viscosity",
                    "name": "dynamicviscosity",
                    "value": "eta(T)"
                  },
                  {
                    "description": "Ratio of specific heats",
                    "name": "ratioofspecificheat",
                    "scalarImag": "0.0",
                    "scalarReal": "1.4",
                    "value": "1.4"
                  },
                  {
                    "description": "Electrical conductivity",
                    "name": "electricconductivity",
                    "scalarImag": "0.0",
                    "scalarReal": "0.0",
                    "value": "0[S/m]"
                  },
                  {
                    "description": "Heat capacity at constant pressure",
                    "name": "heatcapacity",
                    "value": "Cp(T)"
                  },
                  {
                    "description": "Density",
                    "name": "density",
                    "value": "rho(pA,T)"
                  },
                  {
                    "description": "Thermal conductivity",
                    "name": "thermalconductivity",
                    "value": "k(T)"
                  },
                  {
                    "description": "Speed of sound",
                    "name": "soundspeed",
                    "value": "cs(T)"
                  },
                  {
                    "description": "Refractive index, real part",
                    "name": "n",
                    "scalarImag": "0.0",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Refractive index, imaginary part",
                    "name": "ki",
                    "scalarImag": "0.0",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Parameter of nonlinearity",
                    "name": "BA",
                    "value": "(def.gamma+1)/2"
                  },
                  {
                    "description": "Specific gas constant",
                    "name": "Rs",
                    "value": "R_const/Mn"
                  },
                  {
                    "description": "Heat capacity at constant pressure",
                    "name": "heatcapacity",
                    "value": "Cp(T)"
                  },
                  {
                    "description": "Ratio of specific heats",
                    "name": "ratioofspecificheat",
                    "scalarImag": "0.0",
                    "scalarReal": "1.4",
                    "value": "1.4"
                  },
                  {
                    "description": "Mean molar mass",
                    "name": "molarmass",
                    "scalarImag": "0.0",
                    "scalarReal": "0.02897",
                    "value": "0.02897"
                  }
                ],
                "tag": "mat4",
                "type": "Material",
                "windowType": 1
              }
            ],
            "tag": "nonEntity4",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "moving_mesh.png",
            "label": "Moving Mesh",
            "nodes": [
              {
                "apiClass": "CommonFeature",
                "apiType": "DeformingDomain",
                "author": "COMSOL",
                "created": "1664324758450",
                "displayLabel": "Deforming Domain 1",
                "icon": "deforming_domain.png",
                "label": "Deforming Domain 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/common/free1",
                "settings": [
                  {
                    "apiValue": "hyperelastic",
                    "description": "Mesh smoothing type",
                    "name": "smoothingType",
                    "value": "Hyperelastic"
                  }
                ],
                "tag": "free1",
                "type": "Deforming_domain",
                "windowType": 1
              },
              {
                "apiClass": "CommonFeature",
                "apiType": "Symmetry",
                "author": "COMSOL",
                "created": "1664324758461",
                "displayLabel": "Symmetry/Roller 1",
                "icon": "mesh_symmetry.png",
                "label": "Symmetry/Roller 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/common/sym1",
                "settings": [
                  {
                    "apiValue": "auto",
                    "description": "Constraint type",
                    "name": "constraintType",
                    "value": "Automatic"
                  }
                ],
                "tag": "sym1",
                "type": "Symmetry_roller",
                "windowType": 1
              }
            ],
            "tag": "nonEntity5",
            "windowType": 1
          },
          {
            "apiClass": "Physics",
            "apiType": "SolidMechanics",
            "author": "COMSOL",
            "created": "1664324758204",
            "displayLabel": "Solid Mechanics",
            "icon": "phys_smesolid.png",
            "label": "Solid Mechanics",
            "lastModified": "1696071532901",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/physics/solid",
            "name": "solid",
            "nodes": [
              {
                "apiClass": "PhysicsFeature",
                "apiType": "LinearElasticModel",
                "author": "COMSOL",
                "created": "1664324758243",
                "displayLabel": "Linear Elastic Material 1",
                "icon": "domainlevel_3d.png",
                "label": "Linear Elastic Material 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/solid/feature/lemm1",
                "settings": [
                  {
                    "description": "Material symmetry",
                    "name": "SolidModel",
                    "value": "Isotropic"
                  },
                  {
                    "apiValue": "none",
                    "description": "Use mixed formulation",
                    "name": "MixedFormulation",
                    "value": "None"
                  },
                  {
                    "apiValue": "Enu",
                    "description": "Specify",
                    "name": "IsotropicOption",
                    "value": "Young's modulus and Poisson's ratio"
                  },
                  {
                    "apiValue": "from_mat",
                    "description": "Young's modulus",
                    "name": "E_mat",
                    "value": "From material"
                  },
                  {
                    "apiValue": "from_mat",
                    "description": "Poisson's ratio",
                    "name": "nu_mat",
                    "value": "From material"
                  },
                  {
                    "apiValue": "from_mat",
                    "description": "Density",
                    "name": "rho_mat",
                    "value": "From material"
                  },
                  {
                    "apiValue": "fromCommonDef",
                    "description": "Volume reference temperature",
                    "name": "minput_strainreferencetemperature_src",
                    "value": "Common model input"
                  },
                  {
                    "description": "Calculate dissipated energy",
                    "name": "CalculateDissipatedEnergy"
                  },
                  {
                    "description": "Reduced integration",
                    "name": "reducedIntegration"
                  },
                  {
                    "apiValue": "GlobalSystem",
                    "description": "Coordinate system",
                    "name": "coordinateSystem",
                    "value": "Global coordinate system"
                  },
                  {
                    "apiValue": "userdef",
                    "description": "Absolute pressure",
                    "name": "minput_pressure_src",
                    "value": "User defined"
                  },
                  {
                    "name": "minput_pressure",
                    "value": "1[atm]"
                  },
                  {
                    "apiValue": "fromStudyStep",
                    "description": "Formulation",
                    "name": "geometricNonlinearity",
                    "value": "From study step"
                  },
                  {
                    "apiValue": "automatic",
                    "description": "Strain decomposition",
                    "name": "strainDecomposition",
                    "value": "Automatic"
                  }
                ],
                "tag": "lemm1",
                "type": "Linear_elastic_material",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "Free",
                "author": "COMSOL",
                "created": "1664324758251",
                "displayLabel": "Free 1",
                "icon": "boundarylevel_3d.png",
                "label": "Free 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/solid/feature/free1",
                "tag": "free1",
                "type": "Free",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "init",
                "author": "COMSOL",
                "created": "1664324758251",
                "displayLabel": "Initial Values 1",
                "icon": "domainlevel_3d.png",
                "label": "Initial Values 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/solid/feature/init1",
                "settings": [
                  {
                    "description": [
                      "Displacement field, X-component",
                      "Displacement field, Y-component",
                      "Displacement field, Z-component"
                    ],
                    "name": "u"
                  },
                  {
                    "description": [
                      "Structural velocity field, X-component",
                      "Structural velocity field, Y-component",
                      "Structural velocity field, Z-component"
                    ],
                    "name": "ut"
                  },
                  {
                    "apiValue": "GlobalSystem",
                    "description": "Coordinate system",
                    "name": "coordinateSystem",
                    "value": "Global coordinate system"
                  }
                ],
                "tag": "init1",
                "type": "Initial_values",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "Fixed",
                "author": "COMSOL",
                "created": "1664324786577",
                "displayLabel": "Fixed Constraint 1",
                "icon": "boundarylevel_3d.png",
                "label": "Fixed Constraint 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/solid/feature/fix1",
                "settings": [
                  {
                    "apiValue": "symmetricConstraint",
                    "description": "Apply reaction terms on",
                    "name": "constraintType",
                    "value": "All physics (symmetric)"
                  },
                  {
                    "apiValue": "nodal",
                    "description": "Constraint method",
                    "name": "constraintMethod",
                    "value": "Nodal"
                  },
                  {
                    "apiValue": "pointwiseConstraints",
                    "description": "Constraint",
                    "name": "constraintOptions",
                    "value": "Pointwise constraints"
                  }
                ],
                "tag": "fix1",
                "type": "Fixed_constraint",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "description": "Show or hide all physics symbols",
                "name": "physicsSymbolButtons",
                "scalarReal": "0.0",
                "value": "0"
              },
              {
                "apiValue": "2s",
                "description": "Displacement field",
                "name": "order_displacement",
                "value": "Quadratic serendipity"
              },
              {
                "apiValue": "IncludeInertia",
                "name": "StructuralTransientBehavior",
                "value": "Include inertial terms"
              },
              {
                "name": "text",
                "value": "Changes made to these settings only take effect when the default solver is generated."
              },
              {
                "description": "Maximum frequency to resolve",
                "name": "SetMaximumFrequency"
              },
              {
                "name": "cref",
                "value": "solid.cp"
              },
              {
                "apiValue": "NoSweep",
                "name": "PortSweep",
                "value": "No port sweep"
              },
              {
                "description": "Rigid connectors",
                "name": "GroupPhysOdesRc"
              },
              {
                "description": "Attachments",
                "name": "GroupPhysOdesAtt"
              },
              {
                "description": "Rigid materials",
                "name": "GroupPhysOdesRd"
              },
              {
                "description": [
                  "Displacement field",
                  "Displacement field components"
                ],
                "name": "u",
                "value": [
                  "u",
                  "u",
                  "v",
                  "w"
                ]
              }
            ],
            "tag": "solid",
            "type": "Solid_mechanics",
            "windowType": 1
          },
          {
            "apiClass": "Physics",
            "apiType": "Electrostatics",
            "author": "COMSOL",
            "created": "1664324758385",
            "displayLabel": "Electrostatics",
            "icon": "electrostatics.png",
            "label": "Electrostatics",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/physics/es",
            "name": "es",
            "nodes": [
              {
                "apiClass": "PhysicsFeature",
                "apiType": "ChargeConservation",
                "author": "COMSOL",
                "created": "1664324758393",
                "displayLabel": "Charge Conservation, Solid",
                "icon": "domainlevel_3d.png",
                "label": "Charge Conservation, Solid",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/ccn1",
                "settings": [
                  {
                    "apiValue": "RelativePermittivity",
                    "description": "Dielectric model",
                    "name": "ConstitutiveRelationDE",
                    "value": "Relative permittivity"
                  },
                  {
                    "apiValue": "from_mat",
                    "description": "Relative permittivity",
                    "name": "epsilonr_mat",
                    "value": "From material"
                  },
                  {
                    "apiValue": "fromCommonDef",
                    "description": "Temperature",
                    "name": "minput_temperature_src",
                    "value": "Common model input"
                  },
                  {
                    "apiValue": "GlobalSystem",
                    "description": "Coordinate system",
                    "name": "coordinateSystem",
                    "value": "Global coordinate system"
                  }
                ],
                "tag": "ccn1",
                "type": "Charge_conservation",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "ZeroCharge",
                "author": "COMSOL",
                "created": "1664324758398",
                "displayLabel": "Zero Charge 1",
                "icon": "boundarylevel_3d.png",
                "label": "Zero Charge 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/zc1",
                "tag": "zc1",
                "type": "Zero_charge",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "init",
                "author": "COMSOL",
                "created": "1664324758398",
                "displayLabel": "Initial Values 1",
                "icon": "domainlevel_3d.png",
                "label": "Initial Values 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/init1",
                "settings": [
                  {
                    "description": "Electric potential",
                    "name": "V",
                    "scalarReal": "0.0",
                    "value": "0"
                  }
                ],
                "tag": "init1",
                "type": "Initial_values",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "ChargeConservation",
                "author": "COMSOL",
                "created": "1664324788264",
                "displayLabel": "Charge Conservation, Air",
                "icon": "domainlevel_3d.png",
                "label": "Charge Conservation, Air",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/ccn2",
                "settings": [
                  {
                    "apiValue": "from_mat",
                    "description": "Relative permittivity",
                    "name": "epsilonr_mat",
                    "value": "From material"
                  },
                  {
                    "apiValue": "fromCommonDef",
                    "description": "Temperature",
                    "name": "minput_temperature_src",
                    "value": "Common model input"
                  },
                  {
                    "apiValue": "GlobalSystem",
                    "description": "Coordinate system",
                    "name": "coordinateSystem",
                    "value": "Global coordinate system"
                  },
                  {
                    "apiValue": "RelativePermittivity",
                    "description": "Dielectric model",
                    "name": "ConstitutiveRelationDE",
                    "value": "Relative permittivity"
                  }
                ],
                "tag": "ccn2",
                "type": "Charge_conservation",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "DomainTerminal",
                "author": "COMSOL",
                "created": "1664324789141",
                "displayLabel": "Terminal 1",
                "icon": "domainlevel_3d.png",
                "label": "Terminal 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/term1",
                "settings": [
                  {
                    "description": "Terminal name",
                    "name": "TerminalName",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Terminal type",
                    "name": "TerminalType",
                    "value": "Voltage"
                  },
                  {
                    "description": "Voltage",
                    "name": "V0",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "automatic",
                    "description": "Charge scaling type",
                    "name": "ChargeScalingType",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "symmetricConstraint",
                    "description": "Apply reaction terms on",
                    "name": "constraintType",
                    "value": "All physics (symmetric)"
                  },
                  {
                    "apiValue": "elemental",
                    "description": "Constraint method",
                    "name": "constraintMethod",
                    "value": "Elemental"
                  },
                  {
                    "apiValue": "pointwiseConstraints",
                    "description": "Constraint",
                    "name": "constraintOptions",
                    "value": "Pointwise constraints"
                  }
                ],
                "tag": "term1",
                "type": "Terminal",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "Ground",
                "author": "COMSOL",
                "created": "1664324789641",
                "displayLabel": "Ground 1",
                "icon": "boundarylevel_3d.png",
                "label": "Ground 1",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/gnd1",
                "settings": [
                  {
                    "apiValue": "symmetricConstraint",
                    "description": "Apply reaction terms on",
                    "name": "constraintType",
                    "value": "All physics (symmetric)"
                  },
                  {
                    "apiValue": "elemental",
                    "description": "Constraint method",
                    "name": "constraintMethod",
                    "value": "Elemental"
                  },
                  {
                    "apiValue": "pointwiseConstraints",
                    "description": "Constraint",
                    "name": "constraintOptions",
                    "value": "Pointwise constraints"
                  }
                ],
                "tag": "gnd1",
                "type": "Ground",
                "windowType": 1
              },
              {
                "apiClass": "PhysicsFeature",
                "apiType": "DomainTerminal",
                "author": "COMSOL",
                "created": "1664324790126",
                "displayLabel": "Terminal 2",
                "icon": "domainlevel_3d.png",
                "label": "Terminal 2",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/physics/es/feature/term2",
                "settings": [
                  {
                    "description": "Terminal name",
                    "name": "TerminalName",
                    "scalarReal": "2.0",
                    "value": "2"
                  },
                  {
                    "description": "Terminal type",
                    "name": "TerminalType",
                    "value": "Voltage"
                  },
                  {
                    "description": "Voltage",
                    "name": "V0",
                    "value": "Vdc"
                  },
                  {
                    "apiValue": "automatic",
                    "description": "Charge scaling type",
                    "name": "ChargeScalingType",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "symmetricConstraint",
                    "description": "Apply reaction terms on",
                    "name": "constraintType",
                    "value": "All physics (symmetric)"
                  },
                  {
                    "apiValue": "elemental",
                    "description": "Constraint method",
                    "name": "constraintMethod",
                    "value": "Elemental"
                  },
                  {
                    "apiValue": "pointwiseConstraints",
                    "description": "Constraint",
                    "name": "constraintOptions",
                    "value": "Pointwise constraints"
                  }
                ],
                "tag": "term2",
                "type": "Terminal",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "2",
                "description": "Electric potential",
                "name": "order_electricpotential",
                "value": "Quadratic"
              },
              {
                "description": "Use manual terminal sweep",
                "name": "useSweep"
              },
              {
                "description": "Reference impedance",
                "name": "zref",
                "value": "50[ohm]"
              },
              {
                "description": "Electric potential",
                "name": "V",
                "value": "V"
              }
            ],
            "tag": "es",
            "type": "Electrostatics",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "multiphysics.png",
            "label": "Multiphysics",
            "nodes": [
              {
                "apiClass": "MultiphysicsCoupling",
                "apiType": "ElectromechanicalForces",
                "author": "COMSOL",
                "created": "1664324758444",
                "displayLabel": "Electromechanical Forces 1",
                "icon": "electromechanics.png",
                "label": "Electromechanical Forces 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/multiphysics/eme1",
                "name": "eme1",
                "settings": [
                  {
                    "description": "Electromagnetic stress tensor",
                    "name": "ElectromagneticStressTensor",
                    "value": "Minkowski"
                  },
                  {
                    "apiValue": "solid",
                    "description": "Solid mechanics",
                    "name": "Solid_physics",
                    "value": "Solid Mechanics (solid)"
                  },
                  {
                    "apiValue": "es",
                    "description": "Electrostatics",
                    "name": "Electrostatics_physics",
                    "value": "Electrostatics (es)"
                  }
                ],
                "tag": "eme1",
                "type": "Electromechanical_forces",
                "windowType": 1
              }
            ],
            "tag": "nonEntity6",
            "windowType": 1
          },
          {
            "apiClass": "MeshSequence",
            "author": "COMSOL",
            "created": "1664324758204",
            "displayLabel": "Mesh 1",
            "icon": "mesh.png",
            "label": "Mesh 1",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/mesh/mesh1",
            "nodes": [
              {
                "apiClass": "MeshFeature",
                "apiType": "MeshSizeDefault",
                "author": "COMSOL",
                "created": "1664324760880",
                "displayLabel": "Size",
                "icon": "mesh_size.png",
                "label": "Size",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/mesh/mesh1/feature/size",
                "settings": [
                  {
                    "apiValue": "default",
                    "description": "Calibrate for",
                    "name": "table",
                    "value": "General physics"
                  },
                  {
                    "description": "Maximum element size",
                    "name": "hmax",
                    "scalarReal": "7.78",
                    "value": "7.78"
                  },
                  {
                    "description": "Minimum element size",
                    "name": "hmin",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "Curvature factor",
                    "name": "hcurve",
                    "scalarReal": "0.6",
                    "value": "0.6"
                  },
                  {
                    "description": "Resolution of narrow regions",
                    "name": "hnarrow",
                    "scalarReal": "0.5",
                    "value": "0.5"
                  },
                  {
                    "description": "Maximum element growth rate",
                    "name": "hgrad",
                    "scalarReal": "1.5",
                    "value": "1.5"
                  },
                  {
                    "apiValue": "5",
                    "description": "Predefined size",
                    "name": "hauto",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "on",
                    "description": "Custom element size",
                    "name": "custom",
                    "value": "Custom"
                  }
                ],
                "tag": "size",
                "type": "Size",
                "windowType": 1
              },
              {
                "apiClass": "MeshFeature",
                "apiType": "FreeTri",
                "author": "COMSOL",
                "created": "1664324790829",
                "displayLabel": "Free Triangular 1",
                "icon": "mesh_free_triangular.png",
                "label": "Free Triangular 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/mesh/mesh1/feature/ftri1",
                "settings": [
                  {
                    "description": "x-direction scale",
                    "name": "xscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "description": "y-direction scale",
                    "name": "yscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "apiValue": "on",
                    "description": "Smooth across removed control entities",
                    "name": "smoothcontrol",
                    "value": "true"
                  },
                  {
                    "description": "Number of iterations",
                    "name": "smoothmaxiter",
                    "scalarReal": "4.0",
                    "value": "4"
                  },
                  {
                    "description": "Maximum element depth to process",
                    "name": "smoothmaxdepth",
                    "scalarReal": "4.0",
                    "value": "4"
                  },
                  {
                    "description": "z-direction scale",
                    "name": "zscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Method",
                    "name": "method",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "off",
                    "description": "Resolve narrow domain regions",
                    "name": "narrowreg",
                    "value": "false"
                  },
                  {
                    "description": "Last build time",
                    "name": "buildtime",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Built with",
                    "name": "buildinfo",
                    "value": "COMSOL 6.2.0.259 (win64)|2023-09-30T12:58:25.891284400"
                  }
                ],
                "tag": "ftri1",
                "type": "Free_triangular",
                "windowType": 1
              },
              {
                "apiClass": "MeshFeature",
                "apiType": "Sweep",
                "author": "COMSOL",
                "created": "1664324791344",
                "displayLabel": "Swept 1",
                "icon": "mesh_swept.png",
                "label": "Swept 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/mesh/mesh1/feature/swe1",
                "settings": [
                  {
                    "apiValue": "auto",
                    "description": "Sweep path calculation",
                    "name": "sweeppath",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Destination mesh generation",
                    "name": "targetmesh",
                    "value": "Determine suitable method"
                  },
                  {
                    "apiValue": "quad",
                    "description": "Face meshing method",
                    "name": "facemethod",
                    "value": "Quadrilateral (generate hexahedra)"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Interpolation method for linking faces",
                    "name": "mapinterpmethod",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "on",
                    "description": "Smooth across removed control entities",
                    "name": "smoothcontrol",
                    "value": "true"
                  },
                  {
                    "description": "Number of iterations",
                    "name": "smoothmaxiter",
                    "scalarReal": "4.0",
                    "value": "4"
                  },
                  {
                    "description": "Maximum element depth to process",
                    "name": "smoothmaxdepth",
                    "scalarReal": "4.0",
                    "value": "4"
                  },
                  {
                    "description": "Last build time",
                    "name": "buildtime",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Built with",
                    "name": "buildinfo",
                    "value": "COMSOL 6.2.0.259 (win64)|2023-09-30T12:58:26.156838500"
                  }
                ],
                "tag": "swe1",
                "type": "Swept",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "manual",
                "description": "Type",
                "name": "meshtype",
                "value": "User-controlled mesh"
              },
              {
                "apiValue": "off",
                "description": "Build new operations automatically",
                "name": "autoBuildNew",
                "value": "false"
              }
            ],
            "tag": "mesh1",
            "type": "Mesh",
            "windowType": 1
          }
        ],
        "settings": [
          {
            "apiValue": "useglobal",
            "description": "Unit system",
            "name": "basesystem",
            "value": "Same as global system (SI)"
          },
          {
            "apiValue": "on",
            "description": "Always define all frames",
            "name": "defineAllFrames",
            "value": "true"
          },
          {
            "apiValue": "automatic",
            "description": "Geometry shape function",
            "name": "sorderprop",
            "value": "Automatic"
          },
          {
            "apiValue": "on",
            "description": "Avoid inverted elements by curving interior domain elements",
            "name": "curvedinterior",
            "value": "true"
          }
        ],
        "spaceDimension": 3,
        "tag": "comp1",
        "type": "Component[model]",
        "windowType": 1
      },
      {
        "apiClass": "Study",
        "author": "COMSOL",
        "created": "1664324758461",
        "displayLabel": "Stationary",
        "icon": "study.png",
        "label": "Stationary",
        "lastComputationTime": "8967",
        "lastModified": "1664324814063",
        "lastModifiedBy": "COMSOL",
        "modelEntityPath": "/study/std1",
        "nodes": [
          {
            "apiClass": "StudyFeature",
            "apiType": "Stationary",
            "author": "COMSOL",
            "created": "1664324758462",
            "displayLabel": "Stationary",
            "icon": "study_stationary.png",
            "label": "Stationary",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/study/std1/feature/stat",
            "settings": [
              {
                "apiValue": "off",
                "description": "Plot",
                "name": "plot",
                "value": "false"
              },
              {
                "apiValue": "all",
                "description": "Probes",
                "name": "probesel",
                "value": "All"
              },
              {
                "apiValue": "pout",
                "description": "Update at",
                "name": "probefreq",
                "value": "Steps stored in output"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Initial values of variables solved for"
                ],
                "name": "useinitsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Values of variables not solved for"
                ],
                "name": "usesol",
                "value": "false"
              },
              {
                "apiValue": "none",
                "description": "Adaptation and error estimates",
                "name": "errestandadap",
                "value": "None"
              },
              {
                "apiValue": "off",
                "description": "Auxiliary sweep",
                "name": "useparam",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Define load cases",
                "name": "useloadcase",
                "value": "false"
              }
            ],
            "tag": "stat",
            "type": "Stationary",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "solver_sequence.png",
            "label": "Solver Configurations",
            "nodes": [
              {
                "apiClass": "SolverSequence",
                "author": "COMSOL",
                "created": "1664324792705",
                "displayLabel": "Solution 1",
                "icon": "solver_sequence1.png",
                "label": "Solution 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/sol/sol1",
                "name": "sol1",
                "nodes": [
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StudyStep",
                    "author": "COMSOL",
                    "created": "1664324793314",
                    "displayLabel": "Compile Equations: Stationary",
                    "icon": "solver_studystep.png",
                    "label": "Compile Equations: Stationary",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol1/feature/st1",
                    "settings": [
                      {
                        "apiValue": "stat",
                        "description": "Use study step",
                        "name": "studystep",
                        "value": "Stationary"
                      },
                      {
                        "apiValue": "off",
                        "description": "Split complex variables in real and imaginary parts",
                        "name": "splitcomplex",
                        "value": "false"
                      },
                      {
                        "apiValue": "parent",
                        "description": "Partitioning method for distributed computing",
                        "name": "partmethod",
                        "value": "From parent"
                      },
                      {
                        "apiValue": "off",
                        "description": "Save previous solution",
                        "name": "saveprevioussolution",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Use entities",
                        "name": "useent",
                        "value": "All"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "st1",
                    "type": "Compile_equations",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Variables",
                    "author": "COMSOL",
                    "created": "1664324793314",
                    "displayLabel": "Dependent Variables 1",
                    "icon": "solver_variables.png",
                    "label": "Dependent Variables 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol1/feature/v1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1664324793860",
                        "displayLabel": "Spatial mesh displacement (comp1.spatial.disp)",
                        "icon": "solver_field.png",
                        "label": "Spatial mesh displacement (comp1.spatial.disp)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/v1/feature/comp1_spatial_disp",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*4.097926304852248E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_spatial_disp",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1664324793876",
                        "displayLabel": "Displacement field (comp1.u)",
                        "icon": "solver_field.png",
                        "label": "Displacement field (comp1.u)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/v1/feature/comp1_u",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*4.097926304852248E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_u",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1664324793876",
                        "displayLabel": "Electric potential (comp1.V)",
                        "icon": "solver_field.png",
                        "label": "Electric potential (comp1.V)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/v1/feature/comp1_V",
                        "settings": [
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "From parent"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_V",
                        "type": "Field",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "scalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "resscalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Parameters",
                        "name": "initparametersmethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "v1",
                    "type": "Dependent_variables",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Stationary",
                    "author": "COMSOL",
                    "created": "1664324793892",
                    "displayLabel": "Stationary Solver 1",
                    "icon": "solver_stationary.png",
                    "label": "Stationary Solver 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol1/feature/s1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Advanced",
                        "author": "COMSOL",
                        "created": "1664324793892",
                        "displayLabel": "Advanced",
                        "icon": "solver_advanced.png",
                        "label": "Advanced",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/s1/feature/aDef",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Matrix symmetry",
                            "name": "symmetric",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Matrix format",
                            "name": "matrixformat",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row equilibration",
                            "name": "rowscale",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Null-space function",
                            "name": "nullfun",
                            "value": "Automatic"
                          },
                          {
                            "description": "Orthonormal block limit",
                            "name": "orthonormallimit",
                            "scalarReal": "1.0E7",
                            "value": "10000000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Store last residual",
                            "name": "storeresidual",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Solver log",
                            "name": "convinfo",
                            "value": "Normal"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Recovery saving",
                            "name": "recoverysavinginfo",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Force save of recovery file",
                            "name": "recoverysaveforce",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "on",
                            "description": "Automatic rescaling of linear equations",
                            "name": "autorescale",
                            "value": "true"
                          },
                          {
                            "description": "Assembly block size",
                            "name": "blocksize",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Assembly block size",
                            "name": "blocksizeactive",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Use distributed solution for assembly",
                            "name": "assemdistrsol",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse sparsity pattern",
                            "name": "cachepattern",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "cachepatternmethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize data locality on cluster",
                            "name": "assemloc",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use thread scheduling for matrix assembly",
                            "name": "optthread",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use static distribution of assembly blocks",
                            "name": "statblockdistr",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Allow complex-valued output from functions with real input",
                            "name": "complexfun",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Stop when undefined mathematical operation is detected",
                            "name": "matherr",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Check for undefined numerical values after each operation",
                            "name": "checkmatherr",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize element data initialization",
                            "name": "elemdatainit",
                            "value": "true"
                          },
                          {
                            "description": "Drop tolerance for local matrix contributions",
                            "name": "assemtol",
                            "scalarReal": "1.0E-12",
                            "value": "1.0E-12"
                          },
                          {
                            "apiValue": "off",
                            "description": "Manual control of reassembly",
                            "name": "keep",
                            "value": "false"
                          }
                        ],
                        "tag": "aDef",
                        "type": "Advanced",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Segregated",
                        "author": "COMSOL",
                        "created": "1664324793892",
                        "displayLabel": "Segregated 1",
                        "icon": "solver_segregated.png",
                        "label": "Segregated 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/s1/feature/se1",
                        "nodes": [
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1664324793892",
                            "displayLabel": "Electric potential",
                            "icon": "solver_segregatedstep.png",
                            "label": "Electric potential",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol1/feature/s1/feature/se1/feature/ss1",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss1",
                            "type": "Segregated_step",
                            "windowType": 1
                          },
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1664324793892",
                            "displayLabel": "Displacement field",
                            "icon": "solver_segregatedstep.png",
                            "label": "Displacement field",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol1/feature/s1/feature/se1/feature/ss2",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss2",
                            "type": "Segregated_step",
                            "windowType": 1
                          },
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1664324793907",
                            "displayLabel": "Spatial mesh displacement",
                            "icon": "solver_segregatedstep.png",
                            "label": "Spatial mesh displacement",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol1/feature/s1/feature/se1/feature/ss3",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss3",
                            "type": "Segregated_step",
                            "windowType": 1
                          }
                        ],
                        "settings": [
                          {
                            "apiValue": "tol",
                            "description": "Termination technique",
                            "name": "segterm",
                            "value": "Tolerance"
                          },
                          {
                            "description": "Maximum number of iterations",
                            "name": "maxsegiter",
                            "scalarReal": "100.0",
                            "value": "100"
                          },
                          {
                            "description": "Tolerance factor",
                            "name": "ntolfact",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Termination criterion",
                            "name": "segtermonres",
                            "value": "Solution or residual"
                          },
                          {
                            "description": "Residual factor",
                            "name": "segreserrfact",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "segaacc",
                            "description": "Stabilization and acceleration",
                            "name": "segstabacc",
                            "value": "Anderson acceleration"
                          },
                          {
                            "description": "Dimension of iteration space",
                            "name": "segaaccdim",
                            "scalarReal": "5.0",
                            "value": "5"
                          },
                          {
                            "description": "Mixing parameter",
                            "name": "segaaccmix",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "description": "Iteration delay",
                            "name": "segaaccdelay",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "description": "Threshold for Anderson step",
                            "name": "segaaccfact",
                            "scalarReal": "10.0",
                            "value": "10"
                          },
                          {
                            "apiValue": "off",
                            "description": "Plot",
                            "name": "plot",
                            "value": "false"
                          },
                          {
                            "apiValue": "none",
                            "description": "Probes",
                            "name": "probesel",
                            "value": "None"
                          }
                        ],
                        "tag": "se1",
                        "type": "Segregated",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Direct",
                        "author": "COMSOL",
                        "created": "1664324793892",
                        "displayLabel": "Direct 1",
                        "icon": "solver_direct.png",
                        "label": "Direct 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol1/feature/s1/feature/d1",
                        "settings": [
                          {
                            "apiValue": "mumps",
                            "description": "Solver",
                            "name": "linsolver",
                            "value": "MUMPS"
                          },
                          {
                            "description": "Memory allocation factor",
                            "name": "mumpsalloc",
                            "scalarReal": "1.2",
                            "value": "1.2"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Preordering algorithm",
                            "name": "mumpsreorder",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row preordering",
                            "name": "mumpsrreorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse preordering",
                            "name": "reusereorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Use pivoting",
                            "name": "pivotenable",
                            "value": "true"
                          },
                          {
                            "description": "Pivot threshold",
                            "name": "thresh",
                            "scalarReal": "0.01",
                            "value": "0.01"
                          },
                          {
                            "apiValue": "off",
                            "description": "Block low rank factorization",
                            "name": "mumpsblr",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Out-of-core",
                            "name": "ooc",
                            "value": "Automatic"
                          },
                          {
                            "description": "Memory fraction for out-of-core",
                            "name": "memfracooc",
                            "scalarReal": "0.99",
                            "value": "0.99"
                          },
                          {
                            "apiValue": "auto",
                            "description": "In-core memory method",
                            "name": "incore",
                            "value": "Automatic"
                          },
                          {
                            "description": "Minimum in-core memory (MB)",
                            "name": "minicmemory",
                            "scalarReal": "512.0",
                            "value": "512"
                          },
                          {
                            "description": "Used fraction of total memory",
                            "name": "usetotmemory",
                            "scalarReal": "0.8",
                            "value": "0.8"
                          },
                          {
                            "description": "Internal memory usage factor",
                            "name": "internalmemusage",
                            "scalarReal": "3.0",
                            "value": "3"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Check error estimate",
                            "name": "errorchk",
                            "value": "Automatic"
                          },
                          {
                            "description": "Factor in error estimate",
                            "name": "rhob",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "on",
                            "description": "Iterative refinement",
                            "name": "iterrefine",
                            "value": "true"
                          },
                          {
                            "description": "Maximum number of refinements",
                            "name": "maxrefinesteps",
                            "scalarReal": "15.0",
                            "value": "15"
                          },
                          {
                            "description": "Error ratio bound",
                            "name": "errorratiobound",
                            "scalarReal": "0.5",
                            "value": "0.5"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use in nonlinear solver",
                            "name": "nliniterrefine",
                            "value": "false"
                          }
                        ],
                        "tag": "d1",
                        "type": "Direct",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Relative tolerance",
                        "name": "stol",
                        "scalarReal": "0.001",
                        "value": "0.001"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Linearity",
                        "name": "nonlin",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "on",
                        "description": "Reaction forces",
                        "name": "reacf",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Use lumping when computing fluxes",
                        "name": "lumpedflux",
                        "value": "false"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "s1",
                    "type": "Stationary_solver",
                    "windowType": 1
                  }
                ],
                "tag": "sol1",
                "type": "Solution",
                "windowType": 1
              }
            ],
            "tag": "nonEntity7",
            "windowType": 1
          }
        ],
        "settings": [
          {
            "apiValue": "on",
            "description": "Generate default plots",
            "name": "genPlots",
            "value": "true"
          },
          {
            "apiValue": "on",
            "description": "Generate convergence plots",
            "name": "genConv",
            "value": "true"
          },
          {
            "apiValue": "off",
            "description": "Store solution for all intermediate study steps",
            "name": "storeSol",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Generate default plots for intermediately stored solutions",
            "name": "genIntermediatePlots",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Plot the location of undefined values",
            "name": "plotUndefVals",
            "value": "false"
          },
          {
            "description": "Last computation time",
            "name": "lastComputationTime",
            "value": "9 s"
          },
          {
            "description": "Last computation date",
            "name": "lastComputationDate"
          },
          {
            "description": "Computed in version",
            "name": "lastComputationVersion"
          }
        ],
        "tag": "std1",
        "type": "Study",
        "windowType": 1
      },
      {
        "apiClass": "Study",
        "author": "COMSOL",
        "created": "1696071506703",
        "displayLabel": "Unbiased Eigenfrequency",
        "icon": "study.png",
        "label": "Unbiased Eigenfrequency",
        "lastComputationDate": "1696071519967",
        "lastComputationTime": "8577",
        "lastComputationVersion": "COMSOL 6.2.0.259",
        "lastModified": "1696071544884",
        "lastModifiedBy": "COMSOL",
        "modelEntityPath": "/study/std2",
        "nodes": [
          {
            "apiClass": "StudyFeature",
            "apiType": "Eigenfrequency",
            "author": "COMSOL",
            "created": "1696071506703",
            "displayLabel": "Eigenfrequency",
            "icon": "study_eigenfrequency.png",
            "label": "Eigenfrequency",
            "lastModified": "1696071544884",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/study/std2/feature/eig",
            "settings": [
              {
                "apiValue": "arpack",
                "description": "Eigenfrequency solver",
                "name": "eigsolver",
                "value": "ARPACK"
              },
              {
                "apiValue": "manual",
                "description": "Eigenfrequency search method",
                "name": "eigmethod",
                "value": "Around shift"
              },
              {
                "description": "Desired number of eigenfrequencies",
                "name": "neigs",
                "scalarReal": "3.0",
                "value": "3"
              },
              {
                "apiValue": "on",
                "description": "Desired number of eigenfrequencies",
                "name": "neigsactive",
                "value": "true"
              },
              {
                "apiValue": "Hz",
                "description": "Unit",
                "name": "eigunit",
                "value": "Hz"
              },
              {
                "description": "Search for eigenfrequencies around shift",
                "name": "shift",
                "value": "1[Hz]"
              },
              {
                "apiValue": "on",
                "description": "Search for eigenfrequencies around shift",
                "name": "shiftactive",
                "value": "true"
              },
              {
                "apiValue": "lm",
                "description": "Search method around shift",
                "name": "eigwhich",
                "value": "Closest in absolute value"
              },
              {
                "apiValue": "off",
                "description": "Settings",
                "name": "uselinpsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Plot",
                "name": "plot",
                "value": "false"
              },
              {
                "apiValue": "all",
                "description": "Probes",
                "name": "probesel",
                "value": "All"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Initial values of variables solved for"
                ],
                "name": "useinitsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Values of variables not solved for"
                ],
                "name": "usesol",
                "value": "false"
              },
              {
                "apiValue": "none",
                "description": "Adaptation and error estimates",
                "name": "errestandadap",
                "value": "None"
              },
              {
                "apiValue": "gfpredef",
                "description": "Functional type",
                "name": "goalfunctypeerrest",
                "value": "Predefined"
              },
              {
                "apiValue": "gfint",
                "description": "Solution functional",
                "name": "goalfuncpredeferrest",
                "value": "Integral"
              },
              {
                "apiValue": "gfpredef",
                "description": "Functional type",
                "name": "goalfunctype",
                "value": "Predefined"
              },
              {
                "apiValue": "gfint",
                "description": "Solution functional",
                "name": "goalfuncpredef",
                "value": "Integral"
              },
              {
                "apiValue": "off",
                "description": "Auxiliary sweep",
                "name": "useparam",
                "value": "false"
              }
            ],
            "tag": "eig",
            "type": "Eigenfrequency",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "solver_sequence.png",
            "label": "Solver Configurations",
            "nodes": [
              {
                "apiClass": "SolverSequence",
                "author": "COMSOL",
                "created": "1696071508140",
                "displayLabel": "Solution 2",
                "icon": "solver_sequence1.png",
                "label": "Solution 2",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/sol/sol2",
                "name": "sol2",
                "nodes": [
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StudyStep",
                    "author": "COMSOL",
                    "created": "1696071510749",
                    "displayLabel": "Compile Equations: Eigenfrequency",
                    "icon": "solver_studystep.png",
                    "label": "Compile Equations: Eigenfrequency",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol2/feature/st1",
                    "settings": [
                      {
                        "apiValue": "eig",
                        "description": "Use study step",
                        "name": "studystep",
                        "value": "Eigenfrequency"
                      },
                      {
                        "apiValue": "off",
                        "description": "Split complex variables in real and imaginary parts",
                        "name": "splitcomplex",
                        "value": "false"
                      },
                      {
                        "apiValue": "parent",
                        "description": "Partitioning method for distributed computing",
                        "name": "partmethod",
                        "value": "From parent"
                      },
                      {
                        "apiValue": "off",
                        "description": "Save previous solution",
                        "name": "saveprevioussolution",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Use entities",
                        "name": "useent",
                        "value": "All"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "st1",
                    "type": "Compile_equations",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Variables",
                    "author": "COMSOL",
                    "created": "1696071510765",
                    "displayLabel": "Dependent Variables 1",
                    "icon": "solver_variables.png",
                    "label": "Dependent Variables 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol2/feature/v1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071511343",
                        "displayLabel": "Spatial mesh displacement (comp1.spatial.disp)",
                        "icon": "solver_field.png",
                        "label": "Spatial mesh displacement (comp1.spatial.disp)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol2/feature/v1/feature/comp1_spatial_disp",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*7.886019274640408E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_spatial_disp",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071511359",
                        "displayLabel": "Displacement field (comp1.u)",
                        "icon": "solver_field.png",
                        "label": "Displacement field (comp1.u)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol2/feature/v1/feature/comp1_u",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*7.886019274640408E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_u",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071511359",
                        "displayLabel": "Electric potential (comp1.V)",
                        "icon": "solver_field.png",
                        "label": "Electric potential (comp1.V)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol2/feature/v1/feature/comp1_V",
                        "settings": [
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "From parent"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_V",
                        "type": "Field",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "scalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "resscalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Parameters",
                        "name": "initparametersmethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "v1",
                    "type": "Dependent_variables",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Eigenvalue",
                    "author": "COMSOL",
                    "created": "1696071511374",
                    "displayLabel": "Eigenvalue Solver 1",
                    "icon": "solver_eigenvalue.png",
                    "label": "Eigenvalue Solver 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol2/feature/e1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Direct",
                        "author": "COMSOL",
                        "created": "1696071511374",
                        "displayLabel": "Direct",
                        "icon": "solver_direct.png",
                        "label": "Direct",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol2/feature/e1/feature/dDef",
                        "settings": [
                          {
                            "apiValue": "mumps",
                            "description": "Solver",
                            "name": "linsolver",
                            "value": "MUMPS"
                          },
                          {
                            "description": "Memory allocation factor",
                            "name": "mumpsalloc",
                            "scalarReal": "1.2",
                            "value": "1.2"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Preordering algorithm",
                            "name": "mumpsreorder",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row preordering",
                            "name": "mumpsrreorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse preordering",
                            "name": "reusereorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Use pivoting",
                            "name": "pivotenable",
                            "value": "true"
                          },
                          {
                            "description": "Pivot threshold",
                            "name": "thresh",
                            "scalarReal": "0.01",
                            "value": "0.01"
                          },
                          {
                            "apiValue": "off",
                            "description": "Block low rank factorization",
                            "name": "mumpsblr",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Out-of-core",
                            "name": "ooc",
                            "value": "Automatic"
                          },
                          {
                            "description": "Memory fraction for out-of-core",
                            "name": "memfracooc",
                            "scalarReal": "0.99",
                            "value": "0.99"
                          },
                          {
                            "apiValue": "auto",
                            "description": "In-core memory method",
                            "name": "incore",
                            "value": "Automatic"
                          },
                          {
                            "description": "Minimum in-core memory (MB)",
                            "name": "minicmemory",
                            "scalarReal": "512.0",
                            "value": "512"
                          },
                          {
                            "description": "Used fraction of total memory",
                            "name": "usetotmemory",
                            "scalarReal": "0.8",
                            "value": "0.8"
                          },
                          {
                            "description": "Internal memory usage factor",
                            "name": "internalmemusage",
                            "scalarReal": "3.0",
                            "value": "3"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Check error estimate",
                            "name": "errorchk",
                            "value": "Automatic"
                          },
                          {
                            "description": "Factor in error estimate",
                            "name": "rhob",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "off",
                            "description": "Iterative refinement",
                            "name": "iterrefine",
                            "value": "false"
                          }
                        ],
                        "tag": "dDef",
                        "type": "Direct",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Advanced",
                        "author": "COMSOL",
                        "created": "1696071511374",
                        "displayLabel": "Advanced",
                        "icon": "solver_advanced.png",
                        "label": "Advanced",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol2/feature/e1/feature/aDef",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Matrix symmetry",
                            "name": "symmetric",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Matrix format",
                            "name": "matrixformat",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row equilibration",
                            "name": "rowscale",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Null-space function",
                            "name": "nullfun",
                            "value": "Automatic"
                          },
                          {
                            "description": "Orthonormal block limit",
                            "name": "orthonormallimit",
                            "scalarReal": "1.0E7",
                            "value": "10000000"
                          },
                          {
                            "apiValue": "on",
                            "description": "Solver log",
                            "name": "convinfo",
                            "value": "Normal"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Recovery saving",
                            "name": "recoverysavinginfo",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Force save of recovery file",
                            "name": "recoverysaveforce",
                            "value": "From preferences"
                          },
                          {
                            "description": "Assembly block size",
                            "name": "blocksize",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Assembly block size",
                            "name": "blocksizeactive",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Use distributed solution for assembly",
                            "name": "assemdistrsol",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse sparsity pattern",
                            "name": "cachepattern",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "cachepatternmethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize data locality on cluster",
                            "name": "assemloc",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use thread scheduling for matrix assembly",
                            "name": "optthread",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use static distribution of assembly blocks",
                            "name": "statblockdistr",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Allow complex-valued output from functions with real input",
                            "name": "complexfun",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Stop when undefined mathematical operation is detected",
                            "name": "matherr",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Check for undefined numerical values after each operation",
                            "name": "checkmatherr",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize element data initialization",
                            "name": "elemdatainit",
                            "value": "true"
                          },
                          {
                            "description": "Drop tolerance for local matrix contributions",
                            "name": "assemtol",
                            "scalarReal": "1.0E-12",
                            "value": "1.0E-12"
                          },
                          {
                            "apiValue": "off",
                            "description": "Manual control of reassembly",
                            "name": "keep",
                            "value": "false"
                          }
                        ],
                        "tag": "aDef",
                        "type": "Advanced",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Relative tolerance",
                        "name": "rtol",
                        "scalarReal": "1.0E-6",
                        "value": "1.0E-6"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Use real symmetric eigenvalue solver",
                        "name": "usesymeig",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Real symmetric eigenvalue solver consistency check",
                        "name": "eigsymchk",
                        "value": "false"
                      },
                      {
                        "apiValue": "off",
                        "description": "A posteriori residual check",
                        "name": "eigreschk",
                        "value": "false"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Compute and store left eigenvectors",
                        "name": "computeandstorelefteig",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "on",
                        "description": "Transform eigenvalue linearization point",
                        "name": "transeigref",
                        "value": "true"
                      },
                      {
                        "description": "Value of eigenvalue linearization point",
                        "name": "eigref",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "apiValue": "on",
                        "description": "Store linearization point and deviation in output",
                        "name": "storelinpoint",
                        "value": "true"
                      },
                      {
                        "apiValue": "maximum",
                        "description": "Scaling of eigenvectors",
                        "name": "eigvfunscale",
                        "value": "Maximum"
                      },
                      {
                        "description": "Maximum absolute value",
                        "name": "eigvfunscaleparam",
                        "scalarReal": "7.89E-11",
                        "value": "7.89E-11"
                      },
                      {
                        "description": "Maximum number of eigenvalue iterations",
                        "name": "maxeigit",
                        "scalarReal": "300.0",
                        "value": "300"
                      },
                      {
                        "description": "Dimension of Krylov space",
                        "name": "krylovdim",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "e1",
                    "type": "Eigenvalue_solver",
                    "windowType": 1
                  }
                ],
                "tag": "sol2",
                "type": "Solution",
                "windowType": 1
              }
            ],
            "tag": "nonEntity8",
            "windowType": 1
          }
        ],
        "settings": [
          {
            "apiValue": "off",
            "description": "Generate default plots",
            "name": "genPlots",
            "value": "false"
          },
          {
            "apiValue": "on",
            "description": "Generate convergence plots",
            "name": "genConv",
            "value": "true"
          },
          {
            "apiValue": "off",
            "description": "Store solution for all intermediate study steps",
            "name": "storeSol",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Generate default plots for intermediately stored solutions",
            "name": "genIntermediatePlots",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Plot the location of undefined values",
            "name": "plotUndefVals",
            "value": "false"
          },
          {
            "description": "Last computation time",
            "name": "lastComputationTime",
            "value": "9 s"
          },
          {
            "description": "Last computation date",
            "name": "lastComputationDate",
            "value": "Sep 30, 2023, 12:58:39 PM"
          },
          {
            "description": "Computed in version",
            "name": "lastComputationVersion",
            "value": "COMSOL 6.2.0.259"
          }
        ],
        "tag": "std2",
        "type": "Study",
        "windowType": 1
      },
      {
        "apiClass": "Study",
        "author": "COMSOL",
        "created": "1696071526325",
        "displayLabel": "Biased Eigenfrequency",
        "icon": "study.png",
        "label": "Biased Eigenfrequency",
        "lastComputationDate": "1696071752745",
        "lastComputationTime": "221641",
        "lastComputationVersion": "COMSOL 6.2.0.259",
        "lastModified": "1696071808724",
        "lastModifiedBy": "COMSOL",
        "modelEntityPath": "/study/std3",
        "nodes": [
          {
            "apiClass": "StudyFeature",
            "apiType": "Parametric",
            "author": "COMSOL",
            "created": "1696071527121",
            "displayLabel": "Parametric Sweep",
            "icon": "study_parametric_sweep.png",
            "label": "Parametric Sweep",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/study/std3/feature/param",
            "settings": [
              {
                "apiValue": "sparse",
                "description": "Sweep type",
                "name": "sweeptype",
                "value": "Specified combinations"
              },
              {
                "apiValue": "all",
                "description": [
                  "Keep solutions",
                  "Memory settings for jobs"
                ],
                "name": "keepsol",
                "value": "All"
              },
              {
                "apiValue": "off",
                "description": "Plot",
                "name": "plot",
                "value": "false"
              },
              {
                "apiValue": "all",
                "description": "Probes",
                "name": "probesel",
                "value": "All"
              },
              {
                "apiValue": "off",
                "description": "Accumulated probe table",
                "name": "useaccumtable",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Keep reduced-order models",
                "name": "keeprom",
                "value": "true"
              },
              {
                "apiValue": "parnameval",
                "description": "Add to tag",
                "name": "romtagsuffix",
                "value": "Parameter name and value"
              },
              {
                "apiValue": "on",
                "description": "Clear previous",
                "name": "clearprevrom",
                "value": "true"
              },
              {
                "apiValue": "on",
                "description": "Keep the generating reduced-order model",
                "name": "keepgenrom",
                "value": "true"
              },
              {
                "apiValue": "auto",
                "description": "Use parametric solver",
                "name": "paramselect",
                "value": "Automatic"
              },
              {
                "apiValue": "global",
                "description": "Default solver sequence generation",
                "name": "defsolvergen",
                "value": "Using global parameters"
              },
              {
                "apiValue": "off",
                "description": "Reuse solution from previous step",
                "name": "reusesol",
                "value": "false"
              }
            ],
            "tag": "param",
            "type": "Parametric_sweep",
            "windowType": 1
          },
          {
            "apiClass": "StudyFeature",
            "apiType": "Stationary",
            "author": "COMSOL",
            "created": "1696071526325",
            "displayLabel": "Stationary",
            "icon": "study_stationary.png",
            "label": "Stationary",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/study/std3/feature/stat",
            "settings": [
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Initial values of variables solved for"
                ],
                "name": "useinitsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Values of variables not solved for"
                ],
                "name": "usesol",
                "value": "false"
              },
              {
                "apiValue": "none",
                "description": "Adaptation and error estimates",
                "name": "errestandadap",
                "value": "None"
              },
              {
                "apiValue": "off",
                "description": "Auxiliary sweep",
                "name": "useparam",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Define load cases",
                "name": "useloadcase",
                "value": "false"
              }
            ],
            "tag": "stat",
            "type": "Stationary",
            "windowType": 1
          },
          {
            "apiClass": "StudyFeature",
            "apiType": "Eigenfrequency",
            "author": "COMSOL",
            "created": "1696071526340",
            "displayLabel": "Eigenfrequency",
            "icon": "study_eigenfrequency.png",
            "label": "Eigenfrequency",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/study/std3/feature/eig",
            "settings": [
              {
                "apiValue": "arpack",
                "description": "Eigenfrequency solver",
                "name": "eigsolver",
                "value": "ARPACK"
              },
              {
                "apiValue": "manual",
                "description": "Eigenfrequency search method",
                "name": "eigmethod",
                "value": "Around shift"
              },
              {
                "description": "Desired number of eigenfrequencies",
                "name": "neigs",
                "scalarReal": "1.0",
                "value": "1"
              },
              {
                "apiValue": "on",
                "description": "Desired number of eigenfrequencies",
                "name": "neigsactive",
                "value": "true"
              },
              {
                "apiValue": "Hz",
                "description": "Unit",
                "name": "eigunit",
                "value": "Hz"
              },
              {
                "description": "Search for eigenfrequencies around shift",
                "name": "shift",
                "value": "1[Hz]"
              },
              {
                "apiValue": "on",
                "description": "Search for eigenfrequencies around shift",
                "name": "shiftactive",
                "value": "true"
              },
              {
                "apiValue": "lm",
                "description": "Search method around shift",
                "name": "eigwhich",
                "value": "Closest in absolute value"
              },
              {
                "apiValue": "off",
                "description": "Settings",
                "name": "uselinpsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Plot",
                "name": "plot",
                "value": "false"
              },
              {
                "apiValue": "all",
                "description": "Probes",
                "name": "probesel",
                "value": "All"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Initial values of variables solved for"
                ],
                "name": "useinitsol",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": [
                  "Settings",
                  "Values of variables not solved for"
                ],
                "name": "usesol",
                "value": "false"
              },
              {
                "apiValue": "none",
                "description": "Adaptation and error estimates",
                "name": "errestandadap",
                "value": "None"
              },
              {
                "apiValue": "gfpredef",
                "description": "Functional type",
                "name": "goalfunctypeerrest",
                "value": "Predefined"
              },
              {
                "apiValue": "gfint",
                "description": "Solution functional",
                "name": "goalfuncpredeferrest",
                "value": "Integral"
              },
              {
                "apiValue": "gfpredef",
                "description": "Functional type",
                "name": "goalfunctype",
                "value": "Predefined"
              },
              {
                "apiValue": "gfint",
                "description": "Solution functional",
                "name": "goalfuncpredef",
                "value": "Integral"
              },
              {
                "apiValue": "off",
                "description": "Auxiliary sweep",
                "name": "useparam",
                "value": "false"
              }
            ],
            "tag": "eig",
            "type": "Eigenfrequency",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "solver_sequence.png",
            "label": "Solver Configurations",
            "nodes": [
              {
                "apiClass": "SolverSequence",
                "author": "COMSOL",
                "created": "1696071528059",
                "displayLabel": "Solution 3",
                "icon": "solver_sequence1.png",
                "label": "Solution 3",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/sol/sol3",
                "name": "sol3",
                "nodes": [
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StudyStep",
                    "author": "COMSOL",
                    "created": "1696071529230",
                    "displayLabel": "Compile Equations: Stationary",
                    "icon": "solver_studystep.png",
                    "label": "Compile Equations: Stationary",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/st1",
                    "settings": [
                      {
                        "apiValue": "stat",
                        "description": "Use study step",
                        "name": "studystep",
                        "value": "Stationary"
                      },
                      {
                        "apiValue": "off",
                        "description": "Split complex variables in real and imaginary parts",
                        "name": "splitcomplex",
                        "value": "false"
                      },
                      {
                        "apiValue": "parent",
                        "description": "Partitioning method for distributed computing",
                        "name": "partmethod",
                        "value": "From parent"
                      },
                      {
                        "apiValue": "off",
                        "description": "Save previous solution",
                        "name": "saveprevioussolution",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Use entities",
                        "name": "useent",
                        "value": "All"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "st1",
                    "type": "Compile_equations",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Variables",
                    "author": "COMSOL",
                    "created": "1696071529246",
                    "displayLabel": "Dependent Variables 1",
                    "icon": "solver_variables.png",
                    "label": "Dependent Variables 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/v1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071529808",
                        "displayLabel": "Spatial mesh displacement (comp1.spatial.disp)",
                        "icon": "solver_field.png",
                        "label": "Spatial mesh displacement (comp1.spatial.disp)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v1/feature/comp1_spatial_disp",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*7.886019274640408E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_spatial_disp",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071529808",
                        "displayLabel": "Displacement field (comp1.u)",
                        "icon": "solver_field.png",
                        "label": "Displacement field (comp1.u)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v1/feature/comp1_u",
                        "settings": [
                          {
                            "apiValue": "manual",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Manual"
                          },
                          {
                            "description": "Scale",
                            "name": "scaleval",
                            "value": "1e-2*7.886019274640408E-5"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_u",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071529824",
                        "displayLabel": "Electric potential (comp1.V)",
                        "icon": "solver_field.png",
                        "label": "Electric potential (comp1.V)",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v1/feature/comp1_V",
                        "settings": [
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "From parent"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_V",
                        "type": "Field",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "scalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "resscalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Parameters",
                        "name": "initparametersmethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "v1",
                    "type": "Dependent_variables",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Stationary",
                    "author": "COMSOL",
                    "created": "1696071529839",
                    "displayLabel": "Stationary Solver 1",
                    "icon": "solver_stationary.png",
                    "label": "Stationary Solver 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/s1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Advanced",
                        "author": "COMSOL",
                        "created": "1696071529839",
                        "displayLabel": "Advanced",
                        "icon": "solver_advanced.png",
                        "label": "Advanced",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/s1/feature/aDef",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Matrix symmetry",
                            "name": "symmetric",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Matrix format",
                            "name": "matrixformat",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row equilibration",
                            "name": "rowscale",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Null-space function",
                            "name": "nullfun",
                            "value": "Automatic"
                          },
                          {
                            "description": "Orthonormal block limit",
                            "name": "orthonormallimit",
                            "scalarReal": "1.0E7",
                            "value": "10000000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Store last residual",
                            "name": "storeresidual",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Solver log",
                            "name": "convinfo",
                            "value": "Normal"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Recovery saving",
                            "name": "recoverysavinginfo",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Force save of recovery file",
                            "name": "recoverysaveforce",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "on",
                            "description": "Automatic rescaling of linear equations",
                            "name": "autorescale",
                            "value": "true"
                          },
                          {
                            "description": "Assembly block size",
                            "name": "blocksize",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Assembly block size",
                            "name": "blocksizeactive",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Use distributed solution for assembly",
                            "name": "assemdistrsol",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse sparsity pattern",
                            "name": "cachepattern",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "cachepatternmethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize data locality on cluster",
                            "name": "assemloc",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use thread scheduling for matrix assembly",
                            "name": "optthread",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use static distribution of assembly blocks",
                            "name": "statblockdistr",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Allow complex-valued output from functions with real input",
                            "name": "complexfun",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Stop when undefined mathematical operation is detected",
                            "name": "matherr",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Check for undefined numerical values after each operation",
                            "name": "checkmatherr",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize element data initialization",
                            "name": "elemdatainit",
                            "value": "true"
                          },
                          {
                            "description": "Drop tolerance for local matrix contributions",
                            "name": "assemtol",
                            "scalarReal": "1.0E-12",
                            "value": "1.0E-12"
                          },
                          {
                            "apiValue": "off",
                            "description": "Manual control of reassembly",
                            "name": "keep",
                            "value": "false"
                          }
                        ],
                        "tag": "aDef",
                        "type": "Advanced",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Segregated",
                        "author": "COMSOL",
                        "created": "1696071529839",
                        "displayLabel": "Segregated 1",
                        "icon": "solver_segregated.png",
                        "label": "Segregated 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/s1/feature/se1",
                        "nodes": [
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1696071529839",
                            "displayLabel": "Electric Potential",
                            "icon": "solver_segregatedstep.png",
                            "label": "Electric Potential",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol3/feature/s1/feature/se1/feature/ss1",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss1",
                            "type": "Segregated_step",
                            "windowType": 1
                          },
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1696071529839",
                            "displayLabel": "Displacement Field",
                            "icon": "solver_segregatedstep.png",
                            "label": "Displacement Field",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol3/feature/s1/feature/se1/feature/ss2",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss2",
                            "type": "Segregated_step",
                            "windowType": 1
                          },
                          {
                            "apiClass": "SolverFeature",
                            "apiType": "SegregatedStep",
                            "author": "COMSOL",
                            "created": "1696071529839",
                            "displayLabel": "Spatial Mesh Displacement",
                            "icon": "solver_segregatedstep.png",
                            "label": "Spatial Mesh Displacement",
                            "lastModified": "0",
                            "lastModifiedBy": "COMSOL",
                            "modelEntityPath": "/sol/sol3/feature/s1/feature/se1/feature/ss3",
                            "settings": [
                              {
                                "apiValue": "all",
                                "description": "Components",
                                "name": "segvarspec",
                                "value": "All"
                              },
                              {
                                "apiValue": "auto",
                                "description": "Matrix format",
                                "name": "submatrixformat",
                                "value": "Automatic"
                              },
                              {
                                "apiValue": "const",
                                "description": "Nonlinear method",
                                "name": "subdtech",
                                "value": "Constant (Newton)"
                              },
                              {
                                "description": "Damping factor",
                                "name": "subdamp",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "onevery",
                                "description": "Jacobian update",
                                "name": "subjtech",
                                "value": "On every iteration"
                              },
                              {
                                "apiValue": "iter",
                                "description": "Termination technique",
                                "name": "subtermconst",
                                "value": "Iterations"
                              },
                              {
                                "description": "Number of iterations",
                                "name": "subiter",
                                "scalarReal": "1.0",
                                "value": "1"
                              },
                              {
                                "apiValue": "off",
                                "description": "Use adaptive tolerance in the linear solver",
                                "name": "subadapttol",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Anderson acceleration",
                                "name": "subaacc",
                                "value": "false"
                              },
                              {
                                "apiValue": "off",
                                "description": "Residual smoothing",
                                "name": "subressmooth",
                                "value": "false"
                              },
                              {
                                "apiValue": "on",
                                "description": "Update automatic scale factors in weights",
                                "name": "subupdweights",
                                "value": "true"
                              }
                            ],
                            "tag": "ss3",
                            "type": "Segregated_step",
                            "windowType": 1
                          }
                        ],
                        "settings": [
                          {
                            "apiValue": "tol",
                            "description": "Termination technique",
                            "name": "segterm",
                            "value": "Tolerance"
                          },
                          {
                            "description": "Maximum number of iterations",
                            "name": "maxsegiter",
                            "scalarReal": "100.0",
                            "value": "100"
                          },
                          {
                            "description": "Tolerance factor",
                            "name": "ntolfact",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Termination criterion",
                            "name": "segtermonres",
                            "value": "Solution or residual"
                          },
                          {
                            "description": "Residual factor",
                            "name": "segreserrfact",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "segaacc",
                            "description": "Stabilization and acceleration",
                            "name": "segstabacc",
                            "value": "Anderson acceleration"
                          },
                          {
                            "description": "Dimension of iteration space",
                            "name": "segaaccdim",
                            "scalarReal": "5.0",
                            "value": "5"
                          },
                          {
                            "description": "Mixing parameter",
                            "name": "segaaccmix",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "description": "Iteration delay",
                            "name": "segaaccdelay",
                            "scalarReal": "0.0",
                            "value": "0"
                          },
                          {
                            "description": "Threshold for Anderson step",
                            "name": "segaaccfact",
                            "scalarReal": "10.0",
                            "value": "10"
                          },
                          {
                            "apiValue": "off",
                            "description": "Plot",
                            "name": "plot",
                            "value": "false"
                          },
                          {
                            "apiValue": "none",
                            "description": "Probes",
                            "name": "probesel",
                            "value": "None"
                          }
                        ],
                        "tag": "se1",
                        "type": "Segregated",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Direct",
                        "author": "COMSOL",
                        "created": "1696071529839",
                        "displayLabel": "Direct 1",
                        "icon": "solver_direct.png",
                        "label": "Direct 1",
                        "lastModified": "0",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/s1/feature/d1",
                        "settings": [
                          {
                            "apiValue": "mumps",
                            "description": "Solver",
                            "name": "linsolver",
                            "value": "MUMPS"
                          },
                          {
                            "description": "Memory allocation factor",
                            "name": "mumpsalloc",
                            "scalarReal": "1.2",
                            "value": "1.2"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Preordering algorithm",
                            "name": "mumpsreorder",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row preordering",
                            "name": "mumpsrreorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse preordering",
                            "name": "reusereorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Use pivoting",
                            "name": "pivotenable",
                            "value": "true"
                          },
                          {
                            "description": "Pivot threshold",
                            "name": "thresh",
                            "scalarReal": "0.01",
                            "value": "0.01"
                          },
                          {
                            "apiValue": "off",
                            "description": "Block low rank factorization",
                            "name": "mumpsblr",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Out-of-core",
                            "name": "ooc",
                            "value": "Automatic"
                          },
                          {
                            "description": "Memory fraction for out-of-core",
                            "name": "memfracooc",
                            "scalarReal": "0.99",
                            "value": "0.99"
                          },
                          {
                            "apiValue": "auto",
                            "description": "In-core memory method",
                            "name": "incore",
                            "value": "Automatic"
                          },
                          {
                            "description": "Minimum in-core memory (MB)",
                            "name": "minicmemory",
                            "scalarReal": "512.0",
                            "value": "512"
                          },
                          {
                            "description": "Used fraction of total memory",
                            "name": "usetotmemory",
                            "scalarReal": "0.8",
                            "value": "0.8"
                          },
                          {
                            "description": "Internal memory usage factor",
                            "name": "internalmemusage",
                            "scalarReal": "3.0",
                            "value": "3"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Check error estimate",
                            "name": "errorchk",
                            "value": "Automatic"
                          },
                          {
                            "description": "Factor in error estimate",
                            "name": "rhob",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "on",
                            "description": "Iterative refinement",
                            "name": "iterrefine",
                            "value": "true"
                          },
                          {
                            "description": "Maximum number of refinements",
                            "name": "maxrefinesteps",
                            "scalarReal": "15.0",
                            "value": "15"
                          },
                          {
                            "description": "Error ratio bound",
                            "name": "errorratiobound",
                            "scalarReal": "0.5",
                            "value": "0.5"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use in nonlinear solver",
                            "name": "nliniterrefine",
                            "value": "false"
                          }
                        ],
                        "tag": "d1",
                        "type": "Direct",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Relative tolerance",
                        "name": "stol",
                        "scalarReal": "0.001",
                        "value": "0.001"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Linearity",
                        "name": "nonlin",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "on",
                        "description": "Reaction forces",
                        "name": "reacf",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Use lumping when computing fluxes",
                        "name": "lumpedflux",
                        "value": "false"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "s1",
                    "type": "Stationary_solver",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071529855",
                    "displayLabel": "Solution Store 1",
                    "icon": "solver_storesolution.png",
                    "label": "Solution Store 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/su1",
                    "name": "sol4",
                    "tag": "su1",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StudyStep",
                    "author": "COMSOL",
                    "created": "1696071529855",
                    "displayLabel": "Compile Equations: Eigenfrequency",
                    "icon": "solver_studystep.png",
                    "label": "Compile Equations: Eigenfrequency",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/st2",
                    "settings": [
                      {
                        "apiValue": "eig",
                        "description": "Use study step",
                        "name": "studystep",
                        "value": "Eigenfrequency"
                      },
                      {
                        "apiValue": "off",
                        "description": "Split complex variables in real and imaginary parts",
                        "name": "splitcomplex",
                        "value": "false"
                      },
                      {
                        "apiValue": "parent",
                        "description": "Partitioning method for distributed computing",
                        "name": "partmethod",
                        "value": "From parent"
                      },
                      {
                        "apiValue": "off",
                        "description": "Save previous solution",
                        "name": "saveprevioussolution",
                        "value": "false"
                      },
                      {
                        "apiValue": "all",
                        "description": "Use entities",
                        "name": "useent",
                        "value": "All"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "st2",
                    "type": "Compile_equations",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Variables",
                    "author": "COMSOL",
                    "created": "1696071529871",
                    "displayLabel": "Dependent Variables 2",
                    "icon": "solver_variables.png",
                    "label": "Dependent Variables 2",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/v2",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071530449",
                        "displayLabel": "Spatial mesh displacement (comp1.spatial.disp)",
                        "icon": "solver_field.png",
                        "label": "Spatial mesh displacement (comp1.spatial.disp)",
                        "lastModified": "1696071557761",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v2/feature/comp1_spatial_disp",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_spatial_disp",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071530464",
                        "displayLabel": "Displacement field (comp1.u)",
                        "icon": "solver_field.png",
                        "label": "Displacement field (comp1.u)",
                        "lastModified": "1696071557761",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v2/feature/comp1_u",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_u",
                        "type": "Field",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Field",
                        "author": "COMSOL",
                        "created": "1696071530464",
                        "displayLabel": "Electric potential (comp1.V)",
                        "icon": "solver_field.png",
                        "label": "Electric potential (comp1.V)",
                        "lastModified": "1696071557761",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/v2/feature/comp1_V",
                        "settings": [
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "scalemethod",
                            "value": "From parent"
                          },
                          {
                            "apiValue": "parent",
                            "description": "Method",
                            "name": "resscalemethod",
                            "value": "From parent"
                          }
                        ],
                        "tag": "comp1_V",
                        "type": "Field",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "scalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Method",
                        "name": "resscalemethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Parameters",
                        "name": "initparametersmethod",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "v2",
                    "type": "Dependent_variables",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "Eigenvalue",
                    "author": "COMSOL",
                    "created": "1696071530480",
                    "displayLabel": "Eigenvalue Solver 1",
                    "icon": "solver_eigenvalue.png",
                    "label": "Eigenvalue Solver 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol3/feature/e1",
                    "nodes": [
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Direct",
                        "author": "COMSOL",
                        "created": "1696071530496",
                        "displayLabel": "Direct",
                        "icon": "solver_direct.png",
                        "label": "Direct",
                        "lastModified": "1696071557761",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/e1/feature/dDef",
                        "settings": [
                          {
                            "apiValue": "mumps",
                            "description": "Solver",
                            "name": "linsolver",
                            "value": "MUMPS"
                          },
                          {
                            "description": "Memory allocation factor",
                            "name": "mumpsalloc",
                            "scalarReal": "1.2",
                            "value": "1.2"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Preordering algorithm",
                            "name": "mumpsreorder",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row preordering",
                            "name": "mumpsrreorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse preordering",
                            "name": "reusereorder",
                            "value": "true"
                          },
                          {
                            "apiValue": "on",
                            "description": "Use pivoting",
                            "name": "pivotenable",
                            "value": "true"
                          },
                          {
                            "description": "Pivot threshold",
                            "name": "thresh",
                            "scalarReal": "0.01",
                            "value": "0.01"
                          },
                          {
                            "apiValue": "off",
                            "description": "Block low rank factorization",
                            "name": "mumpsblr",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Out-of-core",
                            "name": "ooc",
                            "value": "Automatic"
                          },
                          {
                            "description": "Memory fraction for out-of-core",
                            "name": "memfracooc",
                            "scalarReal": "0.99",
                            "value": "0.99"
                          },
                          {
                            "apiValue": "auto",
                            "description": "In-core memory method",
                            "name": "incore",
                            "value": "Automatic"
                          },
                          {
                            "description": "Minimum in-core memory (MB)",
                            "name": "minicmemory",
                            "scalarReal": "512.0",
                            "value": "512"
                          },
                          {
                            "description": "Used fraction of total memory",
                            "name": "usetotmemory",
                            "scalarReal": "0.8",
                            "value": "0.8"
                          },
                          {
                            "description": "Internal memory usage factor",
                            "name": "internalmemusage",
                            "scalarReal": "3.0",
                            "value": "3"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Check error estimate",
                            "name": "errorchk",
                            "value": "Automatic"
                          },
                          {
                            "description": "Factor in error estimate",
                            "name": "rhob",
                            "scalarReal": "1.0",
                            "value": "1"
                          },
                          {
                            "apiValue": "off",
                            "description": "Iterative refinement",
                            "name": "iterrefine",
                            "value": "false"
                          }
                        ],
                        "tag": "dDef",
                        "type": "Direct",
                        "windowType": 1
                      },
                      {
                        "apiClass": "SolverFeature",
                        "apiType": "Advanced",
                        "author": "COMSOL",
                        "created": "1696071530496",
                        "displayLabel": "Advanced",
                        "icon": "solver_advanced.png",
                        "label": "Advanced",
                        "lastModified": "1696071557761",
                        "lastModifiedBy": "COMSOL",
                        "modelEntityPath": "/sol/sol3/feature/e1/feature/aDef",
                        "settings": [
                          {
                            "apiValue": "auto",
                            "description": "Matrix symmetry",
                            "name": "symmetric",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Matrix format",
                            "name": "matrixformat",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Row equilibration",
                            "name": "rowscale",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Null-space function",
                            "name": "nullfun",
                            "value": "Automatic"
                          },
                          {
                            "description": "Orthonormal block limit",
                            "name": "orthonormallimit",
                            "scalarReal": "1.0E7",
                            "value": "10000000"
                          },
                          {
                            "apiValue": "on",
                            "description": "Solver log",
                            "name": "convinfo",
                            "value": "Normal"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Recovery saving",
                            "name": "recoverysavinginfo",
                            "value": "From preferences"
                          },
                          {
                            "apiValue": "frompreferences",
                            "description": "Force save of recovery file",
                            "name": "recoverysaveforce",
                            "value": "From preferences"
                          },
                          {
                            "description": "Assembly block size",
                            "name": "blocksize",
                            "scalarReal": "1000.0",
                            "value": "1000"
                          },
                          {
                            "apiValue": "off",
                            "description": "Assembly block size",
                            "name": "blocksizeactive",
                            "value": "false"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Use distributed solution for assembly",
                            "name": "assemdistrsol",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Reuse sparsity pattern",
                            "name": "cachepattern",
                            "value": "true"
                          },
                          {
                            "apiValue": "auto",
                            "description": "Method",
                            "name": "cachepatternmethod",
                            "value": "Automatic"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize data locality on cluster",
                            "name": "assemloc",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use thread scheduling for matrix assembly",
                            "name": "optthread",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Use static distribution of assembly blocks",
                            "name": "statblockdistr",
                            "value": "false"
                          },
                          {
                            "apiValue": "off",
                            "description": "Allow complex-valued output from functions with real input",
                            "name": "complexfun",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Stop when undefined mathematical operation is detected",
                            "name": "matherr",
                            "value": "true"
                          },
                          {
                            "apiValue": "off",
                            "description": "Check for undefined numerical values after each operation",
                            "name": "checkmatherr",
                            "value": "false"
                          },
                          {
                            "apiValue": "on",
                            "description": "Optimize element data initialization",
                            "name": "elemdatainit",
                            "value": "true"
                          },
                          {
                            "description": "Drop tolerance for local matrix contributions",
                            "name": "assemtol",
                            "scalarReal": "1.0E-12",
                            "value": "1.0E-12"
                          },
                          {
                            "apiValue": "off",
                            "description": "Manual control of reassembly",
                            "name": "keep",
                            "value": "false"
                          }
                        ],
                        "tag": "aDef",
                        "type": "Advanced",
                        "windowType": 1
                      }
                    ],
                    "settings": [
                      {
                        "description": "Relative tolerance",
                        "name": "rtol",
                        "scalarReal": "1.0E-6",
                        "value": "1.0E-6"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Use real symmetric eigenvalue solver",
                        "name": "usesymeig",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "off",
                        "description": "Real symmetric eigenvalue solver consistency check",
                        "name": "eigsymchk",
                        "value": "false"
                      },
                      {
                        "apiValue": "off",
                        "description": "A posteriori residual check",
                        "name": "eigreschk",
                        "value": "false"
                      },
                      {
                        "apiValue": "auto",
                        "description": "Compute and store left eigenvectors",
                        "name": "computeandstorelefteig",
                        "value": "Automatic"
                      },
                      {
                        "apiValue": "on",
                        "description": "Transform eigenvalue linearization point",
                        "name": "transeigref",
                        "value": "true"
                      },
                      {
                        "description": "Value of eigenvalue linearization point",
                        "name": "eigref",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "apiValue": "on",
                        "description": "Store linearization point and deviation in output",
                        "name": "storelinpoint",
                        "value": "true"
                      },
                      {
                        "apiValue": "maximum",
                        "description": "Scaling of eigenvectors",
                        "name": "eigvfunscale",
                        "value": "Maximum"
                      },
                      {
                        "description": "Maximum absolute value",
                        "name": "eigvfunscaleparam",
                        "scalarReal": "7.89E-11",
                        "value": "7.89E-11"
                      },
                      {
                        "description": "Maximum number of eigenvalue iterations",
                        "name": "maxeigit",
                        "scalarReal": "300.0",
                        "value": "300"
                      },
                      {
                        "description": "Dimension of Krylov space",
                        "name": "krylovdim",
                        "scalarReal": "0.0",
                        "value": "0"
                      },
                      {
                        "apiValue": "off",
                        "description": "Keep warnings in stored log",
                        "name": "keeplog",
                        "value": "false"
                      }
                    ],
                    "tag": "e1",
                    "type": "Eigenvalue_solver",
                    "windowType": 1
                  }
                ],
                "tag": "sol3",
                "type": "Solution",
                "windowType": 1
              },
              {
                "apiClass": "SolverSequence",
                "author": "COMSOL",
                "created": "1696071531104",
                "displayLabel": "Parametric Solutions 1",
                "icon": "solver_sequence1.png",
                "label": "Parametric Solutions 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/sol/sol5",
                "name": "sol5",
                "nodes": [
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071552543",
                    "displayLabel": "Vdc=5",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=5",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su1",
                    "name": "sol6",
                    "tag": "su1",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071578902",
                    "displayLabel": "Vdc=10",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=10",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su2",
                    "name": "sol7",
                    "tag": "su2",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071603306",
                    "displayLabel": "Vdc=15",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=15",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su3",
                    "name": "sol8",
                    "tag": "su3",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071626663",
                    "displayLabel": "Vdc=20",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=20",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su4",
                    "name": "sol9",
                    "tag": "su4",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071651082",
                    "displayLabel": "Vdc=25",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=25",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su5",
                    "name": "sol10",
                    "tag": "su5",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071675219",
                    "displayLabel": "Vdc=30",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=30",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su6",
                    "name": "sol11",
                    "tag": "su6",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071699201",
                    "displayLabel": "Vdc=35",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=35",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su7",
                    "name": "sol12",
                    "tag": "su7",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071725073",
                    "displayLabel": "Vdc=40",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=40",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su8",
                    "name": "sol13",
                    "tag": "su8",
                    "type": "Solution_store",
                    "windowType": 1
                  },
                  {
                    "apiClass": "SolverFeature",
                    "apiType": "StoreSolution",
                    "author": "COMSOL",
                    "created": "1696071751135",
                    "displayLabel": "Vdc=45",
                    "icon": "solver_storesolution.png",
                    "label": "Vdc=45",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/sol/sol5/feature/su9",
                    "name": "sol14",
                    "tag": "su9",
                    "type": "Solution_store",
                    "windowType": 1
                  }
                ],
                "tag": "sol5",
                "type": "Solution",
                "windowType": 1
              }
            ],
            "tag": "nonEntity9",
            "windowType": 1
          },
          {
            "apiClass": "NonEntity",
            "icon": "job_configurations.png",
            "label": "Job Configurations",
            "nodes": [
              {
                "apiClass": "BatchFeature",
                "apiType": "Parametric",
                "author": "COMSOL",
                "created": "1696071530511",
                "displayLabel": "Parametric Sweep 1",
                "icon": "parametric_sweep.png",
                "label": "Parametric Sweep 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/batch/feature/p1",
                "nodes": [
                  {
                    "apiClass": "BatchFeature",
                    "apiType": "Solutionseq",
                    "author": "COMSOL",
                    "created": "1696071530511",
                    "displayLabel": "Solution 3, Parametric Solutions 1",
                    "icon": "solver_sequence1.png",
                    "label": "Solution 3, Parametric Solutions 1",
                    "lastModified": "1696071752448",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/batch/feature/p1/feature/so1",
                    "settings": [
                      {
                        "apiValue": "on",
                        "description": "Clear previous",
                        "name": "clear",
                        "value": "Clear container initially"
                      },
                      {
                        "apiValue": "parnameval",
                        "description": "Add to tag",
                        "name": "romtagsuffix",
                        "value": "Parameter name and value"
                      },
                      {
                        "apiValue": "on",
                        "description": "Clear previous",
                        "name": "clearprevrom",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Keep the generating reduced-order model",
                        "name": "keepgenrom",
                        "value": "true"
                      }
                    ],
                    "tag": "so1",
                    "type": "Solution",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "description": "Stop condition",
                    "name": "stopcond"
                  },
                  {
                    "apiValue": "off",
                    "description": "Keep solutions before and after stop condition",
                    "name": "keepbeforeandafter",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Stop if error",
                    "name": "err",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Postpone errors until end of sequence",
                    "name": "errignore",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Parametric sweep log",
                    "name": "convinfo",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "off",
                    "description": "Keep warnings in stored log",
                    "name": "keeplog",
                    "value": "false"
                  }
                ],
                "tag": "p1",
                "type": "Parametric_sweep",
                "windowType": 1
              }
            ],
            "tag": "nonEntity10",
            "windowType": 1
          }
        ],
        "settings": [
          {
            "apiValue": "off",
            "description": "Generate default plots",
            "name": "genPlots",
            "value": "false"
          },
          {
            "apiValue": "on",
            "description": "Generate convergence plots",
            "name": "genConv",
            "value": "true"
          },
          {
            "apiValue": "off",
            "description": "Store solution for all intermediate study steps",
            "name": "storeSol",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Generate default plots for intermediately stored solutions",
            "name": "genIntermediatePlots",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Plot the location of undefined values",
            "name": "plotUndefVals",
            "value": "false"
          },
          {
            "description": "Last computation time",
            "name": "lastComputationTime",
            "value": "3 min 42 s"
          },
          {
            "description": "Last computation date",
            "name": "lastComputationDate",
            "value": "Sep 30, 2023, 1:02:32 PM"
          },
          {
            "description": "Computed in version",
            "name": "lastComputationVersion",
            "value": "COMSOL 6.2.0.259"
          }
        ],
        "tag": "std3",
        "type": "Study",
        "windowType": 1
      },
      {
        "apiClass": "Results",
        "author": "COMSOL",
        "created": "1664324758110",
        "displayLabel": "Results",
        "icon": "post.png",
        "label": "Results",
        "lastModified": "0",
        "lastModifiedBy": "COMSOL",
        "modelEntityPath": "/result",
        "nodes": [
          {
            "apiClass": "DatasetFeatureList",
            "author": "COMSOL",
            "created": "1664324758110",
            "displayLabel": "Datasets",
            "icon": "dataset.png",
            "label": "Datasets",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/dataset",
            "nodes": [
              {
                "apiClass": "DatasetFeature",
                "apiType": "Solution",
                "author": "COMSOL",
                "created": "1664324792705",
                "displayLabel": "Stationary/Solution 1",
                "icon": "dataset_solution.png",
                "label": "Stationary/Solution 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/dset1",
                "name": "sol1",
                "settings": [
                  {
                    "apiValue": "comp1",
                    "description": "Component",
                    "name": "comp",
                    "value": "Component 1 (comp1)"
                  },
                  {
                    "apiValue": "spatial",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Spatial  (x, y, z)"
                  },
                  {
                    "description": "Solution at angle (phase)",
                    "name": "phase",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Scale factor",
                    "name": "scalefactor",
                    "scalarReal": "1.0",
                    "value": "1"
                  }
                ],
                "tag": "dset1",
                "type": "Solution",
                "windowType": 1
              },
              {
                "apiClass": "DatasetFeature",
                "apiType": "Mirror3D",
                "author": "COMSOL",
                "created": "1664324803843",
                "displayLabel": "Mirror 3D 1",
                "icon": "dataset_mirror3d.png",
                "label": "Mirror 3D 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/mir1",
                "settings": [
                  {
                    "apiValue": "quick",
                    "description": "Plane type",
                    "name": "planetype",
                    "value": "Quick"
                  },
                  {
                    "apiValue": "yz",
                    "description": "Plane",
                    "name": "quickplane",
                    "value": "yz-planes"
                  },
                  {
                    "description": "x-coordinate",
                    "name": "quickx",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "apiValue": "off",
                    "description": "Define variables",
                    "name": "hasvar",
                    "value": "false"
                  },
                  {
                    "apiValue": "symmetric",
                    "description": "Vector transformation",
                    "name": "vectortrans",
                    "value": "Symmetric"
                  },
                  {
                    "apiValue": "off",
                    "description": "Remove elements on the symmetry plane",
                    "name": "removesymelem",
                    "value": "false"
                  }
                ],
                "tag": "mir1",
                "type": "Mirror_3D",
                "windowType": 1
              },
              {
                "apiClass": "DatasetFeature",
                "apiType": "Solution",
                "author": "COMSOL",
                "created": "1696071508140",
                "displayLabel": "Unbiased Eigenfrequency/Solution 2",
                "icon": "dataset_solution.png",
                "label": "Unbiased Eigenfrequency/Solution 2",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/dset2",
                "name": "sol2",
                "settings": [
                  {
                    "apiValue": "comp1",
                    "description": "Component",
                    "name": "comp",
                    "value": "Component 1 (comp1)"
                  },
                  {
                    "apiValue": "material",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Material  (X, Y, Z)"
                  },
                  {
                    "description": "Solution at angle (phase)",
                    "name": "phase",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Scale factor",
                    "name": "scalefactor",
                    "scalarReal": "1.0",
                    "value": "1"
                  }
                ],
                "tag": "dset2",
                "type": "Solution",
                "windowType": 1
              },
              {
                "apiClass": "DatasetFeature",
                "apiType": "Solution",
                "author": "COMSOL",
                "created": "1696071528059",
                "displayLabel": "Biased Eigenfrequency/Solution 3",
                "icon": "dataset_solution.png",
                "label": "Biased Eigenfrequency/Solution 3",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/dset3",
                "name": "sol3",
                "settings": [
                  {
                    "apiValue": "comp1",
                    "description": "Component",
                    "name": "comp",
                    "value": "Component 1 (comp1)"
                  },
                  {
                    "apiValue": "spatial",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Spatial  (x, y, z)"
                  },
                  {
                    "description": "Solution at angle (phase)",
                    "name": "phase",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Scale factor",
                    "name": "scalefactor",
                    "scalarReal": "1.0",
                    "value": "1"
                  }
                ],
                "tag": "dset3",
                "type": "Solution",
                "windowType": 1
              },
              {
                "apiClass": "DatasetFeature",
                "apiType": "Solution",
                "author": "COMSOL",
                "created": "1696071529855",
                "displayLabel": "Biased Eigenfrequency/Solution Store 1",
                "icon": "dataset_solution.png",
                "label": "Biased Eigenfrequency/Solution Store 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/dset4",
                "name": "sol4",
                "settings": [
                  {
                    "apiValue": "comp1",
                    "description": "Component",
                    "name": "comp",
                    "value": "Component 1 (comp1)"
                  },
                  {
                    "apiValue": "spatial",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Spatial  (x, y, z)"
                  },
                  {
                    "description": "Solution at angle (phase)",
                    "name": "phase",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Scale factor",
                    "name": "scalefactor",
                    "scalarReal": "1.0",
                    "value": "1"
                  }
                ],
                "tag": "dset4",
                "type": "Solution",
                "windowType": 1
              },
              {
                "apiClass": "DatasetFeature",
                "apiType": "Solution",
                "author": "COMSOL",
                "created": "1696071531104",
                "displayLabel": "Biased Eigenfrequency/Parametric Solutions 1",
                "icon": "dataset_solution.png",
                "label": "Biased Eigenfrequency/Parametric Solutions 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/dataset/dset5",
                "name": "sol5",
                "settings": [
                  {
                    "apiValue": "comp1",
                    "description": "Component",
                    "name": "comp",
                    "value": "Component 1 (comp1)"
                  },
                  {
                    "apiValue": "spatial",
                    "description": "Frame",
                    "name": "frametype",
                    "value": "Spatial  (x, y, z)"
                  },
                  {
                    "description": "Solution at angle (phase)",
                    "name": "phase",
                    "scalarReal": "0.0",
                    "value": "0"
                  },
                  {
                    "description": "Scale factor",
                    "name": "scalefactor",
                    "scalarReal": "1.0",
                    "value": "1"
                  }
                ],
                "tag": "dset5",
                "type": "Solution",
                "windowType": 1
              }
            ],
            "tag": "dataset",
            "type": "Datasets",
            "windowType": 1
          },
          {
            "apiClass": "ViewList",
            "author": "COMSOL",
            "created": "1664324758103",
            "displayLabel": "Views",
            "icon": "view3d.png",
            "label": "Views",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/view",
            "nodes": [
              {
                "apiClass": "View",
                "apiType": "ResultView3D",
                "author": "COMSOL",
                "created": "1664324805500",
                "displayLabel": "View 3D 3",
                "icon": "view3d.png",
                "label": "View 3D 3",
                "lastModified": "1696071532901",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/view/view3",
                "nodes": [
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "Camera",
                    "author": "COMSOL",
                    "created": "1664324805500",
                    "displayLabel": "Camera",
                    "icon": "camera.png",
                    "label": "Camera",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view3/camera",
                    "settings": [
                      {
                        "apiValue": "perspective",
                        "description": "Projection",
                        "name": "projection",
                        "value": "Perspective"
                      },
                      {
                        "description": "Zoom angle",
                        "name": "zoomanglefull",
                        "scalarReal": "22.0",
                        "value": "22"
                      },
                      {
                        "apiValue": "none",
                        "description": "View scale",
                        "name": "viewscaletype",
                        "value": "None"
                      },
                      {
                        "apiValue": "off",
                        "description": "Manual spacing",
                        "name": "manualgrid",
                        "value": "false"
                      }
                    ],
                    "tag": "camera",
                    "type": "Camera",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324805500",
                    "displayLabel": "Directional Light 1",
                    "icon": "directional_light.png",
                    "label": "Directional Light 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view3/feature/lgt1",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.8",
                        "value": "0.8"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt1",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324805500",
                    "displayLabel": "Directional Light 2",
                    "icon": "directional_light.png",
                    "label": "Directional Light 2",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view3/feature/lgt2",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.4",
                        "value": "0.4"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt2",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324805500",
                    "displayLabel": "Directional Light 3",
                    "icon": "directional_light.png",
                    "label": "Directional Light 3",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view3/feature/lgt3",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.55",
                        "value": "0.55"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "true"
                      }
                    ],
                    "tag": "lgt3",
                    "type": "Directional_light",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Wireframe rendering",
                    "name": "renderwireframe",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show geometry labels",
                    "name": "showlabels",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show edge direction arrows",
                    "name": "showDirections",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show grid",
                    "name": "showgrid",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis orientation",
                    "name": "showaxisorientation",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis units",
                    "name": "showunits",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Lock camera",
                    "name": "locked",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Lock rotation center",
                    "name": "rotcenlocked",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Scene light",
                    "name": "scenelight",
                    "value": "true"
                  },
                  {
                    "description": "Light intensity",
                    "name": "totlightintensity",
                    "scalarReal": "1.0",
                    "value": "1.0"
                  },
                  {
                    "apiValue": "on",
                    "description": "Diffuse light",
                    "name": "usediffuse",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Specular light",
                    "name": "usespecular",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Ambient light",
                    "name": "globalambient",
                    "value": "true"
                  },
                  {
                    "description": "Ambient intensity",
                    "name": "totambient",
                    "scalarReal": "0.3",
                    "value": "0.3"
                  },
                  {
                    "apiValue": "white",
                    "description": "Color",
                    "name": "ambientcolor",
                    "value": "White"
                  },
                  {
                    "apiValue": "off",
                    "description": "Ambient occlusion",
                    "name": "ssao",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Direct shadows",
                    "name": "shadowmapping",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Gamma correction",
                    "name": "displayoutput",
                    "value": "false"
                  },
                  {
                    "apiValue": "envmap_none",
                    "description": "Environment map",
                    "name": "environmentmap",
                    "value": "None"
                  },
                  {
                    "apiValue": "positivey",
                    "description": "Sky direction",
                    "name": "skydirection",
                    "value": "Positive Y"
                  },
                  {
                    "apiValue": "skyrotationzero",
                    "description": "Sky rotation",
                    "name": "skyrotation",
                    "value": "No rotation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Transparency",
                    "name": "transparency",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clipping active",
                    "name": "clippingactive",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip faces",
                    "name": "clipfaces",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip edges",
                    "name": "clipedges",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip points",
                    "name": "clippoints",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip primary hover effect",
                    "name": "clipprimaryhovereffect",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Clip contextual hover effect",
                    "name": "clipsecondaryhovereffect",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Highlight intersection",
                    "name": "cliphighlightintersection",
                    "value": "true"
                  },
                  {
                    "apiValue": "fromtheme",
                    "description": "Color",
                    "name": "clipintersectionhighlightcolor",
                    "value": "From theme"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply clipping",
                    "name": "clipapplyclipping",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show frames",
                    "name": "clipshowframes",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show gizmos",
                    "name": "clipshowgizmos",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show cross section",
                    "name": "clipshowcappedfaces",
                    "value": "false"
                  }
                ],
                "tag": "view3",
                "type": "View_3D",
                "windowType": 1
              },
              {
                "apiClass": "View",
                "apiType": "ResultView3D",
                "author": "COMSOL",
                "created": "1664324808783",
                "displayLabel": "View 3D 4",
                "icon": "view3d.png",
                "label": "View 3D 4",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/view/view4",
                "nodes": [
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "Camera",
                    "author": "COMSOL",
                    "created": "1664324808783",
                    "displayLabel": "Camera",
                    "icon": "camera.png",
                    "label": "Camera",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view4/camera",
                    "settings": [
                      {
                        "apiValue": "perspective",
                        "description": "Projection",
                        "name": "projection",
                        "value": "Perspective"
                      },
                      {
                        "description": "Zoom angle",
                        "name": "zoomanglefull",
                        "scalarReal": "13.772174835205078",
                        "value": "13.772174835205078"
                      },
                      {
                        "apiValue": "none",
                        "description": "View scale",
                        "name": "viewscaletype",
                        "value": "None"
                      },
                      {
                        "apiValue": "off",
                        "description": "Manual spacing",
                        "name": "manualgrid",
                        "value": "false"
                      }
                    ],
                    "tag": "camera",
                    "type": "Camera",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324808783",
                    "displayLabel": "Directional Light 1",
                    "icon": "directional_light.png",
                    "label": "Directional Light 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view4/feature/lgt1",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.8",
                        "value": "0.8"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt1",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324808783",
                    "displayLabel": "Directional Light 2",
                    "icon": "directional_light.png",
                    "label": "Directional Light 2",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view4/feature/lgt2",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.4",
                        "value": "0.4"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "off",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "false"
                      }
                    ],
                    "tag": "lgt2",
                    "type": "Directional_light",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ViewFeature",
                    "apiType": "DirectionalLight",
                    "author": "COMSOL",
                    "created": "1664324808783",
                    "displayLabel": "Directional Light 3",
                    "icon": "directional_light.png",
                    "label": "Directional Light 3",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/view/view4/feature/lgt3",
                    "settings": [
                      {
                        "description": "Light intensity",
                        "name": "intensity",
                        "scalarReal": "0.55",
                        "value": "0.55"
                      },
                      {
                        "description": "Specular intensity",
                        "name": "specular",
                        "scalarReal": "1.0",
                        "value": "1.0"
                      },
                      {
                        "apiValue": "white",
                        "description": "Color",
                        "name": "color",
                        "value": "White"
                      },
                      {
                        "apiValue": "on",
                        "description": "Lock to camera coordinate system",
                        "name": "cameracoord",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Show light marker",
                        "name": "showmarker",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast light",
                        "name": "castlight",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows",
                        "name": "castshadows",
                        "value": "true"
                      },
                      {
                        "apiValue": "on",
                        "description": "Cast shadows on floor",
                        "name": "castshadowsonfloor",
                        "value": "true"
                      }
                    ],
                    "tag": "lgt3",
                    "type": "Directional_light",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Wireframe rendering",
                    "name": "renderwireframe",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show geometry labels",
                    "name": "showlabels",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show edge direction arrows",
                    "name": "showDirections",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show grid",
                    "name": "showgrid",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis orientation",
                    "name": "showaxisorientation",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show axis units",
                    "name": "showunits",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Lock camera",
                    "name": "locked",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Lock rotation center",
                    "name": "rotcenlocked",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Scene light",
                    "name": "scenelight",
                    "value": "true"
                  },
                  {
                    "description": "Light intensity",
                    "name": "totlightintensity",
                    "scalarReal": "1.0",
                    "value": "1.0"
                  },
                  {
                    "apiValue": "on",
                    "description": "Diffuse light",
                    "name": "usediffuse",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Specular light",
                    "name": "usespecular",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Ambient light",
                    "name": "globalambient",
                    "value": "true"
                  },
                  {
                    "description": "Ambient intensity",
                    "name": "totambient",
                    "scalarReal": "0.3",
                    "value": "0.3"
                  },
                  {
                    "apiValue": "white",
                    "description": "Color",
                    "name": "ambientcolor",
                    "value": "White"
                  },
                  {
                    "apiValue": "off",
                    "description": "Ambient occlusion",
                    "name": "ssao",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Direct shadows",
                    "name": "shadowmapping",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Gamma correction",
                    "name": "displayoutput",
                    "value": "false"
                  },
                  {
                    "apiValue": "envmap_none",
                    "description": "Environment map",
                    "name": "environmentmap",
                    "value": "None"
                  },
                  {
                    "apiValue": "positivey",
                    "description": "Sky direction",
                    "name": "skydirection",
                    "value": "Positive Y"
                  },
                  {
                    "apiValue": "skyrotationzero",
                    "description": "Sky rotation",
                    "name": "skyrotation",
                    "value": "No rotation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Transparency",
                    "name": "transparency",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clipping active",
                    "name": "clippingactive",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip faces",
                    "name": "clipfaces",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip edges",
                    "name": "clipedges",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip points",
                    "name": "clippoints",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Clip primary hover effect",
                    "name": "clipprimaryhovereffect",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Clip contextual hover effect",
                    "name": "clipsecondaryhovereffect",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Highlight intersection",
                    "name": "cliphighlightintersection",
                    "value": "true"
                  },
                  {
                    "apiValue": "fromtheme",
                    "description": "Color",
                    "name": "clipintersectionhighlightcolor",
                    "value": "From theme"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply clipping",
                    "name": "clipapplyclipping",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show frames",
                    "name": "clipshowframes",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show gizmos",
                    "name": "clipshowgizmos",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show cross section",
                    "name": "clipshowcappedfaces",
                    "value": "false"
                  }
                ],
                "tag": "view4",
                "type": "View_3D",
                "windowType": 1
              }
            ],
            "tag": "view",
            "type": "Views",
            "windowType": 1
          },
          {
            "apiClass": "NumericalFeatureList",
            "author": "COMSOL",
            "created": "1664324758110",
            "displayLabel": "Derived Values",
            "icon": "numerical_results.png",
            "label": "Derived Values",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/numerical",
            "tag": "numerical",
            "type": "Derived_values",
            "windowType": 1
          },
          {
            "apiClass": "TableFeatureList",
            "author": "COMSOL",
            "created": "1664324758110",
            "displayLabel": "Tables",
            "icon": "post_table.png",
            "label": "Tables",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/table",
            "tag": "table",
            "type": "Tables",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup3D",
            "author": "COMSOL",
            "created": "1664324793923",
            "displayLabel": "Displacement (solid)",
            "icon": "plot_group3d.png",
            "label": "Displacement (solid)",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg1",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "Volume",
                "author": "COMSOL",
                "created": "1664324793923",
                "displayLabel": "Volume 1",
                "icon": "post_volume.png",
                "label": "Volume 1",
                "lastModified": "1664324814063",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg1/feature/vol1",
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "solid.disp"
                  },
                  {
                    "apiValue": "\u00b5m",
                    "description": "Unit",
                    "name": "unit",
                    "value": "\u00b5m"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Displacement magnitude"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual color range",
                    "name": "rangecoloractive",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual data range",
                    "name": "rangedataactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "SpectrumLight",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "SpectrumLight"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Color table type",
                    "name": "colortabletype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "off",
                    "description": "Wireframe",
                    "name": "wireframe",
                    "value": "false"
                  },
                  {
                    "apiValue": "custom",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Custom"
                  },
                  {
                    "description": "Element refinement",
                    "name": "refine",
                    "scalarReal": "2.0",
                    "value": "2"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "manual",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "Manual"
                  },
                  {
                    "description": "Threshold",
                    "name": "thresholdvalue",
                    "scalarReal": "0.2",
                    "value": "0.2"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Enable filter",
                    "name": "filteractive",
                    "value": "false"
                  },
                  {
                    "description": "Element scale factor",
                    "name": "elemscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "vol1",
                "type": "Volume[plot]",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Apply to dataset edges",
                "name": "applyselectiontodatasetedges",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "auto",
                "description": "Title type",
                "name": "titletype",
                "value": "Automatic"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "apiValue": "off",
                "description": "Show hidden entities",
                "name": "showhiddenobjects",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Propagate hiding to lower dimensions",
                "name": "inherithide",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Plot dataset edges",
                "name": "edges",
                "value": "true"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "edgecolor",
                "value": "From theme"
              },
              {
                "apiValue": "spatial",
                "description": "Frame",
                "name": "frametype",
                "value": "Spatial  (x, y, z)"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Show maximum and minimum values",
                "name": "showlegendsmaxmin",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Show units",
                "name": "showlegendsunit",
                "value": "false"
              },
              {
                "apiValue": "right",
                "description": "Position",
                "name": "legendpos",
                "value": "Right"
              },
              {
                "apiValue": "fromtheme",
                "description": "Text color",
                "name": "legendcolor",
                "value": "From theme"
              },
              {
                "apiValue": "off",
                "description": "Manual color legend settings",
                "name": "legendactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual grid settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Enable",
                "name": "plotarrayenable",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg1",
            "type": "3D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup3D",
            "author": "COMSOL",
            "created": "1664324794048",
            "displayLabel": "Electric Potential (es)",
            "icon": "plot_group3d.png",
            "label": "Electric Potential (es)",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg2",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "Multislice",
                "author": "COMSOL",
                "created": "1664324794064",
                "displayLabel": "Multislice 1",
                "icon": "plot_multislice.png",
                "label": "Multislice 1",
                "lastModified": "1664324814063",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg2/feature/mslc1",
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "V"
                  },
                  {
                    "apiValue": "V",
                    "description": "Unit",
                    "name": "unit",
                    "value": "V"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Electric potential"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "x-planes"
                    ],
                    "name": "multiplanexmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "xcoord",
                    "value": "es.CPx"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "y-planes"
                    ],
                    "name": "multiplaneymethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "ycoord",
                    "value": "es.CPy"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "z-planes"
                    ],
                    "name": "multiplanezmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "zcoord",
                    "value": "es.CPz"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual color range",
                    "name": "rangecoloractive",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual data range",
                    "name": "rangedataactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "Dipole",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "Dipole"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "true"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Color table type",
                    "name": "colortabletype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "mslc1",
                "type": "Multislice",
                "windowType": 1
              },
              {
                "apiClass": "ResultFeature",
                "apiType": "StreamlineMultislice",
                "author": "COMSOL",
                "created": "1664324794079",
                "displayLabel": "Streamline Multislice 1",
                "icon": "plot_streamlinemultislice.png",
                "label": "Streamline Multislice 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg2/feature/strmsl1",
                "nodes": [
                  {
                    "apiClass": "ResultFeature",
                    "apiType": "Color",
                    "author": "COMSOL",
                    "created": "1664324794126",
                    "displayLabel": "Color Expression 1",
                    "icon": "post_color.png",
                    "label": "Color Expression 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/result/feature/pg2/feature/strmsl1/feature/col1",
                    "settings": [
                      {
                        "apiValue": "V",
                        "description": "Unit",
                        "name": "unit",
                        "value": "V"
                      },
                      {
                        "description": "Expression",
                        "name": "expr",
                        "value": "V"
                      },
                      {
                        "description": "Description",
                        "name": "descr",
                        "value": "Electric potential"
                      },
                      {
                        "apiValue": "none",
                        "description": "Title type",
                        "name": "titletype",
                        "value": "None"
                      },
                      {
                        "apiValue": "colortable",
                        "description": "Coloring",
                        "name": "coloring",
                        "value": "Color table"
                      },
                      {
                        "apiValue": "DipoleDark",
                        "description": "Color table",
                        "name": "colortable",
                        "value": "DipoleDark"
                      },
                      {
                        "apiValue": "off",
                        "description": "Color legend",
                        "name": "colorlegend",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Color table transformation",
                        "name": "colortabletrans",
                        "value": "None"
                      },
                      {
                        "apiValue": "continuous",
                        "description": "Color table type",
                        "name": "colortabletype",
                        "value": "Continuous"
                      },
                      {
                        "apiValue": "linear",
                        "description": "Scale",
                        "name": "colorscalemode",
                        "value": "Linear"
                      }
                    ],
                    "tag": "col1",
                    "type": "Color_expression",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ResultFeature",
                    "apiType": "Filter",
                    "author": "COMSOL",
                    "created": "1664324794126",
                    "displayLabel": "Filter 1",
                    "icon": "post_filter.png",
                    "label": "Filter 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/result/feature/pg2/feature/strmsl1/feature/filt1",
                    "settings": [
                      {
                        "description": "Logical expression for inclusion",
                        "name": "expr",
                        "value": "!isScalingSystemDomain"
                      },
                      {
                        "apiValue": "smooth",
                        "description": "Element nodes to fulfill expression",
                        "name": "nodespec",
                        "value": "Smooth"
                      },
                      {
                        "apiValue": "off",
                        "description": "Use derivatives",
                        "name": "useder",
                        "value": "false"
                      }
                    ],
                    "tag": "filt1",
                    "type": "Filter",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Electric field (spatial frame)"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "x-planes"
                    ],
                    "name": "multiplanexmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "xcoord",
                    "value": "es.CPx"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "y-planes"
                    ],
                    "name": "multiplaneymethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "ycoord",
                    "value": "es.CPy"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "z-planes"
                    ],
                    "name": "multiplanezmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "zcoord",
                    "value": "es.CPz"
                  },
                  {
                    "apiValue": "none",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "None"
                  },
                  {
                    "apiValue": "uniform",
                    "description": "Positioning",
                    "name": "posmethod",
                    "value": "Uniform density"
                  },
                  {
                    "apiValue": "uniform",
                    "description": "Point distribution",
                    "name": "selpointdistr",
                    "value": "Uniform"
                  },
                  {
                    "description": "Number",
                    "name": "selnumber",
                    "scalarReal": "20.0",
                    "value": "20"
                  },
                  {
                    "description": "Separating distance",
                    "name": "udist",
                    "scalarReal": "0.02",
                    "value": "0.02"
                  },
                  {
                    "apiValue": "automatic",
                    "description": "Advanced parameters",
                    "name": "uadv",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "line",
                    "description": [
                      "Type",
                      "Line style"
                    ],
                    "name": "linetype",
                    "value": "Line"
                  },
                  {
                    "apiValue": "none",
                    "description": [
                      "Type",
                      "Point style"
                    ],
                    "name": "pointtype",
                    "value": "None"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "description": "Integration tolerance",
                    "name": "inttol",
                    "scalarReal": "0.001",
                    "value": "0.001"
                  },
                  {
                    "description": "Maximum streamline length",
                    "name": "maxlen",
                    "scalarReal": "0.4",
                    "value": "0.4"
                  },
                  {
                    "description": "Maximum number of integration steps",
                    "name": "maxsteps",
                    "scalarReal": "5000.0",
                    "value": "5000"
                  },
                  {
                    "description": "Maximum integration time",
                    "name": "maxtime",
                    "value": "Inf"
                  },
                  {
                    "description": "Stationary point stop tolerance",
                    "name": "stattol",
                    "scalarReal": "0.01",
                    "value": "0.01"
                  },
                  {
                    "description": "Loop tolerance",
                    "name": "looptol",
                    "scalarReal": "0.01",
                    "value": "0.01"
                  },
                  {
                    "description": "Minimum angle threshold",
                    "name": "anglethreshold",
                    "value": "0.05[rad]"
                  },
                  {
                    "apiValue": "on",
                    "description": "Allow backward time integration",
                    "name": "back",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Normalize vector field",
                    "name": "normal",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Arrow scale factor",
                    "name": "inheritarrowscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Point radius scale factor",
                    "name": "inheritspherescale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Tube radius scale factor",
                    "name": "inherittubescale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "strmsl1",
                "type": "Streamline_multislice",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Apply to dataset edges",
                "name": "applyselectiontodatasetedges",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "auto",
                "description": "Title type",
                "name": "titletype",
                "value": "Automatic"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "apiValue": "off",
                "description": "Show hidden entities",
                "name": "showhiddenobjects",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Propagate hiding to lower dimensions",
                "name": "inherithide",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Plot dataset edges",
                "name": "edges",
                "value": "true"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "edgecolor",
                "value": "From theme"
              },
              {
                "apiValue": "spatial",
                "description": "Frame",
                "name": "frametype",
                "value": "Spatial  (x, y, z)"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "on",
                "description": "Show maximum and minimum values",
                "name": "showlegendsmaxmin",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Show units",
                "name": "showlegendsunit",
                "value": "false"
              },
              {
                "apiValue": "right",
                "description": "Position",
                "name": "legendpos",
                "value": "Right"
              },
              {
                "apiValue": "fromtheme",
                "description": "Text color",
                "name": "legendcolor",
                "value": "From theme"
              },
              {
                "apiValue": "off",
                "description": "Manual color legend settings",
                "name": "legendactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual grid settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Enable",
                "name": "plotarrayenable",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg2",
            "type": "3D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup3D",
            "author": "COMSOL",
            "created": "1664324794126",
            "displayLabel": "Electric Field Norm (es)",
            "icon": "plot_group3d.png",
            "label": "Electric Field Norm (es)",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg3",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "Multislice",
                "author": "COMSOL",
                "created": "1664324794126",
                "displayLabel": "Multislice 1",
                "icon": "plot_multislice.png",
                "label": "Multislice 1",
                "lastModified": "1664324814063",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg3/feature/mslc1",
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "es.normE"
                  },
                  {
                    "apiValue": "V/m",
                    "description": "Unit",
                    "name": "unit",
                    "value": "V/m"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Electric field norm"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "x-planes"
                    ],
                    "name": "multiplanexmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "xcoord",
                    "value": "es.CPx"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "y-planes"
                    ],
                    "name": "multiplaneymethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "ycoord",
                    "value": "es.CPy"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "z-planes"
                    ],
                    "name": "multiplanezmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "zcoord",
                    "value": "es.CPz"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual color range",
                    "name": "rangecoloractive",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual data range",
                    "name": "rangedataactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "Prism",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "Prism"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "true"
                  },
                  {
                    "apiValue": "nonlinear",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "Nonlinear"
                  },
                  {
                    "apiValue": "off",
                    "description": "Reverse color table",
                    "name": "nonlinearcolortablerev",
                    "value": "false"
                  },
                  {
                    "description": "Color calibration parameter",
                    "name": "colorcalibration",
                    "scalarReal": "-0.8",
                    "value": "-0.8"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Color table type",
                    "name": "colortabletype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "mslc1",
                "type": "Multislice",
                "windowType": 1
              },
              {
                "apiClass": "ResultFeature",
                "apiType": "StreamlineMultislice",
                "author": "COMSOL",
                "created": "1664324794142",
                "displayLabel": "Streamline Multislice 1",
                "icon": "plot_streamlinemultislice.png",
                "label": "Streamline Multislice 1",
                "lastModified": "0",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg3/feature/strmsl1",
                "nodes": [
                  {
                    "apiClass": "ResultFeature",
                    "apiType": "Color",
                    "author": "COMSOL",
                    "created": "1664324794220",
                    "displayLabel": "Color Expression 1",
                    "icon": "post_color.png",
                    "label": "Color Expression 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/result/feature/pg3/feature/strmsl1/feature/col1",
                    "settings": [
                      {
                        "apiValue": "V/m",
                        "description": "Unit",
                        "name": "unit",
                        "value": "V/m"
                      },
                      {
                        "description": "Expression",
                        "name": "expr",
                        "value": "es.normE"
                      },
                      {
                        "description": "Description",
                        "name": "descr",
                        "value": "Electric field norm"
                      },
                      {
                        "apiValue": "none",
                        "description": "Title type",
                        "name": "titletype",
                        "value": "None"
                      },
                      {
                        "apiValue": "colortable",
                        "description": "Coloring",
                        "name": "coloring",
                        "value": "Color table"
                      },
                      {
                        "apiValue": "PrismDark",
                        "description": "Color table",
                        "name": "colortable",
                        "value": "PrismDark"
                      },
                      {
                        "apiValue": "off",
                        "description": "Color legend",
                        "name": "colorlegend",
                        "value": "false"
                      },
                      {
                        "apiValue": "nonlinear",
                        "description": "Color table transformation",
                        "name": "colortabletrans",
                        "value": "Nonlinear"
                      },
                      {
                        "apiValue": "off",
                        "description": "Reverse color table",
                        "name": "nonlinearcolortablerev",
                        "value": "false"
                      },
                      {
                        "description": "Color calibration parameter",
                        "name": "colorcalibration",
                        "scalarReal": "-0.8",
                        "value": "-0.8"
                      },
                      {
                        "apiValue": "continuous",
                        "description": "Color table type",
                        "name": "colortabletype",
                        "value": "Continuous"
                      },
                      {
                        "apiValue": "linear",
                        "description": "Scale",
                        "name": "colorscalemode",
                        "value": "Linear"
                      }
                    ],
                    "tag": "col1",
                    "type": "Color_expression",
                    "windowType": 1
                  },
                  {
                    "apiClass": "ResultFeature",
                    "apiType": "Filter",
                    "author": "COMSOL",
                    "created": "1664324794220",
                    "displayLabel": "Filter 1",
                    "icon": "post_filter.png",
                    "label": "Filter 1",
                    "lastModified": "0",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/result/feature/pg3/feature/strmsl1/feature/filt1",
                    "settings": [
                      {
                        "description": "Logical expression for inclusion",
                        "name": "expr",
                        "value": "!isScalingSystemDomain"
                      },
                      {
                        "apiValue": "smooth",
                        "description": "Element nodes to fulfill expression",
                        "name": "nodespec",
                        "value": "Smooth"
                      },
                      {
                        "apiValue": "off",
                        "description": "Use derivatives",
                        "name": "useder",
                        "value": "false"
                      }
                    ],
                    "tag": "filt1",
                    "type": "Filter",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Electric field (spatial frame)"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "x-planes"
                    ],
                    "name": "multiplanexmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "xcoord",
                    "value": "es.CPx"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "y-planes"
                    ],
                    "name": "multiplaneymethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "ycoord",
                    "value": "es.CPy"
                  },
                  {
                    "apiValue": "coord",
                    "description": [
                      "Entry method",
                      "z-planes"
                    ],
                    "name": "multiplanezmethod",
                    "value": "Coordinates"
                  },
                  {
                    "description": "Coordinates",
                    "name": "zcoord",
                    "value": "es.CPz"
                  },
                  {
                    "apiValue": "none",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "None"
                  },
                  {
                    "apiValue": "uniform",
                    "description": "Positioning",
                    "name": "posmethod",
                    "value": "Uniform density"
                  },
                  {
                    "apiValue": "uniform",
                    "description": "Point distribution",
                    "name": "selpointdistr",
                    "value": "Uniform"
                  },
                  {
                    "description": "Number",
                    "name": "selnumber",
                    "scalarReal": "20.0",
                    "value": "20"
                  },
                  {
                    "description": "Separating distance",
                    "name": "udist",
                    "scalarReal": "0.02",
                    "value": "0.02"
                  },
                  {
                    "apiValue": "automatic",
                    "description": "Advanced parameters",
                    "name": "uadv",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "line",
                    "description": [
                      "Type",
                      "Line style"
                    ],
                    "name": "linetype",
                    "value": "Line"
                  },
                  {
                    "apiValue": "none",
                    "description": [
                      "Type",
                      "Point style"
                    ],
                    "name": "pointtype",
                    "value": "None"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "description": "Integration tolerance",
                    "name": "inttol",
                    "scalarReal": "0.001",
                    "value": "0.001"
                  },
                  {
                    "description": "Maximum streamline length",
                    "name": "maxlen",
                    "scalarReal": "0.4",
                    "value": "0.4"
                  },
                  {
                    "description": "Maximum number of integration steps",
                    "name": "maxsteps",
                    "scalarReal": "5000.0",
                    "value": "5000"
                  },
                  {
                    "description": "Maximum integration time",
                    "name": "maxtime",
                    "value": "Inf"
                  },
                  {
                    "description": "Stationary point stop tolerance",
                    "name": "stattol",
                    "scalarReal": "0.01",
                    "value": "0.01"
                  },
                  {
                    "description": "Loop tolerance",
                    "name": "looptol",
                    "scalarReal": "0.01",
                    "value": "0.01"
                  },
                  {
                    "description": "Minimum angle threshold",
                    "name": "anglethreshold",
                    "value": "0.05[rad]"
                  },
                  {
                    "apiValue": "on",
                    "description": "Allow backward time integration",
                    "name": "back",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Normalize vector field",
                    "name": "normal",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Arrow scale factor",
                    "name": "inheritarrowscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Point radius scale factor",
                    "name": "inheritspherescale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Tube radius scale factor",
                    "name": "inherittubescale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "strmsl1",
                "type": "Streamline_multislice",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Apply to dataset edges",
                "name": "applyselectiontodatasetedges",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "auto",
                "description": "Title type",
                "name": "titletype",
                "value": "Automatic"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "apiValue": "off",
                "description": "Show hidden entities",
                "name": "showhiddenobjects",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Propagate hiding to lower dimensions",
                "name": "inherithide",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Plot dataset edges",
                "name": "edges",
                "value": "true"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "edgecolor",
                "value": "From theme"
              },
              {
                "apiValue": "spatial",
                "description": "Frame",
                "name": "frametype",
                "value": "Spatial  (x, y, z)"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "on",
                "description": "Show maximum and minimum values",
                "name": "showlegendsmaxmin",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Show units",
                "name": "showlegendsunit",
                "value": "false"
              },
              {
                "apiValue": "right",
                "description": "Position",
                "name": "legendpos",
                "value": "Right"
              },
              {
                "apiValue": "fromtheme",
                "description": "Text color",
                "name": "legendcolor",
                "value": "From theme"
              },
              {
                "apiValue": "off",
                "description": "Manual color legend settings",
                "name": "legendactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual grid settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Enable",
                "name": "plotarrayenable",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg3",
            "type": "3D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup3D",
            "author": "COMSOL",
            "created": "1664324804062",
            "displayLabel": "Biased Displacement",
            "icon": "plot_group3d.png",
            "label": "Biased Displacement",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg4",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "Volume",
                "author": "COMSOL",
                "created": "1664324804484",
                "displayLabel": "Volume 1",
                "icon": "post_volume.png",
                "label": "Volume 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg4/feature/vol1",
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "w"
                  },
                  {
                    "apiValue": "\u00b5m",
                    "description": "Unit",
                    "name": "unit",
                    "value": "\u00b5m"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Displacement field, Z-component"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual color range",
                    "name": "rangecoloractive",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual data range",
                    "name": "rangedataactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "Rainbow",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "Rainbow"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "true"
                  },
                  {
                    "apiValue": "reverse",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "Reverse"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Color table type",
                    "name": "colortabletype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "off",
                    "description": "Wireframe",
                    "name": "wireframe",
                    "value": "false"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Enable filter",
                    "name": "filteractive",
                    "value": "false"
                  },
                  {
                    "description": "Element scale factor",
                    "name": "elemscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "vol1",
                "type": "Volume[plot]",
                "windowType": 1
              },
              {
                "apiClass": "ResultFeature",
                "apiType": "Isosurface",
                "author": "COMSOL",
                "created": "1664324805843",
                "displayLabel": "Isosurface 1",
                "icon": "post_isosurface.png",
                "label": "Isosurface 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg4/feature/iso1",
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "V"
                  },
                  {
                    "apiValue": "V",
                    "description": "Unit",
                    "name": "unit",
                    "value": "V"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Electric potential"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "levels",
                    "description": "Entry method",
                    "name": "levelmethod",
                    "value": "Levels"
                  },
                  {
                    "description": "Levels",
                    "name": "levels",
                    "value": "10 20 30"
                  },
                  {
                    "apiValue": "off",
                    "description": "Interactive",
                    "name": "interactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "surface",
                    "description": "Isosurface type",
                    "name": "surfacetype",
                    "value": "Surface"
                  },
                  {
                    "apiValue": "off",
                    "description": "Level labels",
                    "name": "contourlabels",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "Traffic",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "Traffic"
                  },
                  {
                    "apiValue": "off",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "false"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Use derivatives",
                    "name": "useder",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "iso1",
                "type": "Isosurface",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Apply to dataset edges",
                "name": "applyselectiontodatasetedges",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "auto",
                "description": "Title type",
                "name": "titletype",
                "value": "Automatic"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "apiValue": "off",
                "description": "Show hidden entities",
                "name": "showhiddenobjects",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Propagate hiding to lower dimensions",
                "name": "inherithide",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Plot dataset edges",
                "name": "edges",
                "value": "true"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "edgecolor",
                "value": "From theme"
              },
              {
                "apiValue": "material",
                "description": "Frame",
                "name": "frametype",
                "value": "Material  (X, Y, Z)"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Show maximum and minimum values",
                "name": "showlegendsmaxmin",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Show units",
                "name": "showlegendsunit",
                "value": "false"
              },
              {
                "apiValue": "right",
                "description": "Position",
                "name": "legendpos",
                "value": "Right"
              },
              {
                "apiValue": "fromtheme",
                "description": "Text color",
                "name": "legendcolor",
                "value": "From theme"
              },
              {
                "apiValue": "off",
                "description": "Manual color legend settings",
                "name": "legendactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual grid settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Enable",
                "name": "plotarrayenable",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg4",
            "type": "3D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup3D",
            "author": "COMSOL",
            "created": "1696071520670",
            "displayLabel": "Unbiased Modes",
            "icon": "plot_group3d.png",
            "label": "Unbiased Modes",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg5",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "Volume",
                "author": "COMSOL",
                "created": "1696071521560",
                "displayLabel": "Volume 1",
                "icon": "post_volume.png",
                "label": "Volume 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg5/feature/vol1",
                "nodes": [
                  {
                    "apiClass": "ResultFeature",
                    "apiType": "Deform",
                    "author": "COMSOL",
                    "created": "1696071522169",
                    "displayLabel": "Deformation 1",
                    "icon": "post_deformation.png",
                    "label": "Deformation 1",
                    "lastModified": "1696071808724",
                    "lastModifiedBy": "COMSOL",
                    "modelEntityPath": "/result/feature/pg5/feature/vol1/feature/def1",
                    "settings": [
                      {
                        "description": "Description",
                        "name": "descr",
                        "value": "Displacement field"
                      },
                      {
                        "apiValue": "harmonic",
                        "description": "Expression evaluated for",
                        "name": "evalmethod",
                        "value": "Harmonic perturbation"
                      },
                      {
                        "apiValue": "off",
                        "description": "Compute differential",
                        "name": "differential",
                        "value": "false"
                      },
                      {
                        "apiValue": "none",
                        "description": "Title type",
                        "name": "titletype",
                        "value": "None"
                      },
                      {
                        "description": "Maximum relative deformation",
                        "name": "maxreldeformexpr",
                        "scalarReal": "0.1",
                        "value": "0.1"
                      }
                    ],
                    "tag": "def1",
                    "type": "Deformation",
                    "windowType": 1
                  }
                ],
                "settings": [
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "solid.disp"
                  },
                  {
                    "apiValue": "\u00b5m",
                    "description": "Unit",
                    "name": "unit",
                    "value": "\u00b5m"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Displacement magnitude"
                  },
                  {
                    "apiValue": "harmonic",
                    "description": "Expression evaluated for",
                    "name": "evalmethod",
                    "value": "Harmonic perturbation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Compute differential",
                    "name": "differential",
                    "value": "false"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual color range",
                    "name": "rangecoloractive",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual data range",
                    "name": "rangedataactive",
                    "value": "false"
                  },
                  {
                    "apiValue": "colortable",
                    "description": "Coloring",
                    "name": "coloring",
                    "value": "Color table"
                  },
                  {
                    "apiValue": "Rainbow",
                    "description": "Color table",
                    "name": "colortable",
                    "value": "Rainbow"
                  },
                  {
                    "apiValue": "off",
                    "description": "Color legend",
                    "name": "colorlegend",
                    "value": "false"
                  },
                  {
                    "apiValue": "none",
                    "description": "Color table transformation",
                    "name": "colortabletrans",
                    "value": "None"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Color table type",
                    "name": "colortabletype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "linear",
                    "description": "Scale",
                    "name": "colorscalemode",
                    "value": "Linear"
                  },
                  {
                    "apiValue": "off",
                    "description": "Wireframe",
                    "name": "wireframe",
                    "value": "false"
                  },
                  {
                    "apiValue": "normal",
                    "description": "Resolution",
                    "name": "resolution",
                    "value": "Normal"
                  },
                  {
                    "apiValue": "material",
                    "description": "Smoothing",
                    "name": "smooth",
                    "value": "Inside material domains"
                  },
                  {
                    "apiValue": "none",
                    "description": "Smoothing threshold",
                    "name": "threshold",
                    "value": "None"
                  },
                  {
                    "apiValue": "off",
                    "description": "Recover",
                    "name": "recover",
                    "value": "false"
                  },
                  {
                    "apiValue": "off",
                    "description": "Enable filter",
                    "name": "filteractive",
                    "value": "false"
                  },
                  {
                    "description": "Element scale factor",
                    "name": "elemscale",
                    "scalarReal": "1.0",
                    "value": "1"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color",
                    "name": "inheritcolor",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Color and data range",
                    "name": "inheritrange",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Deform scale factor",
                    "name": "inheritdeformscale",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Transparency",
                    "name": "inherittransparency",
                    "value": "true"
                  },
                  {
                    "apiValue": "on",
                    "description": "Belongs to array",
                    "name": "belongstoplotarray",
                    "value": "true"
                  },
                  {
                    "apiValue": "off",
                    "description": "Manual indexing",
                    "name": "manualindexing",
                    "value": "false"
                  },
                  {
                    "apiValue": "on",
                    "description": "Apply to dataset edges",
                    "name": "applytodatasetedgesplotarr",
                    "value": "true"
                  }
                ],
                "tag": "vol1",
                "type": "Volume[plot]",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Apply to dataset edges",
                "name": "applyselectiontodatasetedges",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "auto",
                "description": "Title type",
                "name": "titletype",
                "value": "Automatic"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "apiValue": "off",
                "description": "Show hidden entities",
                "name": "showhiddenobjects",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Propagate hiding to lower dimensions",
                "name": "inherithide",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Plot dataset edges",
                "name": "edges",
                "value": "true"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "edgecolor",
                "value": "From theme"
              },
              {
                "apiValue": "material",
                "description": "Frame",
                "name": "frametype",
                "value": "Material  (X, Y, Z)"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Show maximum and minimum values",
                "name": "showlegendsmaxmin",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Show units",
                "name": "showlegendsunit",
                "value": "false"
              },
              {
                "apiValue": "right",
                "description": "Position",
                "name": "legendpos",
                "value": "Right"
              },
              {
                "apiValue": "fromtheme",
                "description": "Text color",
                "name": "legendcolor",
                "value": "From theme"
              },
              {
                "apiValue": "off",
                "description": "Manual color legend settings",
                "name": "legendactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual grid settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Enable",
                "name": "plotarrayenable",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg5",
            "type": "3D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ResultFeature",
            "apiType": "PlotGroup1D",
            "author": "COMSOL",
            "created": "1696071763074",
            "displayLabel": "Eigenfrequency vs. DC Voltage",
            "icon": "plot_group1d.png",
            "label": "Eigenfrequency vs. DC Voltage",
            "lastModified": "1696071808724",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/feature/pg6",
            "nodes": [
              {
                "apiClass": "ResultFeature",
                "apiType": "PointGraph",
                "author": "COMSOL",
                "created": "1696071763714",
                "displayLabel": "Point Graph 1",
                "icon": "point_graph.png",
                "label": "Point Graph 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg6/feature/ptgr1",
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Plot on secondary y-axis",
                    "name": "plotonsecyaxis",
                    "value": "false"
                  },
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "solid.freq"
                  },
                  {
                    "apiValue": "Hz",
                    "description": "Unit",
                    "name": "unit",
                    "value": "Hz"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Frequency"
                  },
                  {
                    "apiValue": "harmonic",
                    "description": "Expression evaluated for",
                    "name": "evalmethod",
                    "value": "Harmonic perturbation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Compute differential",
                    "name": "differential",
                    "value": "false"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "outer",
                    "description": "Axis source data",
                    "name": "xdatasolnumtype",
                    "value": "Outer solutions"
                  },
                  {
                    "apiValue": "solution",
                    "description": "Parameter",
                    "name": "xdata",
                    "value": "Parameter value"
                  },
                  {
                    "apiValue": "none",
                    "description": [
                      "Line",
                      "Line style"
                    ],
                    "name": "linestyle",
                    "value": "None"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Function type",
                    "name": "functype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "cycle",
                    "description": "Color",
                    "name": "linecolor",
                    "value": "Cycle"
                  },
                  {
                    "apiValue": "default",
                    "description": "Color cycle",
                    "name": "colorcycle",
                    "value": "Default"
                  },
                  {
                    "apiValue": "preference",
                    "description": "Width",
                    "name": "linewidth",
                    "value": "Default from preferences (1)"
                  },
                  {
                    "apiValue": "square",
                    "description": [
                      "Marker",
                      "Line markers"
                    ],
                    "name": "linemarker",
                    "value": "Square"
                  },
                  {
                    "apiValue": "datapoints",
                    "description": "Positioning",
                    "name": "markerpos",
                    "value": "In data points"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show legends",
                    "name": "legend",
                    "value": "true"
                  },
                  {
                    "apiValue": "manual",
                    "description": "Legends",
                    "name": "legendmethod",
                    "value": "Manual"
                  }
                ],
                "tag": "ptgr1",
                "type": "Point_graph",
                "windowType": 1
              },
              {
                "apiClass": "ResultFeature",
                "apiType": "PointGraph",
                "author": "COMSOL",
                "created": "1696071764776",
                "displayLabel": "Point Graph 2",
                "icon": "point_graph.png",
                "label": "Point Graph 2",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg6/feature/ptgr2",
                "settings": [
                  {
                    "apiValue": "off",
                    "description": "Plot on secondary y-axis",
                    "name": "plotonsecyaxis",
                    "value": "false"
                  },
                  {
                    "description": "Expression",
                    "name": "expr",
                    "value": "solid.freq"
                  },
                  {
                    "apiValue": "Hz",
                    "description": "Unit",
                    "name": "unit",
                    "value": "Hz"
                  },
                  {
                    "description": "Description",
                    "name": "descr",
                    "value": "Frequency"
                  },
                  {
                    "apiValue": "harmonic",
                    "description": "Expression evaluated for",
                    "name": "evalmethod",
                    "value": "Harmonic perturbation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Compute differential",
                    "name": "differential",
                    "value": "false"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "solution",
                    "description": "Parameter",
                    "name": "xdata",
                    "value": "Solution number"
                  },
                  {
                    "apiValue": "none",
                    "description": [
                      "Line",
                      "Line style"
                    ],
                    "name": "linestyle",
                    "value": "None"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Function type",
                    "name": "functype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "blue",
                    "description": "Color",
                    "name": "linecolor",
                    "value": "Blue"
                  },
                  {
                    "apiValue": "preference",
                    "description": "Width",
                    "name": "linewidth",
                    "value": "Default from preferences (1)"
                  },
                  {
                    "apiValue": "square",
                    "description": [
                      "Marker",
                      "Line markers"
                    ],
                    "name": "linemarker",
                    "value": "Square"
                  },
                  {
                    "apiValue": "datapoints",
                    "description": "Positioning",
                    "name": "markerpos",
                    "value": "In data points"
                  },
                  {
                    "apiValue": "off",
                    "description": "Show legends",
                    "name": "legend",
                    "value": "false"
                  },
                  {
                    "apiValue": "manual",
                    "description": "Legends",
                    "name": "legendmethod",
                    "value": "Manual"
                  }
                ],
                "tag": "ptgr2",
                "type": "Point_graph",
                "windowType": 1
              },
              {
                "apiClass": "ResultFeature",
                "apiType": "Global",
                "author": "COMSOL",
                "created": "1696071784383",
                "displayLabel": "Global 1",
                "icon": "plot_global.png",
                "label": "Global 1",
                "lastModified": "1696071808724",
                "lastModifiedBy": "COMSOL",
                "modelEntityPath": "/result/feature/pg6/feature/glob1",
                "settings": [
                  {
                    "apiValue": "manual",
                    "description": "Solution parameters",
                    "name": "solutionparams",
                    "value": "Manual"
                  },
                  {
                    "apiValue": "off",
                    "description": "Plot on secondary y-axis",
                    "name": "plotonsecyaxis",
                    "value": "false"
                  },
                  {
                    "apiValue": "harmonic",
                    "description": "Expression evaluated for",
                    "name": "evalmethod",
                    "value": "Harmonic perturbation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Compute differential",
                    "name": "differential",
                    "value": "false"
                  },
                  {
                    "apiValue": "auto",
                    "description": "Title type",
                    "name": "titletype",
                    "value": "Automatic"
                  },
                  {
                    "apiValue": "outer",
                    "description": "Axis source data",
                    "name": "xdatasolnumtype",
                    "value": "Outer solutions"
                  },
                  {
                    "apiValue": "expr",
                    "description": "Parameter",
                    "name": "xdata",
                    "value": "Expression"
                  },
                  {
                    "description": "Expression",
                    "name": "xdataexpr",
                    "value": "Vdc"
                  },
                  {
                    "apiValue": "V",
                    "description": "Unit",
                    "name": "xdataunit",
                    "value": "V"
                  },
                  {
                    "description": "Description",
                    "name": "xdatadescr",
                    "value": "DC bias voltage"
                  },
                  {
                    "apiValue": "harmonic",
                    "description": "Expression evaluated for",
                    "name": "xdataevalmethod",
                    "value": "Harmonic perturbation"
                  },
                  {
                    "apiValue": "off",
                    "description": "Compute differential",
                    "name": "xdatadifferential",
                    "value": "false"
                  },
                  {
                    "apiValue": "solid",
                    "description": [
                      "Line",
                      "Line style"
                    ],
                    "name": "linestyle",
                    "value": "Solid"
                  },
                  {
                    "apiValue": "continuous",
                    "description": "Function type",
                    "name": "functype",
                    "value": "Continuous"
                  },
                  {
                    "apiValue": "cycle",
                    "description": "Color",
                    "name": "linecolor",
                    "value": "Cycle"
                  },
                  {
                    "apiValue": "default",
                    "description": "Color cycle",
                    "name": "colorcycle",
                    "value": "Default"
                  },
                  {
                    "apiValue": "preference",
                    "description": "Width",
                    "name": "linewidth",
                    "value": "Default from preferences (1)"
                  },
                  {
                    "apiValue": "none",
                    "description": [
                      "Marker",
                      "Line markers"
                    ],
                    "name": "linemarker",
                    "value": "None"
                  },
                  {
                    "apiValue": "on",
                    "description": "Show legends",
                    "name": "legend",
                    "value": "true"
                  },
                  {
                    "apiValue": "manual",
                    "description": "Legends",
                    "name": "legendmethod",
                    "value": "Manual"
                  }
                ],
                "tag": "glob1",
                "type": "Global",
                "windowType": 1
              }
            ],
            "settings": [
              {
                "apiValue": "off",
                "description": "Save plot data",
                "name": "savedatainmodel",
                "value": "false"
              },
              {
                "apiValue": "manual",
                "description": "Title type",
                "name": "titletype",
                "value": "Manual"
              },
              {
                "apiValue": "fromtheme",
                "description": "Color",
                "name": "titlecolor",
                "value": "From theme"
              },
              {
                "apiValue": "default",
                "description": "Number format",
                "name": "titlenumberformat",
                "value": "Default"
              },
              {
                "description": "Title",
                "name": "title"
              },
              {
                "description": "Parameter indicator",
                "name": "paramindicator"
              },
              {
                "description": "Help",
                "name": "help1"
              },
              {
                "description": "Help",
                "name": "help2"
              },
              {
                "description": "Help",
                "name": "help3"
              },
              {
                "description": "x-axis label",
                "name": "xlabel",
                "value": "DC Bias (V)"
              },
              {
                "apiValue": "on",
                "description": "x-axis label",
                "name": "xlabelactive",
                "value": "true"
              },
              {
                "description": "y-axis label",
                "name": "ylabel",
                "value": "Resonant Frequency (Hz)"
              },
              {
                "apiValue": "on",
                "description": "y-axis label",
                "name": "ylabelactive",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Two y-axes",
                "name": "twoyaxes",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Flip the x- and y-axes",
                "name": "switchxy",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Manual axis limits",
                "name": "axislimits",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "Preserve aspect ratio",
                "name": "preserveaspect",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "x-axis log scale",
                "name": "xlog",
                "value": "false"
              },
              {
                "apiValue": "off",
                "description": "y-axis log scale",
                "name": "ylog",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Show grid",
                "name": "showgrid",
                "value": "true"
              },
              {
                "apiValue": "off",
                "description": "Manual spacing",
                "name": "manualgrid",
                "value": "false"
              },
              {
                "apiValue": "on",
                "description": "Show legends",
                "name": "showlegends",
                "value": "true"
              },
              {
                "apiValue": "inside",
                "description": "Layout",
                "name": "legendlayout",
                "value": "Inside graph axis area"
              },
              {
                "apiValue": "upperright",
                "description": "Position",
                "name": "legendpos",
                "value": "Upper right"
              },
              {
                "description": "Number of columns",
                "name": "legendcolumncount",
                "scalarReal": "1.0",
                "value": "1"
              },
              {
                "description": "Maximum relative width",
                "name": "legendmaxwidthinside",
                "scalarReal": "0.5",
                "value": "0.5"
              },
              {
                "apiValue": "off",
                "description": "Manual axis settings",
                "name": "axisactive",
                "value": "false"
              },
              {
                "apiValue": "graphics",
                "description": "Plot window",
                "name": "window",
                "value": "Graphics"
              }
            ],
            "tag": "pg6",
            "type": "1D_plot_group",
            "windowType": 1
          },
          {
            "apiClass": "ExportFeatureList",
            "author": "COMSOL",
            "created": "1664324758110",
            "displayLabel": "Export",
            "icon": "results_export.png",
            "label": "Export",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/export",
            "tag": "export",
            "type": "Export[noun]",
            "windowType": 1
          },
          {
            "apiClass": "ReportFeatureList",
            "author": "COMSOL",
            "created": "1664324758146",
            "displayLabel": "Reports",
            "icon": "results_report.png",
            "label": "Reports",
            "lastModified": "0",
            "lastModifiedBy": "COMSOL",
            "modelEntityPath": "/result/report",
            "tag": "report",
            "type": "Reports",
            "windowType": 1
          }
        ],
        "settings": [
          {
            "apiValue": "off",
            "description": "Only plot when requested",
            "name": "onlyplotwhenrequested",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Recompute all plot data after solving",
            "name": "autoregenerateplot",
            "value": "false"
          },
          {
            "apiValue": "off",
            "description": "Reevaluate all evaluation groups after solving",
            "name": "autoregenerateevalgroups",
            "value": "false"
          },
          {
            "apiValue": "AUTOMATIC",
            "description": "Save plot data",
            "name": "saveplotdatainmodel",
            "value": "Automatic"
          }
        ],
        "tag": "result",
        "type": "Results",
        "windowType": 1
      }
    ],
    "settings": [
      {
        "apiValue": "SI",
        "description": "Unit system",
        "name": "basesystem",
        "value": "SI"
      },
      {
        "apiValue": "automatic",
        "description": "Graphics color theme",
        "name": "colortheme",
        "value": "Default from application theme (Default)"
      },
      {
        "apiValue": "automatic",
        "description": "Image export color theme",
        "name": "imagecolortheme",
        "value": "Default from image export theme (Default)"
      },
      {
        "apiValue": "automatic",
        "description": [
          "Family",
          "Font"
        ],
        "name": "fontfamily",
        "value": "Default from preferences (Vera)"
      },
      {
        "apiValue": "default",
        "description": "Size",
        "name": "fontsize",
        "value": "Default size"
      },
      {
        "apiValue": "off",
        "description": "Ask to save application when closing",
        "name": "asktosave",
        "value": "false"
      },
      {
        "apiValue": "edit",
        "description": "When starting with COMSOL Multiphysics",
        "name": "startmode",
        "value": "Edit application"
      },
      {
        "apiValue": "off",
        "description": "Ignore license errors during launch",
        "name": "ignorelicenseerrors",
        "value": "false"
      },
      {
        "apiValue": "off",
        "description": "Use built-in COMSOL resources",
        "name": "localize",
        "value": "false"
      }
    ],
    "tag": "Model",
    "title": "Normal Modes of a Biased Resonator \u2014 3D",
    "type": "Root",
    "windowType": 1
  },
  "code_segments": [
    {
      "segment_id": 1,
      "start_line": 1,
      "end_line": 13,
      "code_description": "Creates a new COMSOL model and sets the model path to the MEMS Module Actuators application",
      "modeling_purpose": "This step is needed to initialize the simulation environment and specify the application for the MEMS resonator",
      "comsol_ids": [
        "ModelUtil.create('Model')",
        "model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators')"
      ],
      "category": "parameters",
      "key_operations": [
        "create_model",
        "set_model_path"
      ],
      "code": "function out = model\n%\n% biased_resonator_3d_modes.m\n%\n% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.\n\nimport com.comsol.model.*\nimport com.comsol.model.util.*\n\nmodel = ModelUtil.create('Model');\n\nmodel.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators');"
    },
    {
      "segment_id": 2,
      "start_line": 14,
      "end_line": 15,
      "code_description": "Creates a component named 'comp1' in the model tree",
      "modeling_purpose": "Organizing the model into components for better management and clarity",
      "comsol_ids": [
        "comp1"
      ],
      "category": "geometry",
      "key_operations": [
        "create_component"
      ],
      "code": "model.modelNode.create('comp1', true);"
    },
    {
      "segment_id": 3,
      "start_line": 16,
      "end_line": 16,
      "code_description": "Creates a 3D geometry named 'geom1' in the COMSOL model",
      "modeling_purpose": "To define the geometry of the MEMS resonator for the simulation",
      "comsol_ids": [
        "geom1"
      ],
      "category": "geometry",
      "key_operations": [
        "create"
      ],
      "code": "model.geom.create('geom1', 3);"
    },
    {
      "segment_id": 4,
      "start_line": 17,
      "end_line": 18,
      "code_description": "Accesses the geometry and component of the model",
      "modeling_purpose": "To set up the geometry and component for the simulation",
      "comsol_ids": [
        "geom1",
        "comp1"
      ],
      "category": "geometry",
      "key_operations": [
        "access_geometry",
        "access_component"
      ],
      "code": "model.geom('geom1').model('comp1');"
    },
    {
      "segment_id": 5,
      "start_line": 19,
      "end_line": 20,
      "code_description": "Creates a mesh named 'mesh1' based on the geometry 'geom1'",
      "modeling_purpose": "Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mesh1",
        "geom1"
      ],
      "category": "mesh",
      "key_operations": [
        "create mesh"
      ],
      "code": "model.mesh.create('mesh1', 'geom1');"
    },
    {
      "segment_id": 6,
      "start_line": 21,
      "end_line": 21,
      "code_description": "Creates a solid mechanics physics interface for the geometry 'geom1'",
      "modeling_purpose": "This step is needed to define the mechanical behavior of the MEMS resonator under electrostatic actuation",
      "comsol_ids": [
        "solid"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics.create('solid', 'SolidMechanics', 'geom1');"
    },
    {
      "segment_id": 7,
      "start_line": 22,
      "end_line": 22,
      "code_description": "Sets up the solid mechanics physics for the component 'comp1'",
      "modeling_purpose": "This step is needed to define the mechanical behavior of the resonator structure",
      "comsol_ids": [
        "solid",
        "comp1"
      ],
      "category": "physics",
      "key_operations": [
        "model",
        "physics"
      ],
      "code": "model.physics('solid').model('comp1');"
    },
    {
      "segment_id": 8,
      "start_line": 23,
      "end_line": 23,
      "code_description": "Creates an electrostatics physics interface in the model",
      "modeling_purpose": "To simulate the electrostatic behavior of the MEMS resonator under applied bias voltage",
      "comsol_ids": [
        "es"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics.create('es', 'Electrostatics', 'geom1');"
    },
    {
      "segment_id": 9,
      "start_line": 24,
      "end_line": 24,
      "code_description": "Sets up the electrostatics physics for the first component in the model",
      "modeling_purpose": "This step is needed to define the electrostatic behavior of the resonator, which is essential for the simulation of the device's operation under the influence of the applied bias voltage",
      "comsol_ids": [
        "es",
        "comp1"
      ],
      "category": "physics",
      "key_operations": [
        "model"
      ],
      "code": "model.physics('es').model('comp1');"
    },
    {
      "segment_id": 10,
      "start_line": 25,
      "end_line": 25,
      "code_description": "Sets the material type to solid for the electrostatics physics in the model",
      "modeling_purpose": "This step is needed to define the material properties for the electrostatics simulation",
      "comsol_ids": [
        "es",
        "ccn1"
      ],
      "category": "materials",
      "key_operations": [
        "set material type"
      ],
      "code": "model.physics('es').feature('ccn1').set('materialType', {'solid'});"
    },
    {
      "segment_id": 11,
      "start_line": 26,
      "end_line": 27,
      "code_description": "Sets up the charge conservation physics in the solid domain of the resonator",
      "modeling_purpose": "This step is needed to ensure the proper distribution of charges within the solid material of the resonator, which affects its electrostatic behavior under the applied bias voltage",
      "comsol_ids": [
        "es",
        "ccn1"
      ],
      "category": "physics",
      "key_operations": [
        "feature",
        "label"
      ],
      "code": "model.physics('es').feature('ccn1').label('Charge Conservation, Solid');"
    },
    {
      "segment_id": 12,
      "start_line": 28,
      "end_line": 31,
      "code_description": "Creates an ElectromechanicalForces interface and sets the solid physics and electrostatics physics",
      "modeling_purpose": "To couple the structural mechanics and electrostatics physics for the MEMS resonator simulation",
      "comsol_ids": [
        "eme1"
      ],
      "category": "physics",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);\nmodel.multiphysics('eme1').set('Solid_physics', 'solid');\nmodel.multiphysics('eme1').set('Electrostatics_physics', 'es');"
    },
    {
      "segment_id": 13,
      "start_line": 32,
      "end_line": 34,
      "code_description": "Creates a deforming domain named 'free1' and sets its smoothing type to hyperelastic",
      "modeling_purpose": "This step is needed to define the domain that will undergo deformation during the simulation",
      "comsol_ids": [
        "free1"
      ],
      "category": "geometry",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.common.create('free1', 'DeformingDomain', 'comp1');\nmodel.common('free1').set('smoothingType', 'hyperelastic');\nmodel.common('free1').selection.set([]);"
    },
    {
      "segment_id": 14,
      "start_line": 35,
      "end_line": 37,
      "code_description": "Creates a symmetry operation and clears its selection",
      "modeling_purpose": "To set up a symmetry condition for the resonator simulation, reducing computational domain",
      "comsol_ids": [
        "sym1"
      ],
      "category": "geometry",
      "key_operations": [
        "create",
        "selection.set"
      ],
      "code": "model.common.create('sym1', 'Symmetry', 'comp1');\nmodel.common('sym1').selection.set([]);"
    },
    {
      "segment_id": 15,
      "start_line": 38,
      "end_line": 38,
      "code_description": "Creates a new study named 'std1' in the model",
      "modeling_purpose": "To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "std1"
      ],
      "category": "study",
      "key_operations": [
        "create_study"
      ],
      "code": "model.study.create('std1');"
    },
    {
      "segment_id": 16,
      "start_line": 39,
      "end_line": 39,
      "code_description": "Creates a stationary study named 'stat' in the model",
      "modeling_purpose": "To perform a stationary analysis of the MEMS resonator under applied bias",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study('std1').create('stat', 'Stationary');"
    },
    {
      "segment_id": 17,
      "start_line": 40,
      "end_line": 40,
      "code_description": "Sets the solver to compute the solid mechanics physics in the static study",
      "modeling_purpose": "Needed to calculate the deformation of the MEMS resonator under the applied bias voltage",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std1').feature('stat').setSolveFor('/physics/solid', true);"
    },
    {
      "segment_id": 18,
      "start_line": 41,
      "end_line": 41,
      "code_description": "Enables the electrostatic physics in the stationary solver",
      "modeling_purpose": "Needed to compute the electrostatic forces acting on the resonator due to the applied bias voltage",
      "comsol_ids": [
        "std1",
        "es"
      ],
      "category": "physics",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std1').feature('stat').setSolveFor('/physics/es', true);"
    },
    {
      "segment_id": 19,
      "start_line": 42,
      "end_line": 43,
      "code_description": "Sets the study to solve for the electrostatics physics in the model",
      "modeling_purpose": "This step is needed to include electrostatics in the analysis of the MEMS resonator, which is actuated by an AC + DC bias voltage",
      "comsol_ids": [
        "std1",
        "eme1"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);"
    },
    {
      "segment_id": 20,
      "start_line": 44,
      "end_line": 44,
      "code_description": "Inserts the geometry sequence from the file 'biased_resonator_3d_geom_sequence.mph' into the geometry 'geom1' of the current model.",
      "modeling_purpose": "This step is needed to import the predefined geometry sequence for the MEMS resonator, which is essential for the simulation of the device's behavior under different bias voltages.",
      "comsol_ids": [
        "geom1"
      ],
      "category": "geometry",
      "key_operations": [
        "insertFile"
      ],
      "code": "model.geom('geom1').insertFile('biased_resonator_3d_geom_sequence.mph', 'geom1');"
    },
    {
      "segment_id": 21,
      "start_line": 45,
      "end_line": 49,
      "code_description": "Sets the DC bias voltage to 35 V and provides a description for the parameter",
      "modeling_purpose": "To define the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "Vdc"
      ],
      "category": "parameters",
      "key_operations": [
        "set parameter value",
        "set parameter description"
      ],
      "code": "model.geom('geom1').run('sel2');\n\nmodel.param.set('Vdc', '35[V]');\nmodel.param.descr('Vdc', 'DC bias voltage');"
    },
    {
      "segment_id": 22,
      "start_line": 50,
      "end_line": 53,
      "code_description": "Creates a selection named 'sel1' containing all domains in the model 'comp1'",
      "modeling_purpose": "This step is needed to define a selection of domains for further analysis or settings in the simulation",
      "comsol_ids": [
        "model.selection.create",
        "model.selection"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "add all domains to selection"
      ],
      "code": "model.selection.create('sel1', 'Explicit');\nmodel.selection('sel1').model('comp1');\nmodel.selection('sel1').all;\nmodel.selection('sel1').label('All domains');"
    },
    {
      "segment_id": 23,
      "start_line": 54,
      "end_line": 60,
      "code_description": "Creates a box selection named 'box1' and sets its dimensions and conditions for the ground plane",
      "modeling_purpose": "Defines a region for applying boundary conditions or material properties specific to the ground plane in the MEMS resonator simulation",
      "comsol_ids": [
        "box1"
      ],
      "category": "geometry",
      "key_operations": [
        "create box selection",
        "set dimensions",
        "set condition",
        "set entity dimension",
        "label"
      ],
      "code": "model.selection.create('box1', 'Box');\nmodel.selection('box1').model('comp1');\nmodel.selection('box1').set('zmin', -2);\nmodel.selection('box1').set('zmax', -1);\nmodel.selection('box1').set('condition', 'inside');\nmodel.selection('box1').set('entitydim', 2);\nmodel.selection('box1').label('Ground Plane');"
    },
    {
      "segment_id": 24,
      "start_line": 61,
      "end_line": 65,
      "code_description": "Creates a box selection named 'box2' and sets its z-axis limits, then assigns it to the 'Oxide' material in the model.",
      "modeling_purpose": "This step is needed to define the geometry and material properties of the oxide layer in the MEMS resonator for accurate simulation of its behavior.",
      "comsol_ids": [
        "box2"
      ],
      "category": "geometry|materials",
      "key_operations": [
        "create_box_selection",
        "set_z_limits",
        "assign_material"
      ],
      "code": "model.selection.create('box2', 'Box');\nmodel.selection('box2').model('comp1');\nmodel.selection('box2').set('zmin', -1);\nmodel.selection('box2').set('zmax', -0.9);\nmodel.selection('box2').label('Oxide');"
    },
    {
      "segment_id": 25,
      "start_line": 66,
      "end_line": 70,
      "code_description": "Creates a box selection named 'box3' and sets its z-axis limits, then assigns it to the 'Nitride' material in the model 'comp1'.",
      "modeling_purpose": "This step is needed to define a specific region in the geometry for assigning material properties, which is essential for accurate simulation of the MEMS resonator's behavior.",
      "comsol_ids": [
        "box3"
      ],
      "category": "materials",
      "key_operations": [
        "create_box_selection",
        "set_z_limits",
        "assign_material"
      ],
      "code": "model.selection.create('box3', 'Box');\nmodel.selection('box3').model('comp1');\nmodel.selection('box3').set('zmin', -0.4);\nmodel.selection('box3').set('zmax', -0.35);\nmodel.selection('box3').label('Nitride');"
    },
    {
      "segment_id": 26,
      "start_line": 71,
      "end_line": 78,
      "code_description": "Creates a box selection for the electrode and sets its dimensions",
      "modeling_purpose": "Defines the geometry of the electrode for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "box4"
      ],
      "category": "geometry",
      "key_operations": [
        "create_box_selection",
        "set_dimensions"
      ],
      "code": "model.selection.create('box4', 'Box');\nmodel.selection('box4').model('comp1');\nmodel.selection('box4').set('xmin', -0.1);\nmodel.selection('box4').set('xmax', 0.1);\nmodel.selection('box4').set('ymin', -4.2);\nmodel.selection('box4').set('zmin', -0.15);\nmodel.selection('box4').set('zmax', -0.1);\nmodel.selection('box4').label('Electrode');"
    },
    {
      "segment_id": 27,
      "start_line": 79,
      "end_line": 82,
      "code_description": "Creates a spherical selection region and sets its position and radius",
      "modeling_purpose": "To define a region for further analysis or manipulation in the simulation",
      "comsol_ids": [
        "ball1"
      ],
      "category": "geometry",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.selection.create('ball1', 'Ball');\nmodel.selection('ball1').model('comp1');\nmodel.selection('ball1').set('posz', 1);\nmodel.selection('ball1').set('r', 0.1);"
    },
    {
      "segment_id": 28,
      "start_line": 83,
      "end_line": 91,
      "code_description": "Creates two box selections with specified dimensions and conditions",
      "modeling_purpose": "These box selections are likely used to define regions for material properties, physics settings, or boundary conditions in the MEMS resonator simulation",
      "comsol_ids": [
        "box5",
        "box6"
      ],
      "category": "geometry",
      "key_operations": [
        "create box selection",
        "duplicate box selection"
      ],
      "code": "model.selection.create('box5', 'Box');\nmodel.selection('box5').model('comp1');\nmodel.selection('box5').set('ymax', 4.8);\nmodel.selection('box5').set('zmin', -0.35);\nmodel.selection('box5').set('zmax', 0.05);\nmodel.selection('box5').set('condition', 'inside');\nmodel.selection.duplicate('box6', 'box5');\nmodel.selection('box6').set('xmin', -15);\nmodel.selection('box6').set('xmax', 15);"
    },
    {
      "segment_id": 29,
      "start_line": 92,
      "end_line": 96,
      "code_description": "Creates a selection named 'dif1' representing the difference between 'ball1' and 'box6', and assigns it the label 'Resonator'.",
      "modeling_purpose": "This step is needed to define the geometry of the resonator by subtracting the volume of 'box6' from the combined volume of 'ball1' and 'box5'.",
      "comsol_ids": [
        "ball1",
        "box5",
        "box6"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set difference"
      ],
      "code": "model.selection.create('dif1', 'Difference');\nmodel.selection('dif1').model('comp1');\nmodel.selection('dif1').set('add', {'ball1' 'box5'});\nmodel.selection('dif1').set('subtract', {'box6'});\nmodel.selection('dif1').label('Resonator');"
    },
    {
      "segment_id": 30,
      "start_line": 97,
      "end_line": 100,
      "code_description": "Creates a union selection of two entities and labels it as 'PolySi'",
      "modeling_purpose": "To combine the geometry of the box and the difference object for further analysis in the simulation",
      "comsol_ids": [
        "uni1"
      ],
      "category": "geometry",
      "key_operations": [
        "create union",
        "set input",
        "label"
      ],
      "code": "model.selection.create('uni1', 'Union');\nmodel.selection('uni1').model('comp1');\nmodel.selection('uni1').set('input', {'box4' 'dif1'});\nmodel.selection('uni1').label('PolySi');"
    },
    {
      "segment_id": 31,
      "start_line": 101,
      "end_line": 105,
      "code_description": "Creates a selection named 'dif2' and sets it to the difference between 'sel1' and the union of 'box2', 'box3', and 'uni1'. The selection is then labeled as 'Air'.",
      "modeling_purpose": "This step is needed to define the air domain in the resonator for the electrostatic simulation.",
      "comsol_ids": [
        "dif2",
        "sel1",
        "box2",
        "box3",
        "uni1"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set difference"
      ],
      "code": "model.selection.create('dif2', 'Difference');\nmodel.selection('dif2').model('comp1');\nmodel.selection('dif2').set('add', {'sel1'});\nmodel.selection('dif2').set('subtract', {'box2' 'box3' 'uni1'});\nmodel.selection('dif2').label('Air');"
    },
    {
      "segment_id": 32,
      "start_line": 106,
      "end_line": 109,
      "code_description": "Creates a selection of adjacent boundaries to the resonator and labels it as 'Resonator Boundaries'",
      "modeling_purpose": "This step is needed to define the boundaries where the electrostatic actuation will be applied",
      "comsol_ids": [
        "adj1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "create_selection",
        "set_input"
      ],
      "code": "model.selection.create('adj1', 'Adjacent');\nmodel.selection('adj1').model('comp1');\nmodel.selection('adj1').set('input', {'dif1'});\nmodel.selection('adj1').label('Resonator Boundaries');"
    },
    {
      "segment_id": 33,
      "start_line": 110,
      "end_line": 113,
      "code_description": "Creates a selection of adjacent boundaries to the input boundary 'box4' and labels them as 'Electrode Boundaries'",
      "modeling_purpose": "This step is needed to define the boundaries where the electrode will be applied for the electrostatic actuation in the MEMS resonator simulation",
      "comsol_ids": [
        "adj2"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "create_selection",
        "set_input",
        "label"
      ],
      "code": "model.selection.create('adj2', 'Adjacent');\nmodel.selection('adj2').model('comp1');\nmodel.selection('adj2').set('input', {'box4'});\nmodel.selection('adj2').label('Electrode Boundaries');"
    },
    {
      "segment_id": 34,
      "start_line": 114,
      "end_line": 117,
      "code_description": "Creates a selection of adjacent boundaries to the box3 geometry object and labels them as 'Nitride Boundaries'",
      "modeling_purpose": "This step is needed to define a specific set of boundaries for applying boundary conditions or material properties related to the nitride material in the MEMS resonator simulation",
      "comsol_ids": [
        "adj3"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set input",
        "label"
      ],
      "code": "model.selection.create('adj3', 'Adjacent');\nmodel.selection('adj3').model('comp1');\nmodel.selection('adj3').set('input', {'box3'});\nmodel.selection('adj3').label('Nitride Boundaries');"
    },
    {
      "segment_id": 35,
      "start_line": 118,
      "end_line": 121,
      "code_description": "Creates a selection named 'adj4' for adjacent geometry exterior boundaries and sets 'sel1' as input",
      "modeling_purpose": "To define a selection for geometry boundaries that will be used for applying boundary conditions or material properties in the simulation",
      "comsol_ids": [
        "adj4",
        "sel1"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set input"
      ],
      "code": "model.selection.create('adj4', 'Adjacent');\nmodel.selection('adj4').model('comp1');\nmodel.selection('adj4').set('input', {'sel1'});\nmodel.selection('adj4').label('Geometry Exterior Boundaries');"
    },
    {
      "segment_id": 36,
      "start_line": 122,
      "end_line": 127,
      "code_description": "Creates a selection named 'dif3' representing the difference between two entities, 'adj1' and 'adj4', in the 2D geometry of the model 'comp1'. The selection is labeled as 'Resonator Exterior Boundaries'.",
      "modeling_purpose": "This step is needed to define the exterior boundaries of the resonator for applying boundary conditions or material properties specific to those boundaries.",
      "comsol_ids": [
        "dif3"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set entities for difference"
      ],
      "code": "model.selection.create('dif3', 'Difference');\nmodel.selection('dif3').model('comp1');\nmodel.selection('dif3').set('entitydim', 2);\nmodel.selection('dif3').set('add', {'adj1'});\nmodel.selection('dif3').set('subtract', {'adj4'});\nmodel.selection('dif3').label('Resonator Exterior Boundaries');"
    },
    {
      "segment_id": 37,
      "start_line": 128,
      "end_line": 133,
      "code_description": "Creates a selection named 'dif4' representing the difference between two boundaries, 'adj2' and 'adj4', in the 2D geometry of the 'comp1' component. The selection is labeled as 'Electrode Exterior Boundaries'.",
      "modeling_purpose": "This step is needed to define the exterior boundaries of the electrodes for applying boundary conditions in the electrostatically actuated MEMS resonator simulation.",
      "comsol_ids": [
        "dif4"
      ],
      "category": "geometry",
      "key_operations": [
        "create selection",
        "set difference"
      ],
      "code": "model.selection.create('dif4', 'Difference');\nmodel.selection('dif4').model('comp1');\nmodel.selection('dif4').set('entitydim', 2);\nmodel.selection('dif4').set('add', {'adj2'});\nmodel.selection('dif4').set('subtract', {'adj4'});\nmodel.selection('dif4').label('Electrode Exterior Boundaries');"
    },
    {
      "segment_id": 38,
      "start_line": 134,
      "end_line": 138,
      "code_description": "Creates an intersection selection named 'int1' for fixed boundaries and sets its properties",
      "modeling_purpose": "To define the fixed boundaries for the MEMS resonator simulation",
      "comsol_ids": [
        "int1"
      ],
      "category": "geometry",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.selection.create('int1', 'Intersection');\nmodel.selection('int1').model('comp1');\nmodel.selection('int1').set('entitydim', 2);\nmodel.selection('int1').set('input', {'adj1' 'adj3'});\nmodel.selection('int1').label('Fixed Boundaries');"
    },
    {
      "segment_id": 39,
      "start_line": 139,
      "end_line": 146,
      "code_description": "Creates a box selection for symmetry boundaries in the model",
      "modeling_purpose": "This step is needed to define the symmetry boundaries for the MEMS resonator simulation",
      "comsol_ids": [
        "box7"
      ],
      "category": "geometry",
      "key_operations": [
        "create_box_selection",
        "set_box_properties"
      ],
      "code": "model.selection.create('box7', 'Box');\nmodel.selection('box7').model('comp1');\nmodel.selection('box7').set('entitydim', 2);\nmodel.selection('box7').set('xmin', -0.1);\nmodel.selection('box7').set('xmax', 0.1);\nmodel.selection('box7').set('condition', 'inside');\nmodel.selection('box7').label('Symmetry Boundaries');"
    },
    {
      "segment_id": 40,
      "start_line": 147,
      "end_line": 147,
      "code_description": "Creates a new material with the name 'mat1' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "modeling_purpose": "This step is needed to define the material properties for the MEMS resonator component in the simulation.",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "create material"
      ],
      "code": "model.material.create('mat1', 'Common', 'comp1');"
    },
    {
      "segment_id": 41,
      "start_line": 148,
      "end_line": 148,
      "code_description": "Creates a property group for material 'mat1' to define Young's modulus and Poisson's ratio",
      "modeling_purpose": "To define the material properties for the resonator structure in the simulation",
      "comsol_ids": [
        "mat1",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "create property group"
      ],
      "code": "model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');"
    },
    {
      "segment_id": 42,
      "start_line": 149,
      "end_line": 149,
      "code_description": "Defines the material properties for polycrystalline silicon used in the MEMS resonator model",
      "modeling_purpose": "To accurately simulate the behavior of the resonator, the material properties of the structural components must be defined",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "define_material_properties"
      ],
      "code": "model.material('mat1').label('Si - Polycrystalline silicon');"
    },
    {
      "segment_id": 43,
      "start_line": 150,
      "end_line": 150,
      "code_description": "Sets the material family to 'custom' for material 'mat1'",
      "modeling_purpose": "This step is needed to define a custom material for the MEMS resonator simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set material family"
      ],
      "code": "model.material('mat1').set('family', 'custom');"
    },
    {
      "segment_id": 44,
      "start_line": 151,
      "end_line": 151,
      "code_description": "Sets the custom specular reflection coefficients for material 'mat1'",
      "modeling_purpose": "To define the reflection properties of the material for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "customspecular"
      ],
      "code": "model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);"
    },
    {
      "segment_id": 45,
      "start_line": 152,
      "end_line": 152,
      "code_description": "Sets custom diffuse properties for material 'mat1'",
      "modeling_purpose": "Defines material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('customdiffuse')"
      ],
      "code": "model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);"
    },
    {
      "segment_id": 46,
      "start_line": 153,
      "end_line": 153,
      "code_description": "Sets the custom ambient color for material 'mat1'",
      "modeling_purpose": "Defines the appearance of the material in the simulation results visualization",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set_custom_ambient_color"
      ],
      "code": "model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);"
    },
    {
      "segment_id": 47,
      "start_line": 154,
      "end_line": 154,
      "code_description": "Enables the noise feature for material 'mat1'",
      "modeling_purpose": "This step is needed to include noise effects in the material properties for more accurate simulation results",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('noise', true)"
      ],
      "code": "model.material('mat1').set('noise', true);"
    },
    {
      "segment_id": 48,
      "start_line": 155,
      "end_line": 155,
      "code_description": "Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "modeling_purpose": "Adjusting the Fresnel coefficient affects the optical properties of the material, which is important for accurate simulation of light interaction with the resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('fresnel', 0.7);"
    },
    {
      "segment_id": 49,
      "start_line": 156,
      "end_line": 156,
      "code_description": "Sets the metallic property of material 'mat1' to 0",
      "modeling_purpose": "This step is needed to define the material properties for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('metallic', 0);"
    },
    {
      "segment_id": 50,
      "start_line": 157,
      "end_line": 157,
      "code_description": "Sets the relative permittivity of material 'mat1' to 0",
      "modeling_purpose": "Adjusting material properties to reflect the desired behavior in the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('pearl', 0);"
    },
    {
      "segment_id": 51,
      "start_line": 158,
      "end_line": 158,
      "code_description": "Disables the diffuse wrap property for material 'mat1'",
      "modeling_purpose": "This step is needed to control the material behavior in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "diffusewrap"
      ],
      "code": "model.material('mat1').set('diffusewrap', 0);"
    },
    {
      "segment_id": 52,
      "start_line": 159,
      "end_line": 159,
      "code_description": "Disables the clearcoat option for material 'mat1'",
      "modeling_purpose": "This step is needed to configure the material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "clearcoat"
      ],
      "code": "model.material('mat1').set('clearcoat', 0);"
    },
    {
      "segment_id": 53,
      "start_line": 160,
      "end_line": 160,
      "code_description": "Sets the reflectance property of material 'mat1' to 0",
      "modeling_purpose": "This step is needed to define the optical properties of the material in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "reflectance"
      ],
      "code": "model.material('mat1').set('reflectance', 0);"
    },
    {
      "segment_id": 54,
      "start_line": 161,
      "end_line": 161,
      "code_description": "Sets the thermal expansion coefficient for material 'mat1'",
      "modeling_purpose": "To account for thermal expansion in the material properties for accurate simulation results",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('thermalexpansioncoefficient')"
      ],
      "code": "model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});"
    },
    {
      "segment_id": 55,
      "start_line": 162,
      "end_line": 162,
      "code_description": "Sets the heat capacity property of material 'mat1' to 678 J/(kg*K)",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set heat capacity"
      ],
      "code": "model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');"
    },
    {
      "segment_id": 56,
      "start_line": 163,
      "end_line": 163,
      "code_description": "Sets the relative permittivity of material 'mat1' to a diagonal tensor with value 4.5 along the main diagonal",
      "modeling_purpose": "This step is needed to define the material properties for the electrostatic simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});"
    },
    {
      "segment_id": 57,
      "start_line": 164,
      "end_line": 164,
      "code_description": "Sets the density property of material 'mat1' to 2320 kg/m^3",
      "modeling_purpose": "Defines the material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat1",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');"
    },
    {
      "segment_id": 58,
      "start_line": 165,
      "end_line": 165,
      "code_description": "Sets the thermal conductivity of material 'mat1' to a diagonal tensor with value 34 W/(m*K) on the main diagonal",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set thermalconductivity"
      ],
      "code": "model.material('mat1').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});"
    },
    {
      "segment_id": 59,
      "start_line": 166,
      "end_line": 166,
      "code_description": "Sets the Young's modulus of material 'mat1' to 160e9 Pa",
      "modeling_purpose": "Defines the material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat1",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').propertyGroup('Enu').set('E', '160e9[Pa]');"
    },
    {
      "segment_id": 60,
      "start_line": 167,
      "end_line": 167,
      "code_description": "Sets the Poisson's ratio of material 'mat1' to 0.22",
      "modeling_purpose": "Defines the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').propertyGroup('Enu').set('nu', '0.22');"
    },
    {
      "segment_id": 61,
      "start_line": 168,
      "end_line": 168,
      "code_description": "Sets the material family to 'custom' for material 'mat1'",
      "modeling_purpose": "To define a custom material for the MEMS resonator simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set material family"
      ],
      "code": "model.material('mat1').set('family', 'custom');"
    },
    {
      "segment_id": 62,
      "start_line": 169,
      "end_line": 169,
      "code_description": "Sets the lighting model to Cook-Torrance for material 'mat1'",
      "modeling_purpose": "This step is needed to define the appearance of the material in the simulation results visualization",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "lighting"
      ],
      "code": "model.material('mat1').set('lighting', 'cooktorrance');"
    },
    {
      "segment_id": 63,
      "start_line": 170,
      "end_line": 170,
      "code_description": "Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "modeling_purpose": "This step is needed to define the optical properties of the material in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('fresnel', 0.7);"
    },
    {
      "segment_id": 64,
      "start_line": 171,
      "end_line": 171,
      "code_description": "Sets the roughness property of material 'mat1' to 0.5",
      "modeling_purpose": "To account for surface roughness effects on the MEMS resonator's behavior",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('roughness', 0.5);"
    },
    {
      "segment_id": 65,
      "start_line": 172,
      "end_line": 172,
      "code_description": "Sets the anisotropy property of material 'mat1' to 0, indicating an isotropic material.",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('anisotropy', 0)"
      ],
      "code": "model.material('mat1').set('anisotropy', 0);"
    },
    {
      "segment_id": 66,
      "start_line": 173,
      "end_line": 173,
      "code_description": "Disables the anisotropy flip for material 'mat1'",
      "modeling_purpose": "Ensures the material properties are correctly oriented for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('flipanisotropy', false)"
      ],
      "code": "model.material('mat1').set('flipanisotropy', false);"
    },
    {
      "segment_id": 67,
      "start_line": 174,
      "end_line": 174,
      "code_description": "Sets the metallic property of material 'mat1' to 0",
      "modeling_purpose": "This step is needed to define the material properties for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('metallic', 0);"
    },
    {
      "segment_id": 68,
      "start_line": 175,
      "end_line": 175,
      "code_description": "Sets the relative permittivity (pearl) of material 'mat1' to 0",
      "modeling_purpose": "Adjusting material properties to reflect the specific characteristics of the resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('pearl', 0);"
    },
    {
      "segment_id": 69,
      "start_line": 176,
      "end_line": 176,
      "code_description": "Disables the diffuse wrap option for material 'mat1'",
      "modeling_purpose": "This step is needed to control the material behavior in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "diffusewrap"
      ],
      "code": "model.material('mat1').set('diffusewrap', 0);"
    },
    {
      "segment_id": 70,
      "start_line": 177,
      "end_line": 177,
      "code_description": "Disables the clearcoat option for material 'mat1'",
      "modeling_purpose": "Adjust material properties to match the desired behavior in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "clearcoat"
      ],
      "code": "model.material('mat1').set('clearcoat', 0);"
    },
    {
      "segment_id": 71,
      "start_line": 178,
      "end_line": 178,
      "code_description": "Sets the reflectance property of material 'mat1' to 0",
      "modeling_purpose": "Adjusting material properties to accurately represent the device's behavior in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "reflectance"
      ],
      "code": "model.material('mat1').set('reflectance', 0);"
    },
    {
      "segment_id": 72,
      "start_line": 179,
      "end_line": 179,
      "code_description": "Sets the material 'mat1' to use a custom ambient property",
      "modeling_purpose": "This step is needed to define the material properties for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "custom"
      ],
      "code": "model.material('mat1').set('ambient', 'custom');"
    },
    {
      "segment_id": 73,
      "start_line": 180,
      "end_line": 180,
      "code_description": "Sets the custom ambient color for material 'mat1'",
      "modeling_purpose": "Defines the appearance of the material in the simulation results visualization",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "customambient"
      ],
      "code": "model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);"
    },
    {
      "segment_id": 74,
      "start_line": 181,
      "end_line": 181,
      "code_description": "Sets the material property 'diffuse' to a custom value for material 'mat1'",
      "modeling_purpose": "This step is needed to define custom material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "custom"
      ],
      "code": "model.material('mat1').set('diffuse', 'custom');"
    },
    {
      "segment_id": 75,
      "start_line": 182,
      "end_line": 182,
      "code_description": "Sets custom diffuse properties for material 'mat1'",
      "modeling_purpose": "Defines material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('customdiffuse')"
      ],
      "code": "model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);"
    },
    {
      "segment_id": 76,
      "start_line": 183,
      "end_line": 183,
      "code_description": "Sets the material 'mat1' to have a custom specular reflection property",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "specular"
      ],
      "code": "model.material('mat1').set('specular', 'custom');"
    },
    {
      "segment_id": 77,
      "start_line": 184,
      "end_line": 184,
      "code_description": "Sets the custom specular reflection coefficients for material 'mat1'",
      "modeling_purpose": "To define the reflection properties of the material in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "customspecular"
      ],
      "code": "model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);"
    },
    {
      "segment_id": 78,
      "start_line": 185,
      "end_line": 185,
      "code_description": "Sets the noise color of material 'mat1' to custom",
      "modeling_purpose": "This step is needed to customize the noise color of the material for accurate simulation results",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "noisecolor"
      ],
      "code": "model.material('mat1').set('noisecolor', 'custom');"
    },
    {
      "segment_id": 79,
      "start_line": 186,
      "end_line": 186,
      "code_description": "Sets the custom noise color for material 'mat1' to black",
      "modeling_purpose": "This step is needed to define the appearance of the material in the simulation results",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set_customnoisecolor"
      ],
      "code": "model.material('mat1').set('customnoisecolor', [0 0 0]);"
    },
    {
      "segment_id": 80,
      "start_line": 187,
      "end_line": 187,
      "code_description": "Sets the noise scale of material 'mat1' to 0",
      "modeling_purpose": "Adjusting material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "noisescale"
      ],
      "code": "model.material('mat1').set('noisescale', 0);"
    },
    {
      "segment_id": 81,
      "start_line": 188,
      "end_line": 188,
      "code_description": "Disables noise for material 'mat1'",
      "modeling_purpose": "Improves simulation stability and convergence",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('noise', 'off')"
      ],
      "code": "model.material('mat1').set('noise', 'off');"
    },
    {
      "segment_id": 82,
      "start_line": 189,
      "end_line": 189,
      "code_description": "Sets the noise frequency of material 'mat1' to 1",
      "modeling_purpose": "This step is needed to define the noise frequency property of the material, which may affect the simulation results for the resonator's behavior under the applied bias",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set('noisefreq', 1)"
      ],
      "code": "model.material('mat1').set('noisefreq', 1);"
    },
    {
      "segment_id": 83,
      "start_line": 190,
      "end_line": 190,
      "code_description": "Sets the 'normalnoisebrush' property of material 'mat1' to '0'",
      "modeling_purpose": "This step is needed to control the noise brush property of the material in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('normalnoisebrush', '0');"
    },
    {
      "segment_id": 84,
      "start_line": 191,
      "end_line": 191,
      "code_description": "Sets the 'normalnoisetype' property of material 'mat1' to '0'.",
      "modeling_purpose": "This step is needed to configure the material properties for accurate simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('normalnoisetype', '0');"
    },
    {
      "segment_id": 85,
      "start_line": 192,
      "end_line": 192,
      "code_description": "Sets the thermal expansion coefficient of material 'mat1' to 1",
      "modeling_purpose": "This step is needed to define the material properties for the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat1').set('alpha', 1);"
    },
    {
      "segment_id": 86,
      "start_line": 193,
      "end_line": 193,
      "code_description": "Sets the anisotropy axis of material 'mat1' to the z-axis (0 0 1)",
      "modeling_purpose": "This step is needed to define the anisotropic properties of the material in the simulation",
      "comsol_ids": [
        "mat1"
      ],
      "category": "materials",
      "key_operations": [
        "set anisotropy axis"
      ],
      "code": "model.material('mat1').set('anisotropyaxis', [0 0 1]);"
    },
    {
      "segment_id": 87,
      "start_line": 194,
      "end_line": 194,
      "code_description": "Creates a new material named 'mat2' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "modeling_purpose": "This step is needed to define the material properties for the component in the simulation.",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "create material"
      ],
      "code": "model.material.create('mat2', 'Common', 'comp1');"
    },
    {
      "segment_id": 88,
      "start_line": 195,
      "end_line": 195,
      "code_description": "Creates a property group for Young's modulus and Poisson's ratio in material 'mat2'",
      "modeling_purpose": "Defines material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat2",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "create property group"
      ],
      "code": "model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');"
    },
    {
      "segment_id": 89,
      "start_line": 196,
      "end_line": 196,
      "code_description": "Defines the material properties for silicon nitride (Si3N4) and assigns it the label 'Si3N4 - Silicon nitride'",
      "modeling_purpose": "This step is needed to accurately simulate the behavior of the MEMS resonator, as the material properties of silicon nitride affect its performance under the applied bias voltage",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "define material properties",
        "assign label"
      ],
      "code": "model.material('mat2').label('Si3N4 - Silicon nitride');"
    },
    {
      "segment_id": 90,
      "start_line": 197,
      "end_line": 197,
      "code_description": "Sets the electric conductivity of material 'mat2' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "set electric conductivity"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});"
    },
    {
      "segment_id": 91,
      "start_line": 198,
      "end_line": 198,
      "code_description": "Sets the thermal expansion coefficient of material 'mat2' to 2.3e-6 [1/K] for x, y, and z directions",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat2",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]'});"
    },
    {
      "segment_id": 92,
      "start_line": 199,
      "end_line": 199,
      "code_description": "Sets the heat capacity property of material 'mat2' to 700 J/(kg*K)",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat2",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');"
    },
    {
      "segment_id": 93,
      "start_line": 200,
      "end_line": 200,
      "code_description": "Sets the relative permittivity of material 'mat2' to a diagonal tensor with value 9.7 along the main diagonal",
      "modeling_purpose": "This step is needed to define the material properties of the resonator, which affects the electrostatic and structural behavior of the device",
      "comsol_ids": [
        "mat2",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('relpermittivity', {'9.7' '0' '0' '0' '9.7' '0' '0' '0' '9.7'});"
    },
    {
      "segment_id": 94,
      "start_line": 201,
      "end_line": 201,
      "code_description": "Sets the density property of material 'mat2' to 3100 kg/m^3",
      "modeling_purpose": "Defines material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('density', '3100[kg/m^3]');"
    },
    {
      "segment_id": 95,
      "start_line": 202,
      "end_line": 202,
      "code_description": "Sets the thermal conductivity of material 'mat2' to a diagonal matrix with values 20, 20, and 20 along the diagonal.",
      "modeling_purpose": "This step is needed to define the material properties for the simulation, which will affect the heat conduction through the material.",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "set thermal conductivity"
      ],
      "code": "model.material('mat2').propertyGroup('def').set('thermalconductivity', {'20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]'});"
    },
    {
      "segment_id": 96,
      "start_line": 203,
      "end_line": 203,
      "code_description": "Sets the Young's modulus of material 'mat2' to 250e9 Pa",
      "modeling_purpose": "Defines the mechanical properties of the material for the resonator simulation",
      "comsol_ids": [
        "mat2",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat2').propertyGroup('Enu').set('E', '250e9[Pa]');"
    },
    {
      "segment_id": 97,
      "start_line": 204,
      "end_line": 204,
      "code_description": "Sets the Poisson's ratio of material 'mat2' to 0.23",
      "modeling_purpose": "Defines the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat2",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat2').propertyGroup('Enu').set('nu', '0.23');"
    },
    {
      "segment_id": 98,
      "start_line": 205,
      "end_line": 205,
      "code_description": "Sets the material family of 'mat2' to 'plastic'",
      "modeling_purpose": "Defines the material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat2"
      ],
      "category": "materials",
      "key_operations": [
        "set material family"
      ],
      "code": "model.material('mat2').set('family', 'plastic');"
    },
    {
      "segment_id": 99,
      "start_line": 206,
      "end_line": 206,
      "code_description": "Creates a new material with the name 'mat3' in the component 'comp1'",
      "modeling_purpose": "Defines material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "create material"
      ],
      "code": "model.material.create('mat3', 'Common', 'comp1');"
    },
    {
      "segment_id": 100,
      "start_line": 207,
      "end_line": 207,
      "code_description": "Creates a property group for Young's modulus and Poisson's ratio in material 'mat3'",
      "modeling_purpose": "Defines material properties for the MEMS resonator simulation",
      "comsol_ids": [
        "mat3",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "create property group"
      ],
      "code": "model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');"
    },
    {
      "segment_id": 101,
      "start_line": 208,
      "end_line": 208,
      "code_description": "Defines the material properties for Silicon oxide (SiO2) in the model",
      "modeling_purpose": "To accurately simulate the behavior of the MEMS resonator, the material properties of its components must be defined",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "define_material_properties"
      ],
      "code": "model.material('mat3').label('SiO2 - Silicon oxide');"
    },
    {
      "segment_id": 102,
      "start_line": 209,
      "end_line": 209,
      "code_description": "Sets the electric conductivity of material 'mat3' to a diagonal tensor with values 0[S/m] along the main diagonal and 0 elsewhere.",
      "modeling_purpose": "This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set electric conductivity"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});"
    },
    {
      "segment_id": 103,
      "start_line": 210,
      "end_line": 210,
      "code_description": "Sets the thermal expansion coefficient for material 'mat3'",
      "modeling_purpose": "To account for thermal expansion in the material properties for the simulation",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set('thermalexpansioncoefficient')"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]'});"
    },
    {
      "segment_id": 104,
      "start_line": 211,
      "end_line": 211,
      "code_description": "Sets the heat capacity of material 'mat3' to 730 J/(kg*K) in the model",
      "modeling_purpose": "This step is needed to define the thermal properties of the material used in the MEMS resonator simulation",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set heat capacity"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');"
    },
    {
      "segment_id": 105,
      "start_line": 212,
      "end_line": 212,
      "code_description": "Sets the relative permittivity of material 'mat3' to a diagonal tensor with value 4.2 along the main diagonal",
      "modeling_purpose": "This step is needed to define the material properties of the resonator, which affects the electrostatic simulation",
      "comsol_ids": [
        "mat3",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});"
    },
    {
      "segment_id": 106,
      "start_line": 213,
      "end_line": 213,
      "code_description": "Sets the density property of material 'mat3' to 2200 kg/m^3",
      "modeling_purpose": "Defines material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('density', '2200[kg/m^3]');"
    },
    {
      "segment_id": 107,
      "start_line": 214,
      "end_line": 214,
      "code_description": "Sets the thermal conductivity of material 'mat3' to 1.4 W/(m*K) in all directions",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set thermal conductivity"
      ],
      "code": "model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});"
    },
    {
      "segment_id": 108,
      "start_line": 215,
      "end_line": 215,
      "code_description": "Sets the Young's modulus of material 'mat3' to 70e9 Pa",
      "modeling_purpose": "Defines the mechanical properties of the resonator material for accurate simulation of its behavior",
      "comsol_ids": [
        "mat3",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat3').propertyGroup('Enu').set('E', '70e9[Pa]');"
    },
    {
      "segment_id": 109,
      "start_line": 216,
      "end_line": 216,
      "code_description": "Sets the Poisson's ratio of material 'mat3' to 0.17",
      "modeling_purpose": "Defines the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat3",
        "Enu"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat3').propertyGroup('Enu').set('nu', '0.17');"
    },
    {
      "segment_id": 110,
      "start_line": 217,
      "end_line": 217,
      "code_description": "Sets the material family of 'mat3' to 'plastic'",
      "modeling_purpose": "Defines the material properties for the resonator structure",
      "comsol_ids": [
        "mat3"
      ],
      "category": "materials",
      "key_operations": [
        "set material family"
      ],
      "code": "model.material('mat3').set('family', 'plastic');"
    },
    {
      "segment_id": 111,
      "start_line": 218,
      "end_line": 218,
      "code_description": "Creates a new material with the name 'mat4' in the model using the 'Common' material property and assigns it to component 'comp1'",
      "modeling_purpose": "To define the material properties for the component in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "comp1"
      ],
      "category": "materials",
      "key_operations": [
        "create material",
        "assign to component"
      ],
      "code": "model.material.create('mat4', 'Common', 'comp1');"
    },
    {
      "segment_id": 112,
      "start_line": 219,
      "end_line": 219,
      "code_description": "Creates a piecewise function named 'eta' in the property group 'def' of material 'mat4'",
      "modeling_purpose": "To define a material property that varies based on certain conditions or parameters",
      "comsol_ids": [
        "mat4",
        "def",
        "eta"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "piecewise"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('eta', 'Piecewise');"
    },
    {
      "segment_id": 113,
      "start_line": 220,
      "end_line": 220,
      "code_description": "Creates a piecewise function for the heat capacity property of material 'mat4'",
      "modeling_purpose": "To define a temperature-dependent heat capacity for the material, which is necessary for accurate thermal analysis in the simulation",
      "comsol_ids": [
        "mat4",
        "Cp"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "piecewise"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('Cp', 'Piecewise');"
    },
    {
      "segment_id": 114,
      "start_line": 221,
      "end_line": 221,
      "code_description": "Creates an analytic function for material property 'rho' in material 'mat4'",
      "modeling_purpose": "Defines a material property function for the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "rho"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "func"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('rho', 'Analytic');"
    },
    {
      "segment_id": 115,
      "start_line": 222,
      "end_line": 222,
      "code_description": "Creates a piecewise function for material property 'k' in material 'mat4'",
      "modeling_purpose": "Defines a material property that varies based on certain conditions, likely related to the applied bias in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "k"
      ],
      "category": "materials",
      "key_operations": [
        "create piecewise function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('k', 'Piecewise');"
    },
    {
      "segment_id": 116,
      "start_line": 223,
      "end_line": 223,
      "code_description": "Creates an analytic function for the material property 'cs' in material 'mat4'",
      "modeling_purpose": "This step is needed to define a material property that may vary with the applied bias voltage in the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "Analytic"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('cs', 'Analytic');"
    },
    {
      "segment_id": 117,
      "start_line": 224,
      "end_line": 224,
      "code_description": "Creates an analytic function 'an1' in the property group 'def' of material 'mat4'",
      "modeling_purpose": "To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "create"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('an1', 'Analytic');"
    },
    {
      "segment_id": 118,
      "start_line": 225,
      "end_line": 225,
      "code_description": "Creates an analytic function 'an2' in the property group 'def' of material 'mat4'",
      "modeling_purpose": "To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "analytic"
      ],
      "code": "model.material('mat4').propertyGroup('def').func.create('an2', 'Analytic');"
    },
    {
      "segment_id": 119,
      "start_line": 226,
      "end_line": 226,
      "code_description": "Creates a property group for refractive index in material 'mat4'",
      "modeling_purpose": "Defines optical properties for the material, which is necessary for accurate simulation of light interaction with the resonator",
      "comsol_ids": [
        "mat4",
        "RefractiveIndex"
      ],
      "category": "materials",
      "key_operations": [
        "create"
      ],
      "code": "model.material('mat4').propertyGroup.create('RefractiveIndex', 'Refractive index');"
    },
    {
      "segment_id": 120,
      "start_line": 227,
      "end_line": 227,
      "code_description": "Creates a property group for nonlinear material model in material 'mat4'",
      "modeling_purpose": "To define nonlinear material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "NonlinearModel"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup.create('NonlinearModel', 'Nonlinear model');"
    },
    {
      "segment_id": 121,
      "start_line": 228,
      "end_line": 228,
      "code_description": "Creates an ideal gas property group in material 'mat4'",
      "modeling_purpose": "To define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "create"
      ],
      "code": "model.material('mat4').propertyGroup.create('idealGas', 'Ideal gas');"
    },
    {
      "segment_id": 122,
      "start_line": 229,
      "end_line": 229,
      "code_description": "Creates a piecewise function for the specific heat capacity (Cp) of material 'mat4'",
      "modeling_purpose": "To accurately model the thermal behavior of the material in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "create",
        "piecewise"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func.create('Cp', 'Piecewise');"
    },
    {
      "segment_id": 123,
      "start_line": 230,
      "end_line": 230,
      "code_description": "Defines the material properties for the air domain in the model",
      "modeling_purpose": "To accurately simulate the behavior of the MEMS resonator, the material properties of the surrounding air need to be specified",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "material definition"
      ],
      "code": "model.material('mat4').label('Air');"
    },
    {
      "segment_id": 124,
      "start_line": 231,
      "end_line": 231,
      "code_description": "Sets the material family of 'mat4' to 'air'",
      "modeling_purpose": "Defines the material properties for the air surrounding the MEMS resonator",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').set('family', 'air');"
    },
    {
      "segment_id": 125,
      "start_line": 232,
      "end_line": 232,
      "code_description": "Sets the argument of the function 'eta' in the material 'mat4' to 'T'",
      "modeling_purpose": "This step is needed to define the temperature dependence of material properties in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set argument of function 'eta'"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('eta').set('arg', 'T');"
    },
    {
      "segment_id": 126,
      "start_line": 233,
      "end_line": 233,
      "code_description": "Defines the temperature-dependent material property 'eta' for material 'mat4' using a piecewise function.",
      "modeling_purpose": "This step is needed to accurately model the material behavior under varying temperature conditions in the simulation.",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});"
    },
    {
      "segment_id": 127,
      "start_line": 234,
      "end_line": 234,
      "code_description": "Sets the argument unit for the eta function of material 'mat4' to Kelvin",
      "modeling_purpose": "This step is needed to define the temperature unit for the material properties in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('eta').set('argunit', 'K');"
    },
    {
      "segment_id": 128,
      "start_line": 235,
      "end_line": 235,
      "code_description": "Sets the viscosity function for material 'mat4' to 'eta' with units of 'Pa*s'",
      "modeling_purpose": "Defines the material properties for the simulation to accurately model the device's behavior",
      "comsol_ids": [
        "mat4",
        "def",
        "eta"
      ],
      "category": "materials",
      "key_operations": [
        "set viscosity function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('eta').set('fununit', 'Pa*s');"
    },
    {
      "segment_id": 129,
      "start_line": 236,
      "end_line": 236,
      "code_description": "Sets the temperature dependence of the heat capacity at constant pressure for material 4",
      "modeling_purpose": "To account for the variation of heat capacity with temperature in the material, which is important for accurate thermal analysis",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ],
      "category": "materials",
      "key_operations": [
        "set temperature dependence",
        "modify heat capacity"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('Cp').set('arg', 'T');"
    },
    {
      "segment_id": 130,
      "start_line": 237,
      "end_line": 237,
      "code_description": "Defines the temperature-dependent heat capacity of material 'mat4'",
      "modeling_purpose": "To account for the variation of heat capacity with temperature in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set heat capacity function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});"
    },
    {
      "segment_id": 131,
      "start_line": 238,
      "end_line": 238,
      "code_description": "Sets the argument unit for the heat capacity function of material 'mat4' to Kelvin",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('Cp').set('argunit', 'K');"
    },
    {
      "segment_id": 132,
      "start_line": 239,
      "end_line": 239,
      "code_description": "Sets the specific heat capacity property of material 'mat4' to have units of J/(kg*K).",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ],
      "category": "materials",
      "key_operations": [
        "set units of specific heat capacity"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');"
    },
    {
      "segment_id": 133,
      "start_line": 240,
      "end_line": 240,
      "code_description": "Sets the expression for the density of material 'mat4' as a function of pressure, temperature, and the ideal gas constant",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation, accounting for the dependence of density on pressure and temperature",
      "comsol_ids": [
        "mat4",
        "def",
        "rho"
      ],
      "category": "materials",
      "key_operations": [
        "set expression for density"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');"
    },
    {
      "segment_id": 134,
      "start_line": 241,
      "end_line": 241,
      "code_description": "Sets the arguments for the density function of material 'mat4'",
      "modeling_purpose": "Defines the material properties for the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set arguments for density function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('rho').set('args', {'pA' 'T'});"
    },
    {
      "segment_id": 135,
      "start_line": 242,
      "end_line": 242,
      "code_description": "Sets the density function of material 'mat4' to 'fununit' with units of kg/m^3",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def",
        "rho"
      ],
      "category": "materials",
      "key_operations": [
        "set density function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');"
    },
    {
      "segment_id": 136,
      "start_line": 243,
      "end_line": 243,
      "code_description": "Sets the argument unit for the density function of material 'mat4' to Pascals and Kelvins",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});"
    },
    {
      "segment_id": 137,
      "start_line": 244,
      "end_line": 244,
      "code_description": "Sets the plot arguments for the density function of material 'mat4'",
      "modeling_purpose": "To visualize the density variation with respect to pressure and temperature in the material",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup",
        "func"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});"
    },
    {
      "segment_id": 138,
      "start_line": 245,
      "end_line": 245,
      "code_description": "Sets the temperature dependence of the thermal conductivity for material 4",
      "modeling_purpose": "To account for the variation of thermal conductivity with temperature in the material, which is important for accurate heat transfer analysis",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set temperature dependence",
        "modify thermal conductivity"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('k').set('arg', 'T');"
    },
    {
      "segment_id": 139,
      "start_line": 246,
      "end_line": 246,
      "code_description": "Defines the temperature-dependent Young's modulus of material 'mat4' using a piecewise function.",
      "modeling_purpose": "To accurately model the material properties of the resonator, which may change with temperature.",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "set material property"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});"
    },
    {
      "segment_id": 140,
      "start_line": 247,
      "end_line": 247,
      "code_description": "Sets the argument unit for the thermal conductivity function of material 4 to Kelvin",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "k"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('k').set('argunit', 'K');"
    },
    {
      "segment_id": 141,
      "start_line": 248,
      "end_line": 248,
      "code_description": "Sets the thermal conductivity function unit to W/(m*K) for material 'mat4'",
      "modeling_purpose": "Defines the unit for the thermal conductivity function, which is necessary for the multi-physics simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "set thermal conductivity function unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');"
    },
    {
      "segment_id": 142,
      "start_line": 249,
      "end_line": 249,
      "code_description": "Sets the expression for the sound speed property of material 'mat4'",
      "modeling_purpose": "To define the material properties accurately for the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set expression for sound speed"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');"
    },
    {
      "segment_id": 143,
      "start_line": 250,
      "end_line": 250,
      "code_description": "Sets the arguments for the function 'cs' in the property group 'def' of material 'mat4' to the temperature 'T'.",
      "modeling_purpose": "This step is needed to define the material properties based on temperature for accurate simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set arguments"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('cs').set('args', {'T'});"
    },
    {
      "segment_id": 144,
      "start_line": 251,
      "end_line": 251,
      "code_description": "Sets the sound speed property of material 'mat4' to be defined by a function with units of m/s",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ],
      "category": "materials",
      "key_operations": [
        "set sound speed property",
        "define function units"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('cs').set('fununit', 'm/s');"
    },
    {
      "segment_id": 145,
      "start_line": 252,
      "end_line": 252,
      "code_description": "Sets the argument unit for the 'cs' function of the 'def' property group in material 'mat4' to Kelvin.",
      "modeling_purpose": "This step is needed to define the material properties for the simulation, specifically the units for the 'cs' function which may represent a temperature-dependent property.",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('cs').set('argunit', {'K'});"
    },
    {
      "segment_id": 146,
      "start_line": 253,
      "end_line": 253,
      "code_description": "Sets the temperature range for the material property 'cs' in material 'mat4'",
      "modeling_purpose": "To define the temperature-dependent behavior of the material for accurate simulation results",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ],
      "category": "materials",
      "key_operations": [
        "set temperature range"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});"
    },
    {
      "segment_id": 147,
      "start_line": 254,
      "end_line": 254,
      "code_description": "Sets the function name 'alpha_p' for the material property 'an1' in material 'mat4'",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set function name"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('funcname', 'alpha_p');"
    },
    {
      "segment_id": 148,
      "start_line": 255,
      "end_line": 255,
      "code_description": "Defines a material property function for the temperature derivative of density",
      "modeling_purpose": "This step is needed to accurately model the material properties of the resonator under varying temperature conditions",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set material property function"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');"
    },
    {
      "segment_id": 149,
      "start_line": 256,
      "end_line": 256,
      "code_description": "Sets the arguments for the function 'an1' in the property group 'def' of material 'mat4'",
      "modeling_purpose": "Defines material properties for the simulation based on the applied bias",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set arguments"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('args', {'pA' 'T'});"
    },
    {
      "segment_id": 150,
      "start_line": 257,
      "end_line": 257,
      "code_description": "Sets the function 'an1' in the property group 'def' of material 'mat4' to have units of '1/K'.",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set material property function units"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('fununit', '1/K');"
    },
    {
      "segment_id": 151,
      "start_line": 258,
      "end_line": 258,
      "code_description": "Sets the argument unit for the function 'an1' in material 'mat4' to Pascals and Kelvins",
      "modeling_purpose": "This step is needed to define the units for the material properties used in the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});"
    },
    {
      "segment_id": 152,
      "start_line": 259,
      "end_line": 259,
      "code_description": "Sets the plot arguments for the function 'an1' in the property group 'def' of material 'mat4', defining the pressure and temperature range for the material properties.",
      "modeling_purpose": "This step is needed to define the range of pressure and temperature over which the material properties will be plotted, which is important for understanding the behavior of the material under different conditions in the simulation.",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "plotargs"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});"
    },
    {
      "segment_id": 153,
      "start_line": 260,
      "end_line": 260,
      "code_description": "Sets the function name of the 'an2' property in material 'mat4' to 'muB'",
      "modeling_purpose": "This step is needed to define the material properties for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set function name"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('funcname', 'muB');"
    },
    {
      "segment_id": 154,
      "start_line": 261,
      "end_line": 261,
      "code_description": "Sets the expression for the thermal expansion coefficient of material 4",
      "modeling_purpose": "To account for temperature-dependent material properties in the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');"
    },
    {
      "segment_id": 155,
      "start_line": 262,
      "end_line": 262,
      "code_description": "Sets the arguments for the function 'an2' in material 'mat4' to depend on temperature 'T'",
      "modeling_purpose": "This step is needed to define the temperature dependence of a material property in the simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set arguments for function 'an2'"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('args', {'T'});"
    },
    {
      "segment_id": 156,
      "start_line": 263,
      "end_line": 263,
      "code_description": "Sets the unit of the function 'an2' in the property group 'def' of material 'mat4' to 'Pa*s'.",
      "modeling_purpose": "This step is needed to define the material properties for the simulation, specifically the unit of the function 'an2' which may represent a material parameter like viscosity or damping.",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set unit of function 'an2'"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('fununit', 'Pa*s');"
    },
    {
      "segment_id": 157,
      "start_line": 264,
      "end_line": 264,
      "code_description": "Sets the argument unit for the an2 function in the material property group of material mat4",
      "modeling_purpose": "To define the appropriate units for the an2 function, which may be used to describe material properties that vary with the applied bias in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('argunit', {'K'});"
    },
    {
      "segment_id": 158,
      "start_line": 265,
      "end_line": 265,
      "code_description": "Sets the plot arguments for the 'an2' function of material 'mat4' to plot the values at temperatures 200 and 1600.",
      "modeling_purpose": "This step is needed to visualize the behavior of the material properties at different temperatures, which is important for understanding the device's performance under varying conditions.",
      "comsol_ids": [
        "mat4",
        "an2"
      ],
      "category": "materials",
      "key_operations": [
        "set plot arguments"
      ],
      "code": "model.material('mat4').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});"
    },
    {
      "segment_id": 159,
      "start_line": 266,
      "end_line": 266,
      "code_description": "Sets the thermal expansion coefficient property of material 'mat4' to an empty value",
      "modeling_purpose": "This step is needed to define material properties accurately for the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', '');"
    },
    {
      "segment_id": 160,
      "start_line": 267,
      "end_line": 267,
      "code_description": "Sets the molar mass property of material 'mat4' to an empty value",
      "modeling_purpose": "This step is needed to define material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('molarmass', '');"
    },
    {
      "segment_id": 161,
      "start_line": 268,
      "end_line": 268,
      "code_description": "Sets the bulk viscosity property of material 'mat4' to an empty value",
      "modeling_purpose": "Adjusting material properties to accurately represent the behavior of the material in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('bulkviscosity', '');"
    },
    {
      "segment_id": 162,
      "start_line": 269,
      "end_line": 269,
      "code_description": "Sets the thermal expansion coefficient for material 'mat4' in the model",
      "modeling_purpose": "This step is needed to define the material properties for the simulation, which will affect the behavior of the resonator under different conditions",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});"
    },
    {
      "segment_id": 163,
      "start_line": 270,
      "end_line": 270,
      "code_description": "Sets the molar mass property of material 'mat4' to 0.02897 kg/mol",
      "modeling_purpose": "Defines material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');"
    },
    {
      "segment_id": 164,
      "start_line": 271,
      "end_line": 271,
      "code_description": "Sets the bulk viscosity of material 'mat4' to a temperature-dependent function 'muB(T)'",
      "modeling_purpose": "To accurately model the material properties of the resonator, which may change with temperature",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('bulkviscosity', 'muB(T)');"
    },
    {
      "segment_id": 165,
      "start_line": 272,
      "end_line": 272,
      "code_description": "Sets the relative permeability tensor for material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "modeling_purpose": "This step is needed to define the magnetic properties of the material used in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});"
    },
    {
      "segment_id": 166,
      "start_line": 273,
      "end_line": 273,
      "code_description": "Sets the relative permittivity tensor of material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "modeling_purpose": "This step is needed to define the material properties for the simulation, which affects the electrostatic behavior of the resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});"
    },
    {
      "segment_id": 167,
      "start_line": 274,
      "end_line": 274,
      "code_description": "Sets the dynamic viscosity of material 'mat4' to a function of temperature 'eta(T)'",
      "modeling_purpose": "This step is needed to define the temperature-dependent viscosity of the material, which affects the fluid flow behavior in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('dynamicviscosity', 'eta(T)');"
    },
    {
      "segment_id": 168,
      "start_line": 275,
      "end_line": 275,
      "code_description": "Sets the ratio of specific heats for material 'mat4'",
      "modeling_purpose": "This step is needed to define the material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('ratioofspecificheat', '1.4');"
    },
    {
      "segment_id": 169,
      "start_line": 276,
      "end_line": 276,
      "code_description": "Sets the electric conductivity of material 'mat4' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "modeling_purpose": "This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "set electric conductivity"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});"
    },
    {
      "segment_id": 170,
      "start_line": 277,
      "end_line": 277,
      "code_description": "Sets the heat capacity of material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "modeling_purpose": "This step is needed to accurately model the temperature-dependent behavior of the material in the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set heat capacity"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('heatcapacity', 'Cp(T)');"
    },
    {
      "segment_id": 171,
      "start_line": 278,
      "end_line": 278,
      "code_description": "Sets the density of material 'mat4' to a function 'rho(pA,T)'",
      "modeling_purpose": "Defines material properties for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('density', 'rho(pA,T)');"
    },
    {
      "segment_id": 172,
      "start_line": 279,
      "end_line": 279,
      "code_description": "Sets the thermal conductivity of material 'mat4' to a temperature-dependent function 'k(T)'",
      "modeling_purpose": "This step is needed to accurately model the heat conduction in the material, which may vary with temperature",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});"
    },
    {
      "segment_id": 173,
      "start_line": 280,
      "end_line": 280,
      "code_description": "Sets the sound speed property of material 'mat4' to a function 'cs(T)' dependent on temperature",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation, accounting for temperature effects on sound speed",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('def').set('soundspeed', 'cs(T)');"
    },
    {
      "segment_id": 174,
      "start_line": 281,
      "end_line": 281,
      "code_description": "Adds an input for temperature in the material property group of material 'mat4'.",
      "modeling_purpose": "This step is needed to define the temperature dependence of material properties for accurate simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "addInput"
      ],
      "code": "model.material('mat4').propertyGroup('def').addInput('temperature');"
    },
    {
      "segment_id": 175,
      "start_line": 282,
      "end_line": 282,
      "code_description": "Adds an input for pressure in the default property group of material 'mat4'",
      "modeling_purpose": "This step is needed to define material properties that depend on pressure for the simulation",
      "comsol_ids": [
        "mat4",
        "def"
      ],
      "category": "materials",
      "key_operations": [
        "addInput"
      ],
      "code": "model.material('mat4').propertyGroup('def').addInput('pressure');"
    },
    {
      "segment_id": 176,
      "start_line": 283,
      "end_line": 283,
      "code_description": "Sets the refractive index tensor for material 'mat4' to a diagonal matrix with elements 1, 1, and 1.",
      "modeling_purpose": "This step is needed to define the optical properties of the material in the simulation.",
      "comsol_ids": [
        "mat4",
        "RefractiveIndex"
      ],
      "category": "materials",
      "key_operations": [
        "set refractive index"
      ],
      "code": "model.material('mat4').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});"
    },
    {
      "segment_id": 177,
      "start_line": 284,
      "end_line": 284,
      "code_description": "Sets the nonlinear model property 'BA' for material 'mat4' based on the expression '(def.gamma+1)/2'",
      "modeling_purpose": "This step is needed to define the nonlinear material behavior for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "NonlinearModel"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');"
    },
    {
      "segment_id": 178,
      "start_line": 285,
      "end_line": 285,
      "code_description": "Defines a piecewise function for the heat capacity (Cp) of material 'mat4' using the ideal gas property group",
      "modeling_purpose": "To accurately model the thermodynamic properties of the material in the simulation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "define_piecewise_function"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func('Cp').label('Piecewise 2');"
    },
    {
      "segment_id": 179,
      "start_line": 286,
      "end_line": 286,
      "code_description": "Sets the argument of the specific heat capacity function for material 'mat4' to temperature 'T'",
      "modeling_purpose": "This step is needed to define the temperature dependence of the specific heat capacity for the material, which is important for accurate simulation of the device's behavior under varying temperature conditions",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set argument of specific heat capacity function"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('arg', 'T');"
    },
    {
      "segment_id": 180,
      "start_line": 287,
      "end_line": 287,
      "code_description": "Defines the temperature-dependent specific heat capacity (Cp) of material 'mat4' using piecewise definition.",
      "modeling_purpose": "To accurately model the thermal behavior of the material in the simulation.",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set",
        "propertyGroup"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});"
    },
    {
      "segment_id": 181,
      "start_line": 288,
      "end_line": 288,
      "code_description": "Sets the argument unit for the specific heat capacity function of the ideal gas material property group to Kelvin",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set argument unit"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('argunit', 'K');"
    },
    {
      "segment_id": 182,
      "start_line": 289,
      "end_line": 289,
      "code_description": "Sets the specific heat capacity function unit to J/(kg*K) for the material 'mat4' in the ideal gas property group",
      "modeling_purpose": "This step is needed to define the thermodynamic properties of the material used in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set specific heat capacity function unit"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');"
    },
    {
      "segment_id": 183,
      "start_line": 290,
      "end_line": 290,
      "code_description": "Sets the specific gas constant for material 'mat4' using the ideal gas property group",
      "modeling_purpose": "This step is needed to define the material properties accurately for the simulation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').set('Rs', 'R_const/Mn');"
    },
    {
      "segment_id": 184,
      "start_line": 291,
      "end_line": 291,
      "code_description": "Sets the heat capacity of the material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "modeling_purpose": "This step is needed to accurately model the material properties of the resonator, which may change with temperature during operation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set heat capacity"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');"
    },
    {
      "segment_id": 185,
      "start_line": 292,
      "end_line": 292,
      "code_description": "Sets the ratio of specific heats for the ideal gas material property in the model",
      "modeling_purpose": "This step is needed to define the thermodynamic properties of the gas in the resonator, which affects the device's performance and behavior",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');"
    },
    {
      "segment_id": 186,
      "start_line": 293,
      "end_line": 293,
      "code_description": "Sets the molar mass of the ideal gas material to 0.02897",
      "modeling_purpose": "This step is needed to define the material properties of the gas in the simulation",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "set"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').set('molarmass', '0.02897');"
    },
    {
      "segment_id": 187,
      "start_line": 294,
      "end_line": 294,
      "code_description": "Adds an input for temperature in the idealGas property group of material mat4",
      "modeling_purpose": "To define the temperature of the gas in the resonator for accurate simulation of its behavior",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "addInput"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').addInput('temperature');"
    },
    {
      "segment_id": 188,
      "start_line": 295,
      "end_line": 295,
      "code_description": "Adds an input for pressure in the idealGas property group of material mat4",
      "modeling_purpose": "This step is needed to define the pressure property of the material for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ],
      "category": "materials",
      "key_operations": [
        "addInput"
      ],
      "code": "model.material('mat4').propertyGroup('idealGas').addInput('pressure');"
    },
    {
      "segment_id": 189,
      "start_line": 296,
      "end_line": 296,
      "code_description": "Sets the material type of 'mat4' to non-solid",
      "modeling_purpose": "This step is needed to define the material properties for the simulation",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "materialType"
      ],
      "code": "model.material('mat4').materialType('nonSolid');"
    },
    {
      "segment_id": 190,
      "start_line": 297,
      "end_line": 297,
      "code_description": "Sets the material family of material 'mat4' to 'air'",
      "modeling_purpose": "Defines the material properties for the air region in the MEMS resonator simulation",
      "comsol_ids": [
        "mat4"
      ],
      "category": "materials",
      "key_operations": [
        "set material family"
      ],
      "code": "model.material('mat4').set('family', 'air');"
    },
    {
      "segment_id": 191,
      "start_line": 298,
      "end_line": 298,
      "code_description": "Selects material 'mat1' and applies it to the selection named 'uni1'",
      "modeling_purpose": "Defines the material properties for the specified selection in the geometry",
      "comsol_ids": [
        "mat1",
        "uni1"
      ],
      "category": "materials",
      "key_operations": [
        "select",
        "apply"
      ],
      "code": "model.material('mat1').selection.named('uni1');"
    },
    {
      "segment_id": 192,
      "start_line": 299,
      "end_line": 299,
      "code_description": "Selects material 'mat2' and applies it to the geometry component named 'box3'",
      "modeling_purpose": "Assigns material properties to the specified geometry for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mat2",
        "box3"
      ],
      "category": "materials",
      "key_operations": [
        "select",
        "apply"
      ],
      "code": "model.material('mat2').selection.named('box3');"
    },
    {
      "segment_id": 193,
      "start_line": 300,
      "end_line": 300,
      "code_description": "Selects material 'mat3' and applies it to the geometry selection named 'box2'",
      "modeling_purpose": "Assigns material properties to a specific part of the resonator geometry for accurate simulation",
      "comsol_ids": [
        "mat3",
        "box2"
      ],
      "category": "materials",
      "key_operations": [
        "selection",
        "named"
      ],
      "code": "model.material('mat3').selection.named('box2');"
    },
    {
      "segment_id": 194,
      "start_line": 301,
      "end_line": 302,
      "code_description": "Selects the material 'mat4' and assigns it to the selection named 'dif2'.",
      "modeling_purpose": "This step is needed to assign material properties to a specific domain or part of the geometry for accurate simulation of the MEMS resonator.",
      "comsol_ids": [
        "mat4",
        "dif2"
      ],
      "category": "materials",
      "key_operations": [
        "selection",
        "assignment"
      ],
      "code": "model.material('mat4').selection.named('dif2');"
    },
    {
      "segment_id": 195,
      "start_line": 303,
      "end_line": 303,
      "code_description": "Selects the 'dif1' named selection in the solid mechanics physics interface",
      "modeling_purpose": "This step is needed to apply specific settings or boundary conditions to the selected entities in the solid mechanics physics interface",
      "comsol_ids": [
        "solid"
      ],
      "category": "physics",
      "key_operations": [
        "selection"
      ],
      "code": "model.physics('solid').selection.named('dif1');"
    },
    {
      "segment_id": 196,
      "start_line": 304,
      "end_line": 304,
      "code_description": "Creates a fixed constraint boundary condition on the selected boundaries",
      "modeling_purpose": "To define the fixed constraint boundary condition for the MEMS resonator to obtain accurate mode shapes and frequencies",
      "comsol_ids": [
        "solid",
        "fix1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "create",
        "Fixed"
      ],
      "code": "model.physics('solid').create('fix1', 'Fixed', 2);"
    },
    {
      "segment_id": 197,
      "start_line": 305,
      "end_line": 305,
      "code_description": "Selects the 'int1' named boundary for fixing in the solid mechanics physics interface",
      "modeling_purpose": "This step is needed to apply a fixed constraint boundary condition to the resonator, which is essential for simulating the device's response to the applied bias voltage",
      "comsol_ids": [
        "solid",
        "fix1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "selection.named"
      ],
      "code": "model.physics('solid').feature('fix1').selection.named('int1');"
    },
    {
      "segment_id": 198,
      "start_line": 306,
      "end_line": 306,
      "code_description": "Creates a symmetry boundary condition for the solid mechanics physics interface",
      "modeling_purpose": "This step is needed to reduce the computational domain by exploiting symmetry in the device, which helps in faster simulation times without loss of accuracy",
      "comsol_ids": [
        "solid",
        "sym1"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics('solid').create('sym1', 'SymmetrySolid', 2);"
    },
    {
      "segment_id": 199,
      "start_line": 307,
      "end_line": 311,
      "code_description": "Selects specific geometry entities for use in physics definitions and symmetry conditions",
      "modeling_purpose": "Defines the geometry to be used for the solid mechanics physics and symmetry boundary conditions",
      "comsol_ids": [
        "box7",
        "dif2"
      ],
      "category": "geometry",
      "key_operations": [
        "selection",
        "named"
      ],
      "code": "model.physics('solid').feature('sym1').selection.named('box7');\n\nmodel.common('free1').selection.named('dif2');\nmodel.common('sym1').selection.named('box7');"
    },
    {
      "segment_id": 200,
      "start_line": 312,
      "end_line": 312,
      "code_description": "Creates a Charge Conservation node in the electrostatics physics interface",
      "modeling_purpose": "This step is needed to define the charge conservation equation for the electrostatics physics interface in the simulation",
      "comsol_ids": [
        "es",
        "ccn2"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics('es').create('ccn2', 'ChargeConservation', 3);"
    },
    {
      "segment_id": 201,
      "start_line": 313,
      "end_line": 313,
      "code_description": "Sets up the charge conservation physics in the air domain of the MEMS resonator model",
      "modeling_purpose": "This step is needed to ensure accurate simulation of the electrostatic interaction between the capacitor plates",
      "comsol_ids": [
        "es",
        "ccn2"
      ],
      "category": "physics",
      "key_operations": [
        "feature",
        "label"
      ],
      "code": "model.physics('es').feature('ccn2').label('Charge Conservation, Air');"
    },
    {
      "segment_id": 202,
      "start_line": 314,
      "end_line": 314,
      "code_description": "Selects the 'dif2' named selection for the 'ccn2' feature of the electrostatics physics interface",
      "modeling_purpose": "This step is needed to apply boundary conditions or material properties to the selected entities for the electrostatics simulation",
      "comsol_ids": [
        "es",
        "ccn2",
        "dif2"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "selection"
      ],
      "code": "model.physics('es').feature('ccn2').selection.named('dif2');"
    },
    {
      "segment_id": 203,
      "start_line": 315,
      "end_line": 315,
      "code_description": "Creates a domain terminal for the electrostatic physics interface",
      "modeling_purpose": "To define the terminal for applying the AC + DC bias voltage across the parallel plate capacitor",
      "comsol_ids": [
        "es",
        "term1"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics('es').create('term1', 'DomainTerminal', 3);"
    },
    {
      "segment_id": 204,
      "start_line": 316,
      "end_line": 316,
      "code_description": "Selects the 'dif1' named boundary for the electrostatic physics term1 feature",
      "modeling_purpose": "This step is needed to apply the boundary conditions for the electrostatic physics in the simulation",
      "comsol_ids": [
        "es",
        "term1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "selection.named"
      ],
      "code": "model.physics('es').feature('term1').selection.named('dif1');"
    },
    {
      "segment_id": 205,
      "start_line": 317,
      "end_line": 317,
      "code_description": "Sets the terminal type to voltage for the first terminal in the electrostatics physics interface",
      "modeling_purpose": "This step is needed to define the type of electrical boundary condition applied to the resonator, which is essential for simulating the electrostatic actuation",
      "comsol_ids": [
        "es",
        "term1"
      ],
      "category": "physics",
      "key_operations": [
        "set",
        "TerminalType"
      ],
      "code": "model.physics('es').feature('term1').set('TerminalType', 'Voltage');"
    },
    {
      "segment_id": 206,
      "start_line": 318,
      "end_line": 318,
      "code_description": "Sets the applied bias voltage to 0 for the first terminal in the electrostatic physics interface",
      "modeling_purpose": "This step is needed to define the initial condition for the bias voltage in the simulation of the MEMS resonator",
      "comsol_ids": [
        "es",
        "term1"
      ],
      "category": "physics",
      "key_operations": [
        "set"
      ],
      "code": "model.physics('es').feature('term1').set('V0', 0);"
    },
    {
      "segment_id": 207,
      "start_line": 319,
      "end_line": 319,
      "code_description": "Creates a ground boundary condition for the electrostatic physics interface",
      "modeling_purpose": "To set the reference potential for the electrostatic simulation",
      "comsol_ids": [
        "es",
        "gnd1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "create"
      ],
      "code": "model.physics('es').create('gnd1', 'Ground', 2);"
    },
    {
      "segment_id": 208,
      "start_line": 320,
      "end_line": 320,
      "code_description": "Selects the ground feature of the electrostatic physics interface and applies it to the named selection 'box1'.",
      "modeling_purpose": "This step is needed to define the boundary conditions for the electrostatic simulation, specifically setting the ground potential for the resonator.",
      "comsol_ids": [
        "es",
        "gnd1"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "selection",
        "named"
      ],
      "code": "model.physics('es').feature('gnd1').selection.named('box1');"
    },
    {
      "segment_id": 209,
      "start_line": 321,
      "end_line": 321,
      "code_description": "Creates a domain terminal for the electrostatic physics interface",
      "modeling_purpose": "To define the terminal for the electrostatic analysis in the MEMS resonator simulation",
      "comsol_ids": [
        "es",
        "term2"
      ],
      "category": "physics",
      "key_operations": [
        "create"
      ],
      "code": "model.physics('es').create('term2', 'DomainTerminal', 3);"
    },
    {
      "segment_id": 210,
      "start_line": 322,
      "end_line": 322,
      "code_description": "Selects the 'geom1_boxsel4' named selection in the geometry for the 'term2' feature of the electrostatics physics interface",
      "modeling_purpose": "This step is needed to define the boundaries or domains where the electrostatics physics interface will be applied in the simulation",
      "comsol_ids": [
        "es",
        "term2",
        "geom1_boxsel4"
      ],
      "category": "boundary_conditions",
      "key_operations": [
        "selection"
      ],
      "code": "model.physics('es').feature('term2').selection.named('geom1_boxsel4');"
    },
    {
      "segment_id": 211,
      "start_line": 323,
      "end_line": 323,
      "code_description": "Sets the terminal type to voltage for the second terminal in the electrostatics physics interface",
      "modeling_purpose": "This step is needed to define the type of terminal for the electrostatics simulation, which is essential for the resonator's behavior analysis",
      "comsol_ids": [
        "es",
        "term2"
      ],
      "category": "physics",
      "key_operations": [
        "set",
        "TerminalType"
      ],
      "code": "model.physics('es').feature('term2').set('TerminalType', 'Voltage');"
    },
    {
      "segment_id": 212,
      "start_line": 324,
      "end_line": 325,
      "code_description": "Sets the applied DC bias voltage (V0) for the second terminal of the electrostatic physics interface",
      "modeling_purpose": "To define the DC bias voltage for the electrostatic analysis of the MEMS resonator",
      "comsol_ids": [
        "es",
        "term2"
      ],
      "category": "physics",
      "key_operations": [
        "set"
      ],
      "code": "model.physics('es').feature('term2').set('V0', 'Vdc');"
    },
    {
      "segment_id": 213,
      "start_line": 326,
      "end_line": 326,
      "code_description": "Creates a free triangular mesh named 'ftri1' using the meshing sequence 'mesh1'",
      "modeling_purpose": "To generate a mesh for the resonator geometry to perform the simulation accurately",
      "comsol_ids": [
        "mesh1",
        "ftri1"
      ],
      "category": "mesh",
      "key_operations": [
        "create",
        "FreeTri"
      ],
      "code": "model.mesh('mesh1').create('ftri1', 'FreeTri');"
    },
    {
      "segment_id": 214,
      "start_line": 327,
      "end_line": 327,
      "code_description": "Selects a named geometric entity for meshing",
      "modeling_purpose": "To control the meshing of the selected geometry in the resonator simulation",
      "comsol_ids": [
        "mesh1",
        "ftri1",
        "geom1_sel2"
      ],
      "category": "mesh",
      "key_operations": [
        "selection",
        "named"
      ],
      "code": "model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel2');"
    },
    {
      "segment_id": 215,
      "start_line": 328,
      "end_line": 328,
      "code_description": "Runs the meshing sequence 'ftri1' on the mesh named 'mesh1' to generate the finite element mesh for the model",
      "modeling_purpose": "Meshing is required to discretize the geometry into finite elements for accurate simulation of the MEMS resonator",
      "comsol_ids": [
        "mesh1",
        "ftri1"
      ],
      "category": "mesh",
      "key_operations": [
        "run meshing sequence"
      ],
      "code": "model.mesh('mesh1').run('ftri1');"
    },
    {
      "segment_id": 216,
      "start_line": 329,
      "end_line": 329,
      "code_description": "Creates a mesh sweep named 'swe1' using the mesh 'mesh1' in the model",
      "modeling_purpose": "To generate a mesh suitable for the simulation of the MEMS resonator, considering the applied bias",
      "comsol_ids": [
        "mesh1",
        "swe1"
      ],
      "category": "mesh",
      "key_operations": [
        "create",
        "sweep"
      ],
      "code": "model.mesh('mesh1').create('swe1', 'Sweep');"
    },
    {
      "segment_id": 217,
      "start_line": 330,
      "end_line": 331,
      "code_description": "Runs the mesh sequence 'swe1' on the mesh object 'mesh1' to generate the mesh for the model",
      "modeling_purpose": "Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator's behavior under applied bias",
      "comsol_ids": [
        "mesh1",
        "swe1"
      ],
      "category": "mesh",
      "key_operations": [
        "run"
      ],
      "code": "model.mesh('mesh1').run('swe1');"
    },
    {
      "segment_id": 218,
      "start_line": 332,
      "end_line": 333,
      "code_description": "Sets the label of the stationary study to 'Stationary'",
      "modeling_purpose": "This step is needed to organize and identify the stationary study in the simulation",
      "comsol_ids": [
        "std1"
      ],
      "category": "study",
      "key_operations": [
        "label"
      ],
      "code": "model.study('std1').label('Stationary');"
    },
    {
      "segment_id": 219,
      "start_line": 334,
      "end_line": 335,
      "code_description": "Creates a solution object named 'sol1' in the model",
      "modeling_purpose": "To prepare for solving the simulation and obtaining results",
      "comsol_ids": [
        "sol1"
      ],
      "category": "study",
      "key_operations": [
        "create_solution_object"
      ],
      "code": "model.sol.create('sol1');"
    },
    {
      "segment_id": 220,
      "start_line": 336,
      "end_line": 336,
      "code_description": "Selects the geometry entity with ID 3 for meshing",
      "modeling_purpose": "This step is needed to define the meshing for the selected geometry entity in the simulation",
      "comsol_ids": [
        "mesh1",
        "3"
      ],
      "category": "mesh",
      "key_operations": [
        "select",
        "mesh"
      ],
      "code": "model.mesh('mesh1').stat.selection.geom(3);"
    },
    {
      "segment_id": 221,
      "start_line": 337,
      "end_line": 338,
      "code_description": "Sets the mesh selection for specific elements in the model",
      "modeling_purpose": "This step is needed to refine the mesh in specific regions of the device for accurate simulation results",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "set mesh selection"
      ],
      "code": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36]);"
    },
    {
      "segment_id": 222,
      "start_line": 339,
      "end_line": 340,
      "code_description": "Accesses the solution 'sol1' and study 'std1' from the model",
      "modeling_purpose": "To set up the study and solution for the simulation of the MEMS resonator",
      "comsol_ids": [
        "sol1",
        "std1"
      ],
      "category": "study",
      "key_operations": [
        "access_solution",
        "access_study"
      ],
      "code": "model.sol('sol1').study('std1');"
    },
    {
      "segment_id": 223,
      "start_line": 341,
      "end_line": 341,
      "code_description": "Sets the solution number to not list in the stationary study",
      "modeling_purpose": "This step is needed to control the output of the stationary study in the simulation",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set",
        "notlistsolnum"
      ],
      "code": "model.study('std1').feature('stat').set('notlistsolnum', 1);"
    },
    {
      "segment_id": 224,
      "start_line": 342,
      "end_line": 342,
      "code_description": "Sets the solver to automatically choose the solution number for the stationary study",
      "modeling_purpose": "This step is needed to ensure the solver can automatically determine the appropriate solution number for the stationary study in the simulation of the MEMS resonator",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std1').feature('stat').set('notsolnum', 'auto');"
    },
    {
      "segment_id": 225,
      "start_line": 343,
      "end_line": 343,
      "code_description": "Sets the number of solutions to be computed in the stationary solver",
      "modeling_purpose": "This step is needed to specify the number of solutions for the normal mode shapes and frequencies analysis",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std1').feature('stat').set('listsolnum', 1);"
    },
    {
      "segment_id": 226,
      "start_line": 344,
      "end_line": 345,
      "code_description": "Sets the solution number to 'auto' for the stationary study 'std1'",
      "modeling_purpose": "This step is needed to automatically determine the number of solutions for the stationary study in the simulation",
      "comsol_ids": [
        "std1",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set('solnum', 'auto')"
      ],
      "code": "model.study('std1').feature('stat').set('solnum', 'auto');"
    },
    {
      "segment_id": 227,
      "start_line": 346,
      "end_line": 348,
      "code_description": "Creates a study step for the stationary solver in the solution sequence",
      "modeling_purpose": "This step is needed to set up the solver sequence for computing the normal mode shapes and frequencies of the MEMS resonator under the influence of the applied bias voltage",
      "comsol_ids": [
        "sol1",
        "st1"
      ],
      "category": "study",
      "key_operations": [
        "create_study_step",
        "set_study",
        "set_studystep"
      ],
      "code": "model.sol('sol1').create('st1', 'StudyStep');\nmodel.sol('sol1').feature('st1').set('study', 'std1');\nmodel.sol('sol1').feature('st1').set('studystep', 'stat');"
    },
    {
      "segment_id": 228,
      "start_line": 349,
      "end_line": 354,
      "code_description": "Configures the solver to scale the variables for the spatial displacement and the u component",
      "modeling_purpose": "This step is needed to adjust the scaling of the variables to obtain accurate results for the resonator's behavior under the applied bias voltage",
      "comsol_ids": [
        "sol1",
        "v1"
      ],
      "category": "study",
      "key_operations": [
        "create variables",
        "set scale method",
        "set scale value"
      ],
      "code": "model.sol('sol1').create('v1', 'Variables');\nmodel.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.097926304852248E-5');\nmodel.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.097926304852248E-5');\nmodel.sol('sol1').feature('v1').set('control', 'stat');"
    },
    {
      "segment_id": 229,
      "start_line": 355,
      "end_line": 356,
      "code_description": "Creates a stationary solver and enables caching of the solution pattern",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the biased resonator",
      "comsol_ids": [
        "sol1",
        "s1",
        "aDef"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol1').create('s1', 'Stationary');\nmodel.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);"
    },
    {
      "segment_id": 230,
      "start_line": 357,
      "end_line": 357,
      "code_description": "Creates a segregated solver for the study 's1' in the solution 'sol1'",
      "modeling_purpose": "Needed to solve the multi-physics problem in a segregated manner, which can be more efficient and stable for certain types of problems",
      "comsol_ids": [
        "sol1",
        "s1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "segregated"
      ],
      "code": "model.sol('sol1').feature('s1').create('seDef', 'Segregated');"
    },
    {
      "segment_id": 231,
      "start_line": 358,
      "end_line": 359,
      "code_description": "Creates a segregated solver and removes the default study step",
      "modeling_purpose": "To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ssDef"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "remove"
      ],
      "code": "model.sol('sol1').feature('s1').create('se1', 'Segregated');\nmodel.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');"
    },
    {
      "segment_id": 232,
      "start_line": 360,
      "end_line": 361,
      "code_description": "Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "modeling_purpose": "This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ss1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});"
    },
    {
      "segment_id": 233,
      "start_line": 362,
      "end_line": 365,
      "code_description": "Configures the solver settings for the electric potential study",
      "modeling_purpose": "To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias",
      "comsol_ids": [
        "sol1",
        "s1",
        "d1",
        "se1",
        "ss1"
      ],
      "category": "study",
      "key_operations": [
        "create direct solver",
        "set linear solver",
        "configure electric potential solver"
      ],
      "code": "model.sol('sol1').feature('s1').create('d1', 'Direct');\nmodel.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric potential');"
    },
    {
      "segment_id": 234,
      "start_line": 366,
      "end_line": 369,
      "code_description": "Creates a segregated step for solving the displacement field of the MEMS resonator",
      "modeling_purpose": "This step is needed to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ss2"
      ],
      "category": "study",
      "key_operations": [
        "create segregated step",
        "set variables",
        "set linear solver",
        "label step"
      ],
      "code": "model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement field');"
    },
    {
      "segment_id": 235,
      "start_line": 370,
      "end_line": 377,
      "code_description": "Creates a segregated step for spatial mesh displacement and sets various solver settings",
      "modeling_purpose": "This step is needed to accurately compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "ss3"
      ],
      "category": "study",
      "key_operations": [
        "create_segregated_step",
        "set_solver_settings"
      ],
      "code": "model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial mesh displacement');\nmodel.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segaacc');\nmodel.sol('sol1').feature('s1').feature('se1').set('segaaccdim', 5);"
    },
    {
      "segment_id": 236,
      "start_line": 378,
      "end_line": 383,
      "code_description": "Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "modeling_purpose": "To efficiently solve the system of equations for the electrostatic analysis with the applied bias",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1"
      ],
      "category": "study",
      "key_operations": [
        "create iterative solver",
        "set solver properties"
      ],
      "code": "model.sol('sol1').feature('s1').create('i1', 'Iterative');\nmodel.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');\nmodel.sol('sol1').feature('s1').feature('i1').set('rhob', 40);\nmodel.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);\nmodel.sol('sol1').feature('s1').feature('i1').set('itrestart', 5000);\nmodel.sol('sol1').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');"
    },
    {
      "segment_id": 237,
      "start_line": 384,
      "end_line": 388,
      "code_description": "Configures a multigrid solver for the study 'sol1' using the SA-AMG method and sets hybridization and variables",
      "modeling_purpose": "Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "mg1"
      ],
      "category": "study",
      "key_operations": [
        "create_multigrid_solver",
        "set_hybridization",
        "set_hybrid_variables",
        "set_predefined_function",
        "set_smoothing_option"
      ],
      "code": "model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V'});\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);"
    },
    {
      "segment_id": 238,
      "start_line": 389,
      "end_line": 390,
      "code_description": "Creates a SOR (Successive Over-Relaxation) preconditioner and sets the relaxation factor to 0.8",
      "modeling_purpose": "Improves the convergence of the solver for the biased resonator simulation",
      "comsol_ids": [
        "s1",
        "i1",
        "mg1",
        "pr",
        "so1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);"
    },
    {
      "segment_id": 239,
      "start_line": 391,
      "end_line": 392,
      "code_description": "Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "modeling_purpose": "Improves the convergence of the solver for the biased resonator simulation",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "mg1",
        "po",
        "so1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);"
    },
    {
      "segment_id": 240,
      "start_line": 393,
      "end_line": 399,
      "code_description": "Configures a direct preconditioner for the solver and removes default settings",
      "modeling_purpose": "Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "dp1",
        "std1"
      ],
      "category": "study",
      "key_operations": [
        "create_direct_preconditioner",
        "remove_default_settings"
      ],
      "code": "model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');\nmodel.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');\nmodel.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});\nmodel.sol('sol1').feature('s1').feature.remove('fcDef');\nmodel.sol('sol1').feature('s1').feature.remove('seDef');\nmodel.sol('sol1').attach('std1');"
    },
    {
      "segment_id": 241,
      "start_line": 400,
      "end_line": 404,
      "code_description": "Creates a 3D plot group for displacement and sets the data source and plot type",
      "modeling_purpose": "To visualize the displacement of the MEMS resonator under applied bias",
      "comsol_ids": [
        "pg1"
      ],
      "category": "results",
      "key_operations": [
        "create plot group",
        "set data source",
        "set plot type"
      ],
      "code": "model.result.create('pg1', 'PlotGroup3D');\nmodel.result('pg1').set('data', 'dset1');\nmodel.result('pg1').set('defaultPlotID', 'displacement');\nmodel.result('pg1').label('Displacement (solid)');\nmodel.result('pg1').set('frametype', 'spatial');"
    },
    {
      "segment_id": 242,
      "start_line": 405,
      "end_line": 411,
      "code_description": "Creates a volume plot of the solid displacement field with custom threshold and color table settings",
      "modeling_purpose": "Visualizing the displacement field of the biased resonator under electrostatic actuation",
      "comsol_ids": [
        "pg1",
        "vol1"
      ],
      "category": "results",
      "key_operations": [
        "create volume plot",
        "set threshold and color table"
      ],
      "code": "model.result('pg1').create('vol1', 'Volume');\nmodel.result('pg1').feature('vol1').set('expr', {'solid.disp'});\nmodel.result('pg1').feature('vol1').set('threshold', 'manual');\nmodel.result('pg1').feature('vol1').set('thresholdvalue', 0.2);\nmodel.result('pg1').feature('vol1').set('resolution', 'custom');\nmodel.result('pg1').feature('vol1').set('refine', 2);\nmodel.result('pg1').feature('vol1').set('colortable', 'SpectrumLight');"
    },
    {
      "segment_id": 243,
      "start_line": 412,
      "end_line": 417,
      "code_description": "Creates a 3D plot group for electric potential and sets its properties",
      "modeling_purpose": "To visualize the electric potential distribution in the MEMS resonator under applied bias",
      "comsol_ids": [
        "pg2"
      ],
      "category": "results",
      "key_operations": [
        "create plot group",
        "set plot properties"
      ],
      "code": "model.result.create('pg2', 'PlotGroup3D');\nmodel.result('pg2').label('Electric Potential (es)');\nmodel.result('pg2').set('frametype', 'spatial');\nmodel.result('pg2').set('showlegendsmaxmin', true);\nmodel.result('pg2').set('data', 'dset1');\nmodel.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');"
    },
    {
      "segment_id": 244,
      "start_line": 418,
      "end_line": 430,
      "code_description": "Creates a multislice plot of the electrostatic potential (V) in the resonator",
      "modeling_purpose": "Visualizing the electrostatic potential distribution in the resonator at different bias voltages",
      "comsol_ids": [
        "pg2",
        "mslc1"
      ],
      "category": "results",
      "key_operations": [
        "create_multislice_plot",
        "set_multislice_parameters"
      ],
      "code": "model.result('pg2').feature.create('mslc1', 'Multislice');\nmodel.result('pg2').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('mslc1').set('solutionparams', 'parent');\nmodel.result('pg2').feature('mslc1').set('expr', 'V');\nmodel.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');\nmodel.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');\nmodel.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');\nmodel.result('pg2').feature('mslc1').set('colortable', 'Dipole');\nmodel.result('pg2').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('mslc1').set('data', 'parent');"
    },
    {
      "segment_id": 245,
      "start_line": 431,
      "end_line": 456,
      "code_description": "Creates a streamline plot of the electric field in the resonator",
      "modeling_purpose": "Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias",
      "comsol_ids": [
        "pg2",
        "strmsl1"
      ],
      "category": "results",
      "key_operations": [
        "create_streamline_plot",
        "set_streamline_parameters"
      ],
      "code": "model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('solutionparams', 'parent');\nmodel.result('pg2').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});\nmodel.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');\nmodel.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');\nmodel.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');\nmodel.result('pg2').feature('strmsl1').set('titletype', 'none');\nmodel.result('pg2').feature('strmsl1').set('posmethod', 'uniform');\nmodel.result('pg2').feature('strmsl1').set('udist', 0.02);\nmodel.result('pg2').feature('strmsl1').set('maxlen', 0.4);\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('inheritcolor', false);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('data', 'parent');\nmodel.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');"
    },
    {
      "segment_id": 246,
      "start_line": 457,
      "end_line": 460,
      "code_description": "Creates a color expression for the results plot and sets its properties",
      "modeling_purpose": "To visualize the voltage distribution across the MEMS resonator under applied bias",
      "comsol_ids": [
        "pg2",
        "strmsl1",
        "col1"
      ],
      "category": "results",
      "key_operations": [
        "create color expression",
        "set color expression properties"
      ],
      "code": "model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('expr', 'V');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);"
    },
    {
      "segment_id": 247,
      "start_line": 461,
      "end_line": 462,
      "code_description": "Creates a filter for the results to exclude the scaling system domain",
      "modeling_purpose": "This step is needed to filter out the scaling system domain from the results, which is not relevant for the analysis of the resonator's behavior",
      "comsol_ids": [
        "pg2",
        "strmsl1",
        "filt1"
      ],
      "category": "results",
      "key_operations": [
        "create filter",
        "set filter expression"
      ],
      "code": "model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');\nmodel.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');"
    },
    {
      "segment_id": 248,
      "start_line": 463,
      "end_line": 468,
      "code_description": "Creates a 3D plot group for the electric field norm and sets its properties.",
      "modeling_purpose": "To visualize the electric field norm distribution in the MEMS resonator under applied bias.",
      "comsol_ids": [
        "pg3"
      ],
      "category": "results",
      "key_operations": [
        "create plot group",
        "set plot properties"
      ],
      "code": "model.result.create('pg3', 'PlotGroup3D');\nmodel.result('pg3').label('Electric Field Norm (es)');\nmodel.result('pg3').set('frametype', 'spatial');\nmodel.result('pg3').set('showlegendsmaxmin', true);\nmodel.result('pg3').set('data', 'dset1');\nmodel.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');"
    },
    {
      "segment_id": 249,
      "start_line": 469,
      "end_line": 483,
      "code_description": "Creates a multislice plot of the electric field norm in the resonator",
      "modeling_purpose": "Visualizing the electric field distribution for different bias voltages",
      "comsol_ids": [
        "pg3",
        "mslc1"
      ],
      "category": "results",
      "key_operations": [
        "create_multislice_plot",
        "set_plot_options"
      ],
      "code": "model.result('pg3').feature.create('mslc1', 'Multislice');\nmodel.result('pg3').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('mslc1').set('solutionparams', 'parent');\nmodel.result('pg3').feature('mslc1').set('expr', 'es.normE');\nmodel.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('xcoord', 'es.CPx');\nmodel.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('ycoord', 'es.CPy');\nmodel.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('zcoord', 'es.CPz');\nmodel.result('pg3').feature('mslc1').set('colortable', 'Prism');\nmodel.result('pg3').feature('mslc1').set('colortabletrans', 'nonlinear');\nmodel.result('pg3').feature('mslc1').set('colorcalibration', -0.8);\nmodel.result('pg3').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('mslc1').set('data', 'parent');"
    },
    {
      "segment_id": 250,
      "start_line": 484,
      "end_line": 509,
      "code_description": "Creates a streamline plot of the electric field in the resonator",
      "modeling_purpose": "Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias",
      "comsol_ids": [
        "pg3",
        "strmsl1"
      ],
      "category": "results",
      "key_operations": [
        "create_streamline_plot",
        "set_streamline_parameters"
      ],
      "code": "model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('solutionparams', 'parent');\nmodel.result('pg3').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});\nmodel.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('xcoord', 'es.CPx');\nmodel.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('ycoord', 'es.CPy');\nmodel.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('zcoord', 'es.CPz');\nmodel.result('pg3').feature('strmsl1').set('titletype', 'none');\nmodel.result('pg3').feature('strmsl1').set('posmethod', 'uniform');\nmodel.result('pg3').feature('strmsl1').set('udist', 0.02);\nmodel.result('pg3').feature('strmsl1').set('maxlen', 0.4);\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('inheritcolor', false);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('data', 'parent');\nmodel.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');"
    },
    {
      "segment_id": 251,
      "start_line": 510,
      "end_line": 515,
      "code_description": "Creates a color expression for the electric field norm and sets its properties",
      "modeling_purpose": "To visualize the electric field distribution in the resonator under applied bias",
      "comsol_ids": [
        "pg3",
        "strmsl1",
        "col1"
      ],
      "category": "results",
      "key_operations": [
        "create color expression",
        "set color properties"
      ],
      "code": "model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('expr', 'es.normE');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);"
    },
    {
      "segment_id": 252,
      "start_line": 516,
      "end_line": 521,
      "code_description": "Creates a filter for the results and runs the solution and result group",
      "modeling_purpose": "Filtering the results to exclude scaling system domains and running the solution to obtain the normal mode shapes and frequencies",
      "comsol_ids": [
        "pg3",
        "strmsl1",
        "filt1",
        "sol1",
        "pg1"
      ],
      "category": "results|study",
      "key_operations": [
        "create_filter",
        "run_solution",
        "run_result_group"
      ],
      "code": "model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');\nmodel.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');\n\nmodel.sol('sol1').runAll;\n\nmodel.result('pg1').run;"
    },
    {
      "segment_id": 253,
      "start_line": 522,
      "end_line": 522,
      "code_description": "Creates a mirrored dataset of the 3D results",
      "modeling_purpose": "To analyze the symmetry of the resonator's mode shapes",
      "comsol_ids": [
        "mir1"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "mirror"
      ],
      "code": "model.result.dataset.create('mir1', 'Mirror3D');"
    },
    {
      "segment_id": 254,
      "start_line": 523,
      "end_line": 525,
      "code_description": "Creates a 3D plot group, runs it, and sets the data to 'mir1'",
      "modeling_purpose": "To visualize the normal mode shapes and frequencies of the biased MEMS resonator",
      "comsol_ids": [
        "pg4",
        "mir1"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "run",
        "set"
      ],
      "code": "model.result.create('pg4', 'PlotGroup3D');\nmodel.result('pg4').run;\nmodel.result('pg4').set('data', 'mir1');"
    },
    {
      "segment_id": 255,
      "start_line": 526,
      "end_line": 530,
      "code_description": "Creates a volume plot of the Z-component of the displacement field",
      "modeling_purpose": "Visualizing the displacement field to analyze the resonator's behavior under applied bias",
      "comsol_ids": [
        "pg4",
        "vol1"
      ],
      "category": "results",
      "key_operations": [
        "create volume plot",
        "set expression",
        "set description",
        "set color table"
      ],
      "code": "model.result('pg4').create('vol1', 'Volume');\nmodel.result('pg4').feature('vol1').set('expr', 'w');\nmodel.result('pg4').feature('vol1').set('descr', 'Displacement field, Z-component');\nmodel.result('pg4').feature('vol1').set('colortabletrans', 'reverse');\nmodel.result('pg4').run;"
    },
    {
      "segment_id": 256,
      "start_line": 531,
      "end_line": 540,
      "code_description": "Creates an isosurface plot of the electric potential in the biased resonator model",
      "modeling_purpose": "Visualizing the distribution of electric potential across the resonator at different bias levels",
      "comsol_ids": [
        "pg4",
        "iso1"
      ],
      "category": "results",
      "key_operations": [
        "create isosurface",
        "set isosurface properties"
      ],
      "code": "model.result('pg4').create('iso1', 'Isosurface');\nmodel.result('pg4').feature('iso1').set('expr', 'V');\nmodel.result('pg4').feature('iso1').set('descr', 'Electric potential');\nmodel.result('pg4').feature('iso1').set('levelmethod', 'levels');\nmodel.result('pg4').feature('iso1').set('levels', '10 20 30');\nmodel.result('pg4').feature('iso1').set('colortable', 'Traffic');\nmodel.result('pg4').feature('iso1').set('colorlegend', false);\nmodel.result('pg4').run;\nmodel.result('pg4').label('Biased Displacement');"
    },
    {
      "segment_id": 257,
      "start_line": 541,
      "end_line": 568,
      "code_description": "Creates a new 3D view, sets camera properties for an existing view, and runs the stationary analysis of a biased resonator model",
      "modeling_purpose": "To visualize and analyze the deformation of the resonator under an applied DC bias",
      "comsol_ids": [
        "view4",
        "view3",
        "pg4"
      ],
      "category": "results",
      "key_operations": [
        "create_view",
        "set_camera_properties",
        "run_stationary_analysis"
      ],
      "code": "model.view.create('view4', 3);\nmodel.view('view3').set('locked', true);\nmodel.view('view3').camera.set('zoomanglefull', 22);\nmodel.view('view3').camera.setIndex('position', 130.13919, 0);\nmodel.view('view3').camera.setIndex('position', 147.58559, 1);\nmodel.view('view3').camera.setIndex('position', 111.8392, 2);\nmodel.view('view3').camera.setIndex('target', 19.45, 0);\nmodel.view('view3').camera.set('target', [19.45 0 1.15]);\nmodel.view('view3').camera.setIndex('up', 0.3087, 0);\nmodel.view('view3').camera.setIndex('up', 0.4116, 1);\nmodel.view('view3').camera.setIndex('up', 0.85749, 2);\nmodel.view('view3').camera.setIndex('rotationpoint', -19.45, 0);\nmodel.view('view3').camera.setIndex('rotationpoint', 1.15, 2);\nmodel.view('view3').camera.setIndex('viewoffset', -0.2, 0);\nmodel.view('view3').camera.set('viewoffset', [-0.2 -0.1]);\n\nmodel.result('pg4').run;\nmodel.result('pg4').set('view', 'view3');\nmodel.result('pg4').run;\n\nmodel.title(['Stationary Analysis of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 3D']);\n\nmodel.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the deformation of the resonator is computed with an applied DC bias.');\n\nmodel.label('biased_resonator_3d_basic.mph');\n\nmodel.result('pg4').run;"
    },
    {
      "segment_id": 258,
      "start_line": 569,
      "end_line": 569,
      "code_description": "Runs the geometry sequence 'ext1' in the geometry 'geom1'",
      "modeling_purpose": "This step is needed to execute the geometry sequence and create the geometry for the MEMS resonator simulation",
      "comsol_ids": [
        "geom1",
        "ext1"
      ],
      "category": "geometry",
      "key_operations": [
        "run"
      ],
      "code": "model.geom('geom1').run('ext1');"
    },
    {
      "segment_id": 259,
      "start_line": 570,
      "end_line": 570,
      "code_description": "Creates a mirror geometry feature named 'mir1' in the geometry 'geom1'",
      "modeling_purpose": "This step is needed to create a symmetric geometry for the MEMS resonator, reducing the computational domain and speeding up the simulation",
      "comsol_ids": [
        "geom1",
        "mir1"
      ],
      "category": "geometry",
      "key_operations": [
        "create",
        "mirror"
      ],
      "code": "model.geom('geom1').create('mir1', 'Mirror');"
    },
    {
      "segment_id": 260,
      "start_line": 571,
      "end_line": 571,
      "code_description": "Sets the axis of the mirror feature 'mir1' in geometry 'geom1' to [1, 0, 0].",
      "modeling_purpose": "This step is needed to define the orientation of the mirror feature used in the geometry of the MEMS resonator simulation.",
      "comsol_ids": [
        "geom1",
        "mir1"
      ],
      "category": "geometry",
      "key_operations": [
        "set",
        "axis"
      ],
      "code": "model.geom('geom1').feature('mir1').set('axis', [1 0 0]);"
    },
    {
      "segment_id": 261,
      "start_line": 572,
      "end_line": 572,
      "code_description": "Sets the selection for the mirror feature 'mir1' in geometry 'geom1' to include 'blk1' and 'ext1' entities.",
      "modeling_purpose": "This step is needed to define the symmetry of the model, which helps reduce the computational domain and speed up the simulation.",
      "comsol_ids": [
        "geom1",
        "mir1"
      ],
      "category": "geometry",
      "key_operations": [
        "set selection"
      ],
      "code": "model.geom('geom1').feature('mir1').selection('input').set({'blk1' 'ext1'});"
    },
    {
      "segment_id": 262,
      "start_line": 573,
      "end_line": 573,
      "code_description": "This code keeps the symmetry feature 'mir1' in geometry 'geom1'.",
      "modeling_purpose": "This step is needed to maintain the symmetry of the resonator model for accurate simulation.",
      "comsol_ids": [
        "geom1",
        "mir1"
      ],
      "category": "geometry",
      "key_operations": [
        "set",
        "keep"
      ],
      "code": "model.geom('geom1').feature('mir1').set('keep', true);"
    },
    {
      "segment_id": 263,
      "start_line": 574,
      "end_line": 577,
      "code_description": "Runs the pre-built geometry sequence and sets the view to render wireframe",
      "modeling_purpose": "To prepare the geometry for the simulation and set up the visualization",
      "comsol_ids": [
        "geom1",
        "view1"
      ],
      "category": "geometry|results",
      "key_operations": [
        "runPre",
        "set"
      ],
      "code": "model.geom('geom1').runPre('fin');\n\nmodel.view('view1').set('renderwireframe', true);"
    },
    {
      "segment_id": 264,
      "start_line": 578,
      "end_line": 579,
      "code_description": "Runs the geometry sequence named 'geom1'",
      "modeling_purpose": "To create the geometry of the MEMS resonator for the simulation",
      "comsol_ids": [
        "geom1"
      ],
      "category": "geometry",
      "key_operations": [
        "run"
      ],
      "code": "model.geom('geom1').run;"
    },
    {
      "segment_id": 265,
      "start_line": 580,
      "end_line": 589,
      "code_description": "Creates an interpolation function from an external file and sets its properties",
      "modeling_purpose": "To import experimental data for comparison with simulation results",
      "comsol_ids": [
        "int1"
      ],
      "category": "results",
      "key_operations": [
        "create interpolation function",
        "set properties"
      ],
      "code": "model.func.create('int1', 'Interpolation');\nmodel.func('int1').model('comp1');\nmodel.func('int1').set('source', 'file');\nmodel.func('int1').set('filename', 'biased_resonator_3d_modes_experiment.txt');\nmodel.func('int1').importData;\nmodel.func('int1').setIndex('argunit', 'Hz', 0);\nmodel.func('int1').setIndex('fununit', 'V', 0);\nmodel.func('int1').set('extrap', 'value');\nmodel.func('int1').set('extrapvalue', NaN);"
    },
    {
      "segment_id": 266,
      "start_line": 590,
      "end_line": 591,
      "code_description": "Deactivates the symmetry boundary condition for the solid mechanics physics interface",
      "modeling_purpose": "This step is needed to control the symmetry settings for the solid mechanics physics interface in the simulation",
      "comsol_ids": [
        "solid",
        "sym1"
      ],
      "category": "physics",
      "key_operations": [
        "deactivate"
      ],
      "code": "model.physics('solid').feature('sym1').active(false);"
    },
    {
      "segment_id": 267,
      "start_line": 592,
      "end_line": 592,
      "code_description": "Sets a custom mesh size for the model",
      "modeling_purpose": "To control the mesh resolution for accurate results in the simulation of the MEMS resonator",
      "comsol_ids": [
        "mesh1",
        "size"
      ],
      "category": "mesh",
      "key_operations": [
        "set",
        "custom"
      ],
      "code": "model.mesh('mesh1').feature('size').set('custom', true);"
    },
    {
      "segment_id": 268,
      "start_line": 593,
      "end_line": 593,
      "code_description": "Sets the minimum mesh size to 1 for the mesh named 'mesh1' in the model",
      "modeling_purpose": "This step is needed to control the mesh quality and ensure accurate results in the simulation of the MEMS resonator",
      "comsol_ids": [
        "mesh1",
        "size"
      ],
      "category": "mesh",
      "key_operations": [
        "set",
        "hmin"
      ],
      "code": "model.mesh('mesh1').feature('size').set('hmin', 1);"
    },
    {
      "segment_id": 269,
      "start_line": 594,
      "end_line": 595,
      "code_description": "Runs the meshing sequence named 'mesh1' to generate the mesh for the model",
      "modeling_purpose": "Meshing is required to discretize the geometry for accurate simulation and analysis",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "run"
      ],
      "code": "model.mesh('mesh1').run;"
    },
    {
      "segment_id": 270,
      "start_line": 596,
      "end_line": 596,
      "code_description": "Creates a new study with the identifier 'std2'",
      "modeling_purpose": "To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "std2"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study.create('std2');"
    },
    {
      "segment_id": 271,
      "start_line": 597,
      "end_line": 597,
      "code_description": "Creates an eigenfrequency study for the model",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study('std2').create('eig', 'Eigenfrequency');"
    },
    {
      "segment_id": 272,
      "start_line": 598,
      "end_line": 598,
      "code_description": "Sets the plot group to 'Default' for the eigenvalue study",
      "modeling_purpose": "This step is needed to specify the plot settings for the eigenvalue study in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('plotgroup', 'Default');"
    },
    {
      "segment_id": 273,
      "start_line": 599,
      "end_line": 599,
      "code_description": "Sets the shift value to 1 Hz for the eigenfrequency study",
      "modeling_purpose": "To compute the normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('shift', '1[Hz]');"
    },
    {
      "segment_id": 274,
      "start_line": 600,
      "end_line": 600,
      "code_description": "Enables the check for eigenfrequency region in the study settings",
      "modeling_purpose": "To ensure the eigenfrequency analysis is performed within the specified frequency range",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('chkeigregion', true);"
    },
    {
      "segment_id": 275,
      "start_line": 601,
      "end_line": 601,
      "code_description": "Sets the convergence criterion for the eigenvalue solver to 1",
      "modeling_purpose": "This step is needed to control the accuracy of the eigenvalue solver in the study",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('conrad', '1');"
    },
    {
      "segment_id": 276,
      "start_line": 602,
      "end_line": 602,
      "code_description": "Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "modeling_purpose": "This step is needed to use the Conard-Dyn-HM solver for solving the eigenvalue problem in the study, which will compute the normal mode shapes and frequencies of the biased resonator",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('conradynhm', '1')"
      ],
      "code": "model.study('std2').feature('eig').set('conradynhm', '1');"
    },
    {
      "segment_id": 277,
      "start_line": 603,
      "end_line": 603,
      "code_description": "Disables the storage of the factorization of the stiffness matrix for the eigenvalue solver in study 'std2'.",
      "modeling_purpose": "This step is needed to reduce memory usage during the simulation, as the factorization of the stiffness matrix is not required for subsequent computations.",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('storefact', false)"
      ],
      "code": "model.study('std2').feature('eig').set('storefact', false);"
    },
    {
      "segment_id": 278,
      "start_line": 604,
      "end_line": 604,
      "code_description": "Sets the linear solver to be used for the eigenvalue study",
      "modeling_purpose": "Determines the solver for finding the normal mode shapes and frequencies of the biased resonator",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('linpsolnum', 'auto');"
    },
    {
      "segment_id": 279,
      "start_line": 605,
      "end_line": 605,
      "code_description": "Sets the number of eigenfrequencies to compute automatically",
      "modeling_purpose": "Determines the number of eigenfrequencies to be calculated for the resonator modes",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('solnum', 'auto')"
      ],
      "code": "model.study('std2').feature('eig').set('solnum', 'auto');"
    },
    {
      "segment_id": 280,
      "start_line": 606,
      "end_line": 606,
      "code_description": "Sets the number of eigenfrequencies to compute in the eigenfrequency study",
      "modeling_purpose": "Determines the number of resonant frequencies to be calculated for the MEMS resonator under varying bias conditions",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('notsolnum', 'auto');"
    },
    {
      "segment_id": 281,
      "start_line": 607,
      "end_line": 607,
      "code_description": "Sets the output map for the eigenvalue study to an empty object",
      "modeling_purpose": "This step is needed to clear any previous output settings for the eigenvalue study in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('outputmap', {});"
    },
    {
      "segment_id": 282,
      "start_line": 608,
      "end_line": 608,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "Needed to determine the number of resonant modes to analyze in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('ngenAUX', '1');"
    },
    {
      "segment_id": 283,
      "start_line": 609,
      "end_line": 609,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "This step is needed to determine the number of resonant modes to analyze in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 284,
      "start_line": 610,
      "end_line": 610,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "This step is needed to determine the number of resonant modes to be calculated for the MEMS resonator under the applied bias voltage",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('ngenAUX', '1')"
      ],
      "code": "model.study('std2').feature('eig').set('ngenAUX', '1');"
    },
    {
      "segment_id": 285,
      "start_line": 611,
      "end_line": 611,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "Needed to determine the number of resonant modes to analyze in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 286,
      "start_line": 612,
      "end_line": 612,
      "code_description": "Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "modeling_purpose": "This step is needed to include the mechanical behavior of the resonator in the eigenfrequency analysis, which will provide the normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std2').feature('eig').setSolveFor('/physics/solid', true);"
    },
    {
      "segment_id": 287,
      "start_line": 613,
      "end_line": 613,
      "code_description": "Sets the solver to compute the electrostatic physics in the eigenfrequency study",
      "modeling_purpose": "This step is needed to calculate the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std2').feature('eig').setSolveFor('/physics/es', true);"
    },
    {
      "segment_id": 288,
      "start_line": 614,
      "end_line": 615,
      "code_description": "Sets the solver to compute the eigenfrequencies and mode shapes for the electrostatic MEMS resonator",
      "modeling_purpose": "To determine the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "comsol_ids": [
        "std2",
        "eme1"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std2').feature('eig').setSolveFor('/multiphysics/eme1', true);"
    },
    {
      "segment_id": 289,
      "start_line": 616,
      "end_line": 617,
      "code_description": "Creates a ParticipationFactors feature named 'mpf1' under component 'comp1' to compute the participation factors for the resonator modes",
      "modeling_purpose": "To analyze the contribution of each mode shape to the overall resonator response under electrostatic actuation",
      "comsol_ids": [
        "mpf1",
        "comp1"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "ParticipationFactors"
      ],
      "code": "model.common.create('mpf1', 'ParticipationFactors', 'comp1');"
    },
    {
      "segment_id": 290,
      "start_line": 618,
      "end_line": 618,
      "code_description": "Activates the eigenvalue solver to compute the normal mode shapes and frequencies of the MEMS resonator",
      "modeling_purpose": "To determine the resonant frequencies and mode shapes of the device under varying bias conditions",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('neigsactive', true)"
      ],
      "code": "model.study('std2').feature('eig').set('neigsactive', true);"
    },
    {
      "segment_id": 291,
      "start_line": 619,
      "end_line": 619,
      "code_description": "Sets the number of eigenvalues to compute in the eigenvalue study",
      "modeling_purpose": "Determines the number of resonant modes to be calculated for the biased resonator",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std2').feature('eig').set('neigs', 3);"
    },
    {
      "segment_id": 292,
      "start_line": 620,
      "end_line": 620,
      "code_description": "Disables the output of the electric potential (es) field in the eigenfrequency study",
      "modeling_purpose": "This step is needed to reduce the amount of output data and improve computational efficiency",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setEntry"
      ],
      "code": "model.study('std2').feature('eig').setEntry('outputmap', 'es', 'none');"
    },
    {
      "segment_id": 293,
      "start_line": 621,
      "end_line": 622,
      "code_description": "Sets the output map for the eigenvalue study to none for the spatial frame 1",
      "modeling_purpose": "This step is needed to control the output settings for the eigenvalue study in the simulation",
      "comsol_ids": [
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setEntry"
      ],
      "code": "model.study('std2').feature('eig').setEntry('outputmap', 'frame:spatial1', 'none');"
    },
    {
      "segment_id": 294,
      "start_line": 623,
      "end_line": 624,
      "code_description": "Creates a new solution sequence called 'sol2' in the model",
      "modeling_purpose": "To prepare for solving the model with different parameters or settings",
      "comsol_ids": [
        "sol2"
      ],
      "category": "study",
      "key_operations": [
        "create_solution_sequence"
      ],
      "code": "model.sol.create('sol2');"
    },
    {
      "segment_id": 295,
      "start_line": 625,
      "end_line": 625,
      "code_description": "Selects the geometry entity with tag 3 for meshing",
      "modeling_purpose": "This step is needed to define the meshing for the selected geometry entity in the simulation",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "select",
        "mesh"
      ],
      "code": "model.mesh('mesh1').stat.selection.geom(3);"
    },
    {
      "segment_id": 296,
      "start_line": 626,
      "end_line": 627,
      "code_description": "Sets the mesh selection for specific elements in the model",
      "modeling_purpose": "To control the mesh quality and density in specific regions of the device for accurate results",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "set mesh selection"
      ],
      "code": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);"
    },
    {
      "segment_id": 297,
      "start_line": 628,
      "end_line": 628,
      "code_description": "Selects the solution 'sol2' and study 'std2' for further analysis or modifications",
      "modeling_purpose": "To set up the solver settings and study steps for the normal mode analysis of the biased resonator",
      "comsol_ids": [
        "sol2",
        "std2"
      ],
      "category": "study",
      "key_operations": [
        "select_solution",
        "select_study"
      ],
      "code": "model.sol('sol2').study('std2');"
    },
    {
      "segment_id": 298,
      "start_line": 629,
      "end_line": 631,
      "code_description": "Creates a study step for eigenfrequency analysis in the solution sequence",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol2",
        "st1",
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "create_study_step",
        "set_study",
        "set_studystep"
      ],
      "code": "model.sol('sol2').create('st1', 'StudyStep');\nmodel.sol('sol2').feature('st1').set('study', 'std2');\nmodel.sol('sol2').feature('st1').set('studystep', 'eig');"
    },
    {
      "segment_id": 299,
      "start_line": 632,
      "end_line": 637,
      "code_description": "Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "modeling_purpose": "To analyze the resonant behavior of the MEMS device under different bias voltages",
      "comsol_ids": [
        "sol2",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ],
      "category": "study",
      "key_operations": [
        "create variables",
        "set scaling method",
        "set scaling value",
        "set control to eigenvalue"
      ],
      "code": "model.sol('sol2').create('v1', 'Variables');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').set('control', 'eig');"
    },
    {
      "segment_id": 300,
      "start_line": 638,
      "end_line": 645,
      "code_description": "Creates an eigenvalue solver and sets various parameters for the eigenvalue analysis",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol2",
        "e1"
      ],
      "category": "study",
      "key_operations": [
        "create eigenvalue solver",
        "set eigenvalue solver parameters"
      ],
      "code": "model.sol('sol2').create('e1', 'Eigenvalue');\nmodel.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol2').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol2').feature('e1').set('storelinpoint', true);\nmodel.sol('sol2').feature('e1').set('control', 'eig');\nmodel.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol2').attach('std2');"
    },
    {
      "segment_id": 301,
      "start_line": 646,
      "end_line": 646,
      "code_description": "Sets the label of the study 'std2' to 'Unbiased Eigenfrequency'",
      "modeling_purpose": "This step is needed to identify the study that computes the eigenfrequencies of the unbiased resonator",
      "comsol_ids": [
        "std2"
      ],
      "category": "study",
      "key_operations": [
        "set_label"
      ],
      "code": "model.study('std2').label('Unbiased Eigenfrequency');"
    },
    {
      "segment_id": 302,
      "start_line": 647,
      "end_line": 648,
      "code_description": "Disables the generation of plots for the study 'std2'",
      "modeling_purpose": "This step is needed to reduce the computational load and output file size by not generating plots for this study",
      "comsol_ids": [
        "std2"
      ],
      "category": "study",
      "key_operations": [
        "setGenPlots"
      ],
      "code": "model.study('std2').setGenPlots(false);"
    },
    {
      "segment_id": 303,
      "start_line": 649,
      "end_line": 649,
      "code_description": "Selects the geometry entity with tag 3 for meshing",
      "modeling_purpose": "This step is needed to define the meshing for the selected geometry entity in the simulation",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "selection",
        "meshing"
      ],
      "code": "model.mesh('mesh1').stat.selection.geom(3);"
    },
    {
      "segment_id": 304,
      "start_line": 650,
      "end_line": 651,
      "code_description": "Sets the mesh selection for specific elements in the model",
      "modeling_purpose": "This step is needed to refine the mesh in specific regions of the device for accurate simulation results",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "set mesh selection"
      ],
      "code": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);"
    },
    {
      "segment_id": 305,
      "start_line": 652,
      "end_line": 655,
      "code_description": "Removes unnecessary features from the solution 'sol2' in study 'std2'",
      "modeling_purpose": "Simplifies the model by removing unused features to optimize the simulation",
      "comsol_ids": [
        "sol2",
        "std2"
      ],
      "category": "study",
      "key_operations": [
        "remove features"
      ],
      "code": "model.sol('sol2').study('std2');\nmodel.sol('sol2').feature.remove('e1');\nmodel.sol('sol2').feature.remove('v1');\nmodel.sol('sol2').feature.remove('st1');"
    },
    {
      "segment_id": 306,
      "start_line": 656,
      "end_line": 658,
      "code_description": "Creates a study step for eigenfrequency analysis in the solution sequence",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol2",
        "st1",
        "std2",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "create_study_step",
        "set_study",
        "set_studystep"
      ],
      "code": "model.sol('sol2').create('st1', 'StudyStep');\nmodel.sol('sol2').feature('st1').set('study', 'std2');\nmodel.sol('sol2').feature('st1').set('studystep', 'eig');"
    },
    {
      "segment_id": 307,
      "start_line": 659,
      "end_line": 664,
      "code_description": "Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "modeling_purpose": "To analyze the resonant behavior of the MEMS device under different bias voltages",
      "comsol_ids": [
        "sol2",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ],
      "category": "study",
      "key_operations": [
        "create variables",
        "set scaling methods",
        "set scaling values",
        "set control to eigenvalue"
      ],
      "code": "model.sol('sol2').create('v1', 'Variables');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').set('control', 'eig');"
    },
    {
      "segment_id": 308,
      "start_line": 665,
      "end_line": 674,
      "code_description": "Creates an eigenvalue solver, sets its parameters, and runs the solver to compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "modeling_purpose": "To determine the resonant frequencies and mode shapes of the MEMS resonator under different bias voltages for engineering simulation and analysis",
      "comsol_ids": [
        "sol2",
        "e1",
        "std2",
        "dset2"
      ],
      "category": "study",
      "key_operations": [
        "create eigenvalue solver",
        "set solver parameters",
        "run solver"
      ],
      "code": "model.sol('sol2').create('e1', 'Eigenvalue');\nmodel.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol2').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol2').feature('e1').set('storelinpoint', true);\nmodel.sol('sol2').feature('e1').set('control', 'eig');\nmodel.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol2').attach('std2');\nmodel.sol('sol2').runAll;\n\nmodel.result.dataset('dset2').set('frametype', 'material');"
    },
    {
      "segment_id": 309,
      "start_line": 675,
      "end_line": 677,
      "code_description": "Creates a 3D plot group, runs it, and sets the data to dataset 2",
      "modeling_purpose": "To visualize the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "pg5",
        "dset2"
      ],
      "category": "results",
      "key_operations": [
        "create_plot_group",
        "run_plot_group",
        "set_data"
      ],
      "code": "model.result.create('pg5', 'PlotGroup3D');\nmodel.result('pg5').run;\nmodel.result('pg5').set('data', 'dset2');"
    },
    {
      "segment_id": 310,
      "start_line": 678,
      "end_line": 681,
      "code_description": "Creates a volume plot of the displacement magnitude in the results",
      "modeling_purpose": "To visualize the displacement magnitude of the resonator under the applied bias voltage",
      "comsol_ids": [
        "pg5",
        "vol1"
      ],
      "category": "results",
      "key_operations": [
        "create volume plot",
        "set expression to displacement magnitude",
        "disable color legend"
      ],
      "code": "model.result('pg5').create('vol1', 'Volume');\nmodel.result('pg5').feature('vol1').set('expr', 'solid.disp');\nmodel.result('pg5').feature('vol1').set('descr', 'Displacement magnitude');\nmodel.result('pg5').feature('vol1').set('colorlegend', false);"
    },
    {
      "segment_id": 311,
      "start_line": 682,
      "end_line": 690,
      "code_description": "Creates a deformation plot for the unbiased modes of the resonator and runs the solver for different loop levels",
      "modeling_purpose": "To analyze the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "comsol_ids": [
        "pg5",
        "vol1",
        "def1"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "run",
        "set",
        "label"
      ],
      "code": "model.result('pg5').feature('vol1').create('def1', 'Deform');\nmodel.result('pg5').run;\nmodel.result('pg5').run;\nmodel.result('pg5').label('Unbiased Modes');\nmodel.result('pg5').set('looplevel', [2]);\nmodel.result('pg5').run;\nmodel.result('pg5').set('looplevel', [3]);\nmodel.result('pg5').run;"
    },
    {
      "segment_id": 312,
      "start_line": 691,
      "end_line": 691,
      "code_description": "Creates a new study with the identifier 'std3'",
      "modeling_purpose": "To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study.create('std3');"
    },
    {
      "segment_id": 313,
      "start_line": 692,
      "end_line": 692,
      "code_description": "Creates a stationary study for the model",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the biased resonator as a function of applied bias",
      "comsol_ids": [
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study('std3').create('stat', 'Stationary');"
    },
    {
      "segment_id": 314,
      "start_line": 693,
      "end_line": 693,
      "code_description": "Sets the plot group to 'Default' for the stationary solver in study 'std3'.",
      "modeling_purpose": "This step is needed to configure the plot settings for the stationary solver in the study, which will be used to analyze the results of the simulation.",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set('plotgroup', 'Default')"
      ],
      "code": "model.study('std3').feature('stat').set('plotgroup', 'Default');"
    },
    {
      "segment_id": 315,
      "start_line": 694,
      "end_line": 694,
      "code_description": "Sets the output map for the stationary solver in study 3",
      "modeling_purpose": "This step is needed to configure the output settings for the stationary solver, which will be used to compute the normal mode shapes and frequencies of the MEMS resonator under the applied bias voltage",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('stat').set('outputmap', {});"
    },
    {
      "segment_id": 316,
      "start_line": 695,
      "end_line": 695,
      "code_description": "Sets the number of eigenfrequencies to compute in the stationary solver",
      "modeling_purpose": "Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set('ngenAUX', '1')"
      ],
      "code": "model.study('std3').feature('stat').set('ngenAUX', '1');"
    },
    {
      "segment_id": 317,
      "start_line": 696,
      "end_line": 696,
      "code_description": "Sets the goal generation for the auxiliary sweep in the stationary study",
      "modeling_purpose": "To optimize the convergence of the solver for the given bias voltage sweep",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set goal generation"
      ],
      "code": "model.study('std3').feature('stat').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 318,
      "start_line": 697,
      "end_line": 697,
      "code_description": "Sets the number of auxiliary sweeps to 1 for the stationary solver in study 3",
      "modeling_purpose": "This step is needed to configure the solver settings for the stationary study in the multi-physics simulation of the MEMS resonator",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('stat').set('ngenAUX', '1');"
    },
    {
      "segment_id": 319,
      "start_line": 698,
      "end_line": 698,
      "code_description": "Sets the goal generation for the auxiliary sweep in the stationary study",
      "modeling_purpose": "To control the generation of the auxiliary sweep for the bias voltage analysis",
      "comsol_ids": [
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "set goal generation"
      ],
      "code": "model.study('std3').feature('stat').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 320,
      "start_line": 699,
      "end_line": 699,
      "code_description": "Sets the solver to compute the solid mechanics physics in the static study",
      "modeling_purpose": "This step is needed to include the structural deformation in the analysis due to the applied bias voltage",
      "comsol_ids": [
        "std3",
        "solid"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('stat').setSolveFor('/physics/solid', true);"
    },
    {
      "segment_id": 321,
      "start_line": 700,
      "end_line": 700,
      "code_description": "Sets the solver to compute the electrostatic physics in the stationary study",
      "modeling_purpose": "This step is needed to calculate the electrostatic field distribution and forces for the given bias voltage",
      "comsol_ids": [
        "std3",
        "es"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('stat').setSolveFor('/physics/es', true);"
    },
    {
      "segment_id": 322,
      "start_line": 701,
      "end_line": 701,
      "code_description": "Sets the solver to compute the electrostatics in the study",
      "modeling_purpose": "To determine the electrostatic behavior of the resonator under the applied bias voltage",
      "comsol_ids": [
        "std3",
        "eme1"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('stat').setSolveFor('/multiphysics/eme1', true);"
    },
    {
      "segment_id": 323,
      "start_line": 702,
      "end_line": 702,
      "code_description": "Creates an eigenfrequency study in the model",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "create"
      ],
      "code": "model.study('std3').create('eig', 'Eigenfrequency');"
    },
    {
      "segment_id": 324,
      "start_line": 703,
      "end_line": 703,
      "code_description": "Sets the plot group for the eigenvalue study to 'Default'",
      "modeling_purpose": "This step is needed to specify how the results of the eigenvalue analysis will be plotted",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('plotgroup', 'Default');"
    },
    {
      "segment_id": 325,
      "start_line": 704,
      "end_line": 704,
      "code_description": "Sets the shift value to 1 Hz for the eigenfrequency study",
      "modeling_purpose": "To compute the normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('shift', '1[Hz]');"
    },
    {
      "segment_id": 326,
      "start_line": 705,
      "end_line": 705,
      "code_description": "Enables the check for eigenfrequency region in the study settings",
      "modeling_purpose": "To ensure the eigenfrequency analysis is performed within the specified frequency range",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('chkeigregion', true);"
    },
    {
      "segment_id": 327,
      "start_line": 706,
      "end_line": 706,
      "code_description": "Sets the convergence criterion for the eigenvalue solver to 1",
      "modeling_purpose": "This step is needed to control the accuracy of the eigenfrequency computation in the study",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('conrad', '1');"
    },
    {
      "segment_id": 328,
      "start_line": 707,
      "end_line": 707,
      "code_description": "Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "modeling_purpose": "To efficiently compute the normal mode shapes and frequencies of the biased resonator",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('conradynhm', '1')"
      ],
      "code": "model.study('std3').feature('eig').set('conradynhm', '1');"
    },
    {
      "segment_id": 329,
      "start_line": 708,
      "end_line": 708,
      "code_description": "Disables the storage of the factorization of the stiffness matrix for the eigenvalue study",
      "modeling_purpose": "Improves computational efficiency by not storing the factorization, which is useful when the factorization is not needed for postprocessing or further analysis",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('storefact', false)"
      ],
      "code": "model.study('std3').feature('eig').set('storefact', false);"
    },
    {
      "segment_id": 330,
      "start_line": 709,
      "end_line": 709,
      "code_description": "Sets the output map for the eigenvalue study",
      "modeling_purpose": "To define how the results of the eigenvalue analysis are stored and accessed",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('outputmap', {});"
    },
    {
      "segment_id": 331,
      "start_line": 710,
      "end_line": 710,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenvalue study",
      "modeling_purpose": "Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('ngenAUX', '1');"
    },
    {
      "segment_id": 332,
      "start_line": 711,
      "end_line": 711,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('goalngenAUX', '1')"
      ],
      "code": "model.study('std3').feature('eig').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 333,
      "start_line": 712,
      "end_line": 712,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "This step is needed to determine the number of resonant modes to be calculated for the biased resonator",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('ngenAUX', '1');"
    },
    {
      "segment_id": 334,
      "start_line": 713,
      "end_line": 713,
      "code_description": "Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "modeling_purpose": "Needed to determine the number of resonant modes to analyze in the simulation",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set"
      ],
      "code": "model.study('std3').feature('eig').set('goalngenAUX', '1');"
    },
    {
      "segment_id": 335,
      "start_line": 714,
      "end_line": 714,
      "code_description": "Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "modeling_purpose": "This step is needed to include the mechanical effects in the resonator's behavior under electrostatic actuation",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('eig').setSolveFor('/physics/solid', true);"
    },
    {
      "segment_id": 336,
      "start_line": 715,
      "end_line": 715,
      "code_description": "Configures the study to solve for the electrostatic physics in the eigenfrequency analysis",
      "modeling_purpose": "This step is needed to include the electrostatic physics in the computation of normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('eig').setSolveFor('/physics/es', true);"
    },
    {
      "segment_id": 337,
      "start_line": 716,
      "end_line": 716,
      "code_description": "Sets the solver to compute the eigenfrequencies and normal mode shapes for the electrostatics physics interface (eme1) in the study 'std3'.",
      "modeling_purpose": "This step is needed to calculate the resonant frequencies and mode shapes of the MEMS resonator under the influence of the applied bias voltage.",
      "comsol_ids": [
        "std3",
        "eme1"
      ],
      "category": "study",
      "key_operations": [
        "setSolveFor"
      ],
      "code": "model.study('std3').feature('eig').setSolveFor('/multiphysics/eme1', true);"
    },
    {
      "segment_id": 338,
      "start_line": 717,
      "end_line": 717,
      "code_description": "Sets the label for the study 'std3' to 'Biased Eigenfrequency'",
      "modeling_purpose": "This step is needed to organize and identify the study in the simulation",
      "comsol_ids": [
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "label"
      ],
      "code": "model.study('std3').label('Biased Eigenfrequency');"
    },
    {
      "segment_id": 339,
      "start_line": 718,
      "end_line": 718,
      "code_description": "Creates a parametric study for the model",
      "modeling_purpose": "To analyze the effect of varying parameters on the resonator's behavior",
      "comsol_ids": [
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "parametric"
      ],
      "code": "model.study('std3').create('param', 'Parametric');"
    },
    {
      "segment_id": 340,
      "start_line": 719,
      "end_line": 719,
      "code_description": "Sets the index of the parameter 'Vdc' to 0 in the 'param' feature of the 'std3' study",
      "modeling_purpose": "To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "study",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('pname', 'Vdc', 0);"
    },
    {
      "segment_id": 341,
      "start_line": 720,
      "end_line": 720,
      "code_description": "Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "modeling_purpose": "This step is needed to initialize the parameter array index for the study, which will be used to compute the normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "study",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('plistarr', '', 0);"
    },
    {
      "segment_id": 342,
      "start_line": 721,
      "end_line": 721,
      "code_description": "Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "modeling_purpose": "This step is needed to define the unit of the parameter used in the electrostatic analysis of the MEMS resonator",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "parameters",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('punit', 'V', 0);"
    },
    {
      "segment_id": 343,
      "start_line": 722,
      "end_line": 722,
      "code_description": "Sets the index of the parameter 'Vdc' to 0 in the study 'std3'",
      "modeling_purpose": "To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "study",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('pname', 'Vdc', 0);"
    },
    {
      "segment_id": 344,
      "start_line": 723,
      "end_line": 723,
      "code_description": "Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "modeling_purpose": "This step is needed to initialize the parameter array index for the study, which will be used to sweep through different bias voltages in the simulation",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "study",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('plistarr', '', 0);"
    },
    {
      "segment_id": 345,
      "start_line": 724,
      "end_line": 724,
      "code_description": "Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "modeling_purpose": "To ensure the correct unit for the bias voltage parameter in the electrostatically actuated MEMS resonator simulation",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "parameters",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('punit', 'V', 0);"
    },
    {
      "segment_id": 346,
      "start_line": 725,
      "end_line": 725,
      "code_description": "Sets the index of the parameter list for the study 'std3' to vary from 5 to 45 with a step of 5.",
      "modeling_purpose": "This step is needed to define the range of bias voltage values to be used in the simulation, allowing the analysis of the resonator's behavior under different bias conditions.",
      "comsol_ids": [
        "std3",
        "param"
      ],
      "category": "study",
      "key_operations": [
        "setIndex"
      ],
      "code": "model.study('std3').feature('param').setIndex('plistarr', 'range(5,5,45)', 0);"
    },
    {
      "segment_id": 347,
      "start_line": 726,
      "end_line": 726,
      "code_description": "Activates the eigenvalue solver in the study 'std3' to compute the normal mode shapes and frequencies of the MEMS resonator",
      "modeling_purpose": "Needed to determine the resonant frequencies and mode shapes of the device under varying bias conditions",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('neigsactive', true)"
      ],
      "code": "model.study('std3').feature('eig').set('neigsactive', true);"
    },
    {
      "segment_id": 348,
      "start_line": 727,
      "end_line": 728,
      "code_description": "Sets the number of eigenvalues to compute in the eigenvalue study",
      "modeling_purpose": "Determines the number of resonant frequencies and mode shapes to calculate for the biased resonator",
      "comsol_ids": [
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "set('neigs', 1)"
      ],
      "code": "model.study('std3').feature('eig').set('neigs', 1);"
    },
    {
      "segment_id": 349,
      "start_line": 729,
      "end_line": 730,
      "code_description": "Creates a solution object for the study",
      "modeling_purpose": "To store and manage the solutions of the simulation",
      "comsol_ids": [
        "sol3"
      ],
      "category": "study",
      "key_operations": [
        "create_solution_object"
      ],
      "code": "model.sol.create('sol3');"
    },
    {
      "segment_id": 350,
      "start_line": 731,
      "end_line": 731,
      "code_description": "Selects the geometry entity with tag 3 for meshing",
      "modeling_purpose": "This step is needed to define the meshing for the selected geometry entity in the simulation",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "select",
        "mesh"
      ],
      "code": "model.mesh('mesh1').stat.selection.geom(3);"
    },
    {
      "segment_id": 351,
      "start_line": 732,
      "end_line": 732,
      "code_description": "Selects specific elements in the mesh for further analysis or modification",
      "modeling_purpose": "This step is needed to refine the mesh in specific regions of the MEMS resonator for accurate simulation results",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "selection"
      ],
      "code": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);"
    },
    {
      "segment_id": 352,
      "start_line": 733,
      "end_line": 733,
      "code_description": "Selects the geometry entity with ID 3 for meshing",
      "modeling_purpose": "This step is needed to define the meshing for the selected geometry entity in the simulation",
      "comsol_ids": [
        "mesh1",
        "3"
      ],
      "category": "mesh",
      "key_operations": [
        "select_geometry"
      ],
      "code": "model.mesh('mesh1').stat.selection.geom(3);"
    },
    {
      "segment_id": 353,
      "start_line": 734,
      "end_line": 735,
      "code_description": "Sets the selection of the mesh elements for the specified mesh statistic",
      "modeling_purpose": "This step is needed to define the mesh elements to be used in the simulation for accurate results",
      "comsol_ids": [
        "mesh1"
      ],
      "category": "mesh",
      "key_operations": [
        "set selection"
      ],
      "code": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);"
    },
    {
      "segment_id": 354,
      "start_line": 736,
      "end_line": 736,
      "code_description": "Accesses the solution 'sol3' and study 'std3' in the model",
      "modeling_purpose": "To set up the solution and study for the normal mode shapes and frequencies analysis",
      "comsol_ids": [
        "sol3",
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "access_solution",
        "access_study"
      ],
      "code": "model.sol('sol3').study('std3');"
    },
    {
      "segment_id": 355,
      "start_line": 737,
      "end_line": 739,
      "code_description": "Creates a study step for the stationary solver in the third study",
      "modeling_purpose": "This step is needed to set up the solver configuration for the stationary analysis of the biased resonator's normal mode shapes and frequencies",
      "comsol_ids": [
        "sol3",
        "st1",
        "std3",
        "stat"
      ],
      "category": "study",
      "key_operations": [
        "create_study_step",
        "set_study",
        "set_studystep"
      ],
      "code": "model.sol('sol3').create('st1', 'StudyStep');\nmodel.sol('sol3').feature('st1').set('study', 'std3');\nmodel.sol('sol3').feature('st1').set('studystep', 'stat');"
    },
    {
      "segment_id": 356,
      "start_line": 740,
      "end_line": 745,
      "code_description": "Configures the solver to scale the variables for the spatial displacement and the displacement in the first component",
      "modeling_purpose": "This step is needed to adjust the scaling of the variables to ensure the solver converges to an accurate solution for the resonator's behavior under the applied bias voltage",
      "comsol_ids": [
        "sol3",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ],
      "category": "study",
      "key_operations": [
        "create variables",
        "set scaling method",
        "set scaling value"
      ],
      "code": "model.sol('sol3').create('v1', 'Variables');\nmodel.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v1').set('control', 'stat');"
    },
    {
      "segment_id": 357,
      "start_line": 746,
      "end_line": 747,
      "code_description": "Creates a stationary solver and enables caching of the solution pattern",
      "modeling_purpose": "To efficiently solve for the normal mode shapes and frequencies of the biased MEMS resonator",
      "comsol_ids": [
        "sol3",
        "s1",
        "aDef"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol3').create('s1', 'Stationary');\nmodel.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);"
    },
    {
      "segment_id": 358,
      "start_line": 748,
      "end_line": 748,
      "code_description": "Creates a segregated solver for the study 'sol3' in the model",
      "modeling_purpose": "Needed to solve the multiphysics problem of the MEMS resonator with applied bias",
      "comsol_ids": [
        "sol3",
        "s1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "segregated"
      ],
      "code": "model.sol('sol3').feature('s1').create('seDef', 'Segregated');"
    },
    {
      "segment_id": 359,
      "start_line": 749,
      "end_line": 750,
      "code_description": "Creates a segregated solver and removes the default solver settings",
      "modeling_purpose": "To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ssDef"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "remove"
      ],
      "code": "model.sol('sol3').feature('s1').create('se1', 'Segregated');\nmodel.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');"
    },
    {
      "segment_id": 360,
      "start_line": 751,
      "end_line": 752,
      "code_description": "Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "modeling_purpose": "This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});"
    },
    {
      "segment_id": 361,
      "start_line": 753,
      "end_line": 756,
      "code_description": "Configures the solver settings for the electric potential study",
      "modeling_purpose": "To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias",
      "comsol_ids": [
        "sol3",
        "s1",
        "d1",
        "se1",
        "ss1"
      ],
      "category": "study",
      "key_operations": [
        "create direct solver",
        "set linear solver",
        "configure electric potential"
      ],
      "code": "model.sol('sol3').feature('s1').create('d1', 'Direct');\nmodel.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Electric Potential');"
    },
    {
      "segment_id": 362,
      "start_line": 757,
      "end_line": 760,
      "code_description": "Creates a segregated step for displacement field computation and sets the linear solver",
      "modeling_purpose": "To compute the displacement field of the resonator under applied bias voltage",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss2"
      ],
      "category": "study",
      "key_operations": [
        "create_segregated_step",
        "set_displacement_variable",
        "set_linear_solver"
      ],
      "code": "model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Displacement Field');"
    },
    {
      "segment_id": 363,
      "start_line": 761,
      "end_line": 768,
      "code_description": "Configures a segregated step for spatial mesh displacement in the solver",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss3"
      ],
      "category": "study",
      "key_operations": [
        "create_segregated_step",
        "set_segment_variables",
        "set_subdomain_technique",
        "set_linsolver"
      ],
      "code": "model.sol('sol3').feature('s1').feature('se1').create('ss3', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');\nmodel.sol('sol3').feature('s1').feature('se1').set('segstabacc', 'segaacc');\nmodel.sol('sol3').feature('s1').feature('se1').set('segaaccdim', 5);"
    },
    {
      "segment_id": 364,
      "start_line": 769,
      "end_line": 774,
      "code_description": "Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "modeling_purpose": "To efficiently solve the system of equations for the electrostatic analysis with the applied bias",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1"
      ],
      "category": "study",
      "key_operations": [
        "create iterative solver",
        "set solver properties"
      ],
      "code": "model.sol('sol3').feature('s1').create('i1', 'Iterative');\nmodel.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');\nmodel.sol('sol3').feature('s1').feature('i1').set('rhob', 40);\nmodel.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', true);\nmodel.sol('sol3').feature('s1').feature('i1').set('itrestart', 5000);\nmodel.sol('sol3').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');"
    },
    {
      "segment_id": 365,
      "start_line": 775,
      "end_line": 779,
      "code_description": "Configures a multigrid solver for the study 'sol3'",
      "modeling_purpose": "Improves the convergence of the solution by using a multigrid method",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V'});\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);"
    },
    {
      "segment_id": 366,
      "start_line": 780,
      "end_line": 781,
      "code_description": "Creates a successive over-relaxation (SOR) preconditioner and sets the relaxation factor to 0.8",
      "modeling_purpose": "Improves the convergence of the solver for the biased resonator simulation",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1",
        "pr",
        "so1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);"
    },
    {
      "segment_id": 367,
      "start_line": 782,
      "end_line": 783,
      "code_description": "Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "modeling_purpose": "Improves the convergence of the iterative solver for the biased resonator simulation",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1",
        "po",
        "so1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set"
      ],
      "code": "model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);"
    },
    {
      "segment_id": 368,
      "start_line": 784,
      "end_line": 788,
      "code_description": "Creates a direct preconditioner for the solver and sets its properties, then removes default solver settings",
      "modeling_purpose": "Improves the solver efficiency for the biased resonator simulation by customizing the preconditioner and removing default settings",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "dp1",
        "fcDef",
        "seDef"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "set",
        "remove"
      ],
      "code": "model.sol('sol3').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');\nmodel.sol('sol3').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');\nmodel.sol('sol3').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});\nmodel.sol('sol3').feature('s1').feature.remove('fcDef');\nmodel.sol('sol3').feature('s1').feature.remove('seDef');"
    },
    {
      "segment_id": 369,
      "start_line": 789,
      "end_line": 789,
      "code_description": "Creates a store solution node to save the computed solution",
      "modeling_purpose": "To save the computed solution for post-processing and analysis",
      "comsol_ids": [
        "sol3",
        "su1"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "StoreSolution"
      ],
      "code": "model.sol('sol3').create('su1', 'StoreSolution');"
    },
    {
      "segment_id": 370,
      "start_line": 790,
      "end_line": 792,
      "code_description": "Creates a study step for eigenfrequency analysis",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol3",
        "st2",
        "std3",
        "eig"
      ],
      "category": "study",
      "key_operations": [
        "create_study_step",
        "set_study",
        "set_studystep"
      ],
      "code": "model.sol('sol3').create('st2', 'StudyStep');\nmodel.sol('sol3').feature('st2').set('study', 'std3');\nmodel.sol('sol3').feature('st2').set('studystep', 'eig');"
    },
    {
      "segment_id": 371,
      "start_line": 793,
      "end_line": 803,
      "code_description": "Configures the solver to compute the normal mode shapes and frequencies of the biased resonator",
      "modeling_purpose": "To analyze the resonant behavior of the device under different bias voltages",
      "comsol_ids": [
        "sol3",
        "v2"
      ],
      "category": "study",
      "key_operations": [
        "create variables",
        "set scaling",
        "initialize solution",
        "set control parameters"
      ],
      "code": "model.sol('sol3').create('v2', 'Variables');\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v2').set('initmethod', 'sol');\nmodel.sol('sol3').feature('v2').set('initsol', 'sol3');\nmodel.sol('sol3').feature('v2').set('initsoluse', 'sol4');\nmodel.sol('sol3').feature('v2').set('notsolmethod', 'sol');\nmodel.sol('sol3').feature('v2').set('notsol', 'sol3');\nmodel.sol('sol3').feature('v2').set('control', 'eig');"
    },
    {
      "segment_id": 372,
      "start_line": 804,
      "end_line": 817,
      "code_description": "Creates an eigenvalue solver and sets various parameters for the solver",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol3",
        "e1"
      ],
      "category": "study",
      "key_operations": [
        "create eigenvalue solver",
        "set solver parameters"
      ],
      "code": "model.sol('sol3').create('e1', 'Eigenvalue');\nmodel.sol('sol3').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol3').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol3').feature('e1').set('storelinpoint', true);\nmodel.sol('sol3').feature('e1').set('control', 'eig');\nmodel.sol('sol3').feature('e1').set('linpmethod', 'sol');\nmodel.sol('sol3').feature('e1').set('linpsol', 'sol3');\nmodel.sol('sol3').feature('e1').set('linpsoluse', 'sol4');\nmodel.sol('sol3').feature('e1').set('control', 'eig');\nmodel.sol('sol3').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol3').feature('v2').set('notsolnum', 'auto');\nmodel.sol('sol3').feature('v2').set('notsolvertype', 'solnum');\nmodel.sol('sol3').attach('std3');"
    },
    {
      "segment_id": 373,
      "start_line": 818,
      "end_line": 818,
      "code_description": "Creates a new parametric sweep study named 'p1' using the 'Parametric' study type",
      "modeling_purpose": "To perform a parametric analysis of the resonator's behavior under varying bias voltages",
      "comsol_ids": [
        "p1"
      ],
      "category": "study",
      "key_operations": [
        "create",
        "parametric_sweep"
      ],
      "code": "model.batch.create('p1', 'Parametric');"
    },
    {
      "segment_id": 374,
      "start_line": 819,
      "end_line": 819,
      "code_description": "Sets up a batch sweep study for parameter p1 using study std3",
      "modeling_purpose": "To perform a parametric sweep of the bias voltage to analyze the resonator's behavior under different conditions",
      "comsol_ids": [
        "p1",
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "batch",
        "study"
      ],
      "code": "model.batch('p1').study('std3');"
    },
    {
      "segment_id": 375,
      "start_line": 820,
      "end_line": 837,
      "code_description": "Sets up a parametric sweep of the DC bias voltage and solves for the resonator modes",
      "modeling_purpose": "To analyze the effect of varying DC bias voltage on the resonator's mode shapes and frequencies",
      "comsol_ids": [
        "p1",
        "so1",
        "sol3"
      ],
      "category": "study",
      "key_operations": [
        "parametric sweep",
        "solve"
      ],
      "code": "model.batch('p1').create('so1', 'Solutionseq');\nmodel.batch('p1').feature('so1').set('seq', 'sol3');\nmodel.batch('p1').feature('so1').set('store', 'on');\nmodel.batch('p1').feature('so1').set('clear', 'on');\nmodel.batch('p1').feature('so1').set('psol', 'none');\nmodel.batch('p1').set('pname', {'Vdc'});\nmodel.batch('p1').set('plistarr', {'range(5,5,45)'});\nmodel.batch('p1').set('sweeptype', 'sparse');\nmodel.batch('p1').set('probesel', 'all');\nmodel.batch('p1').set('probes', {});\nmodel.batch('p1').set('plot', 'off');\nmodel.batch('p1').set('err', 'on');\nmodel.batch('p1').attach('std3');\nmodel.batch('p1').set('control', 'param');\n\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'auto');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scalemethod', 'auto');"
    },
    {
      "segment_id": 376,
      "start_line": 838,
      "end_line": 839,
      "code_description": "Disables the generation of plots for the study 'std3'.",
      "modeling_purpose": "This step is needed to reduce the computational load and output file size by not generating plots for this study.",
      "comsol_ids": [
        "std3"
      ],
      "category": "study",
      "key_operations": [
        "setGenPlots"
      ],
      "code": "model.study('std3').setGenPlots(false);"
    },
    {
      "segment_id": 377,
      "start_line": 840,
      "end_line": 840,
      "code_description": "Creates a solution object named 'sol5' in the model",
      "modeling_purpose": "To store the computed normal mode shapes and frequencies for the biased resonator",
      "comsol_ids": [
        "sol5"
      ],
      "category": "study",
      "key_operations": [
        "create_solution_object"
      ],
      "code": "model.sol.create('sol5');"
    },
    {
      "segment_id": 378,
      "start_line": 841,
      "end_line": 846,
      "code_description": "Sets up a parametric study and runs a batch computation to solve for the model's solutions",
      "modeling_purpose": "To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "comsol_ids": [
        "sol5",
        "std3",
        "p1",
        "so1"
      ],
      "category": "study",
      "key_operations": [
        "set up parametric study",
        "run batch computation"
      ],
      "code": "model.sol('sol5').study('std3');\nmodel.sol('sol5').label('Parametric Solutions 1');\n\nmodel.batch('p1').feature('so1').set('psol', 'sol5');\nmodel.batch('p1').run('compute');"
    },
    {
      "segment_id": 379,
      "start_line": 847,
      "end_line": 849,
      "code_description": "Creates a 1D plot group, runs it, and sets the data to dataset 5",
      "modeling_purpose": "To visualize and analyze the results of the simulation, specifically the normal mode shapes and frequencies as a function of applied bias",
      "comsol_ids": [
        "pg6",
        "dset5"
      ],
      "category": "results",
      "key_operations": [
        "create",
        "run",
        "set"
      ],
      "code": "model.result.create('pg6', 'PlotGroup1D');\nmodel.result('pg6').run;\nmodel.result('pg6').set('data', 'dset5');"
    },
    {
      "segment_id": 380,
      "start_line": 850,
      "end_line": 867,
      "code_description": "Creates point graphs for the resonator's normal mode frequencies and sets their appearance and data source",
      "modeling_purpose": "To visualize and analyze the resonator's normal mode frequencies under different bias conditions",
      "comsol_ids": [
        "pg6",
        "ptgr1",
        "ptgr2"
      ],
      "category": "results",
      "key_operations": [
        "create point graphs",
        "set appearance",
        "set data source"
      ],
      "code": "model.result('pg6').create('ptgr1', 'PointGraph');\nmodel.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');\nmodel.result('pg6').feature('ptgr1').set('linewidth', 'preference');\nmodel.result('pg6').feature('ptgr1').selection.set([1]);\nmodel.result('pg6').feature('ptgr1').set('expr', 'solid.freq');\nmodel.result('pg6').feature('ptgr1').set('xdatasolnumtype', 'outer');\nmodel.result('pg6').feature('ptgr1').set('linestyle', 'none');\nmodel.result('pg6').feature('ptgr1').set('linemarker', 'square');\nmodel.result('pg6').feature('ptgr1').set('legend', true);\nmodel.result('pg6').feature('ptgr1').set('legendmethod', 'manual');\nmodel.result('pg6').feature('ptgr1').setIndex('legends', 'COMSOL Solution', 0);\nmodel.result('pg6').feature.duplicate('ptgr2', 'ptgr1');\nmodel.result('pg6').run;\nmodel.result('pg6').feature('ptgr2').set('data', 'dset2');\nmodel.result('pg6').feature('ptgr2').setIndex('looplevelinput', 'first', 0);\nmodel.result('pg6').feature('ptgr2').set('linecolor', 'blue');\nmodel.result('pg6').feature('ptgr2').set('legend', false);\nmodel.result('pg6').run;"
    },
    {
      "segment_id": 381,
      "start_line": 868,
      "end_line": 916,
      "code_description": "Creates a global evaluation of the eigenfrequency vs. DC voltage and sets up the plot title, labels, and legend.",
      "modeling_purpose": "This step is needed to analyze and visualize the relationship between the applied DC bias voltage and the resonant frequency of the MEMS resonator.",
      "comsol_ids": [
        "pg6",
        "glob1"
      ],
      "category": "results",
      "key_operations": [
        "create_global_evaluation",
        "set_plot_properties"
      ],
      "code": "model.result('pg6').create('glob1', 'Global');\nmodel.result('pg6').feature('glob1').set('markerpos', 'datapoints');\nmodel.result('pg6').feature('glob1').set('linewidth', 'preference');\nmodel.result('pg6').feature('glob1').set('data', 'dset5');\nmodel.result('pg6').feature('glob1').setIndex('looplevelinput', 'manual', 1);\nmodel.result('pg6').feature('glob1').setIndex('looplevel', [2 3 4 5 6 7 8 9], 1);\nmodel.result('pg6').feature('glob1').setIndex('expr', 'int1(Vdc)', 0);\nmodel.result('pg6').feature('glob1').setIndex('descr', '', 0);\nmodel.result('pg6').feature('glob1').set('xdatasolnumtype', 'outer');\nmodel.result('pg6').feature('glob1').set('xdata', 'expr');\nmodel.result('pg6').feature('glob1').set('xdataexpr', 'Vdc');\nmodel.result('pg6').feature('glob1').set('legendmethod', 'manual');\nmodel.result('pg6').feature('glob1').setIndex('legends', 'Experiment: Bannon et. al.', 0);\nmodel.result('pg6').run;\nmodel.result('pg6').set('titletype', 'manual');\nmodel.result('pg6').set('title', 'Eigenfrequency vs. DC voltage');\nmodel.result('pg6').set('xlabelactive', true);\nmodel.result('pg6').set('xlabel', 'DC Bias (V)');\nmodel.result('pg6').set('ylabelactive', true);\nmodel.result('pg6').set('ylabel', 'Resonant Frequency (Hz)');\nmodel.result('pg6').label('Eigenfrequency vs. DC Voltage');\n\nmodel.title(['Normal Modes of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 3D']);\n\nmodel.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.');\n\nmodel.mesh.clearMeshes;\n\nmodel.sol('sol1').clearSolutionData;\nmodel.sol('sol2').clearSolutionData;\nmodel.sol('sol3').clearSolutionData;\nmodel.sol('sol4').clearSolutionData;\nmodel.sol('sol5').clearSolutionData;\nmodel.sol('sol6').clearSolutionData;\nmodel.sol('sol7').clearSolutionData;\nmodel.sol('sol8').clearSolutionData;\nmodel.sol('sol9').clearSolutionData;\nmodel.sol('sol10').clearSolutionData;\nmodel.sol('sol11').clearSolutionData;\nmodel.sol('sol12').clearSolutionData;\nmodel.sol('sol13').clearSolutionData;\nmodel.sol('sol14').clearSolutionData;\n\nmodel.label('biased_resonator_3d_modes.mph');\n\nmodel.modelNode.label('Components');\n\nout = model;"
    }
  ],
  "pdf_sections": [
    {
      "section_id": 1,
      "title": "Open the existing stationary study",
      "instructions": "From the File menu, choose Application Libraries. In the Application Libraries window, select MEMS Module>Actuators>biased_resonator_3d_basic in the tree. Click Open.",
      "comsol_ids": [
        "biased_resonator_3d_basic.mph"
      ],
      "purpose": "Load the basic model of the biased resonator",
      "keywords": [
        "Open",
        "Application Libraries",
        "MEMS Module",
        "Actuators"
      ]
    },
    {
      "section_id": 2,
      "title": "Mirror the geometry",
      "instructions": "Expand the Component 1 (comp1) node. Right-click Component 1 (comp1)>Geometry 1 and choose Transforms>Mirror. Set the Normal Vector to Plane of Reflection to (1, 0, 0). Select both objects, keep input objects, and build all objects. Zoom to extents.",
      "comsol_ids": [
        "Mirror 1 (mir1)"
      ],
      "purpose": "Enable modeling of asymmetric eigenmodes",
      "keywords": [
        "Mirror",
        "Geometry",
        "Transforms"
      ]
    },
    {
      "section_id": 3,
      "title": "Import experimental data",
      "instructions": "Click Functions and choose Local>Interpolation. Set the data source to the file biased_resonator_3d_modes_experiment.txt. Set units and interpolation options. Import the data.",
      "comsol_ids": [
        "Interpolation 1 (int1)"
      ],
      "purpose": "Compare simulation results with experimental data",
      "keywords": [
        "Import",
        "Experimental data",
        "Interpolation"
      ]
    },
    {
      "section_id": 4,
      "title": "Disable the symmetry node",
      "instructions": "Expand the Component 1 (comp1)>Solid Mechanics (solid) node. Right-click Component 1 (comp1)>Solid Mechanics (solid)>Symmetry 1 and choose Disable.",
      "comsol_ids": [
        "Symmetry 1"
      ],
      "purpose": "Allow anti-symmetric modes to be computed",
      "keywords": [
        "Disable",
        "Symmetry",
        "Solid Mechanics"
      ]
    },
    {
      "section_id": 5,
      "title": "Mesh the model",
      "instructions": "Expand the Component 1 (comp1)>Mesh 1 node, then click Size. Set the minimum element size to 1 and build the mesh.",
      "comsol_ids": [
        "Mesh 1"
      ],
      "purpose": "Generate a mesh for the model",
      "keywords": [
        "Mesh",
        "Size"
      ]
    },
    {
      "section_id": 6,
      "title": "Add a study to compute the unbiased vibrational modes",
      "instructions": "Click Add Study, select Preset Studies for Selected Multiphysics>Eigenfrequency, and add the study. Close the Add Study window.",
      "comsol_ids": [
        "Study 2"
      ],
      "purpose": "Compute the vibrational modes without an electric field",
      "keywords": [
        "Add Study",
        "Eigenfrequency"
      ]
    },
    {
      "section_id": 7,
      "title": "Solve for the first three modes",
      "instructions": "Under Study 2, click Step 1: Eigenfrequency. Set the desired number of eigenfrequencies to 3. Configure the output settings. Disable the electric potential and mesh displacement degrees of freedom. Solve the model.",
      "comsol_ids": [
        "Step 1: Eigenfrequency",
        "Solution 2 (sol2)"
      ],
      "purpose": "Find the first three vibrational modes of the unbiased resonator",
      "keywords": [
        "Eigenfrequency",
        "Solve",
        "Unbiased"
      ]
    }
  ],
  "matches": [
    {
      "code_segment_id": 1,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 2,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 3,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 4,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 5,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 6,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 7,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 8,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 9,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 10,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 11,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 12,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 13,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 14,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 15,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 16,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 17,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 18,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 19,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 20,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 21,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 22,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 23,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 24,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 25,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 26,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 27,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 28,
      "pdf_section_id": 1,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 1"
    },
    {
      "code_segment_id": 29,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 30,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 31,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 32,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 33,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 34,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 35,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 36,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 37,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 38,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 39,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 40,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 41,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 42,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 43,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 44,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 45,
      "pdf_section_id": 2,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 2"
    },
    {
      "code_segment_id": 46,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 47,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 48,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 49,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 50,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 51,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 52,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 53,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 54,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 55,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 56,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 57,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 58,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 59,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 60,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 61,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 62,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 63,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 64,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 65,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 66,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 67,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 68,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 69,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 70,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 71,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 72,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 73,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 74,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 75,
      "pdf_section_id": 3,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 3"
    },
    {
      "code_segment_id": 76,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 77,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 78,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 79,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 80,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 81,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 82,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 83,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 84,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 85,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 86,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 87,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 88,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 89,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 90,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 91,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 92,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 93,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 94,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 95,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 96,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 97,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 98,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 99,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 100,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 101,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 102,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 103,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 104,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 105,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 106,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 107,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 108,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 109,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 110,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 111,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 112,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 113,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 114,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 115,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 116,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 117,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 118,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 119,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 120,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 121,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 122,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 123,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 124,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 125,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 126,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 127,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 128,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 129,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 130,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 131,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 132,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 133,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 134,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 135,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 136,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 137,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 138,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 139,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 140,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 141,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 142,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 143,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 144,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 145,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 146,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 147,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 148,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 149,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 150,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 151,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 152,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 153,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 154,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 155,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 156,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 157,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 158,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 159,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 160,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 161,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 162,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 163,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 164,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 165,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 166,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 167,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 168,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 169,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 170,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 171,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 172,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 173,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 174,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 175,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 176,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 177,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 178,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 179,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 180,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 181,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 182,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 183,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 184,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 185,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 186,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 187,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 188,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 189,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 190,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 191,
      "pdf_section_id": 4,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 4"
    },
    {
      "code_segment_id": 192,
      "pdf_section_id": 5,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 5"
    },
    {
      "code_segment_id": 193,
      "pdf_section_id": 6,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 6"
    },
    {
      "code_segment_id": 194,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 195,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 196,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 197,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 198,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 199,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 200,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 201,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 202,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 203,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 204,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 205,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 206,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 207,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 208,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 209,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 210,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 211,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 212,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 213,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 214,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 215,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 216,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 217,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 218,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 219,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 220,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 221,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 222,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 223,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 224,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 225,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 226,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 227,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 228,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 229,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 230,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 231,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 232,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 233,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 234,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 235,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 236,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 237,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 238,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 239,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 240,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 241,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 242,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 243,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 244,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 245,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 246,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 247,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 248,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 249,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 250,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 251,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 252,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 253,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 254,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 255,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 256,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 257,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 258,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 259,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 260,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 261,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 262,
      "pdf_section_id": 7,
      "match_confidence": 0.1,
      "matching_factors": [
        "Assigned unused PDF section"
      ],
      "reasoning": "Assigned to unused PDF section 7"
    },
    {
      "code_segment_id": 263,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 264,
      "pdf_section_id": 2,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 265,
      "pdf_section_id": 2,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 266,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 267,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 268,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 269,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 270,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 271,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 272,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 273,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 274,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 275,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 276,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 277,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 278,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 279,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 280,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 281,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 282,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 283,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 284,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 285,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 286,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 287,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 288,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 289,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 290,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 291,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 292,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 293,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 294,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 295,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 296,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 297,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 298,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 299,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 300,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 301,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 302,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 303,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 304,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 305,
      "pdf_section_id": 1,
      "match_confidence": 0.2,
      "matching_factors": [
        "Category match"
      ],
      "reasoning": "Confidence: 0.20"
    },
    {
      "code_segment_id": 306,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 307,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 308,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 309,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 310,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 311,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 312,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 313,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 314,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 315,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 316,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 317,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 318,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 319,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 320,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 321,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 322,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 323,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 324,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 325,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 326,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 327,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 328,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 329,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 330,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 331,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 332,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 333,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 334,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 335,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 336,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 337,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 338,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 339,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 340,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 341,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 342,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 343,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 344,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 345,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 346,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 347,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 348,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 349,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 350,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 351,
      "pdf_section_id": 5,
      "match_confidence": 0.2,
      "matching_factors": [
        "Category match"
      ],
      "reasoning": "Confidence: 0.20"
    },
    {
      "code_segment_id": 352,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 353,
      "pdf_section_id": 5,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 354,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 355,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 356,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 357,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 358,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 359,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 360,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 361,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 362,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 363,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 364,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 365,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 366,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 367,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 368,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 369,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 370,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 371,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 372,
      "pdf_section_id": 6,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 373,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 374,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 375,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 376,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 377,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 378,
      "pdf_section_id": 1,
      "match_confidence": 0.5,
      "matching_factors": [
        "Keyword similarity",
        "Category match"
      ],
      "reasoning": "Confidence: 0.50"
    },
    {
      "code_segment_id": 379,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    },
    {
      "code_segment_id": 380,
      "pdf_section_id": null,
      "match_confidence": 0.0,
      "matching_factors": [
        "No clear match - using code description"
      ],
      "reasoning": "Confidence: 0.00"
    },
    {
      "code_segment_id": 381,
      "pdf_section_id": 1,
      "match_confidence": 0.3,
      "matching_factors": [
        "Keyword similarity"
      ],
      "reasoning": "Confidence: 0.30"
    }
  ],
  "enhanced_examples": [
    {
      "instruction": "[Model] Creates a new COMSOL model and sets the model path to the MEMS Module Actuators application",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to initialize the simulation environment and specify the application for the MEMS resonator\nWhat to do: Creates a new COMSOL model and sets the model path to the MEMS Module Actuators application",
      "output": "function out = model\n%\n% biased_resonator_3d_modes.m\n%\n% Model exported on May 26 2025, 21:30 by COMSOL 6.2.0.339.\n\nimport com.comsol.model.*\nimport com.comsol.model.util.*\n\nmodel = ModelUtil.create('Model');\n\nmodel.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to initialize the simulation environment and specify the application for the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "parameters",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "ModelUtil.create('Model')",
        "model.modelPath('/Applications/COMSOL62/Multiphysics/applications/MEMS_Module/Actuators')"
      ]
    },
    {
      "instruction": "[Model] Creates a component named 'comp1' in the model tree",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Organizing the model into components for better management and clarity\nWhat to do: Creates a component named 'comp1' in the model tree",
      "output": "model.modelNode.create('comp1', true);",
      "explanation": "Physics: Unknown. Purpose: Organizing the model into components for better management and clarity",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D geometry named 'geom1' in the COMSOL model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the geometry of the MEMS resonator for the simulation\nWhat to do: Creates a 3D geometry named 'geom1' in the COMSOL model",
      "output": "model.geom.create('geom1', 3);",
      "explanation": "Physics: Unknown. Purpose: To define the geometry of the MEMS resonator for the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1"
      ]
    },
    {
      "instruction": "[Model] Accesses the geometry and component of the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up the geometry and component for the simulation\nWhat to do: Accesses the geometry and component of the model",
      "output": "model.geom('geom1').model('comp1');",
      "explanation": "Physics: Unknown. Purpose: To set up the geometry and component for the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Creates a mesh named 'mesh1' based on the geometry 'geom1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator\nWhat to do: Creates a mesh named 'mesh1' based on the geometry 'geom1'",
      "output": "model.mesh.create('mesh1', 'geom1');",
      "explanation": "Physics: Unknown. Purpose: Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "geom1"
      ]
    },
    {
      "instruction": "[Model] Creates a solid mechanics physics interface for the geometry 'geom1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the mechanical behavior of the MEMS resonator under electrostatic actuation\nWhat to do: Creates a solid mechanics physics interface for the geometry 'geom1'",
      "output": "model.physics.create('solid', 'SolidMechanics', 'geom1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the mechanical behavior of the MEMS resonator under electrostatic actuation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid"
      ]
    },
    {
      "instruction": "[Model] Sets up the solid mechanics physics for the component 'comp1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the mechanical behavior of the resonator structure\nWhat to do: Sets up the solid mechanics physics for the component 'comp1'",
      "output": "model.physics('solid').model('comp1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the mechanical behavior of the resonator structure",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid",
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Creates an electrostatics physics interface in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To simulate the electrostatic behavior of the MEMS resonator under applied bias voltage\nWhat to do: Creates an electrostatics physics interface in the model",
      "output": "model.physics.create('es', 'Electrostatics', 'geom1');",
      "explanation": "Physics: Unknown. Purpose: To simulate the electrostatic behavior of the MEMS resonator under applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es"
      ]
    },
    {
      "instruction": "[Model] Sets up the electrostatics physics for the first component in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the electrostatic behavior of the resonator, which is essential for the simulation of the device's operation under the influence of the applied bias voltage\nWhat to do: Sets up the electrostatics physics for the first component in the model",
      "output": "model.physics('es').model('comp1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the electrostatic behavior of the resonator, which is essential for the simulation of the device's operation under the influence of the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Sets the material type to solid for the electrostatics physics in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the electrostatics simulation\nWhat to do: Sets the material type to solid for the electrostatics physics in the model",
      "output": "model.physics('es').feature('ccn1').set('materialType', {'solid'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the electrostatics simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "ccn1"
      ]
    },
    {
      "instruction": "[Model] Sets up the charge conservation physics in the solid domain of the resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to ensure the proper distribution of charges within the solid material of the resonator, which affects its electrostatic behavior under the applied bias voltage\nWhat to do: Sets up the charge conservation physics in the solid domain of the resonator",
      "output": "model.physics('es').feature('ccn1').label('Charge Conservation, Solid');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to ensure the proper distribution of charges within the solid material of the resonator, which affects its electrostatic behavior under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "ccn1"
      ]
    },
    {
      "instruction": "[Model] Creates an ElectromechanicalForces interface and sets the solid physics and electrostatics physics",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To couple the structural mechanics and electrostatics physics for the MEMS resonator simulation\nWhat to do: Creates an ElectromechanicalForces interface and sets the solid physics and electrostatics physics",
      "output": "model.multiphysics.create('eme1', 'ElectromechanicalForces', 'geom1', 3);\nmodel.multiphysics('eme1').set('Solid_physics', 'solid');\nmodel.multiphysics('eme1').set('Electrostatics_physics', 'es');",
      "explanation": "Physics: Unknown. Purpose: To couple the structural mechanics and electrostatics physics for the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "eme1"
      ]
    },
    {
      "instruction": "[Model] Creates a deforming domain named 'free1' and sets its smoothing type to hyperelastic",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the domain that will undergo deformation during the simulation\nWhat to do: Creates a deforming domain named 'free1' and sets its smoothing type to hyperelastic",
      "output": "model.common.create('free1', 'DeformingDomain', 'comp1');\nmodel.common('free1').set('smoothingType', 'hyperelastic');\nmodel.common('free1').selection.set([]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the domain that will undergo deformation during the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "free1"
      ]
    },
    {
      "instruction": "[Model] Creates a symmetry operation and clears its selection",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a symmetry condition for the resonator simulation, reducing computational domain\nWhat to do: Creates a symmetry operation and clears its selection",
      "output": "model.common.create('sym1', 'Symmetry', 'comp1');\nmodel.common('sym1').selection.set([]);",
      "explanation": "Physics: Unknown. Purpose: To set up a symmetry condition for the resonator simulation, reducing computational domain",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sym1"
      ]
    },
    {
      "instruction": "[Model] Creates a new study named 'std1' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a new study named 'std1' in the model",
      "output": "model.study.create('std1');",
      "explanation": "Physics: Unknown. Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1"
      ]
    },
    {
      "instruction": "[Model] Creates a stationary study named 'stat' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To perform a stationary analysis of the MEMS resonator under applied bias\nWhat to do: Creates a stationary study named 'stat' in the model",
      "output": "model.study('std1').create('stat', 'Stationary');",
      "explanation": "Physics: Unknown. Purpose: To perform a stationary analysis of the MEMS resonator under applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the solid mechanics physics in the static study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to calculate the deformation of the MEMS resonator under the applied bias voltage\nWhat to do: Sets the solver to compute the solid mechanics physics in the static study",
      "output": "model.study('std1').feature('stat').setSolveFor('/physics/solid', true);",
      "explanation": "Physics: Unknown. Purpose: Needed to calculate the deformation of the MEMS resonator under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Enables the electrostatic physics in the stationary solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to compute the electrostatic forces acting on the resonator due to the applied bias voltage\nWhat to do: Enables the electrostatic physics in the stationary solver",
      "output": "model.study('std1').feature('stat').setSolveFor('/physics/es', true);",
      "explanation": "Physics: Unknown. Purpose: Needed to compute the electrostatic forces acting on the resonator due to the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "es"
      ]
    },
    {
      "instruction": "[Model] Sets the study to solve for the electrostatics physics in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include electrostatics in the analysis of the MEMS resonator, which is actuated by an AC + DC bias voltage\nWhat to do: Sets the study to solve for the electrostatics physics in the model",
      "output": "model.study('std1').feature('stat').setSolveFor('/multiphysics/eme1', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include electrostatics in the analysis of the MEMS resonator, which is actuated by an AC + DC bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "eme1"
      ]
    },
    {
      "instruction": "[Model] Inserts the geometry sequence from the file 'biased_resonator_3d_geom_sequence.mph' into the geometry 'geom1' of the current model.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to import the predefined geometry sequence for the MEMS resonator, which is essential for the simulation of the device's behavior under different bias voltages.\nWhat to do: Inserts the geometry sequence from the file 'biased_resonator_3d_geom_sequence.mph' into the geometry 'geom1' of the current model.",
      "output": "model.geom('geom1').insertFile('biased_resonator_3d_geom_sequence.mph', 'geom1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to import the predefined geometry sequence for the MEMS resonator, which is essential for the simulation of the device's behavior under different bias voltages.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1"
      ]
    },
    {
      "instruction": "[Model] Sets the DC bias voltage to 35 V and provides a description for the parameter",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the DC bias voltage for the electrostatically actuated MEMS resonator simulation\nWhat to do: Sets the DC bias voltage to 35 V and provides a description for the parameter",
      "output": "model.geom('geom1').run('sel2');\n\nmodel.param.set('Vdc', '35[V]');\nmodel.param.descr('Vdc', 'DC bias voltage');",
      "explanation": "Physics: Unknown. Purpose: To define the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "parameters",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "Vdc"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'sel1' containing all domains in the model 'comp1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define a selection of domains for further analysis or settings in the simulation\nWhat to do: Creates a selection named 'sel1' containing all domains in the model 'comp1'",
      "output": "model.selection.create('sel1', 'Explicit');\nmodel.selection('sel1').model('comp1');\nmodel.selection('sel1').all;\nmodel.selection('sel1').label('All domains');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define a selection of domains for further analysis or settings in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "model.selection.create",
        "model.selection"
      ]
    },
    {
      "instruction": "[Model] Creates a box selection named 'box1' and sets its dimensions and conditions for the ground plane",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines a region for applying boundary conditions or material properties specific to the ground plane in the MEMS resonator simulation\nWhat to do: Creates a box selection named 'box1' and sets its dimensions and conditions for the ground plane",
      "output": "model.selection.create('box1', 'Box');\nmodel.selection('box1').model('comp1');\nmodel.selection('box1').set('zmin', -2);\nmodel.selection('box1').set('zmax', -1);\nmodel.selection('box1').set('condition', 'inside');\nmodel.selection('box1').set('entitydim', 2);\nmodel.selection('box1').label('Ground Plane');",
      "explanation": "Physics: Unknown. Purpose: Defines a region for applying boundary conditions or material properties specific to the ground plane in the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box1"
      ]
    },
    {
      "instruction": "[Model] Creates a box selection named 'box2' and sets its z-axis limits, then assigns it to the 'Oxide' material in the model.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the geometry and material properties of the oxide layer in the MEMS resonator for accurate simulation of its behavior.\nWhat to do: Creates a box selection named 'box2' and sets its z-axis limits, then assigns it to the 'Oxide' material in the model.",
      "output": "model.selection.create('box2', 'Box');\nmodel.selection('box2').model('comp1');\nmodel.selection('box2').set('zmin', -1);\nmodel.selection('box2').set('zmax', -0.9);\nmodel.selection('box2').label('Oxide');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the geometry and material properties of the oxide layer in the MEMS resonator for accurate simulation of its behavior.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "geometry|materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box2"
      ]
    },
    {
      "instruction": "[Model] Creates a box selection named 'box3' and sets its z-axis limits, then assigns it to the 'Nitride' material in the model 'comp1'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define a specific region in the geometry for assigning material properties, which is essential for accurate simulation of the MEMS resonator's behavior.\nWhat to do: Creates a box selection named 'box3' and sets its z-axis limits, then assigns it to the 'Nitride' material in the model 'comp1'.",
      "output": "model.selection.create('box3', 'Box');\nmodel.selection('box3').model('comp1');\nmodel.selection('box3').set('zmin', -0.4);\nmodel.selection('box3').set('zmax', -0.35);\nmodel.selection('box3').label('Nitride');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define a specific region in the geometry for assigning material properties, which is essential for accurate simulation of the MEMS resonator's behavior.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box3"
      ]
    },
    {
      "instruction": "[Model] Creates a box selection for the electrode and sets its dimensions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the geometry of the electrode for the electrostatically actuated MEMS resonator simulation\nWhat to do: Creates a box selection for the electrode and sets its dimensions",
      "output": "model.selection.create('box4', 'Box');\nmodel.selection('box4').model('comp1');\nmodel.selection('box4').set('xmin', -0.1);\nmodel.selection('box4').set('xmax', 0.1);\nmodel.selection('box4').set('ymin', -4.2);\nmodel.selection('box4').set('zmin', -0.15);\nmodel.selection('box4').set('zmax', -0.1);\nmodel.selection('box4').label('Electrode');",
      "explanation": "Physics: Unknown. Purpose: Defines the geometry of the electrode for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box4"
      ]
    },
    {
      "instruction": "[Model] Creates a spherical selection region and sets its position and radius",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a region for further analysis or manipulation in the simulation\nWhat to do: Creates a spherical selection region and sets its position and radius",
      "output": "model.selection.create('ball1', 'Ball');\nmodel.selection('ball1').model('comp1');\nmodel.selection('ball1').set('posz', 1);\nmodel.selection('ball1').set('r', 0.1);",
      "explanation": "Physics: Unknown. Purpose: To define a region for further analysis or manipulation in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "ball1"
      ]
    },
    {
      "instruction": "[Model] Creates two box selections with specified dimensions and conditions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: These box selections are likely used to define regions for material properties, physics settings, or boundary conditions in the MEMS resonator simulation\nWhat to do: Creates two box selections with specified dimensions and conditions",
      "output": "model.selection.create('box5', 'Box');\nmodel.selection('box5').model('comp1');\nmodel.selection('box5').set('ymax', 4.8);\nmodel.selection('box5').set('zmin', -0.35);\nmodel.selection('box5').set('zmax', 0.05);\nmodel.selection('box5').set('condition', 'inside');\nmodel.selection.duplicate('box6', 'box5');\nmodel.selection('box6').set('xmin', -15);\nmodel.selection('box6').set('xmax', 15);",
      "explanation": "Physics: Unknown. Purpose: These box selections are likely used to define regions for material properties, physics settings, or boundary conditions in the MEMS resonator simulation",
      "confidence": 0.1,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box5",
        "box6"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'dif1' representing the difference between 'ball1' and 'box6', and assigns it the label 'Resonator'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the geometry of the resonator by subtracting the volume of 'box6' from the combined volume of 'ball1' and 'box5'.\nWhat to do: Creates a selection named 'dif1' representing the difference between 'ball1' and 'box6', and assigns it the label 'Resonator'.",
      "output": "model.selection.create('dif1', 'Difference');\nmodel.selection('dif1').model('comp1');\nmodel.selection('dif1').set('add', {'ball1' 'box5'});\nmodel.selection('dif1').set('subtract', {'box6'});\nmodel.selection('dif1').label('Resonator');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the geometry of the resonator by subtracting the volume of 'box6' from the combined volume of 'ball1' and 'box5'.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "ball1",
        "box5",
        "box6"
      ]
    },
    {
      "instruction": "[Model] Creates a union selection of two entities and labels it as 'PolySi'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To combine the geometry of the box and the difference object for further analysis in the simulation\nWhat to do: Creates a union selection of two entities and labels it as 'PolySi'",
      "output": "model.selection.create('uni1', 'Union');\nmodel.selection('uni1').model('comp1');\nmodel.selection('uni1').set('input', {'box4' 'dif1'});\nmodel.selection('uni1').label('PolySi');",
      "explanation": "Physics: Unknown. Purpose: To combine the geometry of the box and the difference object for further analysis in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "uni1"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'dif2' and sets it to the difference between 'sel1' and the union of 'box2', 'box3', and 'uni1'. The selection is then labeled as 'Air'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the air domain in the resonator for the electrostatic simulation.\nWhat to do: Creates a selection named 'dif2' and sets it to the difference between 'sel1' and the union of 'box2', 'box3', and 'uni1'. The selection is then labeled as 'Air'.",
      "output": "model.selection.create('dif2', 'Difference');\nmodel.selection('dif2').model('comp1');\nmodel.selection('dif2').set('add', {'sel1'});\nmodel.selection('dif2').set('subtract', {'box2' 'box3' 'uni1'});\nmodel.selection('dif2').label('Air');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the air domain in the resonator for the electrostatic simulation.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "dif2",
        "sel1",
        "box2",
        "box3",
        "uni1"
      ]
    },
    {
      "instruction": "[Model] Creates a selection of adjacent boundaries to the resonator and labels it as 'Resonator Boundaries'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the boundaries where the electrostatic actuation will be applied\nWhat to do: Creates a selection of adjacent boundaries to the resonator and labels it as 'Resonator Boundaries'",
      "output": "model.selection.create('adj1', 'Adjacent');\nmodel.selection('adj1').model('comp1');\nmodel.selection('adj1').set('input', {'dif1'});\nmodel.selection('adj1').label('Resonator Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the boundaries where the electrostatic actuation will be applied",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "adj1"
      ]
    },
    {
      "instruction": "[Model] Creates a selection of adjacent boundaries to the input boundary 'box4' and labels them as 'Electrode Boundaries'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the boundaries where the electrode will be applied for the electrostatic actuation in the MEMS resonator simulation\nWhat to do: Creates a selection of adjacent boundaries to the input boundary 'box4' and labels them as 'Electrode Boundaries'",
      "output": "model.selection.create('adj2', 'Adjacent');\nmodel.selection('adj2').model('comp1');\nmodel.selection('adj2').set('input', {'box4'});\nmodel.selection('adj2').label('Electrode Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the boundaries where the electrode will be applied for the electrostatic actuation in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "adj2"
      ]
    },
    {
      "instruction": "[Model] Creates a selection of adjacent boundaries to the box3 geometry object and labels them as 'Nitride Boundaries'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define a specific set of boundaries for applying boundary conditions or material properties related to the nitride material in the MEMS resonator simulation\nWhat to do: Creates a selection of adjacent boundaries to the box3 geometry object and labels them as 'Nitride Boundaries'",
      "output": "model.selection.create('adj3', 'Adjacent');\nmodel.selection('adj3').model('comp1');\nmodel.selection('adj3').set('input', {'box3'});\nmodel.selection('adj3').label('Nitride Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define a specific set of boundaries for applying boundary conditions or material properties related to the nitride material in the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "adj3"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'adj4' for adjacent geometry exterior boundaries and sets 'sel1' as input",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a selection for geometry boundaries that will be used for applying boundary conditions or material properties in the simulation\nWhat to do: Creates a selection named 'adj4' for adjacent geometry exterior boundaries and sets 'sel1' as input",
      "output": "model.selection.create('adj4', 'Adjacent');\nmodel.selection('adj4').model('comp1');\nmodel.selection('adj4').set('input', {'sel1'});\nmodel.selection('adj4').label('Geometry Exterior Boundaries');",
      "explanation": "Physics: Unknown. Purpose: To define a selection for geometry boundaries that will be used for applying boundary conditions or material properties in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "adj4",
        "sel1"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'dif3' representing the difference between two entities, 'adj1' and 'adj4', in the 2D geometry of the model 'comp1'. The selection is labeled as 'Resonator Exterior Boundaries'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the exterior boundaries of the resonator for applying boundary conditions or material properties specific to those boundaries.\nWhat to do: Creates a selection named 'dif3' representing the difference between two entities, 'adj1' and 'adj4', in the 2D geometry of the model 'comp1'. The selection is labeled as 'Resonator Exterior Boundaries'.",
      "output": "model.selection.create('dif3', 'Difference');\nmodel.selection('dif3').model('comp1');\nmodel.selection('dif3').set('entitydim', 2);\nmodel.selection('dif3').set('add', {'adj1'});\nmodel.selection('dif3').set('subtract', {'adj4'});\nmodel.selection('dif3').label('Resonator Exterior Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the exterior boundaries of the resonator for applying boundary conditions or material properties specific to those boundaries.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "dif3"
      ]
    },
    {
      "instruction": "[Model] Creates a selection named 'dif4' representing the difference between two boundaries, 'adj2' and 'adj4', in the 2D geometry of the 'comp1' component. The selection is labeled as 'Electrode Exterior Boundaries'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the exterior boundaries of the electrodes for applying boundary conditions in the electrostatically actuated MEMS resonator simulation.\nWhat to do: Creates a selection named 'dif4' representing the difference between two boundaries, 'adj2' and 'adj4', in the 2D geometry of the 'comp1' component. The selection is labeled as 'Electrode Exterior Boundaries'.",
      "output": "model.selection.create('dif4', 'Difference');\nmodel.selection('dif4').model('comp1');\nmodel.selection('dif4').set('entitydim', 2);\nmodel.selection('dif4').set('add', {'adj2'});\nmodel.selection('dif4').set('subtract', {'adj4'});\nmodel.selection('dif4').label('Electrode Exterior Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the exterior boundaries of the electrodes for applying boundary conditions in the electrostatically actuated MEMS resonator simulation.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "dif4"
      ]
    },
    {
      "instruction": "[Model] Creates an intersection selection named 'int1' for fixed boundaries and sets its properties",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the fixed boundaries for the MEMS resonator simulation\nWhat to do: Creates an intersection selection named 'int1' for fixed boundaries and sets its properties",
      "output": "model.selection.create('int1', 'Intersection');\nmodel.selection('int1').model('comp1');\nmodel.selection('int1').set('entitydim', 2);\nmodel.selection('int1').set('input', {'adj1' 'adj3'});\nmodel.selection('int1').label('Fixed Boundaries');",
      "explanation": "Physics: Unknown. Purpose: To define the fixed boundaries for the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "int1"
      ]
    },
    {
      "instruction": "[Model] Creates a box selection for symmetry boundaries in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the symmetry boundaries for the MEMS resonator simulation\nWhat to do: Creates a box selection for symmetry boundaries in the model",
      "output": "model.selection.create('box7', 'Box');\nmodel.selection('box7').model('comp1');\nmodel.selection('box7').set('entitydim', 2);\nmodel.selection('box7').set('xmin', -0.1);\nmodel.selection('box7').set('xmax', 0.1);\nmodel.selection('box7').set('condition', 'inside');\nmodel.selection('box7').label('Symmetry Boundaries');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the symmetry boundaries for the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box7"
      ]
    },
    {
      "instruction": "[Model] Creates a new material with the name 'mat1' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the MEMS resonator component in the simulation.\nWhat to do: Creates a new material with the name 'mat1' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "output": "model.material.create('mat1', 'Common', 'comp1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the MEMS resonator component in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Creates a property group for material 'mat1' to define Young's modulus and Poisson's ratio",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the material properties for the resonator structure in the simulation\nWhat to do: Creates a property group for material 'mat1' to define Young's modulus and Poisson's ratio",
      "output": "model.material('mat1').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');",
      "explanation": "Physics: Unknown. Purpose: To define the material properties for the resonator structure in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Defines the material properties for polycrystalline silicon used in the MEMS resonator model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately simulate the behavior of the resonator, the material properties of the structural components must be defined\nWhat to do: Defines the material properties for polycrystalline silicon used in the MEMS resonator model",
      "output": "model.material('mat1').label('Si - Polycrystalline silicon');",
      "explanation": "Physics: Unknown. Purpose: To accurately simulate the behavior of the resonator, the material properties of the structural components must be defined",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the material family to 'custom' for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define a custom material for the MEMS resonator simulation\nWhat to do: Sets the material family to 'custom' for material 'mat1'",
      "output": "model.material('mat1').set('family', 'custom');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define a custom material for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the custom specular reflection coefficients for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the reflection properties of the material for the simulation\nWhat to do: Sets the custom specular reflection coefficients for material 'mat1'",
      "output": "model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);",
      "explanation": "Physics: Unknown. Purpose: To define the reflection properties of the material for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets custom diffuse properties for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the simulation of the MEMS resonator\nWhat to do: Sets custom diffuse properties for material 'mat1'",
      "output": "model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the simulation of the MEMS resonator",
      "confidence": 0.1,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the custom ambient color for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the appearance of the material in the simulation results visualization\nWhat to do: Sets the custom ambient color for material 'mat1'",
      "output": "model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);",
      "explanation": "Physics: Unknown. Purpose: Defines the appearance of the material in the simulation results visualization",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Enables the noise feature for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include noise effects in the material properties for more accurate simulation results\nWhat to do: Enables the noise feature for material 'mat1'",
      "output": "model.material('mat1').set('noise', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include noise effects in the material properties for more accurate simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting the Fresnel coefficient affects the optical properties of the material, which is important for accurate simulation of light interaction with the resonator\nWhat to do: Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "output": "model.material('mat1').set('fresnel', 0.7);",
      "explanation": "Physics: Unknown. Purpose: Adjusting the Fresnel coefficient affects the optical properties of the material, which is important for accurate simulation of light interaction with the resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the metallic property of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation\nWhat to do: Sets the metallic property of material 'mat1' to 0",
      "output": "model.material('mat1').set('metallic', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting material properties to reflect the desired behavior in the electrostatically actuated MEMS resonator simulation\nWhat to do: Sets the relative permittivity of material 'mat1' to 0",
      "output": "model.material('mat1').set('pearl', 0);",
      "explanation": "Physics: Unknown. Purpose: Adjusting material properties to reflect the desired behavior in the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables the diffuse wrap property for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the material behavior in the simulation\nWhat to do: Disables the diffuse wrap property for material 'mat1'",
      "output": "model.material('mat1').set('diffusewrap', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the material behavior in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables the clearcoat option for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to configure the material properties for accurate simulation of the MEMS resonator\nWhat to do: Disables the clearcoat option for material 'mat1'",
      "output": "model.material('mat1').set('clearcoat', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to configure the material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the reflectance property of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the optical properties of the material in the simulation\nWhat to do: Sets the reflectance property of material 'mat1' to 0",
      "output": "model.material('mat1').set('reflectance', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the optical properties of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for thermal expansion in the material properties for accurate simulation results\nWhat to do: Sets the thermal expansion coefficient for material 'mat1'",
      "output": "model.material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]' '0' '0' '0' '2.6e-6[1/K]'});",
      "explanation": "Physics: Unknown. Purpose: To account for thermal expansion in the material properties for accurate simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the heat capacity property of material 'mat1' to 678 J/(kg*K)",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the heat capacity property of material 'mat1' to 678 J/(kg*K)",
      "output": "model.material('mat1').propertyGroup('def').set('heatcapacity', '678[J/(kg*K)]');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity of material 'mat1' to a diagonal tensor with value 4.5 along the main diagonal",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the electrostatic simulation of the MEMS resonator\nWhat to do: Sets the relative permittivity of material 'mat1' to a diagonal tensor with value 4.5 along the main diagonal",
      "output": "model.material('mat1').propertyGroup('def').set('relpermittivity', {'4.5' '0' '0' '0' '4.5' '0' '0' '0' '4.5'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the electrostatic simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the density property of material 'mat1' to 2320 kg/m^3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the MEMS resonator simulation\nWhat to do: Sets the density property of material 'mat1' to 2320 kg/m^3",
      "output": "model.material('mat1').propertyGroup('def').set('density', '2320[kg/m^3]');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal conductivity of material 'mat1' to a diagonal tensor with value 34 W/(m*K) on the main diagonal",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the thermal conductivity of material 'mat1' to a diagonal tensor with value 34 W/(m*K) on the main diagonal",
      "output": "model.material('mat1').propertyGroup('def').set('thermalconductivity', {'34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]' '0' '0' '0' '34[W/(m*K)]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the Young's modulus of material 'mat1' to 160e9 Pa",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the MEMS resonator simulation\nWhat to do: Sets the Young's modulus of material 'mat1' to 160e9 Pa",
      "output": "model.material('mat1').propertyGroup('Enu').set('E', '160e9[Pa]');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the Poisson's ratio of material 'mat1' to 0.22",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the Poisson's ratio of material 'mat1' to 0.22",
      "output": "model.material('mat1').propertyGroup('Enu').set('nu', '0.22');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the material family to 'custom' for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a custom material for the MEMS resonator simulation\nWhat to do: Sets the material family to 'custom' for material 'mat1'",
      "output": "model.material('mat1').set('family', 'custom');",
      "explanation": "Physics: Unknown. Purpose: To define a custom material for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the lighting model to Cook-Torrance for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the appearance of the material in the simulation results visualization\nWhat to do: Sets the lighting model to Cook-Torrance for material 'mat1'",
      "output": "model.material('mat1').set('lighting', 'cooktorrance');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the appearance of the material in the simulation results visualization",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the optical properties of the material in the simulation\nWhat to do: Sets the Fresnel coefficient of material 'mat1' to 0.7",
      "output": "model.material('mat1').set('fresnel', 0.7);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the optical properties of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the roughness property of material 'mat1' to 0.5",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for surface roughness effects on the MEMS resonator's behavior\nWhat to do: Sets the roughness property of material 'mat1' to 0.5",
      "output": "model.material('mat1').set('roughness', 0.5);",
      "explanation": "Physics: Unknown. Purpose: To account for surface roughness effects on the MEMS resonator's behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the anisotropy property of material 'mat1' to 0, indicating an isotropic material.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.\nWhat to do: Sets the anisotropy property of material 'mat1' to 0, indicating an isotropic material.",
      "output": "model.material('mat1').set('anisotropy', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables the anisotropy flip for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Ensures the material properties are correctly oriented for the simulation\nWhat to do: Disables the anisotropy flip for material 'mat1'",
      "output": "model.material('mat1').set('flipanisotropy', false);",
      "explanation": "Physics: Unknown. Purpose: Ensures the material properties are correctly oriented for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the metallic property of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation\nWhat to do: Sets the metallic property of material 'mat1' to 0",
      "output": "model.material('mat1').set('metallic', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity (pearl) of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting material properties to reflect the specific characteristics of the resonator\nWhat to do: Sets the relative permittivity (pearl) of material 'mat1' to 0",
      "output": "model.material('mat1').set('pearl', 0);",
      "explanation": "Physics: Unknown. Purpose: Adjusting material properties to reflect the specific characteristics of the resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables the diffuse wrap option for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the material behavior in the simulation\nWhat to do: Disables the diffuse wrap option for material 'mat1'",
      "output": "model.material('mat1').set('diffusewrap', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the material behavior in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables the clearcoat option for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjust material properties to match the desired behavior in the simulation\nWhat to do: Disables the clearcoat option for material 'mat1'",
      "output": "model.material('mat1').set('clearcoat', 0);",
      "explanation": "Physics: Unknown. Purpose: Adjust material properties to match the desired behavior in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the reflectance property of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting material properties to accurately represent the device's behavior in the simulation\nWhat to do: Sets the reflectance property of material 'mat1' to 0",
      "output": "model.material('mat1').set('reflectance', 0);",
      "explanation": "Physics: Unknown. Purpose: Adjusting material properties to accurately represent the device's behavior in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the material 'mat1' to use a custom ambient property",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation\nWhat to do: Sets the material 'mat1' to use a custom ambient property",
      "output": "model.material('mat1').set('ambient', 'custom');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the custom ambient color for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the appearance of the material in the simulation results visualization\nWhat to do: Sets the custom ambient color for material 'mat1'",
      "output": "model.material('mat1').set('customambient', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);",
      "explanation": "Physics: Unknown. Purpose: Defines the appearance of the material in the simulation results visualization",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the material property 'diffuse' to a custom value for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define custom material properties for the simulation of the MEMS resonator\nWhat to do: Sets the material property 'diffuse' to a custom value for material 'mat1'",
      "output": "model.material('mat1').set('diffuse', 'custom');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define custom material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets custom diffuse properties for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the simulation of the MEMS resonator\nWhat to do: Sets custom diffuse properties for material 'mat1'",
      "output": "model.material('mat1').set('customdiffuse', [0.6666666666666666 0.6666666666666666 0.7058823529411765]);",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the simulation of the MEMS resonator",
      "confidence": 0.1,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the material 'mat1' to have a custom specular reflection property",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator\nWhat to do: Sets the material 'mat1' to have a custom specular reflection property",
      "output": "model.material('mat1').set('specular', 'custom');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the custom specular reflection coefficients for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the reflection properties of the material in the simulation\nWhat to do: Sets the custom specular reflection coefficients for material 'mat1'",
      "output": "model.material('mat1').set('customspecular', [0.7843137254901961 1 1]);",
      "explanation": "Physics: Unknown. Purpose: To define the reflection properties of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the noise color of material 'mat1' to custom",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to customize the noise color of the material for accurate simulation results\nWhat to do: Sets the noise color of material 'mat1' to custom",
      "output": "model.material('mat1').set('noisecolor', 'custom');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to customize the noise color of the material for accurate simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the custom noise color for material 'mat1' to black",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the appearance of the material in the simulation results\nWhat to do: Sets the custom noise color for material 'mat1' to black",
      "output": "model.material('mat1').set('customnoisecolor', [0 0 0]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the appearance of the material in the simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the noise scale of material 'mat1' to 0",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the noise scale of material 'mat1' to 0",
      "output": "model.material('mat1').set('noisescale', 0);",
      "explanation": "Physics: Unknown. Purpose: Adjusting material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Disables noise for material 'mat1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves simulation stability and convergence\nWhat to do: Disables noise for material 'mat1'",
      "output": "model.material('mat1').set('noise', 'off');",
      "explanation": "Physics: Unknown. Purpose: Improves simulation stability and convergence",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the noise frequency of material 'mat1' to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the noise frequency property of the material, which may affect the simulation results for the resonator's behavior under the applied bias\nWhat to do: Sets the noise frequency of material 'mat1' to 1",
      "output": "model.material('mat1').set('noisefreq', 1);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the noise frequency property of the material, which may affect the simulation results for the resonator's behavior under the applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the 'normalnoisebrush' property of material 'mat1' to '0'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the noise brush property of the material in the simulation\nWhat to do: Sets the 'normalnoisebrush' property of material 'mat1' to '0'",
      "output": "model.material('mat1').set('normalnoisebrush', '0');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the noise brush property of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the 'normalnoisetype' property of material 'mat1' to '0'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to configure the material properties for accurate simulation of the MEMS resonator.\nWhat to do: Sets the 'normalnoisetype' property of material 'mat1' to '0'.",
      "output": "model.material('mat1').set('normalnoisetype', '0');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to configure the material properties for accurate simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient of material 'mat1' to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation\nWhat to do: Sets the thermal expansion coefficient of material 'mat1' to 1",
      "output": "model.material('mat1').set('alpha', 1);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Sets the anisotropy axis of material 'mat1' to the z-axis (0 0 1)",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the anisotropic properties of the material in the simulation\nWhat to do: Sets the anisotropy axis of material 'mat1' to the z-axis (0 0 1)",
      "output": "model.material('mat1').set('anisotropyaxis', [0 0 1]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the anisotropic properties of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1"
      ]
    },
    {
      "instruction": "[Model] Creates a new material named 'mat2' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the component in the simulation.\nWhat to do: Creates a new material named 'mat2' in the model, using the 'Common' material property and assigning it to component 'comp1'.",
      "output": "model.material.create('mat2', 'Common', 'comp1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the component in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Creates a property group for Young's modulus and Poisson's ratio in material 'mat2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the MEMS resonator simulation\nWhat to do: Creates a property group for Young's modulus and Poisson's ratio in material 'mat2'",
      "output": "model.material('mat2').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Defines the material properties for silicon nitride (Si3N4) and assigns it the label 'Si3N4 - Silicon nitride'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately simulate the behavior of the MEMS resonator, as the material properties of silicon nitride affect its performance under the applied bias voltage\nWhat to do: Defines the material properties for silicon nitride (Si3N4) and assigns it the label 'Si3N4 - Silicon nitride'",
      "output": "model.material('mat2').label('Si3N4 - Silicon nitride');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately simulate the behavior of the MEMS resonator, as the material properties of silicon nitride affect its performance under the applied bias voltage",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Sets the electric conductivity of material 'mat2' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator.\nWhat to do: Sets the electric conductivity of material 'mat2' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "output": "model.material('mat2').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient of material 'mat2' to 2.3e-6 [1/K] for x, y, and z directions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the thermal expansion coefficient of material 'mat2' to 2.3e-6 [1/K] for x, y, and z directions",
      "output": "model.material('mat2').propertyGroup('def').set('thermalexpansioncoefficient', {'2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]' '0' '0' '0' '2.3e-6[1/K]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the heat capacity property of material 'mat2' to 700 J/(kg*K)",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the heat capacity property of material 'mat2' to 700 J/(kg*K)",
      "output": "model.material('mat2').propertyGroup('def').set('heatcapacity', '700[J/(kg*K)]');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity of material 'mat2' to a diagonal tensor with value 9.7 along the main diagonal",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties of the resonator, which affects the electrostatic and structural behavior of the device\nWhat to do: Sets the relative permittivity of material 'mat2' to a diagonal tensor with value 9.7 along the main diagonal",
      "output": "model.material('mat2').propertyGroup('def').set('relpermittivity', {'9.7' '0' '0' '0' '9.7' '0' '0' '0' '9.7'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties of the resonator, which affects the electrostatic and structural behavior of the device",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the density property of material 'mat2' to 3100 kg/m^3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the density property of material 'mat2' to 3100 kg/m^3",
      "output": "model.material('mat2').propertyGroup('def').set('density', '3100[kg/m^3]');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal conductivity of material 'mat2' to a diagonal matrix with values 20, 20, and 20 along the diagonal.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation, which will affect the heat conduction through the material.\nWhat to do: Sets the thermal conductivity of material 'mat2' to a diagonal matrix with values 20, 20, and 20 along the diagonal.",
      "output": "model.material('mat2').propertyGroup('def').set('thermalconductivity', {'20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]' '0' '0' '0' '20[W/(m*K)]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation, which will affect the heat conduction through the material.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Sets the Young's modulus of material 'mat2' to 250e9 Pa",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the mechanical properties of the material for the resonator simulation\nWhat to do: Sets the Young's modulus of material 'mat2' to 250e9 Pa",
      "output": "model.material('mat2').propertyGroup('Enu').set('E', '250e9[Pa]');",
      "explanation": "Physics: Unknown. Purpose: Defines the mechanical properties of the material for the resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the Poisson's ratio of material 'mat2' to 0.23",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the Poisson's ratio of material 'mat2' to 0.23",
      "output": "model.material('mat2').propertyGroup('Enu').set('nu', '0.23');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the material family of 'mat2' to 'plastic'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the MEMS resonator simulation\nWhat to do: Sets the material family of 'mat2' to 'plastic'",
      "output": "model.material('mat2').set('family', 'plastic');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2"
      ]
    },
    {
      "instruction": "[Model] Creates a new material with the name 'mat3' in the component 'comp1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the MEMS resonator simulation\nWhat to do: Creates a new material with the name 'mat3' in the component 'comp1'",
      "output": "model.material.create('mat3', 'Common', 'comp1');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Creates a property group for Young's modulus and Poisson's ratio in material 'mat3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the MEMS resonator simulation\nWhat to do: Creates a property group for Young's modulus and Poisson's ratio in material 'mat3'",
      "output": "model.material('mat3').propertyGroup.create('Enu', 'Young''s modulus and Poisson''s ratio');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Defines the material properties for Silicon oxide (SiO2) in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately simulate the behavior of the MEMS resonator, the material properties of its components must be defined\nWhat to do: Defines the material properties for Silicon oxide (SiO2) in the model",
      "output": "model.material('mat3').label('SiO2 - Silicon oxide');",
      "explanation": "Physics: Unknown. Purpose: To accurately simulate the behavior of the MEMS resonator, the material properties of its components must be defined",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the electric conductivity of material 'mat3' to a diagonal tensor with values 0[S/m] along the main diagonal and 0 elsewhere.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.\nWhat to do: Sets the electric conductivity of material 'mat3' to a diagonal tensor with values 0[S/m] along the main diagonal and 0 elsewhere.",
      "output": "model.material('mat3').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient for material 'mat3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for thermal expansion in the material properties for the simulation\nWhat to do: Sets the thermal expansion coefficient for material 'mat3'",
      "output": "model.material('mat3').propertyGroup('def').set('thermalexpansioncoefficient', {'0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]' '0' '0' '0' '0.5e-6[1/K]'});",
      "explanation": "Physics: Unknown. Purpose: To account for thermal expansion in the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the heat capacity of material 'mat3' to 730 J/(kg*K) in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the thermal properties of the material used in the MEMS resonator simulation\nWhat to do: Sets the heat capacity of material 'mat3' to 730 J/(kg*K) in the model",
      "output": "model.material('mat3').propertyGroup('def').set('heatcapacity', '730[J/(kg*K)]');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the thermal properties of the material used in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity of material 'mat3' to a diagonal tensor with value 4.2 along the main diagonal",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties of the resonator, which affects the electrostatic simulation\nWhat to do: Sets the relative permittivity of material 'mat3' to a diagonal tensor with value 4.2 along the main diagonal",
      "output": "model.material('mat3').propertyGroup('def').set('relpermittivity', {'4.2' '0' '0' '0' '4.2' '0' '0' '0' '4.2'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties of the resonator, which affects the electrostatic simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the density property of material 'mat3' to 2200 kg/m^3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the density property of material 'mat3' to 2200 kg/m^3",
      "output": "model.material('mat3').propertyGroup('def').set('density', '2200[kg/m^3]');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal conductivity of material 'mat3' to 1.4 W/(m*K) in all directions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the thermal conductivity of material 'mat3' to 1.4 W/(m*K) in all directions",
      "output": "model.material('mat3').propertyGroup('def').set('thermalconductivity', {'1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]' '0' '0' '0' '1.4[W/(m*K)]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Sets the Young's modulus of material 'mat3' to 70e9 Pa",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the mechanical properties of the resonator material for accurate simulation of its behavior\nWhat to do: Sets the Young's modulus of material 'mat3' to 70e9 Pa",
      "output": "model.material('mat3').propertyGroup('Enu').set('E', '70e9[Pa]');",
      "explanation": "Physics: Unknown. Purpose: Defines the mechanical properties of the resonator material for accurate simulation of its behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the Poisson's ratio of material 'mat3' to 0.17",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the Poisson's ratio of material 'mat3' to 0.17",
      "output": "model.material('mat3').propertyGroup('Enu').set('nu', '0.17');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3",
        "Enu"
      ]
    },
    {
      "instruction": "[Model] Sets the material family of 'mat3' to 'plastic'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the resonator structure\nWhat to do: Sets the material family of 'mat3' to 'plastic'",
      "output": "model.material('mat3').set('family', 'plastic');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the resonator structure",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3"
      ]
    },
    {
      "instruction": "[Model] Creates a new material with the name 'mat4' in the model using the 'Common' material property and assigns it to component 'comp1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the material properties for the component in the MEMS resonator simulation\nWhat to do: Creates a new material with the name 'mat4' in the model using the 'Common' material property and assigns it to component 'comp1'",
      "output": "model.material.create('mat4', 'Common', 'comp1');",
      "explanation": "Physics: Unknown. Purpose: To define the material properties for the component in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Creates a piecewise function named 'eta' in the property group 'def' of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a material property that varies based on certain conditions or parameters\nWhat to do: Creates a piecewise function named 'eta' in the property group 'def' of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('eta', 'Piecewise');",
      "explanation": "Physics: Unknown. Purpose: To define a material property that varies based on certain conditions or parameters",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "eta"
      ]
    },
    {
      "instruction": "[Model] Creates a piecewise function for the heat capacity property of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a temperature-dependent heat capacity for the material, which is necessary for accurate thermal analysis in the simulation\nWhat to do: Creates a piecewise function for the heat capacity property of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('Cp', 'Piecewise');",
      "explanation": "Physics: Unknown. Purpose: To define a temperature-dependent heat capacity for the material, which is necessary for accurate thermal analysis in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "Cp"
      ]
    },
    {
      "instruction": "[Model] Creates an analytic function for material property 'rho' in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines a material property function for the MEMS resonator simulation\nWhat to do: Creates an analytic function for material property 'rho' in material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('rho', 'Analytic');",
      "explanation": "Physics: Unknown. Purpose: Defines a material property function for the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "rho"
      ]
    },
    {
      "instruction": "[Model] Creates a piecewise function for material property 'k' in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines a material property that varies based on certain conditions, likely related to the applied bias in the MEMS resonator simulation\nWhat to do: Creates a piecewise function for material property 'k' in material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('k', 'Piecewise');",
      "explanation": "Physics: Unknown. Purpose: Defines a material property that varies based on certain conditions, likely related to the applied bias in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "k"
      ]
    },
    {
      "instruction": "[Model] Creates an analytic function for the material property 'cs' in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define a material property that may vary with the applied bias voltage in the simulation\nWhat to do: Creates an analytic function for the material property 'cs' in material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('cs', 'Analytic');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define a material property that may vary with the applied bias voltage in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ]
    },
    {
      "instruction": "[Model] Creates an analytic function 'an1' in the property group 'def' of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias\nWhat to do: Creates an analytic function 'an1' in the property group 'def' of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('an1', 'Analytic');",
      "explanation": "Physics: Unknown. Purpose: To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Creates an analytic function 'an2' in the property group 'def' of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias\nWhat to do: Creates an analytic function 'an2' in the property group 'def' of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func.create('an2', 'Analytic');",
      "explanation": "Physics: Unknown. Purpose: To define a material property that varies analytically, which may be needed for accurate simulation of the MEMS resonator's behavior under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Creates a property group for refractive index in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines optical properties for the material, which is necessary for accurate simulation of light interaction with the resonator\nWhat to do: Creates a property group for refractive index in material 'mat4'",
      "output": "model.material('mat4').propertyGroup.create('RefractiveIndex', 'Refractive index');",
      "explanation": "Physics: Unknown. Purpose: Defines optical properties for the material, which is necessary for accurate simulation of light interaction with the resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "RefractiveIndex"
      ]
    },
    {
      "instruction": "[Model] Creates a property group for nonlinear material model in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define nonlinear material properties for the simulation of the MEMS resonator\nWhat to do: Creates a property group for nonlinear material model in material 'mat4'",
      "output": "model.material('mat4').propertyGroup.create('NonlinearModel', 'Nonlinear model');",
      "explanation": "Physics: Unknown. Purpose: To define nonlinear material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "NonlinearModel"
      ]
    },
    {
      "instruction": "[Model] Creates an ideal gas property group in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the material properties for the simulation of the MEMS resonator\nWhat to do: Creates an ideal gas property group in material 'mat4'",
      "output": "model.material('mat4').propertyGroup.create('idealGas', 'Ideal gas');",
      "explanation": "Physics: Unknown. Purpose: To define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Creates a piecewise function for the specific heat capacity (Cp) of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately model the thermal behavior of the material in the MEMS resonator simulation\nWhat to do: Creates a piecewise function for the specific heat capacity (Cp) of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('idealGas').func.create('Cp', 'Piecewise');",
      "explanation": "Physics: Unknown. Purpose: To accurately model the thermal behavior of the material in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Defines the material properties for the air domain in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately simulate the behavior of the MEMS resonator, the material properties of the surrounding air need to be specified\nWhat to do: Defines the material properties for the air domain in the model",
      "output": "model.material('mat4').label('Air');",
      "explanation": "Physics: Unknown. Purpose: To accurately simulate the behavior of the MEMS resonator, the material properties of the surrounding air need to be specified",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the material family of 'mat4' to 'air'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the air surrounding the MEMS resonator\nWhat to do: Sets the material family of 'mat4' to 'air'",
      "output": "model.material('mat4').set('family', 'air');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the air surrounding the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the argument of the function 'eta' in the material 'mat4' to 'T'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature dependence of material properties in the simulation\nWhat to do: Sets the argument of the function 'eta' in the material 'mat4' to 'T'",
      "output": "model.material('mat4').propertyGroup('def').func('eta').set('arg', 'T');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature dependence of material properties in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Defines the temperature-dependent material property 'eta' for material 'mat4' using a piecewise function.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately model the material behavior under varying temperature conditions in the simulation.\nWhat to do: Defines the temperature-dependent material property 'eta' for material 'mat4' using a piecewise function.",
      "output": "model.material('mat4').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately model the material behavior under varying temperature conditions in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the eta function of material 'mat4' to Kelvin",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature unit for the material properties in the simulation\nWhat to do: Sets the argument unit for the eta function of material 'mat4' to Kelvin",
      "output": "model.material('mat4').propertyGroup('def').func('eta').set('argunit', 'K');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature unit for the material properties in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the viscosity function for material 'mat4' to 'eta' with units of 'Pa*s'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the simulation to accurately model the device's behavior\nWhat to do: Sets the viscosity function for material 'mat4' to 'eta' with units of 'Pa*s'",
      "output": "model.material('mat4').propertyGroup('def').func('eta').set('fununit', 'Pa*s');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the simulation to accurately model the device's behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "eta"
      ]
    },
    {
      "instruction": "[Model] Sets the temperature dependence of the heat capacity at constant pressure for material 4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for the variation of heat capacity with temperature in the material, which is important for accurate thermal analysis\nWhat to do: Sets the temperature dependence of the heat capacity at constant pressure for material 4",
      "output": "model.material('mat4').propertyGroup('def').func('Cp').set('arg', 'T');",
      "explanation": "Physics: Unknown. Purpose: To account for the variation of heat capacity with temperature in the material, which is important for accurate thermal analysis",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ]
    },
    {
      "instruction": "[Model] Defines the temperature-dependent heat capacity of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for the variation of heat capacity with temperature in the simulation\nWhat to do: Defines the temperature-dependent heat capacity of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});",
      "explanation": "Physics: Unknown. Purpose: To account for the variation of heat capacity with temperature in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the heat capacity function of material 'mat4' to Kelvin",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation\nWhat to do: Sets the argument unit for the heat capacity function of material 'mat4' to Kelvin",
      "output": "model.material('mat4').propertyGroup('def').func('Cp').set('argunit', 'K');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ]
    },
    {
      "instruction": "[Model] Sets the specific heat capacity property of material 'mat4' to have units of J/(kg*K).",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.\nWhat to do: Sets the specific heat capacity property of material 'mat4' to have units of J/(kg*K).",
      "output": "model.material('mat4').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "Cp"
      ]
    },
    {
      "instruction": "[Model] Sets the expression for the density of material 'mat4' as a function of pressure, temperature, and the ideal gas constant",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation, accounting for the dependence of density on pressure and temperature\nWhat to do: Sets the expression for the density of material 'mat4' as a function of pressure, temperature, and the ideal gas constant",
      "output": "model.material('mat4').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation, accounting for the dependence of density on pressure and temperature",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "rho"
      ]
    },
    {
      "instruction": "[Model] Sets the arguments for the density function of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the simulation\nWhat to do: Sets the arguments for the density function of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('rho').set('args', {'pA' 'T'});",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the density function of material 'mat4' to 'fununit' with units of kg/m^3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the density function of material 'mat4' to 'fununit' with units of kg/m^3",
      "output": "model.material('mat4').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "rho"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the density function of material 'mat4' to Pascals and Kelvins",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator\nWhat to do: Sets the argument unit for the density function of material 'mat4' to Pascals and Kelvins",
      "output": "model.material('mat4').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the plot arguments for the density function of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the density variation with respect to pressure and temperature in the material\nWhat to do: Sets the plot arguments for the density function of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});",
      "explanation": "Physics: Unknown. Purpose: To visualize the density variation with respect to pressure and temperature in the material",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the temperature dependence of the thermal conductivity for material 4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for the variation of thermal conductivity with temperature in the material, which is important for accurate heat transfer analysis\nWhat to do: Sets the temperature dependence of the thermal conductivity for material 4",
      "output": "model.material('mat4').propertyGroup('def').func('k').set('arg', 'T');",
      "explanation": "Physics: Unknown. Purpose: To account for the variation of thermal conductivity with temperature in the material, which is important for accurate heat transfer analysis",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Defines the temperature-dependent Young's modulus of material 'mat4' using a piecewise function.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately model the material properties of the resonator, which may change with temperature.\nWhat to do: Defines the temperature-dependent Young's modulus of material 'mat4' using a piecewise function.",
      "output": "model.material('mat4').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});",
      "explanation": "Physics: Unknown. Purpose: To accurately model the material properties of the resonator, which may change with temperature.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the thermal conductivity function of material 4 to Kelvin",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation\nWhat to do: Sets the argument unit for the thermal conductivity function of material 4 to Kelvin",
      "output": "model.material('mat4').propertyGroup('def').func('k').set('argunit', 'K');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "k"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal conductivity function unit to W/(m*K) for material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the unit for the thermal conductivity function, which is necessary for the multi-physics simulation of the MEMS resonator\nWhat to do: Sets the thermal conductivity function unit to W/(m*K) for material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');",
      "explanation": "Physics: Unknown. Purpose: Defines the unit for the thermal conductivity function, which is necessary for the multi-physics simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the expression for the sound speed property of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the material properties accurately for the simulation\nWhat to do: Sets the expression for the sound speed property of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');",
      "explanation": "Physics: Unknown. Purpose: To define the material properties accurately for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the arguments for the function 'cs' in the property group 'def' of material 'mat4' to the temperature 'T'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties based on temperature for accurate simulation of the MEMS resonator.\nWhat to do: Sets the arguments for the function 'cs' in the property group 'def' of material 'mat4' to the temperature 'T'.",
      "output": "model.material('mat4').propertyGroup('def').func('cs').set('args', {'T'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties based on temperature for accurate simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the sound speed property of material 'mat4' to be defined by a function with units of m/s",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator\nWhat to do: Sets the sound speed property of material 'mat4' to be defined by a function with units of m/s",
      "output": "model.material('mat4').propertyGroup('def').func('cs').set('fununit', 'm/s');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the 'cs' function of the 'def' property group in material 'mat4' to Kelvin.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation, specifically the units for the 'cs' function which may represent a temperature-dependent property.\nWhat to do: Sets the argument unit for the 'cs' function of the 'def' property group in material 'mat4' to Kelvin.",
      "output": "model.material('mat4').propertyGroup('def').func('cs').set('argunit', {'K'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation, specifically the units for the 'cs' function which may represent a temperature-dependent property.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ]
    },
    {
      "instruction": "[Model] Sets the temperature range for the material property 'cs' in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the temperature-dependent behavior of the material for accurate simulation results\nWhat to do: Sets the temperature range for the material property 'cs' in material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});",
      "explanation": "Physics: Unknown. Purpose: To define the temperature-dependent behavior of the material for accurate simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "cs"
      ]
    },
    {
      "instruction": "[Model] Sets the function name 'alpha_p' for the material property 'an1' in material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the function name 'alpha_p' for the material property 'an1' in material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('funcname', 'alpha_p');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Defines a material property function for the temperature derivative of density",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately model the material properties of the resonator under varying temperature conditions\nWhat to do: Defines a material property function for the temperature derivative of density",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately model the material properties of the resonator under varying temperature conditions",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Sets the arguments for the function 'an1' in the property group 'def' of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for the simulation based on the applied bias\nWhat to do: Sets the arguments for the function 'an1' in the property group 'def' of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('args', {'pA' 'T'});",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for the simulation based on the applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Sets the function 'an1' in the property group 'def' of material 'mat4' to have units of '1/K'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.\nWhat to do: Sets the function 'an1' in the property group 'def' of material 'mat4' to have units of '1/K'.",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('fununit', '1/K');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the function 'an1' in material 'mat4' to Pascals and Kelvins",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the units for the material properties used in the simulation\nWhat to do: Sets the argument unit for the function 'an1' in material 'mat4' to Pascals and Kelvins",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the units for the material properties used in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Sets the plot arguments for the function 'an1' in the property group 'def' of material 'mat4', defining the pressure and temperature range for the material properties.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the range of pressure and temperature over which the material properties will be plotted, which is important for understanding the behavior of the material under different conditions in the simulation.\nWhat to do: Sets the plot arguments for the function 'an1' in the property group 'def' of material 'mat4', defining the pressure and temperature range for the material properties.",
      "output": "model.material('mat4').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the range of pressure and temperature over which the material properties will be plotted, which is important for understanding the behavior of the material under different conditions in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an1"
      ]
    },
    {
      "instruction": "[Model] Sets the function name of the 'an2' property in material 'mat4' to 'muB'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator\nWhat to do: Sets the function name of the 'an2' property in material 'mat4' to 'muB'",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('funcname', 'muB');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the expression for the thermal expansion coefficient of material 4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To account for temperature-dependent material properties in the simulation\nWhat to do: Sets the expression for the thermal expansion coefficient of material 4",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');",
      "explanation": "Physics: Unknown. Purpose: To account for temperature-dependent material properties in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the arguments for the function 'an2' in material 'mat4' to depend on temperature 'T'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature dependence of a material property in the simulation\nWhat to do: Sets the arguments for the function 'an2' in material 'mat4' to depend on temperature 'T'",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('args', {'T'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature dependence of a material property in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the unit of the function 'an2' in the property group 'def' of material 'mat4' to 'Pa*s'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation, specifically the unit of the function 'an2' which may represent a material parameter like viscosity or damping.\nWhat to do: Sets the unit of the function 'an2' in the property group 'def' of material 'mat4' to 'Pa*s'.",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('fununit', 'Pa*s');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation, specifically the unit of the function 'an2' which may represent a material parameter like viscosity or damping.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the an2 function in the material property group of material mat4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the appropriate units for the an2 function, which may be used to describe material properties that vary with the applied bias in the MEMS resonator simulation\nWhat to do: Sets the argument unit for the an2 function in the material property group of material mat4",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('argunit', {'K'});",
      "explanation": "Physics: Unknown. Purpose: To define the appropriate units for the an2 function, which may be used to describe material properties that vary with the applied bias in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the plot arguments for the 'an2' function of material 'mat4' to plot the values at temperatures 200 and 1600.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to visualize the behavior of the material properties at different temperatures, which is important for understanding the device's performance under varying conditions.\nWhat to do: Sets the plot arguments for the 'an2' function of material 'mat4' to plot the values at temperatures 200 and 1600.",
      "output": "model.material('mat4').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to visualize the behavior of the material properties at different temperatures, which is important for understanding the device's performance under varying conditions.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "an2"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient property of material 'mat4' to an empty value",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define material properties accurately for the simulation\nWhat to do: Sets the thermal expansion coefficient property of material 'mat4' to an empty value",
      "output": "model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', '');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define material properties accurately for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the molar mass property of material 'mat4' to an empty value",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the molar mass property of material 'mat4' to an empty value",
      "output": "model.material('mat4').propertyGroup('def').set('molarmass', '');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the bulk viscosity property of material 'mat4' to an empty value",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Adjusting material properties to accurately represent the behavior of the material in the simulation\nWhat to do: Sets the bulk viscosity property of material 'mat4' to an empty value",
      "output": "model.material('mat4').propertyGroup('def').set('bulkviscosity', '');",
      "explanation": "Physics: Unknown. Purpose: Adjusting material properties to accurately represent the behavior of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal expansion coefficient for material 'mat4' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation, which will affect the behavior of the resonator under different conditions\nWhat to do: Sets the thermal expansion coefficient for material 'mat4' in the model",
      "output": "model.material('mat4').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation, which will affect the behavior of the resonator under different conditions",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the molar mass property of material 'mat4' to 0.02897 kg/mol",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the molar mass property of material 'mat4' to 0.02897 kg/mol",
      "output": "model.material('mat4').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the bulk viscosity of material 'mat4' to a temperature-dependent function 'muB(T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately model the material properties of the resonator, which may change with temperature\nWhat to do: Sets the bulk viscosity of material 'mat4' to a temperature-dependent function 'muB(T)'",
      "output": "model.material('mat4').propertyGroup('def').set('bulkviscosity', 'muB(T)');",
      "explanation": "Physics: Unknown. Purpose: To accurately model the material properties of the resonator, which may change with temperature",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permeability tensor for material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the magnetic properties of the material used in the MEMS resonator simulation\nWhat to do: Sets the relative permeability tensor for material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "output": "model.material('mat4').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the magnetic properties of the material used in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the relative permittivity tensor of material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation, which affects the electrostatic behavior of the resonator\nWhat to do: Sets the relative permittivity tensor of material 'mat4' to a diagonal matrix with all diagonal elements equal to 1",
      "output": "model.material('mat4').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation, which affects the electrostatic behavior of the resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the dynamic viscosity of material 'mat4' to a function of temperature 'eta(T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature-dependent viscosity of the material, which affects the fluid flow behavior in the simulation\nWhat to do: Sets the dynamic viscosity of material 'mat4' to a function of temperature 'eta(T)'",
      "output": "model.material('mat4').propertyGroup('def').set('dynamicviscosity', 'eta(T)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature-dependent viscosity of the material, which affects the fluid flow behavior in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the ratio of specific heats for material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the ratio of specific heats for material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').set('ratioofspecificheat', '1.4');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the electric conductivity of material 'mat4' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.\nWhat to do: Sets the electric conductivity of material 'mat4' to a diagonal tensor with values 0, 0[S/m], and 0[S/m].",
      "output": "model.material('mat4').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the electrical properties of the material used in the MEMS resonator simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the heat capacity of material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately model the temperature-dependent behavior of the material in the simulation\nWhat to do: Sets the heat capacity of material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "output": "model.material('mat4').propertyGroup('def').set('heatcapacity', 'Cp(T)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately model the temperature-dependent behavior of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the density of material 'mat4' to a function 'rho(pA,T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines material properties for accurate simulation of the MEMS resonator\nWhat to do: Sets the density of material 'mat4' to a function 'rho(pA,T)'",
      "output": "model.material('mat4').propertyGroup('def').set('density', 'rho(pA,T)');",
      "explanation": "Physics: Unknown. Purpose: Defines material properties for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the thermal conductivity of material 'mat4' to a temperature-dependent function 'k(T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately model the heat conduction in the material, which may vary with temperature\nWhat to do: Sets the thermal conductivity of material 'mat4' to a temperature-dependent function 'k(T)'",
      "output": "model.material('mat4').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately model the heat conduction in the material, which may vary with temperature",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the sound speed property of material 'mat4' to a function 'cs(T)' dependent on temperature",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation, accounting for temperature effects on sound speed\nWhat to do: Sets the sound speed property of material 'mat4' to a function 'cs(T)' dependent on temperature",
      "output": "model.material('mat4').propertyGroup('def').set('soundspeed', 'cs(T)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation, accounting for temperature effects on sound speed",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Adds an input for temperature in the material property group of material 'mat4'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature dependence of material properties for accurate simulation of the MEMS resonator.\nWhat to do: Adds an input for temperature in the material property group of material 'mat4'.",
      "output": "model.material('mat4').propertyGroup('def').addInput('temperature');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature dependence of material properties for accurate simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Adds an input for pressure in the default property group of material 'mat4'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define material properties that depend on pressure for the simulation\nWhat to do: Adds an input for pressure in the default property group of material 'mat4'",
      "output": "model.material('mat4').propertyGroup('def').addInput('pressure');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define material properties that depend on pressure for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "def"
      ]
    },
    {
      "instruction": "[Model] Sets the refractive index tensor for material 'mat4' to a diagonal matrix with elements 1, 1, and 1.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the optical properties of the material in the simulation.\nWhat to do: Sets the refractive index tensor for material 'mat4' to a diagonal matrix with elements 1, 1, and 1.",
      "output": "model.material('mat4').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the optical properties of the material in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "RefractiveIndex"
      ]
    },
    {
      "instruction": "[Model] Sets the nonlinear model property 'BA' for material 'mat4' based on the expression '(def.gamma+1)/2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the nonlinear material behavior for the simulation of the MEMS resonator\nWhat to do: Sets the nonlinear model property 'BA' for material 'mat4' based on the expression '(def.gamma+1)/2'",
      "output": "model.material('mat4').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the nonlinear material behavior for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "NonlinearModel"
      ]
    },
    {
      "instruction": "[Model] Defines a piecewise function for the heat capacity (Cp) of material 'mat4' using the ideal gas property group",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately model the thermodynamic properties of the material in the simulation\nWhat to do: Defines a piecewise function for the heat capacity (Cp) of material 'mat4' using the ideal gas property group",
      "output": "model.material('mat4').propertyGroup('idealGas').func('Cp').label('Piecewise 2');",
      "explanation": "Physics: Unknown. Purpose: To accurately model the thermodynamic properties of the material in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the argument of the specific heat capacity function for material 'mat4' to temperature 'T'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the temperature dependence of the specific heat capacity for the material, which is important for accurate simulation of the device's behavior under varying temperature conditions\nWhat to do: Sets the argument of the specific heat capacity function for material 'mat4' to temperature 'T'",
      "output": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('arg', 'T');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the temperature dependence of the specific heat capacity for the material, which is important for accurate simulation of the device's behavior under varying temperature conditions",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Defines the temperature-dependent specific heat capacity (Cp) of material 'mat4' using piecewise definition.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately model the thermal behavior of the material in the simulation.\nWhat to do: Defines the temperature-dependent specific heat capacity (Cp) of material 'mat4' using piecewise definition.",
      "output": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});",
      "explanation": "Physics: Unknown. Purpose: To accurately model the thermal behavior of the material in the simulation.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the argument unit for the specific heat capacity function of the ideal gas material property group to Kelvin",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator\nWhat to do: Sets the argument unit for the specific heat capacity function of the ideal gas material property group to Kelvin",
      "output": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('argunit', 'K');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the specific heat capacity function unit to J/(kg*K) for the material 'mat4' in the ideal gas property group",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the thermodynamic properties of the material used in the MEMS resonator simulation\nWhat to do: Sets the specific heat capacity function unit to J/(kg*K) for the material 'mat4' in the ideal gas property group",
      "output": "model.material('mat4').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the thermodynamic properties of the material used in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the specific gas constant for material 'mat4' using the ideal gas property group",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties accurately for the simulation\nWhat to do: Sets the specific gas constant for material 'mat4' using the ideal gas property group",
      "output": "model.material('mat4').propertyGroup('idealGas').set('Rs', 'R_const/Mn');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties accurately for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the heat capacity of the material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately model the material properties of the resonator, which may change with temperature during operation\nWhat to do: Sets the heat capacity of the material 'mat4' to a temperature-dependent function 'Cp(T)'",
      "output": "model.material('mat4').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately model the material properties of the resonator, which may change with temperature during operation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the ratio of specific heats for the ideal gas material property in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the thermodynamic properties of the gas in the resonator, which affects the device's performance and behavior\nWhat to do: Sets the ratio of specific heats for the ideal gas material property in the model",
      "output": "model.material('mat4').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the thermodynamic properties of the gas in the resonator, which affects the device's performance and behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the molar mass of the ideal gas material to 0.02897",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties of the gas in the simulation\nWhat to do: Sets the molar mass of the ideal gas material to 0.02897",
      "output": "model.material('mat4').propertyGroup('idealGas').set('molarmass', '0.02897');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties of the gas in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Adds an input for temperature in the idealGas property group of material mat4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the temperature of the gas in the resonator for accurate simulation of its behavior\nWhat to do: Adds an input for temperature in the idealGas property group of material mat4",
      "output": "model.material('mat4').propertyGroup('idealGas').addInput('temperature');",
      "explanation": "Physics: Unknown. Purpose: To define the temperature of the gas in the resonator for accurate simulation of its behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Adds an input for pressure in the idealGas property group of material mat4",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the pressure property of the material for accurate simulation of the MEMS resonator\nWhat to do: Adds an input for pressure in the idealGas property group of material mat4",
      "output": "model.material('mat4').propertyGroup('idealGas').addInput('pressure');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the pressure property of the material for accurate simulation of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "idealGas"
      ]
    },
    {
      "instruction": "[Model] Sets the material type of 'mat4' to non-solid",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the material properties for the simulation\nWhat to do: Sets the material type of 'mat4' to non-solid",
      "output": "model.material('mat4').materialType('nonSolid');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the material properties for the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Sets the material family of material 'mat4' to 'air'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the air region in the MEMS resonator simulation\nWhat to do: Sets the material family of material 'mat4' to 'air'",
      "output": "model.material('mat4').set('family', 'air');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the air region in the MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4"
      ]
    },
    {
      "instruction": "[Model] Selects material 'mat1' and applies it to the selection named 'uni1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the material properties for the specified selection in the geometry\nWhat to do: Selects material 'mat1' and applies it to the selection named 'uni1'",
      "output": "model.material('mat1').selection.named('uni1');",
      "explanation": "Physics: Unknown. Purpose: Defines the material properties for the specified selection in the geometry",
      "confidence": 0.1,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat1",
        "uni1"
      ]
    },
    {
      "instruction": "[Model] Selects material 'mat2' and applies it to the geometry component named 'box3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Assigns material properties to the specified geometry for accurate simulation of the MEMS resonator\nWhat to do: Selects material 'mat2' and applies it to the geometry component named 'box3'",
      "output": "model.material('mat2').selection.named('box3');",
      "explanation": "Physics: Unknown. Purpose: Assigns material properties to the specified geometry for accurate simulation of the MEMS resonator",
      "confidence": 0.1,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat2",
        "box3"
      ]
    },
    {
      "instruction": "[Model] Selects material 'mat3' and applies it to the geometry selection named 'box2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Assigns material properties to a specific part of the resonator geometry for accurate simulation\nWhat to do: Selects material 'mat3' and applies it to the geometry selection named 'box2'",
      "output": "model.material('mat3').selection.named('box2');",
      "explanation": "Physics: Unknown. Purpose: Assigns material properties to a specific part of the resonator geometry for accurate simulation",
      "confidence": 0.1,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat3",
        "box2"
      ]
    },
    {
      "instruction": "[Model] Selects the material 'mat4' and assigns it to the selection named 'dif2'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to assign material properties to a specific domain or part of the geometry for accurate simulation of the MEMS resonator.\nWhat to do: Selects the material 'mat4' and assigns it to the selection named 'dif2'.",
      "output": "model.material('mat4').selection.named('dif2');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to assign material properties to a specific domain or part of the geometry for accurate simulation of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "materials",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mat4",
        "dif2"
      ]
    },
    {
      "instruction": "[Model] Selects the 'dif1' named selection in the solid mechanics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to apply specific settings or boundary conditions to the selected entities in the solid mechanics physics interface\nWhat to do: Selects the 'dif1' named selection in the solid mechanics physics interface",
      "output": "model.physics('solid').selection.named('dif1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to apply specific settings or boundary conditions to the selected entities in the solid mechanics physics interface",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid"
      ]
    },
    {
      "instruction": "[Model] Creates a fixed constraint boundary condition on the selected boundaries",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the fixed constraint boundary condition for the MEMS resonator to obtain accurate mode shapes and frequencies\nWhat to do: Creates a fixed constraint boundary condition on the selected boundaries",
      "output": "model.physics('solid').create('fix1', 'Fixed', 2);",
      "explanation": "Physics: Unknown. Purpose: To define the fixed constraint boundary condition for the MEMS resonator to obtain accurate mode shapes and frequencies",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid",
        "fix1"
      ]
    },
    {
      "instruction": "[Model] Selects the 'int1' named boundary for fixing in the solid mechanics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to apply a fixed constraint boundary condition to the resonator, which is essential for simulating the device's response to the applied bias voltage\nWhat to do: Selects the 'int1' named boundary for fixing in the solid mechanics physics interface",
      "output": "model.physics('solid').feature('fix1').selection.named('int1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to apply a fixed constraint boundary condition to the resonator, which is essential for simulating the device's response to the applied bias voltage",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid",
        "fix1"
      ]
    },
    {
      "instruction": "[Model] Creates a symmetry boundary condition for the solid mechanics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to reduce the computational domain by exploiting symmetry in the device, which helps in faster simulation times without loss of accuracy\nWhat to do: Creates a symmetry boundary condition for the solid mechanics physics interface",
      "output": "model.physics('solid').create('sym1', 'SymmetrySolid', 2);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to reduce the computational domain by exploiting symmetry in the device, which helps in faster simulation times without loss of accuracy",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid",
        "sym1"
      ]
    },
    {
      "instruction": "[Model] Selects specific geometry entities for use in physics definitions and symmetry conditions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Defines the geometry to be used for the solid mechanics physics and symmetry boundary conditions\nWhat to do: Selects specific geometry entities for use in physics definitions and symmetry conditions",
      "output": "model.physics('solid').feature('sym1').selection.named('box7');\n\nmodel.common('free1').selection.named('dif2');\nmodel.common('sym1').selection.named('box7');",
      "explanation": "Physics: Unknown. Purpose: Defines the geometry to be used for the solid mechanics physics and symmetry boundary conditions",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "box7",
        "dif2"
      ]
    },
    {
      "instruction": "[Model] Creates a Charge Conservation node in the electrostatics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the charge conservation equation for the electrostatics physics interface in the simulation\nWhat to do: Creates a Charge Conservation node in the electrostatics physics interface",
      "output": "model.physics('es').create('ccn2', 'ChargeConservation', 3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the charge conservation equation for the electrostatics physics interface in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "ccn2"
      ]
    },
    {
      "instruction": "[Model] Sets up the charge conservation physics in the air domain of the MEMS resonator model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to ensure accurate simulation of the electrostatic interaction between the capacitor plates\nWhat to do: Sets up the charge conservation physics in the air domain of the MEMS resonator model",
      "output": "model.physics('es').feature('ccn2').label('Charge Conservation, Air');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to ensure accurate simulation of the electrostatic interaction between the capacitor plates",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "ccn2"
      ]
    },
    {
      "instruction": "[Model] Selects the 'dif2' named selection for the 'ccn2' feature of the electrostatics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to apply boundary conditions or material properties to the selected entities for the electrostatics simulation\nWhat to do: Selects the 'dif2' named selection for the 'ccn2' feature of the electrostatics physics interface",
      "output": "model.physics('es').feature('ccn2').selection.named('dif2');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to apply boundary conditions or material properties to the selected entities for the electrostatics simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "ccn2",
        "dif2"
      ]
    },
    {
      "instruction": "[Model] Creates a domain terminal for the electrostatic physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the terminal for applying the AC + DC bias voltage across the parallel plate capacitor\nWhat to do: Creates a domain terminal for the electrostatic physics interface",
      "output": "model.physics('es').create('term1', 'DomainTerminal', 3);",
      "explanation": "Physics: Unknown. Purpose: To define the terminal for applying the AC + DC bias voltage across the parallel plate capacitor",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term1"
      ]
    },
    {
      "instruction": "[Model] Selects the 'dif1' named boundary for the electrostatic physics term1 feature",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to apply the boundary conditions for the electrostatic physics in the simulation\nWhat to do: Selects the 'dif1' named boundary for the electrostatic physics term1 feature",
      "output": "model.physics('es').feature('term1').selection.named('dif1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to apply the boundary conditions for the electrostatic physics in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term1"
      ]
    },
    {
      "instruction": "[Model] Sets the terminal type to voltage for the first terminal in the electrostatics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the type of electrical boundary condition applied to the resonator, which is essential for simulating the electrostatic actuation\nWhat to do: Sets the terminal type to voltage for the first terminal in the electrostatics physics interface",
      "output": "model.physics('es').feature('term1').set('TerminalType', 'Voltage');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the type of electrical boundary condition applied to the resonator, which is essential for simulating the electrostatic actuation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term1"
      ]
    },
    {
      "instruction": "[Model] Sets the applied bias voltage to 0 for the first terminal in the electrostatic physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the initial condition for the bias voltage in the simulation of the MEMS resonator\nWhat to do: Sets the applied bias voltage to 0 for the first terminal in the electrostatic physics interface",
      "output": "model.physics('es').feature('term1').set('V0', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the initial condition for the bias voltage in the simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term1"
      ]
    },
    {
      "instruction": "[Model] Creates a ground boundary condition for the electrostatic physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set the reference potential for the electrostatic simulation\nWhat to do: Creates a ground boundary condition for the electrostatic physics interface",
      "output": "model.physics('es').create('gnd1', 'Ground', 2);",
      "explanation": "Physics: Unknown. Purpose: To set the reference potential for the electrostatic simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "gnd1"
      ]
    },
    {
      "instruction": "[Model] Selects the ground feature of the electrostatic physics interface and applies it to the named selection 'box1'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the boundary conditions for the electrostatic simulation, specifically setting the ground potential for the resonator.\nWhat to do: Selects the ground feature of the electrostatic physics interface and applies it to the named selection 'box1'.",
      "output": "model.physics('es').feature('gnd1').selection.named('box1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the boundary conditions for the electrostatic simulation, specifically setting the ground potential for the resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "gnd1"
      ]
    },
    {
      "instruction": "[Model] Creates a domain terminal for the electrostatic physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the terminal for the electrostatic analysis in the MEMS resonator simulation\nWhat to do: Creates a domain terminal for the electrostatic physics interface",
      "output": "model.physics('es').create('term2', 'DomainTerminal', 3);",
      "explanation": "Physics: Unknown. Purpose: To define the terminal for the electrostatic analysis in the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term2"
      ]
    },
    {
      "instruction": "[Model] Selects the 'geom1_boxsel4' named selection in the geometry for the 'term2' feature of the electrostatics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the boundaries or domains where the electrostatics physics interface will be applied in the simulation\nWhat to do: Selects the 'geom1_boxsel4' named selection in the geometry for the 'term2' feature of the electrostatics physics interface",
      "output": "model.physics('es').feature('term2').selection.named('geom1_boxsel4');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the boundaries or domains where the electrostatics physics interface will be applied in the simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "boundary_conditions",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term2",
        "geom1_boxsel4"
      ]
    },
    {
      "instruction": "[Model] Sets the terminal type to voltage for the second terminal in the electrostatics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the type of terminal for the electrostatics simulation, which is essential for the resonator's behavior analysis\nWhat to do: Sets the terminal type to voltage for the second terminal in the electrostatics physics interface",
      "output": "model.physics('es').feature('term2').set('TerminalType', 'Voltage');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the type of terminal for the electrostatics simulation, which is essential for the resonator's behavior analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term2"
      ]
    },
    {
      "instruction": "[Model] Sets the applied DC bias voltage (V0) for the second terminal of the electrostatic physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the DC bias voltage for the electrostatic analysis of the MEMS resonator\nWhat to do: Sets the applied DC bias voltage (V0) for the second terminal of the electrostatic physics interface",
      "output": "model.physics('es').feature('term2').set('V0', 'Vdc');",
      "explanation": "Physics: Unknown. Purpose: To define the DC bias voltage for the electrostatic analysis of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "es",
        "term2"
      ]
    },
    {
      "instruction": "[Model] Creates a free triangular mesh named 'ftri1' using the meshing sequence 'mesh1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To generate a mesh for the resonator geometry to perform the simulation accurately\nWhat to do: Creates a free triangular mesh named 'ftri1' using the meshing sequence 'mesh1'",
      "output": "model.mesh('mesh1').create('ftri1', 'FreeTri');",
      "explanation": "Physics: Unknown. Purpose: To generate a mesh for the resonator geometry to perform the simulation accurately",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "ftri1"
      ]
    },
    {
      "instruction": "[Model] Selects a named geometric entity for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To control the meshing of the selected geometry in the resonator simulation\nWhat to do: Selects a named geometric entity for meshing",
      "output": "model.mesh('mesh1').feature('ftri1').selection.named('geom1_sel2');",
      "explanation": "Physics: Unknown. Purpose: To control the meshing of the selected geometry in the resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "ftri1",
        "geom1_sel2"
      ]
    },
    {
      "instruction": "[Model] Runs the meshing sequence 'ftri1' on the mesh named 'mesh1' to generate the finite element mesh for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Meshing is required to discretize the geometry into finite elements for accurate simulation of the MEMS resonator\nWhat to do: Runs the meshing sequence 'ftri1' on the mesh named 'mesh1' to generate the finite element mesh for the model",
      "output": "model.mesh('mesh1').run('ftri1');",
      "explanation": "Physics: Unknown. Purpose: Meshing is required to discretize the geometry into finite elements for accurate simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "ftri1"
      ]
    },
    {
      "instruction": "[Model] Creates a mesh sweep named 'swe1' using the mesh 'mesh1' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To generate a mesh suitable for the simulation of the MEMS resonator, considering the applied bias\nWhat to do: Creates a mesh sweep named 'swe1' using the mesh 'mesh1' in the model",
      "output": "model.mesh('mesh1').create('swe1', 'Sweep');",
      "explanation": "Physics: Unknown. Purpose: To generate a mesh suitable for the simulation of the MEMS resonator, considering the applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "swe1"
      ]
    },
    {
      "instruction": "[Model] Runs the mesh sequence 'swe1' on the mesh object 'mesh1' to generate the mesh for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator's behavior under applied bias\nWhat to do: Runs the mesh sequence 'swe1' on the mesh object 'mesh1' to generate the mesh for the model",
      "output": "model.mesh('mesh1').run('swe1');",
      "explanation": "Physics: Unknown. Purpose: Meshing is required to discretize the geometry for accurate simulation of the MEMS resonator's behavior under applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "swe1"
      ]
    },
    {
      "instruction": "[Model] Sets the label of the stationary study to 'Stationary'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to organize and identify the stationary study in the simulation\nWhat to do: Sets the label of the stationary study to 'Stationary'",
      "output": "model.study('std1').label('Stationary');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to organize and identify the stationary study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1"
      ]
    },
    {
      "instruction": "[Model] Creates a solution object named 'sol1' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To prepare for solving the simulation and obtaining results\nWhat to do: Creates a solution object named 'sol1' in the model",
      "output": "model.sol.create('sol1');",
      "explanation": "Physics: Unknown. Purpose: To prepare for solving the simulation and obtaining results",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1"
      ]
    },
    {
      "instruction": "[Model] Selects the geometry entity with ID 3 for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation\nWhat to do: Selects the geometry entity with ID 3 for meshing",
      "output": "model.mesh('mesh1').stat.selection.geom(3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "3"
      ]
    },
    {
      "instruction": "[Model] Sets the mesh selection for specific elements in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to refine the mesh in specific regions of the device for accurate simulation results\nWhat to do: Sets the mesh selection for specific elements in the model",
      "output": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to refine the mesh in specific regions of the device for accurate simulation results",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Accesses the solution 'sol1' and study 'std1' from the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up the study and solution for the simulation of the MEMS resonator\nWhat to do: Accesses the solution 'sol1' and study 'std1' from the model",
      "output": "model.sol('sol1').study('std1');",
      "explanation": "Physics: Unknown. Purpose: To set up the study and solution for the simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "std1"
      ]
    },
    {
      "instruction": "[Model] Sets the solution number to not list in the stationary study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the output of the stationary study in the simulation\nWhat to do: Sets the solution number to not list in the stationary study",
      "output": "model.study('std1').feature('stat').set('notlistsolnum', 1);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the output of the stationary study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to automatically choose the solution number for the stationary study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to ensure the solver can automatically determine the appropriate solution number for the stationary study in the simulation of the MEMS resonator\nWhat to do: Sets the solver to automatically choose the solution number for the stationary study",
      "output": "model.study('std1').feature('stat').set('notsolnum', 'auto');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to ensure the solver can automatically determine the appropriate solution number for the stationary study in the simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the number of solutions to be computed in the stationary solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to specify the number of solutions for the normal mode shapes and frequencies analysis\nWhat to do: Sets the number of solutions to be computed in the stationary solver",
      "output": "model.study('std1').feature('stat').set('listsolnum', 1);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to specify the number of solutions for the normal mode shapes and frequencies analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the solution number to 'auto' for the stationary study 'std1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to automatically determine the number of solutions for the stationary study in the simulation\nWhat to do: Sets the solution number to 'auto' for the stationary study 'std1'",
      "output": "model.study('std1').feature('stat').set('solnum', 'auto');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to automatically determine the number of solutions for the stationary study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std1",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Creates a study step for the stationary solver in the solution sequence",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to set up the solver sequence for computing the normal mode shapes and frequencies of the MEMS resonator under the influence of the applied bias voltage\nWhat to do: Creates a study step for the stationary solver in the solution sequence",
      "output": "model.sol('sol1').create('st1', 'StudyStep');\nmodel.sol('sol1').feature('st1').set('study', 'std1');\nmodel.sol('sol1').feature('st1').set('studystep', 'stat');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to set up the solver sequence for computing the normal mode shapes and frequencies of the MEMS resonator under the influence of the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "st1"
      ]
    },
    {
      "instruction": "[Model] Configures the solver to scale the variables for the spatial displacement and the u component",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to adjust the scaling of the variables to obtain accurate results for the resonator's behavior under the applied bias voltage\nWhat to do: Configures the solver to scale the variables for the spatial displacement and the u component",
      "output": "model.sol('sol1').create('v1', 'Variables');\nmodel.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol1').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol1').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*4.097926304852248E-5');\nmodel.sol('sol1').feature('v1').feature('comp1_u').set('scaleval', '1e-2*4.097926304852248E-5');\nmodel.sol('sol1').feature('v1').set('control', 'stat');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to adjust the scaling of the variables to obtain accurate results for the resonator's behavior under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "v1"
      ]
    },
    {
      "instruction": "[Model] Creates a stationary solver and enables caching of the solution pattern",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the biased resonator\nWhat to do: Creates a stationary solver and enables caching of the solution pattern",
      "output": "model.sol('sol1').create('s1', 'Stationary');\nmodel.sol('sol1').feature('s1').feature('aDef').set('cachepattern', true);",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "aDef"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated solver for the study 's1' in the solution 'sol1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to solve the multi-physics problem in a segregated manner, which can be more efficient and stable for certain types of problems\nWhat to do: Creates a segregated solver for the study 's1' in the solution 'sol1'",
      "output": "model.sol('sol1').feature('s1').create('seDef', 'Segregated');",
      "explanation": "Physics: Unknown. Purpose: Needed to solve the multi-physics problem in a segregated manner, which can be more efficient and stable for certain types of problems",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated solver and removes the default study step",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator\nWhat to do: Creates a segregated solver and removes the default study step",
      "output": "model.sol('sol1').feature('s1').create('se1', 'Segregated');\nmodel.sol('sol1').feature('s1').feature('se1').feature.remove('ssDef');",
      "explanation": "Physics: Unknown. Purpose: To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ssDef"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage\nWhat to do: Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "output": "model.sol('sol1').feature('s1').feature('se1').create('ss1', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ss1"
      ]
    },
    {
      "instruction": "[Model] Configures the solver settings for the electric potential study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias\nWhat to do: Configures the solver settings for the electric potential study",
      "output": "model.sol('sol1').feature('s1').create('d1', 'Direct');\nmodel.sol('sol1').feature('s1').feature('d1').set('linsolver', 'mumps');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss1').label('Electric potential');",
      "explanation": "Physics: Unknown. Purpose: To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "d1",
        "se1",
        "ss1"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated step for solving the displacement field of the MEMS resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to compute the normal mode shapes and frequencies of the resonator as a function of applied bias\nWhat to do: Creates a segregated step for solving the displacement field of the MEMS resonator",
      "output": "model.sol('sol1').feature('s1').feature('se1').create('ss2', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss2').label('Displacement field');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "se1",
        "ss2"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated step for spatial mesh displacement and sets various solver settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to accurately compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a segregated step for spatial mesh displacement and sets various solver settings",
      "output": "model.sol('sol1').feature('s1').feature('se1').create('ss3', 'SegregatedStep');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');\nmodel.sol('sol1').feature('s1').feature('se1').feature('ss3').label('Spatial mesh displacement');\nmodel.sol('sol1').feature('s1').feature('se1').set('segstabacc', 'segaacc');\nmodel.sol('sol1').feature('s1').feature('se1').set('segaaccdim', 5);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to accurately compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "ss3"
      ]
    },
    {
      "instruction": "[Model] Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To efficiently solve the system of equations for the electrostatic analysis with the applied bias\nWhat to do: Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "output": "model.sol('sol1').feature('s1').create('i1', 'Iterative');\nmodel.sol('sol1').feature('s1').feature('i1').set('linsolver', 'gmres');\nmodel.sol('sol1').feature('s1').feature('i1').set('rhob', 40);\nmodel.sol('sol1').feature('s1').feature('i1').set('nlinnormuse', true);\nmodel.sol('sol1').feature('s1').feature('i1').set('itrestart', 5000);\nmodel.sol('sol1').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');",
      "explanation": "Physics: Unknown. Purpose: To efficiently solve the system of equations for the electrostatic analysis with the applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1"
      ]
    },
    {
      "instruction": "[Model] Configures a multigrid solver for the study 'sol1' using the SA-AMG method and sets hybridization and variables",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation\nWhat to do: Configures a multigrid solver for the study 'sol1' using the SA-AMG method and sets hybridization and variables",
      "output": "model.sol('sol1').feature('s1').feature('i1').create('mg1', 'Multigrid');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V'});\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);",
      "explanation": "Physics: Unknown. Purpose: Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "mg1"
      ]
    },
    {
      "instruction": "[Model] Creates a SOR (Successive Over-Relaxation) preconditioner and sets the relaxation factor to 0.8",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the convergence of the solver for the biased resonator simulation\nWhat to do: Creates a SOR (Successive Over-Relaxation) preconditioner and sets the relaxation factor to 0.8",
      "output": "model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);",
      "explanation": "Physics: Unknown. Purpose: Improves the convergence of the solver for the biased resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "s1",
        "i1",
        "mg1",
        "pr",
        "so1"
      ]
    },
    {
      "instruction": "[Model] Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the convergence of the solver for the biased resonator simulation\nWhat to do: Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "output": "model.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');\nmodel.sol('sol1').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);",
      "explanation": "Physics: Unknown. Purpose: Improves the convergence of the solver for the biased resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "mg1",
        "po",
        "so1"
      ]
    },
    {
      "instruction": "[Model] Configures a direct preconditioner for the solver and removes default settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation\nWhat to do: Configures a direct preconditioner for the solver and removes default settings",
      "output": "model.sol('sol1').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');\nmodel.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');\nmodel.sol('sol1').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});\nmodel.sol('sol1').feature('s1').feature.remove('fcDef');\nmodel.sol('sol1').feature('s1').feature.remove('seDef');\nmodel.sol('sol1').attach('std1');",
      "explanation": "Physics: Unknown. Purpose: Improves the solver efficiency for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol1",
        "s1",
        "i1",
        "dp1",
        "std1"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D plot group for displacement and sets the data source and plot type",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the displacement of the MEMS resonator under applied bias\nWhat to do: Creates a 3D plot group for displacement and sets the data source and plot type",
      "output": "model.result.create('pg1', 'PlotGroup3D');\nmodel.result('pg1').set('data', 'dset1');\nmodel.result('pg1').set('defaultPlotID', 'displacement');\nmodel.result('pg1').label('Displacement (solid)');\nmodel.result('pg1').set('frametype', 'spatial');",
      "explanation": "Physics: Unknown. Purpose: To visualize the displacement of the MEMS resonator under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg1"
      ]
    },
    {
      "instruction": "[Model] Creates a volume plot of the solid displacement field with custom threshold and color table settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the displacement field of the biased resonator under electrostatic actuation\nWhat to do: Creates a volume plot of the solid displacement field with custom threshold and color table settings",
      "output": "model.result('pg1').create('vol1', 'Volume');\nmodel.result('pg1').feature('vol1').set('expr', {'solid.disp'});\nmodel.result('pg1').feature('vol1').set('threshold', 'manual');\nmodel.result('pg1').feature('vol1').set('thresholdvalue', 0.2);\nmodel.result('pg1').feature('vol1').set('resolution', 'custom');\nmodel.result('pg1').feature('vol1').set('refine', 2);\nmodel.result('pg1').feature('vol1').set('colortable', 'SpectrumLight');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the displacement field of the biased resonator under electrostatic actuation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg1",
        "vol1"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D plot group for electric potential and sets its properties",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the electric potential distribution in the MEMS resonator under applied bias\nWhat to do: Creates a 3D plot group for electric potential and sets its properties",
      "output": "model.result.create('pg2', 'PlotGroup3D');\nmodel.result('pg2').label('Electric Potential (es)');\nmodel.result('pg2').set('frametype', 'spatial');\nmodel.result('pg2').set('showlegendsmaxmin', true);\nmodel.result('pg2').set('data', 'dset1');\nmodel.result('pg2').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom2/pdef1/pcond2/pcond1/pcond1/pg1');",
      "explanation": "Physics: Unknown. Purpose: To visualize the electric potential distribution in the MEMS resonator under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg2"
      ]
    },
    {
      "instruction": "[Model] Creates a multislice plot of the electrostatic potential (V) in the resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the electrostatic potential distribution in the resonator at different bias voltages\nWhat to do: Creates a multislice plot of the electrostatic potential (V) in the resonator",
      "output": "model.result('pg2').feature.create('mslc1', 'Multislice');\nmodel.result('pg2').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('mslc1').set('solutionparams', 'parent');\nmodel.result('pg2').feature('mslc1').set('expr', 'V');\nmodel.result('pg2').feature('mslc1').set('multiplanexmethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('xcoord', 'es.CPx');\nmodel.result('pg2').feature('mslc1').set('multiplaneymethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('ycoord', 'es.CPy');\nmodel.result('pg2').feature('mslc1').set('multiplanezmethod', 'coord');\nmodel.result('pg2').feature('mslc1').set('zcoord', 'es.CPz');\nmodel.result('pg2').feature('mslc1').set('colortable', 'Dipole');\nmodel.result('pg2').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('mslc1').set('data', 'parent');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the electrostatic potential distribution in the resonator at different bias voltages",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg2",
        "mslc1"
      ]
    },
    {
      "instruction": "[Model] Creates a streamline plot of the electric field in the resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias\nWhat to do: Creates a streamline plot of the electric field in the resonator",
      "output": "model.result('pg2').feature.create('strmsl1', 'StreamlineMultislice');\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('solutionparams', 'parent');\nmodel.result('pg2').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});\nmodel.result('pg2').feature('strmsl1').set('multiplanexmethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('xcoord', 'es.CPx');\nmodel.result('pg2').feature('strmsl1').set('multiplaneymethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('ycoord', 'es.CPy');\nmodel.result('pg2').feature('strmsl1').set('multiplanezmethod', 'coord');\nmodel.result('pg2').feature('strmsl1').set('zcoord', 'es.CPz');\nmodel.result('pg2').feature('strmsl1').set('titletype', 'none');\nmodel.result('pg2').feature('strmsl1').set('posmethod', 'uniform');\nmodel.result('pg2').feature('strmsl1').set('udist', 0.02);\nmodel.result('pg2').feature('strmsl1').set('maxlen', 0.4);\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('inheritcolor', false);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg2').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg2').feature('strmsl1').set('data', 'parent');\nmodel.result('pg2').feature('strmsl1').set('inheritplot', 'mslc1');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg2",
        "strmsl1"
      ]
    },
    {
      "instruction": "[Model] Creates a color expression for the results plot and sets its properties",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the voltage distribution across the MEMS resonator under applied bias\nWhat to do: Creates a color expression for the results plot and sets its properties",
      "output": "model.result('pg2').feature('strmsl1').feature.create('col1', 'Color');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('expr', 'V');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('colortable', 'DipoleDark');\nmodel.result('pg2').feature('strmsl1').feature('col1').set('colorlegend', false);",
      "explanation": "Physics: Unknown. Purpose: To visualize the voltage distribution across the MEMS resonator under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg2",
        "strmsl1",
        "col1"
      ]
    },
    {
      "instruction": "[Model] Creates a filter for the results to exclude the scaling system domain",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to filter out the scaling system domain from the results, which is not relevant for the analysis of the resonator's behavior\nWhat to do: Creates a filter for the results to exclude the scaling system domain",
      "output": "model.result('pg2').feature('strmsl1').feature.create('filt1', 'Filter');\nmodel.result('pg2').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to filter out the scaling system domain from the results, which is not relevant for the analysis of the resonator's behavior",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg2",
        "strmsl1",
        "filt1"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D plot group for the electric field norm and sets its properties.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the electric field norm distribution in the MEMS resonator under applied bias.\nWhat to do: Creates a 3D plot group for the electric field norm and sets its properties.",
      "output": "model.result.create('pg3', 'PlotGroup3D');\nmodel.result('pg3').label('Electric Field Norm (es)');\nmodel.result('pg3').set('frametype', 'spatial');\nmodel.result('pg3').set('showlegendsmaxmin', true);\nmodel.result('pg3').set('data', 'dset1');\nmodel.result('pg3').set('defaultPlotID', 'InterfaceComponents/PlotDefaults/icom3/pdef1/pcond2/pcond1/pg1');",
      "explanation": "Physics: Unknown. Purpose: To visualize the electric field norm distribution in the MEMS resonator under applied bias.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg3"
      ]
    },
    {
      "instruction": "[Model] Creates a multislice plot of the electric field norm in the resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the electric field distribution for different bias voltages\nWhat to do: Creates a multislice plot of the electric field norm in the resonator",
      "output": "model.result('pg3').feature.create('mslc1', 'Multislice');\nmodel.result('pg3').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('mslc1').set('solutionparams', 'parent');\nmodel.result('pg3').feature('mslc1').set('expr', 'es.normE');\nmodel.result('pg3').feature('mslc1').set('multiplanexmethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('xcoord', 'es.CPx');\nmodel.result('pg3').feature('mslc1').set('multiplaneymethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('ycoord', 'es.CPy');\nmodel.result('pg3').feature('mslc1').set('multiplanezmethod', 'coord');\nmodel.result('pg3').feature('mslc1').set('zcoord', 'es.CPz');\nmodel.result('pg3').feature('mslc1').set('colortable', 'Prism');\nmodel.result('pg3').feature('mslc1').set('colortabletrans', 'nonlinear');\nmodel.result('pg3').feature('mslc1').set('colorcalibration', -0.8);\nmodel.result('pg3').feature('mslc1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('mslc1').set('data', 'parent');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the electric field distribution for different bias voltages",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg3",
        "mslc1"
      ]
    },
    {
      "instruction": "[Model] Creates a streamline plot of the electric field in the resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias\nWhat to do: Creates a streamline plot of the electric field in the resonator",
      "output": "model.result('pg3').feature.create('strmsl1', 'StreamlineMultislice');\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('solutionparams', 'parent');\nmodel.result('pg3').feature('strmsl1').set('expr', {'es.Ex' 'es.Ey' 'es.Ez'});\nmodel.result('pg3').feature('strmsl1').set('multiplanexmethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('xcoord', 'es.CPx');\nmodel.result('pg3').feature('strmsl1').set('multiplaneymethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('ycoord', 'es.CPy');\nmodel.result('pg3').feature('strmsl1').set('multiplanezmethod', 'coord');\nmodel.result('pg3').feature('strmsl1').set('zcoord', 'es.CPz');\nmodel.result('pg3').feature('strmsl1').set('titletype', 'none');\nmodel.result('pg3').feature('strmsl1').set('posmethod', 'uniform');\nmodel.result('pg3').feature('strmsl1').set('udist', 0.02);\nmodel.result('pg3').feature('strmsl1').set('maxlen', 0.4);\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('inheritcolor', false);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('showsolutionparams', 'on');\nmodel.result('pg3').feature('strmsl1').set('maxtime', Inf);\nmodel.result('pg3').feature('strmsl1').set('data', 'parent');\nmodel.result('pg3').feature('strmsl1').set('inheritplot', 'mslc1');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the electric field distribution for analysis and understanding of the device behavior under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg3",
        "strmsl1"
      ]
    },
    {
      "instruction": "[Model] Creates a color expression for the electric field norm and sets its properties",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the electric field distribution in the resonator under applied bias\nWhat to do: Creates a color expression for the electric field norm and sets its properties",
      "output": "model.result('pg3').feature('strmsl1').feature.create('col1', 'Color');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('expr', 'es.normE');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colortable', 'PrismDark');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colorlegend', false);\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colortabletrans', 'nonlinear');\nmodel.result('pg3').feature('strmsl1').feature('col1').set('colorcalibration', -0.8);",
      "explanation": "Physics: Unknown. Purpose: To visualize the electric field distribution in the resonator under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg3",
        "strmsl1",
        "col1"
      ]
    },
    {
      "instruction": "[Model] Creates a filter for the results and runs the solution and result group",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Filtering the results to exclude scaling system domains and running the solution to obtain the normal mode shapes and frequencies\nWhat to do: Creates a filter for the results and runs the solution and result group",
      "output": "model.result('pg3').feature('strmsl1').feature.create('filt1', 'Filter');\nmodel.result('pg3').feature('strmsl1').feature('filt1').set('expr', '!isScalingSystemDomain');\n\nmodel.sol('sol1').runAll;\n\nmodel.result('pg1').run;",
      "explanation": "Physics: Unknown. Purpose: Filtering the results to exclude scaling system domains and running the solution to obtain the normal mode shapes and frequencies",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results|study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg3",
        "strmsl1",
        "filt1",
        "sol1",
        "pg1"
      ]
    },
    {
      "instruction": "[Model] Creates a mirrored dataset of the 3D results",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the symmetry of the resonator's mode shapes\nWhat to do: Creates a mirrored dataset of the 3D results",
      "output": "model.result.dataset.create('mir1', 'Mirror3D');",
      "explanation": "Physics: Unknown. Purpose: To analyze the symmetry of the resonator's mode shapes",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mir1"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D plot group, runs it, and sets the data to 'mir1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the normal mode shapes and frequencies of the biased MEMS resonator\nWhat to do: Creates a 3D plot group, runs it, and sets the data to 'mir1'",
      "output": "model.result.create('pg4', 'PlotGroup3D');\nmodel.result('pg4').run;\nmodel.result('pg4').set('data', 'mir1');",
      "explanation": "Physics: Unknown. Purpose: To visualize the normal mode shapes and frequencies of the biased MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg4",
        "mir1"
      ]
    },
    {
      "instruction": "[Model] Creates a volume plot of the Z-component of the displacement field",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the displacement field to analyze the resonator's behavior under applied bias\nWhat to do: Creates a volume plot of the Z-component of the displacement field",
      "output": "model.result('pg4').create('vol1', 'Volume');\nmodel.result('pg4').feature('vol1').set('expr', 'w');\nmodel.result('pg4').feature('vol1').set('descr', 'Displacement field, Z-component');\nmodel.result('pg4').feature('vol1').set('colortabletrans', 'reverse');\nmodel.result('pg4').run;",
      "explanation": "Physics: Unknown. Purpose: Visualizing the displacement field to analyze the resonator's behavior under applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg4",
        "vol1"
      ]
    },
    {
      "instruction": "[Model] Creates an isosurface plot of the electric potential in the biased resonator model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Visualizing the distribution of electric potential across the resonator at different bias levels\nWhat to do: Creates an isosurface plot of the electric potential in the biased resonator model",
      "output": "model.result('pg4').create('iso1', 'Isosurface');\nmodel.result('pg4').feature('iso1').set('expr', 'V');\nmodel.result('pg4').feature('iso1').set('descr', 'Electric potential');\nmodel.result('pg4').feature('iso1').set('levelmethod', 'levels');\nmodel.result('pg4').feature('iso1').set('levels', '10 20 30');\nmodel.result('pg4').feature('iso1').set('colortable', 'Traffic');\nmodel.result('pg4').feature('iso1').set('colorlegend', false);\nmodel.result('pg4').run;\nmodel.result('pg4').label('Biased Displacement');",
      "explanation": "Physics: Unknown. Purpose: Visualizing the distribution of electric potential across the resonator at different bias levels",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg4",
        "iso1"
      ]
    },
    {
      "instruction": "[Model] Creates a new 3D view, sets camera properties for an existing view, and runs the stationary analysis of a biased resonator model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize and analyze the deformation of the resonator under an applied DC bias\nWhat to do: Creates a new 3D view, sets camera properties for an existing view, and runs the stationary analysis of a biased resonator model",
      "output": "model.view.create('view4', 3);\nmodel.view('view3').set('locked', true);\nmodel.view('view3').camera.set('zoomanglefull', 22);\nmodel.view('view3').camera.setIndex('position', 130.13919, 0);\nmodel.view('view3').camera.setIndex('position', 147.58559, 1);\nmodel.view('view3').camera.setIndex('position', 111.8392, 2);\nmodel.view('view3').camera.setIndex('target', 19.45, 0);\nmodel.view('view3').camera.set('target', [19.45 0 1.15]);\nmodel.view('view3').camera.setIndex('up', 0.3087, 0);\nmodel.view('view3').camera.setIndex('up', 0.4116, 1);\nmodel.view('view3').camera.setIndex('up', 0.85749, 2);\nmodel.view('view3').camera.setIndex('rotationpoint', -19.45, 0);\nmodel.view('view3').camera.setIndex('rotationpoint', 1.15, 2);\nmodel.view('view3').camera.setIndex('viewoffset', -0.2, 0);\nmodel.view('view3').camera.set('viewoffset', [-0.2 -0.1]);\n\nmodel.result('pg4').run;\nmodel.result('pg4').set('view', 'view3');\nmodel.result('pg4').run;\n\nmodel.title(['Stationary Analysis of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 3D']);\n\nmodel.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the deformation of the resonator is computed with an applied DC bias.');\n\nmodel.label('biased_resonator_3d_basic.mph');\n\nmodel.result('pg4').run;",
      "explanation": "Physics: Unknown. Purpose: To visualize and analyze the deformation of the resonator under an applied DC bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "view4",
        "view3",
        "pg4"
      ]
    },
    {
      "instruction": "[Model] Runs the geometry sequence 'ext1' in the geometry 'geom1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to execute the geometry sequence and create the geometry for the MEMS resonator simulation\nWhat to do: Runs the geometry sequence 'ext1' in the geometry 'geom1'",
      "output": "model.geom('geom1').run('ext1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to execute the geometry sequence and create the geometry for the MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "ext1"
      ]
    },
    {
      "instruction": "[Model] Creates a mirror geometry feature named 'mir1' in the geometry 'geom1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to create a symmetric geometry for the MEMS resonator, reducing the computational domain and speeding up the simulation\nWhat to do: Creates a mirror geometry feature named 'mir1' in the geometry 'geom1'",
      "output": "model.geom('geom1').create('mir1', 'Mirror');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to create a symmetric geometry for the MEMS resonator, reducing the computational domain and speeding up the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "mir1"
      ]
    },
    {
      "instruction": "[Model] Sets the axis of the mirror feature 'mir1' in geometry 'geom1' to [1, 0, 0].",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the orientation of the mirror feature used in the geometry of the MEMS resonator simulation.\nWhat to do: Sets the axis of the mirror feature 'mir1' in geometry 'geom1' to [1, 0, 0].",
      "output": "model.geom('geom1').feature('mir1').set('axis', [1 0 0]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the orientation of the mirror feature used in the geometry of the MEMS resonator simulation.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "mir1"
      ]
    },
    {
      "instruction": "[Model] Sets the selection for the mirror feature 'mir1' in geometry 'geom1' to include 'blk1' and 'ext1' entities.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the symmetry of the model, which helps reduce the computational domain and speed up the simulation.\nWhat to do: Sets the selection for the mirror feature 'mir1' in geometry 'geom1' to include 'blk1' and 'ext1' entities.",
      "output": "model.geom('geom1').feature('mir1').selection('input').set({'blk1' 'ext1'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the symmetry of the model, which helps reduce the computational domain and speed up the simulation.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "mir1"
      ]
    },
    {
      "instruction": "[Model] This code keeps the symmetry feature 'mir1' in geometry 'geom1'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to maintain the symmetry of the resonator model for accurate simulation.\nWhat to do: This code keeps the symmetry feature 'mir1' in geometry 'geom1'.",
      "output": "model.geom('geom1').feature('mir1').set('keep', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to maintain the symmetry of the resonator model for accurate simulation.",
      "confidence": 0.1,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "mir1"
      ]
    },
    {
      "instruction": "[Model] Runs the pre-built geometry sequence and sets the view to render wireframe",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To prepare the geometry for the simulation and set up the visualization\nWhat to do: Runs the pre-built geometry sequence and sets the view to render wireframe",
      "output": "model.geom('geom1').runPre('fin');\n\nmodel.view('view1').set('renderwireframe', true);",
      "explanation": "Physics: Unknown. Purpose: To prepare the geometry for the simulation and set up the visualization",
      "confidence": 0.3,
      "source": "code_first",
      "category": "geometry|results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1",
        "view1"
      ]
    },
    {
      "instruction": "[Model] Runs the geometry sequence named 'geom1'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To create the geometry of the MEMS resonator for the simulation\nWhat to do: Runs the geometry sequence named 'geom1'",
      "output": "model.geom('geom1').run;",
      "explanation": "Physics: Unknown. Purpose: To create the geometry of the MEMS resonator for the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "geometry",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "geom1"
      ]
    },
    {
      "instruction": "[Model] Creates an interpolation function from an external file and sets its properties",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To import experimental data for comparison with simulation results\nWhat to do: Creates an interpolation function from an external file and sets its properties",
      "output": "model.func.create('int1', 'Interpolation');\nmodel.func('int1').model('comp1');\nmodel.func('int1').set('source', 'file');\nmodel.func('int1').set('filename', 'biased_resonator_3d_modes_experiment.txt');\nmodel.func('int1').importData;\nmodel.func('int1').setIndex('argunit', 'Hz', 0);\nmodel.func('int1').setIndex('fununit', 'V', 0);\nmodel.func('int1').set('extrap', 'value');\nmodel.func('int1').set('extrapvalue', NaN);",
      "explanation": "Physics: Unknown. Purpose: To import experimental data for comparison with simulation results",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "int1"
      ]
    },
    {
      "instruction": "[Model] Deactivates the symmetry boundary condition for the solid mechanics physics interface",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the symmetry settings for the solid mechanics physics interface in the simulation\nWhat to do: Deactivates the symmetry boundary condition for the solid mechanics physics interface",
      "output": "model.physics('solid').feature('sym1').active(false);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the symmetry settings for the solid mechanics physics interface in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "physics",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "solid",
        "sym1"
      ]
    },
    {
      "instruction": "[Model] Sets a custom mesh size for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To control the mesh resolution for accurate results in the simulation of the MEMS resonator\nWhat to do: Sets a custom mesh size for the model",
      "output": "model.mesh('mesh1').feature('size').set('custom', true);",
      "explanation": "Physics: Unknown. Purpose: To control the mesh resolution for accurate results in the simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "size"
      ]
    },
    {
      "instruction": "[Model] Sets the minimum mesh size to 1 for the mesh named 'mesh1' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the mesh quality and ensure accurate results in the simulation of the MEMS resonator\nWhat to do: Sets the minimum mesh size to 1 for the mesh named 'mesh1' in the model",
      "output": "model.mesh('mesh1').feature('size').set('hmin', 1);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the mesh quality and ensure accurate results in the simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "size"
      ]
    },
    {
      "instruction": "[Model] Runs the meshing sequence named 'mesh1' to generate the mesh for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Meshing is required to discretize the geometry for accurate simulation and analysis\nWhat to do: Runs the meshing sequence named 'mesh1' to generate the mesh for the model",
      "output": "model.mesh('mesh1').run;",
      "explanation": "Physics: Unknown. Purpose: Meshing is required to discretize the geometry for accurate simulation and analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Creates a new study with the identifier 'std2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a new study with the identifier 'std2'",
      "output": "model.study.create('std2');",
      "explanation": "Physics: Unknown. Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2"
      ]
    },
    {
      "instruction": "[Model] Creates an eigenfrequency study for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates an eigenfrequency study for the model",
      "output": "model.study('std2').create('eig', 'Eigenfrequency');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the plot group to 'Default' for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to specify the plot settings for the eigenvalue study in the simulation\nWhat to do: Sets the plot group to 'Default' for the eigenvalue study",
      "output": "model.study('std2').feature('eig').set('plotgroup', 'Default');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to specify the plot settings for the eigenvalue study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the shift value to 1 Hz for the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies as a function of applied bias\nWhat to do: Sets the shift value to 1 Hz for the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('shift', '1[Hz]');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Enables the check for eigenfrequency region in the study settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To ensure the eigenfrequency analysis is performed within the specified frequency range\nWhat to do: Enables the check for eigenfrequency region in the study settings",
      "output": "model.study('std2').feature('eig').set('chkeigregion', true);",
      "explanation": "Physics: Unknown. Purpose: To ensure the eigenfrequency analysis is performed within the specified frequency range",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the convergence criterion for the eigenvalue solver to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the accuracy of the eigenvalue solver in the study\nWhat to do: Sets the convergence criterion for the eigenvalue solver to 1",
      "output": "model.study('std2').feature('eig').set('conrad', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the accuracy of the eigenvalue solver in the study",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to use the Conard-Dyn-HM solver for solving the eigenvalue problem in the study, which will compute the normal mode shapes and frequencies of the biased resonator\nWhat to do: Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "output": "model.study('std2').feature('eig').set('conradynhm', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to use the Conard-Dyn-HM solver for solving the eigenvalue problem in the study, which will compute the normal mode shapes and frequencies of the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Disables the storage of the factorization of the stiffness matrix for the eigenvalue solver in study 'std2'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to reduce memory usage during the simulation, as the factorization of the stiffness matrix is not required for subsequent computations.\nWhat to do: Disables the storage of the factorization of the stiffness matrix for the eigenvalue solver in study 'std2'.",
      "output": "model.study('std2').feature('eig').set('storefact', false);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to reduce memory usage during the simulation, as the factorization of the stiffness matrix is not required for subsequent computations.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the linear solver to be used for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Determines the solver for finding the normal mode shapes and frequencies of the biased resonator\nWhat to do: Sets the linear solver to be used for the eigenvalue study",
      "output": "model.study('std2').feature('eig').set('linpsolnum', 'auto');",
      "explanation": "Physics: Unknown. Purpose: Determines the solver for finding the normal mode shapes and frequencies of the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of eigenfrequencies to compute automatically",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Determines the number of eigenfrequencies to be calculated for the resonator modes\nWhat to do: Sets the number of eigenfrequencies to compute automatically",
      "output": "model.study('std2').feature('eig').set('solnum', 'auto');",
      "explanation": "Physics: Unknown. Purpose: Determines the number of eigenfrequencies to be calculated for the resonator modes",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of eigenfrequencies to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Determines the number of resonant frequencies to be calculated for the MEMS resonator under varying bias conditions\nWhat to do: Sets the number of eigenfrequencies to compute in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('notsolnum', 'auto');",
      "explanation": "Physics: Unknown. Purpose: Determines the number of resonant frequencies to be calculated for the MEMS resonator under varying bias conditions",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the output map for the eigenvalue study to an empty object",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to clear any previous output settings for the eigenvalue study in the simulation\nWhat to do: Sets the output map for the eigenvalue study to an empty object",
      "output": "model.study('std2').feature('eig').set('outputmap', {});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to clear any previous output settings for the eigenvalue study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to analyze in the simulation\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to analyze in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to determine the number of resonant modes to analyze in the simulation\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to determine the number of resonant modes to analyze in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to determine the number of resonant modes to be calculated for the MEMS resonator under the applied bias voltage\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to determine the number of resonant modes to be calculated for the MEMS resonator under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to analyze in the simulation\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to analyze in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include the mechanical behavior of the resonator in the eigenfrequency analysis, which will provide the normal mode shapes and frequencies as a function of applied bias\nWhat to do: Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "output": "model.study('std2').feature('eig').setSolveFor('/physics/solid', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include the mechanical behavior of the resonator in the eigenfrequency analysis, which will provide the normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the electrostatic physics in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to calculate the normal mode shapes and frequencies of the resonator as a function of applied bias\nWhat to do: Sets the solver to compute the electrostatic physics in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').setSolveFor('/physics/es', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to calculate the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the eigenfrequencies and mode shapes for the electrostatic MEMS resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To determine the normal mode shapes and frequencies of the resonator as a function of applied bias\nWhat to do: Sets the solver to compute the eigenfrequencies and mode shapes for the electrostatic MEMS resonator",
      "output": "model.study('std2').feature('eig').setSolveFor('/multiphysics/eme1', true);",
      "explanation": "Physics: Unknown. Purpose: To determine the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eme1"
      ]
    },
    {
      "instruction": "[Model] Creates a ParticipationFactors feature named 'mpf1' under component 'comp1' to compute the participation factors for the resonator modes",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the contribution of each mode shape to the overall resonator response under electrostatic actuation\nWhat to do: Creates a ParticipationFactors feature named 'mpf1' under component 'comp1' to compute the participation factors for the resonator modes",
      "output": "model.common.create('mpf1', 'ParticipationFactors', 'comp1');",
      "explanation": "Physics: Unknown. Purpose: To analyze the contribution of each mode shape to the overall resonator response under electrostatic actuation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mpf1",
        "comp1"
      ]
    },
    {
      "instruction": "[Model] Activates the eigenvalue solver to compute the normal mode shapes and frequencies of the MEMS resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To determine the resonant frequencies and mode shapes of the device under varying bias conditions\nWhat to do: Activates the eigenvalue solver to compute the normal mode shapes and frequencies of the MEMS resonator",
      "output": "model.study('std2').feature('eig').set('neigsactive', true);",
      "explanation": "Physics: Unknown. Purpose: To determine the resonant frequencies and mode shapes of the device under varying bias conditions",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of eigenvalues to compute in the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Determines the number of resonant modes to be calculated for the biased resonator\nWhat to do: Sets the number of eigenvalues to compute in the eigenvalue study",
      "output": "model.study('std2').feature('eig').set('neigs', 3);",
      "explanation": "Physics: Unknown. Purpose: Determines the number of resonant modes to be calculated for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Disables the output of the electric potential (es) field in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to reduce the amount of output data and improve computational efficiency\nWhat to do: Disables the output of the electric potential (es) field in the eigenfrequency study",
      "output": "model.study('std2').feature('eig').setEntry('outputmap', 'es', 'none');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to reduce the amount of output data and improve computational efficiency",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the output map for the eigenvalue study to none for the spatial frame 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the output settings for the eigenvalue study in the simulation\nWhat to do: Sets the output map for the eigenvalue study to none for the spatial frame 1",
      "output": "model.study('std2').feature('eig').setEntry('outputmap', 'frame:spatial1', 'none');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the output settings for the eigenvalue study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Creates a new solution sequence called 'sol2' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To prepare for solving the model with different parameters or settings\nWhat to do: Creates a new solution sequence called 'sol2' in the model",
      "output": "model.sol.create('sol2');",
      "explanation": "Physics: Unknown. Purpose: To prepare for solving the model with different parameters or settings",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2"
      ]
    },
    {
      "instruction": "[Model] Selects the geometry entity with tag 3 for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation\nWhat to do: Selects the geometry entity with tag 3 for meshing",
      "output": "model.mesh('mesh1').stat.selection.geom(3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Sets the mesh selection for specific elements in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To control the mesh quality and density in specific regions of the device for accurate results\nWhat to do: Sets the mesh selection for specific elements in the model",
      "output": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);",
      "explanation": "Physics: Unknown. Purpose: To control the mesh quality and density in specific regions of the device for accurate results",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Selects the solution 'sol2' and study 'std2' for further analysis or modifications",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up the solver settings and study steps for the normal mode analysis of the biased resonator\nWhat to do: Selects the solution 'sol2' and study 'std2' for further analysis or modifications",
      "output": "model.sol('sol2').study('std2');",
      "explanation": "Physics: Unknown. Purpose: To set up the solver settings and study steps for the normal mode analysis of the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "std2"
      ]
    },
    {
      "instruction": "[Model] Creates a study step for eigenfrequency analysis in the solution sequence",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a study step for eigenfrequency analysis in the solution sequence",
      "output": "model.sol('sol2').create('st1', 'StudyStep');\nmodel.sol('sol2').feature('st1').set('study', 'std2');\nmodel.sol('sol2').feature('st1').set('studystep', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "st1",
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the resonant behavior of the MEMS device under different bias voltages\nWhat to do: Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "output": "model.sol('sol2').create('v1', 'Variables');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').set('control', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To analyze the resonant behavior of the MEMS device under different bias voltages",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ]
    },
    {
      "instruction": "[Model] Creates an eigenvalue solver and sets various parameters for the eigenvalue analysis",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates an eigenvalue solver and sets various parameters for the eigenvalue analysis",
      "output": "model.sol('sol2').create('e1', 'Eigenvalue');\nmodel.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol2').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol2').feature('e1').set('storelinpoint', true);\nmodel.sol('sol2').feature('e1').set('control', 'eig');\nmodel.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol2').attach('std2');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "e1"
      ]
    },
    {
      "instruction": "[Model] Sets the label of the study 'std2' to 'Unbiased Eigenfrequency'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to identify the study that computes the eigenfrequencies of the unbiased resonator\nWhat to do: Sets the label of the study 'std2' to 'Unbiased Eigenfrequency'",
      "output": "model.study('std2').label('Unbiased Eigenfrequency');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to identify the study that computes the eigenfrequencies of the unbiased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2"
      ]
    },
    {
      "instruction": "[Model] Disables the generation of plots for the study 'std2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to reduce the computational load and output file size by not generating plots for this study\nWhat to do: Disables the generation of plots for the study 'std2'",
      "output": "model.study('std2').setGenPlots(false);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to reduce the computational load and output file size by not generating plots for this study",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std2"
      ]
    },
    {
      "instruction": "[Model] Selects the geometry entity with tag 3 for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation\nWhat to do: Selects the geometry entity with tag 3 for meshing",
      "output": "model.mesh('mesh1').stat.selection.geom(3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Sets the mesh selection for specific elements in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to refine the mesh in specific regions of the device for accurate simulation results\nWhat to do: Sets the mesh selection for specific elements in the model",
      "output": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to refine the mesh in specific regions of the device for accurate simulation results",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Removes unnecessary features from the solution 'sol2' in study 'std2'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Simplifies the model by removing unused features to optimize the simulation\nWhat to do: Removes unnecessary features from the solution 'sol2' in study 'std2'",
      "output": "model.sol('sol2').study('std2');\nmodel.sol('sol2').feature.remove('e1');\nmodel.sol('sol2').feature.remove('v1');\nmodel.sol('sol2').feature.remove('st1');",
      "explanation": "Physics: Unknown. Purpose: Simplifies the model by removing unused features to optimize the simulation",
      "confidence": 0.2,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "std2"
      ]
    },
    {
      "instruction": "[Model] Creates a study step for eigenfrequency analysis in the solution sequence",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a study step for eigenfrequency analysis in the solution sequence",
      "output": "model.sol('sol2').create('st1', 'StudyStep');\nmodel.sol('sol2').feature('st1').set('study', 'std2');\nmodel.sol('sol2').feature('st1').set('studystep', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "st1",
        "std2",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the resonant behavior of the MEMS device under different bias voltages\nWhat to do: Configures the solver to compute the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "output": "model.sol('sol2').create('v1', 'Variables');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol2').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol2').feature('v1').set('control', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To analyze the resonant behavior of the MEMS device under different bias voltages",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ]
    },
    {
      "instruction": "[Model] Creates an eigenvalue solver, sets its parameters, and runs the solver to compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To determine the resonant frequencies and mode shapes of the MEMS resonator under different bias voltages for engineering simulation and analysis\nWhat to do: Creates an eigenvalue solver, sets its parameters, and runs the solver to compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "output": "model.sol('sol2').create('e1', 'Eigenvalue');\nmodel.sol('sol2').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol2').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol2').feature('e1').set('storelinpoint', true);\nmodel.sol('sol2').feature('e1').set('control', 'eig');\nmodel.sol('sol2').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol2').attach('std2');\nmodel.sol('sol2').runAll;\n\nmodel.result.dataset('dset2').set('frametype', 'material');",
      "explanation": "Physics: Unknown. Purpose: To determine the resonant frequencies and mode shapes of the MEMS resonator under different bias voltages for engineering simulation and analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol2",
        "e1",
        "std2",
        "dset2"
      ]
    },
    {
      "instruction": "[Model] Creates a 3D plot group, runs it, and sets the data to dataset 2",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a 3D plot group, runs it, and sets the data to dataset 2",
      "output": "model.result.create('pg5', 'PlotGroup3D');\nmodel.result('pg5').run;\nmodel.result('pg5').set('data', 'dset2');",
      "explanation": "Physics: Unknown. Purpose: To visualize the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg5",
        "dset2"
      ]
    },
    {
      "instruction": "[Model] Creates a volume plot of the displacement magnitude in the results",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize the displacement magnitude of the resonator under the applied bias voltage\nWhat to do: Creates a volume plot of the displacement magnitude in the results",
      "output": "model.result('pg5').create('vol1', 'Volume');\nmodel.result('pg5').feature('vol1').set('expr', 'solid.disp');\nmodel.result('pg5').feature('vol1').set('descr', 'Displacement magnitude');\nmodel.result('pg5').feature('vol1').set('colorlegend', false);",
      "explanation": "Physics: Unknown. Purpose: To visualize the displacement magnitude of the resonator under the applied bias voltage",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg5",
        "vol1"
      ]
    },
    {
      "instruction": "[Model] Creates a deformation plot for the unbiased modes of the resonator and runs the solver for different loop levels",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the normal mode shapes and frequencies of the resonator as a function of applied bias\nWhat to do: Creates a deformation plot for the unbiased modes of the resonator and runs the solver for different loop levels",
      "output": "model.result('pg5').feature('vol1').create('def1', 'Deform');\nmodel.result('pg5').run;\nmodel.result('pg5').run;\nmodel.result('pg5').label('Unbiased Modes');\nmodel.result('pg5').set('looplevel', [2]);\nmodel.result('pg5').run;\nmodel.result('pg5').set('looplevel', [3]);\nmodel.result('pg5').run;",
      "explanation": "Physics: Unknown. Purpose: To analyze the normal mode shapes and frequencies of the resonator as a function of applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg5",
        "vol1",
        "def1"
      ]
    },
    {
      "instruction": "[Model] Creates a new study with the identifier 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a new study with the identifier 'std3'",
      "output": "model.study.create('std3');",
      "explanation": "Physics: Unknown. Purpose: To set up a study for computing the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3"
      ]
    },
    {
      "instruction": "[Model] Creates a stationary study for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the biased resonator as a function of applied bias\nWhat to do: Creates a stationary study for the model",
      "output": "model.study('std3').create('stat', 'Stationary');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the biased resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3"
      ]
    },
    {
      "instruction": "[Model] Sets the plot group to 'Default' for the stationary solver in study 'std3'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to configure the plot settings for the stationary solver in the study, which will be used to analyze the results of the simulation.\nWhat to do: Sets the plot group to 'Default' for the stationary solver in study 'std3'.",
      "output": "model.study('std3').feature('stat').set('plotgroup', 'Default');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to configure the plot settings for the stationary solver in the study, which will be used to analyze the results of the simulation.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the output map for the stationary solver in study 3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to configure the output settings for the stationary solver, which will be used to compute the normal mode shapes and frequencies of the MEMS resonator under the applied bias voltage\nWhat to do: Sets the output map for the stationary solver in study 3",
      "output": "model.study('std3').feature('stat').set('outputmap', {});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to configure the output settings for the stationary solver, which will be used to compute the normal mode shapes and frequencies of the MEMS resonator under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the number of eigenfrequencies to compute in the stationary solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator\nWhat to do: Sets the number of eigenfrequencies to compute in the stationary solver",
      "output": "model.study('std3').feature('stat').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the goal generation for the auxiliary sweep in the stationary study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To optimize the convergence of the solver for the given bias voltage sweep\nWhat to do: Sets the goal generation for the auxiliary sweep in the stationary study",
      "output": "model.study('std3').feature('stat').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: To optimize the convergence of the solver for the given bias voltage sweep",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the number of auxiliary sweeps to 1 for the stationary solver in study 3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to configure the solver settings for the stationary study in the multi-physics simulation of the MEMS resonator\nWhat to do: Sets the number of auxiliary sweeps to 1 for the stationary solver in study 3",
      "output": "model.study('std3').feature('stat').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to configure the solver settings for the stationary study in the multi-physics simulation of the MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the goal generation for the auxiliary sweep in the stationary study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To control the generation of the auxiliary sweep for the bias voltage analysis\nWhat to do: Sets the goal generation for the auxiliary sweep in the stationary study",
      "output": "model.study('std3').feature('stat').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: To control the generation of the auxiliary sweep for the bias voltage analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the solid mechanics physics in the static study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include the structural deformation in the analysis due to the applied bias voltage\nWhat to do: Sets the solver to compute the solid mechanics physics in the static study",
      "output": "model.study('std3').feature('stat').setSolveFor('/physics/solid', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include the structural deformation in the analysis due to the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "solid"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the electrostatic physics in the stationary study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to calculate the electrostatic field distribution and forces for the given bias voltage\nWhat to do: Sets the solver to compute the electrostatic physics in the stationary study",
      "output": "model.study('std3').feature('stat').setSolveFor('/physics/es', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to calculate the electrostatic field distribution and forces for the given bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "es"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the electrostatics in the study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To determine the electrostatic behavior of the resonator under the applied bias voltage\nWhat to do: Sets the solver to compute the electrostatics in the study",
      "output": "model.study('std3').feature('stat').setSolveFor('/multiphysics/eme1', true);",
      "explanation": "Physics: Unknown. Purpose: To determine the electrostatic behavior of the resonator under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eme1"
      ]
    },
    {
      "instruction": "[Model] Creates an eigenfrequency study in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates an eigenfrequency study in the model",
      "output": "model.study('std3').create('eig', 'Eigenfrequency');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the plot group for the eigenvalue study to 'Default'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to specify how the results of the eigenvalue analysis will be plotted\nWhat to do: Sets the plot group for the eigenvalue study to 'Default'",
      "output": "model.study('std3').feature('eig').set('plotgroup', 'Default');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to specify how the results of the eigenvalue analysis will be plotted",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the shift value to 1 Hz for the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies as a function of applied bias\nWhat to do: Sets the shift value to 1 Hz for the eigenfrequency study",
      "output": "model.study('std3').feature('eig').set('shift', '1[Hz]');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Enables the check for eigenfrequency region in the study settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To ensure the eigenfrequency analysis is performed within the specified frequency range\nWhat to do: Enables the check for eigenfrequency region in the study settings",
      "output": "model.study('std3').feature('eig').set('chkeigregion', true);",
      "explanation": "Physics: Unknown. Purpose: To ensure the eigenfrequency analysis is performed within the specified frequency range",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the convergence criterion for the eigenvalue solver to 1",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to control the accuracy of the eigenfrequency computation in the study\nWhat to do: Sets the convergence criterion for the eigenvalue solver to 1",
      "output": "model.study('std3').feature('eig').set('conrad', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to control the accuracy of the eigenfrequency computation in the study",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To efficiently compute the normal mode shapes and frequencies of the biased resonator\nWhat to do: Enables the Conrad-Dyn-HM solver for the eigenvalue study",
      "output": "model.study('std3').feature('eig').set('conradynhm', '1');",
      "explanation": "Physics: Unknown. Purpose: To efficiently compute the normal mode shapes and frequencies of the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Disables the storage of the factorization of the stiffness matrix for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves computational efficiency by not storing the factorization, which is useful when the factorization is not needed for postprocessing or further analysis\nWhat to do: Disables the storage of the factorization of the stiffness matrix for the eigenvalue study",
      "output": "model.study('std3').feature('eig').set('storefact', false);",
      "explanation": "Physics: Unknown. Purpose: Improves computational efficiency by not storing the factorization, which is useful when the factorization is not needed for postprocessing or further analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the output map for the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define how the results of the eigenvalue analysis are stored and accessed\nWhat to do: Sets the output map for the eigenvalue study",
      "output": "model.study('std3').feature('eig').set('outputmap', {});",
      "explanation": "Physics: Unknown. Purpose: To define how the results of the eigenvalue analysis are stored and accessed",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenvalue study",
      "output": "model.study('std3').feature('eig').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std3').feature('eig').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to be calculated for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to determine the number of resonant modes to be calculated for the biased resonator\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std3').feature('eig').set('ngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to determine the number of resonant modes to be calculated for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the number of resonant modes to analyze in the simulation\nWhat to do: Sets the number of generalized eigenvalues to compute in the eigenfrequency study",
      "output": "model.study('std3').feature('eig').set('goalngenAUX', '1');",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the number of resonant modes to analyze in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include the mechanical effects in the resonator's behavior under electrostatic actuation\nWhat to do: Configures the study to solve for the solid mechanics physics in the eigenfrequency analysis",
      "output": "model.study('std3').feature('eig').setSolveFor('/physics/solid', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include the mechanical effects in the resonator's behavior under electrostatic actuation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the study to solve for the electrostatic physics in the eigenfrequency analysis",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to include the electrostatic physics in the computation of normal mode shapes and frequencies as a function of applied bias\nWhat to do: Configures the study to solve for the electrostatic physics in the eigenfrequency analysis",
      "output": "model.study('std3').feature('eig').setSolveFor('/physics/es', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to include the electrostatic physics in the computation of normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the solver to compute the eigenfrequencies and normal mode shapes for the electrostatics physics interface (eme1) in the study 'std3'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to calculate the resonant frequencies and mode shapes of the MEMS resonator under the influence of the applied bias voltage.\nWhat to do: Sets the solver to compute the eigenfrequencies and normal mode shapes for the electrostatics physics interface (eme1) in the study 'std3'.",
      "output": "model.study('std3').feature('eig').setSolveFor('/multiphysics/eme1', true);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to calculate the resonant frequencies and mode shapes of the MEMS resonator under the influence of the applied bias voltage.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eme1"
      ]
    },
    {
      "instruction": "[Model] Sets the label for the study 'std3' to 'Biased Eigenfrequency'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to organize and identify the study in the simulation\nWhat to do: Sets the label for the study 'std3' to 'Biased Eigenfrequency'",
      "output": "model.study('std3').label('Biased Eigenfrequency');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to organize and identify the study in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3"
      ]
    },
    {
      "instruction": "[Model] Creates a parametric study for the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the effect of varying parameters on the resonator's behavior\nWhat to do: Creates a parametric study for the model",
      "output": "model.study('std3').create('param', 'Parametric');",
      "explanation": "Physics: Unknown. Purpose: To analyze the effect of varying parameters on the resonator's behavior",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3"
      ]
    },
    {
      "instruction": "[Model] Sets the index of the parameter 'Vdc' to 0 in the 'param' feature of the 'std3' study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation\nWhat to do: Sets the index of the parameter 'Vdc' to 0 in the 'param' feature of the 'std3' study",
      "output": "model.study('std3').feature('param').setIndex('pname', 'Vdc', 0);",
      "explanation": "Physics: Unknown. Purpose: To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to initialize the parameter array index for the study, which will be used to compute the normal mode shapes and frequencies as a function of applied bias\nWhat to do: Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "output": "model.study('std3').feature('param').setIndex('plistarr', '', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to initialize the parameter array index for the study, which will be used to compute the normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the unit of the parameter used in the electrostatic analysis of the MEMS resonator\nWhat to do: Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "output": "model.study('std3').feature('param').setIndex('punit', 'V', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the unit of the parameter used in the electrostatic analysis of the MEMS resonator",
      "confidence": 0.3,
      "source": "code_first",
      "category": "parameters",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the index of the parameter 'Vdc' to 0 in the study 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation\nWhat to do: Sets the index of the parameter 'Vdc' to 0 in the study 'std3'",
      "output": "model.study('std3').feature('param').setIndex('pname', 'Vdc', 0);",
      "explanation": "Physics: Unknown. Purpose: To define the initial value of the DC bias voltage for the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to initialize the parameter array index for the study, which will be used to sweep through different bias voltages in the simulation\nWhat to do: Sets the index of the parameter array 'plistarr' to 0 in the study 'std3'",
      "output": "model.study('std3').feature('param').setIndex('plistarr', '', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to initialize the parameter array index for the study, which will be used to sweep through different bias voltages in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To ensure the correct unit for the bias voltage parameter in the electrostatically actuated MEMS resonator simulation\nWhat to do: Sets the unit of the parameter 'punit' to 'V' (volts) in the study 'std3'",
      "output": "model.study('std3').feature('param').setIndex('punit', 'V', 0);",
      "explanation": "Physics: Unknown. Purpose: To ensure the correct unit for the bias voltage parameter in the electrostatically actuated MEMS resonator simulation",
      "confidence": 0.3,
      "source": "code_first",
      "category": "parameters",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Sets the index of the parameter list for the study 'std3' to vary from 5 to 45 with a step of 5.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the range of bias voltage values to be used in the simulation, allowing the analysis of the resonator's behavior under different bias conditions.\nWhat to do: Sets the index of the parameter list for the study 'std3' to vary from 5 to 45 with a step of 5.",
      "output": "model.study('std3').feature('param').setIndex('plistarr', 'range(5,5,45)', 0);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the range of bias voltage values to be used in the simulation, allowing the analysis of the resonator's behavior under different bias conditions.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "param"
      ]
    },
    {
      "instruction": "[Model] Activates the eigenvalue solver in the study 'std3' to compute the normal mode shapes and frequencies of the MEMS resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to determine the resonant frequencies and mode shapes of the device under varying bias conditions\nWhat to do: Activates the eigenvalue solver in the study 'std3' to compute the normal mode shapes and frequencies of the MEMS resonator",
      "output": "model.study('std3').feature('eig').set('neigsactive', true);",
      "explanation": "Physics: Unknown. Purpose: Needed to determine the resonant frequencies and mode shapes of the device under varying bias conditions",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Sets the number of eigenvalues to compute in the eigenvalue study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Determines the number of resonant frequencies and mode shapes to calculate for the biased resonator\nWhat to do: Sets the number of eigenvalues to compute in the eigenvalue study",
      "output": "model.study('std3').feature('eig').set('neigs', 1);",
      "explanation": "Physics: Unknown. Purpose: Determines the number of resonant frequencies and mode shapes to calculate for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Creates a solution object for the study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To store and manage the solutions of the simulation\nWhat to do: Creates a solution object for the study",
      "output": "model.sol.create('sol3');",
      "explanation": "Physics: Unknown. Purpose: To store and manage the solutions of the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3"
      ]
    },
    {
      "instruction": "[Model] Selects the geometry entity with tag 3 for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation\nWhat to do: Selects the geometry entity with tag 3 for meshing",
      "output": "model.mesh('mesh1').stat.selection.geom(3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Selects specific elements in the mesh for further analysis or modification",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to refine the mesh in specific regions of the MEMS resonator for accurate simulation results\nWhat to do: Selects specific elements in the mesh for further analysis or modification",
      "output": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to refine the mesh in specific regions of the MEMS resonator for accurate simulation results",
      "confidence": 0.2,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Selects the geometry entity with ID 3 for meshing",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation\nWhat to do: Selects the geometry entity with ID 3 for meshing",
      "output": "model.mesh('mesh1').stat.selection.geom(3);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the meshing for the selected geometry entity in the simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1",
        "3"
      ]
    },
    {
      "instruction": "[Model] Sets the selection of the mesh elements for the specified mesh statistic",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to define the mesh elements to be used in the simulation for accurate results\nWhat to do: Sets the selection of the mesh elements for the specified mesh statistic",
      "output": "model.mesh('mesh1').stat.selection.set([3 6 9 12 15 16 17 18 19 20 22 23 24 25 30 31 32 33 34 35 36 43 44 45 46 50 51 52 56 58 62 63 64 68 69 70 75 76 77 78 79 80]);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to define the mesh elements to be used in the simulation for accurate results",
      "confidence": 0.5,
      "source": "code_first",
      "category": "mesh",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "mesh1"
      ]
    },
    {
      "instruction": "[Model] Accesses the solution 'sol3' and study 'std3' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up the solution and study for the normal mode shapes and frequencies analysis\nWhat to do: Accesses the solution 'sol3' and study 'std3' in the model",
      "output": "model.sol('sol3').study('std3');",
      "explanation": "Physics: Unknown. Purpose: To set up the solution and study for the normal mode shapes and frequencies analysis",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "std3"
      ]
    },
    {
      "instruction": "[Model] Creates a study step for the stationary solver in the third study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to set up the solver configuration for the stationary analysis of the biased resonator's normal mode shapes and frequencies\nWhat to do: Creates a study step for the stationary solver in the third study",
      "output": "model.sol('sol3').create('st1', 'StudyStep');\nmodel.sol('sol3').feature('st1').set('study', 'std3');\nmodel.sol('sol3').feature('st1').set('studystep', 'stat');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to set up the solver configuration for the stationary analysis of the biased resonator's normal mode shapes and frequencies",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "st1",
        "std3",
        "stat"
      ]
    },
    {
      "instruction": "[Model] Configures the solver to scale the variables for the spatial displacement and the displacement in the first component",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to adjust the scaling of the variables to ensure the solver converges to an accurate solution for the resonator's behavior under the applied bias voltage\nWhat to do: Configures the solver to scale the variables for the spatial displacement and the displacement in the first component",
      "output": "model.sol('sol3').create('v1', 'Variables');\nmodel.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v1').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v1').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v1').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v1').set('control', 'stat');",
      "explanation": "Physics: Unknown. Purpose: This step is needed to adjust the scaling of the variables to ensure the solver converges to an accurate solution for the resonator's behavior under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "v1",
        "comp1_spatial_disp",
        "comp1_u"
      ]
    },
    {
      "instruction": "[Model] Creates a stationary solver and enables caching of the solution pattern",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To efficiently solve for the normal mode shapes and frequencies of the biased MEMS resonator\nWhat to do: Creates a stationary solver and enables caching of the solution pattern",
      "output": "model.sol('sol3').create('s1', 'Stationary');\nmodel.sol('sol3').feature('s1').feature('aDef').set('cachepattern', true);",
      "explanation": "Physics: Unknown. Purpose: To efficiently solve for the normal mode shapes and frequencies of the biased MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "aDef"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated solver for the study 'sol3' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Needed to solve the multiphysics problem of the MEMS resonator with applied bias\nWhat to do: Creates a segregated solver for the study 'sol3' in the model",
      "output": "model.sol('sol3').feature('s1').create('seDef', 'Segregated');",
      "explanation": "Physics: Unknown. Purpose: Needed to solve the multiphysics problem of the MEMS resonator with applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated solver and removes the default solver settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator\nWhat to do: Creates a segregated solver and removes the default solver settings",
      "output": "model.sol('sol3').feature('s1').create('se1', 'Segregated');\nmodel.sol('sol3').feature('s1').feature('se1').feature.remove('ssDef');",
      "explanation": "Physics: Unknown. Purpose: To set up a solver for computing the normal mode shapes and frequencies of the biased MEMS resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ssDef"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage\nWhat to do: Creates a segregated step for solving the electrostatic problem and sets the segregated variable to the electric potential",
      "output": "model.sol('sol3').feature('s1').feature('se1').create('ss1', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').set('segvar', {'comp1_V'});",
      "explanation": "Physics: Unknown. Purpose: This step is needed to solve for the electric potential distribution in the resonator, which affects the device's behavior under the applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss1"
      ]
    },
    {
      "instruction": "[Model] Configures the solver settings for the electric potential study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias\nWhat to do: Configures the solver settings for the electric potential study",
      "output": "model.sol('sol3').feature('s1').create('d1', 'Direct');\nmodel.sol('sol3').feature('s1').feature('d1').set('linsolver', 'mumps');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss1').label('Electric Potential');",
      "explanation": "Physics: Unknown. Purpose: To accurately compute the normal mode shapes and frequencies of the MEMS resonator under applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "d1",
        "se1",
        "ss1"
      ]
    },
    {
      "instruction": "[Model] Creates a segregated step for displacement field computation and sets the linear solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the displacement field of the resonator under applied bias voltage\nWhat to do: Creates a segregated step for displacement field computation and sets the linear solver",
      "output": "model.sol('sol3').feature('s1').feature('se1').create('ss2', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').set('segvar', {'comp1_u'});\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss2').label('Displacement Field');",
      "explanation": "Physics: Unknown. Purpose: To compute the displacement field of the resonator under applied bias voltage",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss2"
      ]
    },
    {
      "instruction": "[Model] Configures a segregated step for spatial mesh displacement in the solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Configures a segregated step for spatial mesh displacement in the solver",
      "output": "model.sol('sol3').feature('s1').feature('se1').create('ss3', 'SegregatedStep');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('segvar', {'comp1_spatial_disp'});\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('subdtech', 'const');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('subjtech', 'onevery');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').set('linsolver', 'd1');\nmodel.sol('sol3').feature('s1').feature('se1').feature('ss3').label('Spatial Mesh Displacement');\nmodel.sol('sol3').feature('s1').feature('se1').set('segstabacc', 'segaacc');\nmodel.sol('sol3').feature('s1').feature('se1').set('segaaccdim', 5);",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "se1",
        "ss3"
      ]
    },
    {
      "instruction": "[Model] Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To efficiently solve the system of equations for the electrostatic analysis with the applied bias\nWhat to do: Configures an iterative solver (GMRES with SA AMG) for the electrostatic study",
      "output": "model.sol('sol3').feature('s1').create('i1', 'Iterative');\nmodel.sol('sol3').feature('s1').feature('i1').set('linsolver', 'gmres');\nmodel.sol('sol3').feature('s1').feature('i1').set('rhob', 40);\nmodel.sol('sol3').feature('s1').feature('i1').set('nlinnormuse', true);\nmodel.sol('sol3').feature('s1').feature('i1').set('itrestart', 5000);\nmodel.sol('sol3').feature('s1').feature('i1').label('Iterative Solver (GMRES with SA AMG) (eme1)');",
      "explanation": "Physics: Unknown. Purpose: To efficiently solve the system of equations for the electrostatic analysis with the applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1"
      ]
    },
    {
      "instruction": "[Model] Configures a multigrid solver for the study 'sol3'",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the convergence of the solution by using a multigrid method\nWhat to do: Configures a multigrid solver for the study 'sol3'",
      "output": "model.sol('sol3').feature('s1').feature('i1').create('mg1', 'Multigrid');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('hybridization', 'multi');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('hybridvar', {'comp1_u' 'comp1_V'});\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('prefun', 'saamg');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').set('usesmooth', false);",
      "explanation": "Physics: Unknown. Purpose: Improves the convergence of the solution by using a multigrid method",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1"
      ]
    },
    {
      "instruction": "[Model] Creates a successive over-relaxation (SOR) preconditioner and sets the relaxation factor to 0.8",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the convergence of the solver for the biased resonator simulation\nWhat to do: Creates a successive over-relaxation (SOR) preconditioner and sets the relaxation factor to 0.8",
      "output": "model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').create('so1', 'SOR');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('pr').feature('so1').set('relax', 0.8);",
      "explanation": "Physics: Unknown. Purpose: Improves the convergence of the solver for the biased resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1",
        "pr",
        "so1"
      ]
    },
    {
      "instruction": "[Model] Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the convergence of the iterative solver for the biased resonator simulation\nWhat to do: Creates a successive over-relaxation (SOR) solver and sets the relaxation factor to 0.8",
      "output": "model.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').create('so1', 'SOR');\nmodel.sol('sol3').feature('s1').feature('i1').feature('mg1').feature('po').feature('so1').set('relax', 0.8);",
      "explanation": "Physics: Unknown. Purpose: Improves the convergence of the iterative solver for the biased resonator simulation",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "mg1",
        "po",
        "so1"
      ]
    },
    {
      "instruction": "[Model] Creates a direct preconditioner for the solver and sets its properties, then removes default solver settings",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: Improves the solver efficiency for the biased resonator simulation by customizing the preconditioner and removing default settings\nWhat to do: Creates a direct preconditioner for the solver and sets its properties, then removes default solver settings",
      "output": "model.sol('sol3').feature('s1').feature('i1').create('dp1', 'DirectPreconditioner');\nmodel.sol('sol3').feature('s1').feature('i1').feature('dp1').set('hybridization', 'multi');\nmodel.sol('sol3').feature('s1').feature('i1').feature('dp1').set('hybridvar', {'comp1_spatial_disp'});\nmodel.sol('sol3').feature('s1').feature.remove('fcDef');\nmodel.sol('sol3').feature('s1').feature.remove('seDef');",
      "explanation": "Physics: Unknown. Purpose: Improves the solver efficiency for the biased resonator simulation by customizing the preconditioner and removing default settings",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "s1",
        "i1",
        "dp1",
        "fcDef",
        "seDef"
      ]
    },
    {
      "instruction": "[Model] Creates a store solution node to save the computed solution",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To save the computed solution for post-processing and analysis\nWhat to do: Creates a store solution node to save the computed solution",
      "output": "model.sol('sol3').create('su1', 'StoreSolution');",
      "explanation": "Physics: Unknown. Purpose: To save the computed solution for post-processing and analysis",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "su1"
      ]
    },
    {
      "instruction": "[Model] Creates a study step for eigenfrequency analysis",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates a study step for eigenfrequency analysis",
      "output": "model.sol('sol3').create('st2', 'StudyStep');\nmodel.sol('sol3').feature('st2').set('study', 'std3');\nmodel.sol('sol3').feature('st2').set('studystep', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "st2",
        "std3",
        "eig"
      ]
    },
    {
      "instruction": "[Model] Configures the solver to compute the normal mode shapes and frequencies of the biased resonator",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the resonant behavior of the device under different bias voltages\nWhat to do: Configures the solver to compute the normal mode shapes and frequencies of the biased resonator",
      "output": "model.sol('sol3').create('v2', 'Variables');\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scalemethod', 'manual');\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scaleval', '1e-2*7.886019274640408E-5');\nmodel.sol('sol3').feature('v2').set('initmethod', 'sol');\nmodel.sol('sol3').feature('v2').set('initsol', 'sol3');\nmodel.sol('sol3').feature('v2').set('initsoluse', 'sol4');\nmodel.sol('sol3').feature('v2').set('notsolmethod', 'sol');\nmodel.sol('sol3').feature('v2').set('notsol', 'sol3');\nmodel.sol('sol3').feature('v2').set('control', 'eig');",
      "explanation": "Physics: Unknown. Purpose: To analyze the resonant behavior of the device under different bias voltages",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "v2"
      ]
    },
    {
      "instruction": "[Model] Creates an eigenvalue solver and sets various parameters for the solver",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Creates an eigenvalue solver and sets various parameters for the solver",
      "output": "model.sol('sol3').create('e1', 'Eigenvalue');\nmodel.sol('sol3').feature('e1').set('eigvfunscale', 'maximum');\nmodel.sol('sol3').feature('e1').set('eigvfunscaleparam', '7.89E-11');\nmodel.sol('sol3').feature('e1').set('storelinpoint', true);\nmodel.sol('sol3').feature('e1').set('control', 'eig');\nmodel.sol('sol3').feature('e1').set('linpmethod', 'sol');\nmodel.sol('sol3').feature('e1').set('linpsol', 'sol3');\nmodel.sol('sol3').feature('e1').set('linpsoluse', 'sol4');\nmodel.sol('sol3').feature('e1').set('control', 'eig');\nmodel.sol('sol3').feature('e1').feature('aDef').set('cachepattern', true);\nmodel.sol('sol3').feature('v2').set('notsolnum', 'auto');\nmodel.sol('sol3').feature('v2').set('notsolvertype', 'solnum');\nmodel.sol('sol3').attach('std3');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol3",
        "e1"
      ]
    },
    {
      "instruction": "[Model] Creates a new parametric sweep study named 'p1' using the 'Parametric' study type",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To perform a parametric analysis of the resonator's behavior under varying bias voltages\nWhat to do: Creates a new parametric sweep study named 'p1' using the 'Parametric' study type",
      "output": "model.batch.create('p1', 'Parametric');",
      "explanation": "Physics: Unknown. Purpose: To perform a parametric analysis of the resonator's behavior under varying bias voltages",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "p1"
      ]
    },
    {
      "instruction": "[Model] Sets up a batch sweep study for parameter p1 using study std3",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To perform a parametric sweep of the bias voltage to analyze the resonator's behavior under different conditions\nWhat to do: Sets up a batch sweep study for parameter p1 using study std3",
      "output": "model.batch('p1').study('std3');",
      "explanation": "Physics: Unknown. Purpose: To perform a parametric sweep of the bias voltage to analyze the resonator's behavior under different conditions",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "p1",
        "std3"
      ]
    },
    {
      "instruction": "[Model] Sets up a parametric sweep of the DC bias voltage and solves for the resonator modes",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To analyze the effect of varying DC bias voltage on the resonator's mode shapes and frequencies\nWhat to do: Sets up a parametric sweep of the DC bias voltage and solves for the resonator modes",
      "output": "model.batch('p1').create('so1', 'Solutionseq');\nmodel.batch('p1').feature('so1').set('seq', 'sol3');\nmodel.batch('p1').feature('so1').set('store', 'on');\nmodel.batch('p1').feature('so1').set('clear', 'on');\nmodel.batch('p1').feature('so1').set('psol', 'none');\nmodel.batch('p1').set('pname', {'Vdc'});\nmodel.batch('p1').set('plistarr', {'range(5,5,45)'});\nmodel.batch('p1').set('sweeptype', 'sparse');\nmodel.batch('p1').set('probesel', 'all');\nmodel.batch('p1').set('probes', {});\nmodel.batch('p1').set('plot', 'off');\nmodel.batch('p1').set('err', 'on');\nmodel.batch('p1').attach('std3');\nmodel.batch('p1').set('control', 'param');\n\nmodel.sol('sol3').feature('v2').feature('comp1_spatial_disp').set('scalemethod', 'auto');\nmodel.sol('sol3').feature('v2').feature('comp1_u').set('scalemethod', 'auto');",
      "explanation": "Physics: Unknown. Purpose: To analyze the effect of varying DC bias voltage on the resonator's mode shapes and frequencies",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "p1",
        "so1",
        "sol3"
      ]
    },
    {
      "instruction": "[Model] Disables the generation of plots for the study 'std3'.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to reduce the computational load and output file size by not generating plots for this study.\nWhat to do: Disables the generation of plots for the study 'std3'.",
      "output": "model.study('std3').setGenPlots(false);",
      "explanation": "Physics: Unknown. Purpose: This step is needed to reduce the computational load and output file size by not generating plots for this study.",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "std3"
      ]
    },
    {
      "instruction": "[Model] Creates a solution object named 'sol5' in the model",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To store the computed normal mode shapes and frequencies for the biased resonator\nWhat to do: Creates a solution object named 'sol5' in the model",
      "output": "model.sol.create('sol5');",
      "explanation": "Physics: Unknown. Purpose: To store the computed normal mode shapes and frequencies for the biased resonator",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol5"
      ]
    },
    {
      "instruction": "[Model] Sets up a parametric study and runs a batch computation to solve for the model's solutions",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias\nWhat to do: Sets up a parametric study and runs a batch computation to solve for the model's solutions",
      "output": "model.sol('sol5').study('std3');\nmodel.sol('sol5').label('Parametric Solutions 1');\n\nmodel.batch('p1').feature('so1').set('psol', 'sol5');\nmodel.batch('p1').run('compute');",
      "explanation": "Physics: Unknown. Purpose: To compute the normal mode shapes and frequencies of the MEMS resonator as a function of applied bias",
      "confidence": 0.5,
      "source": "code_first",
      "category": "study",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "sol5",
        "std3",
        "p1",
        "so1"
      ]
    },
    {
      "instruction": "[Model] Creates a 1D plot group, runs it, and sets the data to dataset 5",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize and analyze the results of the simulation, specifically the normal mode shapes and frequencies as a function of applied bias\nWhat to do: Creates a 1D plot group, runs it, and sets the data to dataset 5",
      "output": "model.result.create('pg6', 'PlotGroup1D');\nmodel.result('pg6').run;\nmodel.result('pg6').set('data', 'dset5');",
      "explanation": "Physics: Unknown. Purpose: To visualize and analyze the results of the simulation, specifically the normal mode shapes and frequencies as a function of applied bias",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg6",
        "dset5"
      ]
    },
    {
      "instruction": "[Model] Creates point graphs for the resonator's normal mode frequencies and sets their appearance and data source",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: To visualize and analyze the resonator's normal mode frequencies under different bias conditions\nWhat to do: Creates point graphs for the resonator's normal mode frequencies and sets their appearance and data source",
      "output": "model.result('pg6').create('ptgr1', 'PointGraph');\nmodel.result('pg6').feature('ptgr1').set('markerpos', 'datapoints');\nmodel.result('pg6').feature('ptgr1').set('linewidth', 'preference');\nmodel.result('pg6').feature('ptgr1').selection.set([1]);\nmodel.result('pg6').feature('ptgr1').set('expr', 'solid.freq');\nmodel.result('pg6').feature('ptgr1').set('xdatasolnumtype', 'outer');\nmodel.result('pg6').feature('ptgr1').set('linestyle', 'none');\nmodel.result('pg6').feature('ptgr1').set('linemarker', 'square');\nmodel.result('pg6').feature('ptgr1').set('legend', true);\nmodel.result('pg6').feature('ptgr1').set('legendmethod', 'manual');\nmodel.result('pg6').feature('ptgr1').setIndex('legends', 'COMSOL Solution', 0);\nmodel.result('pg6').feature.duplicate('ptgr2', 'ptgr1');\nmodel.result('pg6').run;\nmodel.result('pg6').feature('ptgr2').set('data', 'dset2');\nmodel.result('pg6').feature('ptgr2').setIndex('looplevelinput', 'first', 0);\nmodel.result('pg6').feature('ptgr2').set('linecolor', 'blue');\nmodel.result('pg6').feature('ptgr2').set('legend', false);\nmodel.result('pg6').run;",
      "explanation": "Physics: Unknown. Purpose: To visualize and analyze the resonator's normal mode frequencies under different bias conditions",
      "confidence": 0.0,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg6",
        "ptgr1",
        "ptgr2"
      ]
    },
    {
      "instruction": "[Model] Creates a global evaluation of the eigenfrequency vs. DC voltage and sets up the plot title, labels, and legend.",
      "input": "Model Context: An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.\nPhysics: Multi-physics\nStep Purpose: This step is needed to analyze and visualize the relationship between the applied DC bias voltage and the resonant frequency of the MEMS resonator.\nWhat to do: Creates a global evaluation of the eigenfrequency vs. DC voltage and sets up the plot title, labels, and legend.",
      "output": "model.result('pg6').create('glob1', 'Global');\nmodel.result('pg6').feature('glob1').set('markerpos', 'datapoints');\nmodel.result('pg6').feature('glob1').set('linewidth', 'preference');\nmodel.result('pg6').feature('glob1').set('data', 'dset5');\nmodel.result('pg6').feature('glob1').setIndex('looplevelinput', 'manual', 1);\nmodel.result('pg6').feature('glob1').setIndex('looplevel', [2 3 4 5 6 7 8 9], 1);\nmodel.result('pg6').feature('glob1').setIndex('expr', 'int1(Vdc)', 0);\nmodel.result('pg6').feature('glob1').setIndex('descr', '', 0);\nmodel.result('pg6').feature('glob1').set('xdatasolnumtype', 'outer');\nmodel.result('pg6').feature('glob1').set('xdata', 'expr');\nmodel.result('pg6').feature('glob1').set('xdataexpr', 'Vdc');\nmodel.result('pg6').feature('glob1').set('legendmethod', 'manual');\nmodel.result('pg6').feature('glob1').setIndex('legends', 'Experiment: Bannon et. al.', 0);\nmodel.result('pg6').run;\nmodel.result('pg6').set('titletype', 'manual');\nmodel.result('pg6').set('title', 'Eigenfrequency vs. DC voltage');\nmodel.result('pg6').set('xlabelactive', true);\nmodel.result('pg6').set('xlabel', 'DC Bias (V)');\nmodel.result('pg6').set('ylabelactive', true);\nmodel.result('pg6').set('ylabel', 'Resonant Frequency (Hz)');\nmodel.result('pg6').label('Eigenfrequency vs. DC Voltage');\n\nmodel.title(['Normal Modes of a Biased Resonator ' native2unicode(hex2dec({'20' '14'}), 'unicode') ' 3D']);\n\nmodel.description('An electrostatically actuated MEMS resonator is simulated. The device is driven by an AC + DC bias voltage applied across a parallel plate capacitor. In this example, the normal mode shapes and frequencies are computed, as a function of applied bias.');\n\nmodel.mesh.clearMeshes;\n\nmodel.sol('sol1').clearSolutionData;\nmodel.sol('sol2').clearSolutionData;\nmodel.sol('sol3').clearSolutionData;\nmodel.sol('sol4').clearSolutionData;\nmodel.sol('sol5').clearSolutionData;\nmodel.sol('sol6').clearSolutionData;\nmodel.sol('sol7').clearSolutionData;\nmodel.sol('sol8').clearSolutionData;\nmodel.sol('sol9').clearSolutionData;\nmodel.sol('sol10').clearSolutionData;\nmodel.sol('sol11').clearSolutionData;\nmodel.sol('sol12').clearSolutionData;\nmodel.sol('sol13').clearSolutionData;\nmodel.sol('sol14').clearSolutionData;\n\nmodel.label('biased_resonator_3d_modes.mph');\n\nmodel.modelNode.label('Components');\n\nout = model;",
      "explanation": "Physics: Unknown. Purpose: This step is needed to analyze and visualize the relationship between the applied DC bias voltage and the resonant frequency of the MEMS resonator.",
      "confidence": 0.3,
      "source": "code_first",
      "category": "results",
      "match_info": "Generated from code analysis with model context",
      "comsol_ids": [
        "pg6",
        "glob1"
      ]
    }
  ],
  "stats": {
    "total_code_segments": 381,
    "total_pdf_sections": 7,
    "total_matches": 381,
    "high_confidence_matches": 0,
    "enhanced_examples": 381
  }
}